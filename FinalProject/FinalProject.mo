within ;
package FinalProject
  package BaseModels
    package GeneratingUnits

      model Generator_01
        extends OpenIPSL.Interfaces.Generator;
        OpenIPSL.Electrical.Machines.PSSE.GENROU gENROU(
          v_0=v_0,
          angle_0=angle_0,
          P_0=P_0,
          Q_0=Q_0,
          M_b=M_b,
          V_b=V_b,
          Tpd0=machinePars.Tpd0,
          Tppd0=machinePars.Tppd0,
          Tppq0=machinePars.Tppq0,
          H=machinePars.H,
          D=machinePars.D,
          Xd=machinePars.Xd,
          Xq=machinePars.Xq,
          Xpd=machinePars.Xpd,
          Xppd=machinePars.Xppd,
          Xppq=machinePars.Xppq,
          Xl=machinePars.Xl,
          S10=machinePars.S10,
          S12=machinePars.S12,
          Xpq=machinePars.Xpq,
          Tpq0=machinePars.Tpq0,
          Xpp=machinePars.Xpp,
          R_a=machinePars.R_a)
                 annotation (Placement(transformation(extent={{0,-20},{40,20}})));
        parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
        Records.MachinePars1 machinePars
          annotation (Placement(transformation(extent={{-78,56},{-58,76}})));
      equation
        connect(gENROU.PMECH,gENROU. PMECH0) annotation (Line(points={{-4,10},{-12,10},
                {-12,26},{46,26},{46,10},{42,10}},         color={0,0,127}));
        connect(gENROU.EFD,gENROU. EFD0) annotation (Line(points={{-4,-10},{-12,-10},{
                -12,-30},{46,-30},{46,-10},{42,-10}},      color={0,0,127}));
        connect(gENROU.p, pwPin)
          annotation (Line(points={{40,0},{110,0}}, color={0,0,255}));
      end Generator_01;

      model Generator_02 "Infinite Bus Generator"
        extends OpenIPSL.Interfaces.Generator;
        OpenIPSL.Electrical.Machines.PSSE.GENCLS gENCLS(
          D=0,
          X_d=0.2,
          H=0,
          angle_0=angle_0,
          v_0=v_0,
          P_0=P_0,
          Q_0=Q_0,
          V_b=V_b,
          M_b=M_b)             annotation (Placement(transformation(extent={{0,-30},{60,30}})));
        parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
      equation
        connect(gENCLS.p, pwPin)
          annotation (Line(points={{60,0},{110,0}}, color={0,0,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
          Documentation(revisions="<html>
<!--DISCLAIMER-->
<p>OpenIPSL:</p>
<p>Copyright 2016 SmarTS Lab (Sweden)</p>
<ul>
<li>SmarTS Lab, research group at KTH: <a href=\"https://www.kth.se/en\">https://www.kth.se/en</a></li>
</ul>
<p>The authors can be contacted by email: <a href=\"mailto:luigiv@kth.se\">luigiv@kth.se</a></p>

<p>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. </p>
<p>If a copy of the MPL was not distributed with this file, You can obtain one at <a href=\"http://mozilla.org/MPL/2.0/\"> http://mozilla.org/MPL/2.0</a>.</p>

<p></p>
<p>iPSL:</p>
<p>Copyright 2015-2016 RTE (France), SmarTS Lab (Sweden), AIA (Spain) and DTU (Denmark)</p>
<ul>
<li>RTE: <a href=\"http://www.rte-france.com\">http://www.rte-france.com</a></li>
<li>SmarTS Lab, research group at KTH: <a href=\"https://www.kth.se/en\">https://www.kth.se/en</a></li>
<li>AIA: <a href=\"http://www.aia.es/en/energy\"> http://www.aia.es/en/energy</a></li>
<li>DTU: <a href=\"http://www.dtu.dk/english\"> http://www.dtu.dk/english</a></li>
</ul>
<p>The authors can be contacted by email: <a href=\"mailto:info@itesla-ipsl.org\">info@itesla-ipsl.org</a></p>

<p>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. </p>
<p>If a copy of the MPL was not distributed with this file, You can obtain one at <a href=\"http://mozilla.org/MPL/2.0/\"> http://mozilla.org/MPL/2.0</a>.</p>
</html>
",       info="<html>
<table cellspacing=\"1\" cellpadding=\"1\" border=\"1\">
<tr>
<td><p>Reference</p></td>
<td><p>SMIB PSAT, d_kundur2.mdl, PSAT</p></td>
</tr>
<tr>
<td><p>Last update</p></td>
<td>February 2016</td>
</tr>
<tr>
<td><p>Author</p></td>
<td><p>Maxime Baudette, Ahsan Murad, SmarTS Lab, KTH Royal Institute of Technology</p></td>
</tr>
<tr>
<td><p>Contact</p></td>
<td><p><a href=\"mailto:luigiv@kth.se\">luigiv@kth.se</a></p></td>
</tr>
</table>
</html>"));
      end Generator_02;

      model Generator_03
        extends OpenIPSL.Interfaces.Generator;
        OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
          v_0=v_0,
          angle_0=angle_0,
          P_0=P_0,
          Q_0=Q_0,
          M_b=M_b,
          V_b=V_b,
          Tpd0=machinePars.Tpd0,
          Tppd0=machinePars.Tppd0,
          Tppq0=machinePars.Tppq0,
          H=machinePars.H,
          D=machinePars.D,
          Xd=machinePars.Xd,
          Xq=machinePars.Xq,
          Xpd=machinePars.Xpd,
          Xppd=machinePars.Xppd,
          Xppq=machinePars.Xppq,
          Xl=machinePars.Xl,
          S10=machinePars.S10,
          S12=machinePars.S12,
          Xpq=machinePars.Xpq,
          Tpq0=machinePars.Tpq0,
          Xpp=machinePars.Xpp,
          R_a=machinePars.R_a)
          annotation (Placement(transformation(extent={{30,-20},{70,20}})));
        parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
        Records.MachinePars1 machinePars
          annotation (Placement(transformation(extent={{64,68},{84,88}})));
        Interfaces.TM2EPConverter tM2EPConverter2_1(M_b=M_b)
          annotation (Placement(transformation(extent={{-24,-16},{8,16}})));
        PrimeMovers.Gas.PlantA.GasTurbine gasTurbine
          annotation (Placement(transformation(extent={{-88,-16},{-56,16}})));
        Controls.ThermoPower.PID pU_PID(M_b=M_b) annotation (Placement(
              transformation(extent={{-66,-56},{-84,-36}}, rotation=0)));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
           Placement(transformation(extent={{-50,-10},{-30,10}},rotation=0)));
        Modelica.Blocks.Continuous.FirstOrder powerSensor1(
          k=1,
          T=1,
          y_start=10e6,
          initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
              transformation(extent={{6,-6},{-6,6}},         rotation=0,
              origin={-46,-34})));
        Modelica.Blocks.Interfaces.RealInput DeltaPM
          "Change in reference power (in pu)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-100})));
      equation
        connect(machine.EFD, machine.EFD0) annotation (Line(points={{26,-10},{
                18,-10},{18,-28},{78,-28},{78,-10},{72,-10}}, color={0,0,127}));
        connect(machine.p, pwPin)
          annotation (Line(points={{70,0},{110,0}}, color={0,0,255}));
        connect(tM2EPConverter2_1.PMECH, machine.PMECH) annotation (Line(points=
               {{9.6,8},{18,8},{18,10},{26,10}}, color={0,0,127}));
        connect(machine.SPEED, tM2EPConverter2_1.SPEED) annotation (Line(points=
               {{72,14},{82,14},{82,-32},{12,-32},{12,-8},{6.4,-8}}, color={0,0,
                127}));
        connect(powerSensor.flange_a, gasTurbine.shaft_b)
          annotation (Line(points={{-50,0},{-55.68,0}},
                                                     color={0,0,0}));
        connect(powerSensor.flange_b, tM2EPConverter2_1.shaft)
          annotation (Line(points={{-30,0},{-24,0}}, color={0,0,0}));
        connect(pU_PID.CS, gasTurbine.fuelFlowRate) annotation (Line(points={{-84.36,
                -46},{-94,-46},{-94,0},{-88,0}},                color={0,0,127}));
        connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-48,-11},
                {-48,-22},{-32,-22},{-32,-34},{-38.8,-34}},       color={0,0,
                127}));
        connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-52.6,-34},
                {-56,-34},{-56,-40},{-66,-40}}, color={0,0,127}));
        connect(pU_PID.DeltaPM, DeltaPM) annotation (Line(points={{-66,-52},{0,
                -52},{0,-100}}, color={0,0,127}));
        connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-66,-46},
                {88,-46},{88,10},{72,10}}, color={0,0,127}));
      end Generator_03;

      model Generator_04 "Generating Unit for Steam Example"
        extends OpenIPSL.Interfaces.Generator;
        OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
          v_0=v_0,
          angle_0=angle_0,
          P_0=P_0,
          Q_0=Q_0,
          M_b=M_b,
          V_b=V_b,
          Tpd0=machinePars.Tpd0,
          Tppd0=machinePars.Tppd0,
          Tppq0=machinePars.Tppq0,
          H=machinePars.H,
          D=machinePars.D,
          Xd=machinePars.Xd,
          Xq=machinePars.Xq,
          Xpd=machinePars.Xpd,
          Xppd=machinePars.Xppd,
          Xppq=machinePars.Xppq,
          Xl=machinePars.Xl,
          S10=machinePars.S10,
          S12=machinePars.S12,
          Xpq=machinePars.Xpq,
          Tpq0=machinePars.Tpq0,
          Xpp=machinePars.Xpp,
          R_a=machinePars.R_a)
          annotation (Placement(transformation(extent={{38,-20},{78,20}})));
        parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
        Records.MachinePars1 machinePars
          annotation (Placement(transformation(extent={{54,-76},{74,-56}})));
        Interfaces.TM2EPConverter tM2EPConverter2_1(M_b=M_b)
          annotation (Placement(transformation(extent={{-14,-16},{18,16}})));
        Controls.ThermoPower.PID pU_PID(
          M_b=M_b,
          Kp=2,
          Ti=240,
          PVmin=20e6,
          PVmax=100e6,
          CSmin=100,
          CSmax=1000,
          CSstart=0.7) annotation (Placement(transformation(extent={{-66,-56},{
                  -84,-36}}, rotation=0)));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
           Placement(transformation(extent={{-40,-10},{-20,10}},rotation=0)));
        Modelica.Blocks.Continuous.FirstOrder powerSensor1(
          k=1,
          T=1,
          y_start=56.8e6,
          initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
              transformation(extent={{6,-6},{-6,6}},         rotation=0,
              origin={-46,-34})));
        Modelica.Blocks.Interfaces.RealInput DeltaPM
          "Change in reference power (in pu)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-100})));
        PrimeMovers.Steam.PlantA.SteamTurbineA
                      steamTurbineA
          annotation (Placement(transformation(extent={{-74,-14},{-44,14}})));
        Modelica.Blocks.Sources.Ramp gasTemperature(
          height=0,
          duration=0,
          offset=750) annotation (Placement(transformation(extent={{-96,28},{
                  -76,48}},
                       rotation=0)));
        ThermoPower.Examples.RankineCycle.Models.PID voidFractionController(
          PVmin=0.1,
          PVmax=0.9,
          CSmax=2500,
          PVstart=0.1,
          CSstart=0.5,
          steadyStateInit=true,
          CSmin=500,
          Kp=-2,
          Ti=300) annotation (Placement(transformation(extent={{-64,-66},{-84,
                  -86}},
                rotation=0)));
        Modelica.Blocks.Sources.Step voidFractionSetPoint(
          offset=0.2,
          height=0,
          startTime=0) annotation (Placement(transformation(extent={{-24,-96},{
                  -44,-76}}, rotation=0)));
      equation
        connect(machine.EFD, machine.EFD0) annotation (Line(points={{34,-10},{
                26,-10},{26,-28},{86,-28},{86,-10},{80,-10}}, color={0,0,127}));
        connect(machine.p, pwPin)
          annotation (Line(points={{78,0},{110,0}}, color={0,0,255}));
        connect(machine.SPEED, tM2EPConverter2_1.SPEED) annotation (Line(points=
               {{80,14},{90,14},{90,-34},{22,-34},{22,-8},{16.4,-8}}, color={0,
                0,127}));
        connect(powerSensor.flange_b, tM2EPConverter2_1.shaft)
          annotation (Line(points={{-20,0},{-14,0}}, color={0,0,0}));
        connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-38,-11},
                {-38,-22},{-32,-22},{-32,-34},{-38.8,-34}},       color={0,0,
                127}));
        connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-52.6,-34},
                {-56,-34},{-56,-40},{-66,-40}}, color={0,0,127}));
        connect(pU_PID.DeltaPM, DeltaPM) annotation (Line(points={{-66,-52},{0,
                -52},{0,-100}}, color={0,0,127}));
        connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-66,-46},
                {94,-46},{94,10},{80,10}}, color={0,0,127}));
        connect(steamTurbineA.primeMoverFlange, powerSensor.flange_a)
          annotation (Line(points={{-44,1.77636e-15},{-40,0}}, color={0,0,0}));
        connect(pU_PID.CS, steamTurbineA.gasFlowRate) annotation (Line(points={
                {-84.36,-46},{-98,-46},{-98,8.4},{-73.7,8.4}}, color={0,0,127}));
        connect(tM2EPConverter2_1.PMECH, machine.PMECH) annotation (Line(points=
               {{19.6,8},{26,8},{26,10},{34,10}}, color={0,0,127}));
        connect(gasTemperature.y, steamTurbineA.gasTemperature) annotation (
            Line(points={{-75,38},{-66,38},{-66,18},{-82,18},{-82,1.77636e-15},
                {-73.7,1.77636e-15}},
              color={0,0,127}));
        connect(voidFractionSetPoint.y, voidFractionController.SP) annotation (
            Line(points={{-45,-86},{-54,-86},{-54,-80},{-64,-80}}, color={0,0,
                127}));
        connect(voidFractionController.PV, steamTurbineA.voidFraction)
          annotation (Line(points={{-64,-72},{-52,-72},{-52,-60},{-22,-60},{-22,
                -9.8},{-44,-9.8}}, color={0,0,127}));
        connect(voidFractionController.CS, steamTurbineA.nPump) annotation (
            Line(points={{-84,-76},{-90,-76},{-90,-8.4},{-73.7,-8.4}}, color={0,
                0,127}));
      end Generator_04;

      model Generator_05 "Generating Unit for Gas Example (ThermalPower)"
        extends OpenIPSL.Interfaces.Generator;
        OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
          v_0=v_0,
          angle_0=angle_0,
          P_0=P_0,
          Q_0=Q_0,
          M_b=M_b,
          V_b=V_b,
          Tpd0=machinePars.Tpd0,
          Tppd0=machinePars.Tppd0,
          Tppq0=machinePars.Tppq0,
          H=machinePars.H,
          D=machinePars.D,
          Xd=machinePars.Xd,
          Xq=machinePars.Xq,
          Xpd=machinePars.Xpd,
          Xppd=machinePars.Xppd,
          Xppq=machinePars.Xppq,
          Xl=machinePars.Xl,
          S10=machinePars.S10,
          S12=machinePars.S12,
          Xpq=machinePars.Xpq,
          Tpq0=machinePars.Tpq0,
          Xpp=machinePars.Xpp,
          R_a=machinePars.R_a)
          annotation (Placement(transformation(extent={{30,-20},{70,20}})));
        parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
        Records.MachinePars1 machinePars
          annotation (Placement(transformation(extent={{64,68},{84,88}})));
        Interfaces.TM2EPConverter tM2EPConverter2_1(M_b=M_b, ratio=10)
          annotation (Placement(transformation(extent={{-24,-16},{8,16}})));
        PrimeMovers.Gas.PlantD.GasTurbineB gasTurbineB
          annotation (Placement(transformation(extent={{-88,-16},{-56,16}})));
        Controls.ThermoPower.PID pU_PID(M_b=M_b,
          Kp=0.25,
          Ti=1,
          PVmin=100e6,
          PVmax=550e6,
          CSmin=0,
          CSmax=40)                              annotation (Placement(
              transformation(extent={{-66,-56},{-84,-36}}, rotation=0)));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
           Placement(transformation(extent={{-50,-10},{-30,10}},rotation=0)));
        Modelica.Blocks.Continuous.FirstOrder powerSensor1(
          k=1,
          T=1,
          y_start=10e6,
          initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
              transformation(extent={{6,-6},{-6,6}},         rotation=0,
              origin={-46,-34})));
        Modelica.Blocks.Interfaces.RealInput DeltaPM
          "Change in reference power (in pu)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-100})));
      equation
        connect(machine.EFD, machine.EFD0) annotation (Line(points={{26,-10},{
                18,-10},{18,-28},{78,-28},{78,-10},{72,-10}}, color={0,0,127}));
        connect(machine.p, pwPin)
          annotation (Line(points={{70,0},{110,0}}, color={0,0,255}));
        connect(tM2EPConverter2_1.PMECH, machine.PMECH) annotation (Line(points={{9.6,
                8},{18,8},{18,10},{26,10}}, color={0,0,127}));
        connect(machine.SPEED, tM2EPConverter2_1.SPEED) annotation (Line(points={{72,14},
                {82,14},{82,-32},{12,-32},{12,-8},{6.4,-8}}, color={0,0,127}));
        connect(powerSensor.flange_a, gasTurbineB.shaft_b)
          annotation (Line(points={{-50,0},{-55.68,0}}, color={0,0,0}));
        connect(powerSensor.flange_b, tM2EPConverter2_1.shaft)
          annotation (Line(points={{-30,0},{-24,0}}, color={0,0,0}));
        connect(pU_PID.CS, gasTurbineB.fuelFlowRate) annotation (Line(points={{-84.36,
                -46},{-94,-46},{-94,0},{-88,0}}, color={0,0,127}));
        connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-48,-11},
                {-48,-22},{-32,-22},{-32,-34},{-38.8,-34}},       color={0,0,
                127}));
        connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-52.6,-34},
                {-56,-34},{-56,-40},{-66,-40}}, color={0,0,127}));
        connect(pU_PID.DeltaPM, DeltaPM) annotation (Line(points={{-66,-52},{0,
                -52},{0,-100}}, color={0,0,127}));
        connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-66,-46},
                {88,-46},{88,10},{72,10}}, color={0,0,127}));
      end Generator_05;

      model Generator_06 "Generating Unit for Steam Example - Shah's Model"
        extends OpenIPSL.Interfaces.Generator;
        OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
          v_0=v_0,
          angle_0=angle_0,
          P_0=P_0,
          Q_0=Q_0,
          M_b=M_b,
          V_b=V_b,
          Tpd0=machinePars.Tpd0,
          Tppd0=machinePars.Tppd0,
          Tppq0=machinePars.Tppq0,
          H=machinePars.H,
          D=machinePars.D,
          Xd=machinePars.Xd,
          Xq=machinePars.Xq,
          Xpd=machinePars.Xpd,
          Xppd=machinePars.Xppd,
          Xppq=machinePars.Xppq,
          Xl=machinePars.Xl,
          S10=machinePars.S10,
          S12=machinePars.S12,
          Xpq=machinePars.Xpq,
          Tpq0=machinePars.Tpq0,
          Xpp=machinePars.Xpp,
          R_a=machinePars.R_a)
          annotation (Placement(transformation(extent={{38,-20},{78,20}})));
        parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
        Records.MachinePars1 machinePars
          annotation (Placement(transformation(extent={{64,68},{84,88}})));
        Interfaces.TM2EPConverter tM2EPConverter2_1(M_b=M_b)
          annotation (Placement(transformation(extent={{-14,-16},{18,16}})));
        Controls.ThermoPower.PID pU_PID(
          M_b=M_b,
          Kp=2,
          Ti=240,
          PVmin=20e6,
          PVmax=100e6,
          CSmin=100,
          CSmax=1000,
          CSstart=0.7) annotation (Placement(transformation(extent={{-66,-56},{
                  -84,-36}}, rotation=0)));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
           Placement(transformation(extent={{-40,-10},{-20,10}},rotation=0)));
        Modelica.Blocks.Continuous.FirstOrder powerSensor1(
          k=1,
          T=1,
          y_start=56.8e6,
          initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
              transformation(extent={{6,-6},{-6,6}},         rotation=0,
              origin={-46,-34})));
        Modelica.Blocks.Interfaces.RealInput DeltaPM
          "Change in reference power (in pu)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-100})));
        PrimeMovers.Steam.PlantB.FinalPlantModel.SteamTurbineB
                      steamTurbineB
          annotation (Placement(transformation(extent={{-74,-14},{-44,14}})));
      equation
        connect(machine.EFD, machine.EFD0) annotation (Line(points={{34,-10},{
                26,-10},{26,-28},{86,-28},{86,-10},{80,-10}}, color={0,0,127}));
        connect(machine.p, pwPin)
          annotation (Line(points={{78,0},{110,0}}, color={0,0,255}));
        connect(machine.SPEED, tM2EPConverter2_1.SPEED) annotation (Line(points=
               {{80,14},{90,14},{90,-34},{22,-34},{22,-8},{16.4,-8}}, color={0,
                0,127}));
        connect(powerSensor.flange_b, tM2EPConverter2_1.shaft)
          annotation (Line(points={{-20,0},{-14,0}}, color={0,0,0}));
        connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-38,-11},
                {-38,-22},{-32,-22},{-32,-34},{-38.8,-34}},       color={0,0,
                127}));
        connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-52.6,-34},
                {-56,-34},{-56,-40},{-66,-40}}, color={0,0,127}));
        connect(pU_PID.DeltaPM, DeltaPM) annotation (Line(points={{-66,-52},{0,
                -52},{0,-100}}, color={0,0,127}));
        connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-66,-46},
                {94,-46},{94,10},{80,10}}, color={0,0,127}));
        connect(tM2EPConverter2_1.PMECH, machine.PMECH) annotation (Line(points=
               {{19.6,8},{26,8},{26,10},{34,10}}, color={0,0,127}));
        connect(pU_PID.CS, steamTurbineB.u) annotation (Line(points={{-84.36,
                -46},{-92,-46},{-92,0},{-73.7,0}}, color={0,0,127}));
      end Generator_06;

      model Generator_07 "Generating Unit for Gas Example (ThermalPower)"
        extends OpenIPSL.Interfaces.Generator;
        OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
          v_0=v_0,
          angle_0=angle_0,
          P_0=P_0,
          Q_0=Q_0,
          M_b=M_b,
          V_b=V_b,
          Tpd0=machinePars.Tpd0,
          Tppd0=machinePars.Tppd0,
          Tppq0=machinePars.Tppq0,
          H=machinePars.H,
          D=machinePars.D,
          Xd=machinePars.Xd,
          Xq=machinePars.Xq,
          Xpd=machinePars.Xpd,
          Xppd=machinePars.Xppd,
          Xppq=machinePars.Xppq,
          Xl=machinePars.Xl,
          S10=machinePars.S10,
          S12=machinePars.S12,
          Xpq=machinePars.Xpq,
          Tpq0=machinePars.Tpq0,
          Xpp=machinePars.Xpp,
          R_a=machinePars.R_a)
          annotation (Placement(transformation(extent={{30,-20},{70,20}})));
        parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
        Records.MachinePars1 machinePars
          annotation (Placement(transformation(extent={{64,68},{84,88}})));
        Interfaces.TM2EPConverter tM2EPConverter2_1(M_b=M_b, ratio=1)
          annotation (Placement(transformation(extent={{-24,-16},{8,16}})));
        PrimeMovers.Gas.PlantD.GasTurbineB gasTurbineB
          annotation (Placement(transformation(extent={{-126,-16},{-94,16}})));
        Controls.ThermoPower.PID pU_PID(M_b=M_b,
          Kp=0.25,
          Ti=1,
          PVmin=100e6,
          PVmax=550e6,
          CSmin=0,
          CSmax=40)                              annotation (Placement(
              transformation(extent={{-112,-58},{-130,-38}},
                                                           rotation=0)));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
           Placement(transformation(extent={{-82,-10},{-62,10}},rotation=0)));
        Modelica.Blocks.Continuous.FirstOrder powerSensor1(
          k=1,
          T=1,
          y_start=10e6,
          initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
              transformation(extent={{6,-6},{-6,6}},         rotation=0,
              origin={-94,-34})));
        Modelica.Blocks.Interfaces.RealInput DeltaPM
          "Change in reference power (in pu)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-100})));
        Interfaces.GasTurbineGear GTgrp(redeclare record Data =
              PowerSystems.Mechanics.TurboGroups.Parameters.GasTurbineGear (w_nom=3141.5926535898,
                ratio={30000,10000,3000}))
          annotation (Placement(transformation(extent={{-54,-16},{-34,4}})));
        inner PowerSystems.System system
          annotation (Placement(transformation(extent={{-144,68},{-124,88}})));
      equation
        connect(machine.EFD, machine.EFD0) annotation (Line(points={{26,-10},{
                18,-10},{18,-28},{78,-28},{78,-10},{72,-10}}, color={0,0,127}));
        connect(machine.p, pwPin)
          annotation (Line(points={{70,0},{110,0}}, color={0,0,255}));
        connect(tM2EPConverter2_1.PMECH, machine.PMECH) annotation (Line(points={{9.6,
                8},{18,8},{18,10},{26,10}}, color={0,0,127}));
        connect(machine.SPEED, tM2EPConverter2_1.SPEED) annotation (Line(points={{72,14},
                {82,14},{82,-32},{12,-32},{12,-8},{6.4,-8}}, color={0,0,127}));
        connect(powerSensor.flange_a, gasTurbineB.shaft_b)
          annotation (Line(points={{-82,0},{-93.68,0}}, color={0,0,0}));
        connect(pU_PID.CS, gasTurbineB.fuelFlowRate) annotation (Line(points={{-130.36,
                -48},{-140,-48},{-140,0},{-126,0}},
                                                 color={0,0,127}));
        connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-80,-11},
                {-80,-34},{-86.8,-34}},                           color={0,0,
                127}));
        connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-100.6,-34},
                {-106,-34},{-106,-42},{-112,-42}},
                                                color={0,0,127}));
        connect(pU_PID.DeltaPM, DeltaPM) annotation (Line(points={{-112,-54},{0,
                -54},{0,-100}}, color={0,0,127}));
        connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-112,
                -48},{14,-48},{14,-36},{86,-36},{86,10},{72,10}},
                                           color={0,0,127}));
        connect(GTgrp.blades[1], powerSensor.flange_b)
          annotation (Line(points={{-54,0},{-62,0}}, color={0,0,0}));
        connect(GTgrp.airgap, tM2EPConverter2_1.shaft)
          annotation (Line(points={{-34,0},{-24,0}}, color={0,0,0}));
        annotation (Diagram(coordinateSystem(extent={{-160,-100},{100,100}}),
              graphics={Rectangle(
                extent={{-58,26},{10,-24}},
                lineColor={0,140,72},
                lineThickness=0.5,
                pattern=LinePattern.Dash)}),                                   Icon(
              coordinateSystem(extent={{-100,-100},{100,100}})));
      end Generator_07;

      model Generator_08 "Generating Unit for Gas Example (ThermalPower)"
        extends OpenIPSL.Interfaces.Generator;
        OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
          v_0=v_0,
          angle_0=angle_0,
          P_0=P_0,
          Q_0=Q_0,
          M_b=M_b,
          V_b=V_b,
          Tpd0=machinePars.Tpd0,
          Tppd0=machinePars.Tppd0,
          Tppq0=machinePars.Tppq0,
          H=machinePars.H,
          D=machinePars.D,
          Xd=machinePars.Xd,
          Xq=machinePars.Xq,
          Xpd=machinePars.Xpd,
          Xppd=machinePars.Xppd,
          Xppq=machinePars.Xppq,
          Xl=machinePars.Xl,
          S10=machinePars.S10,
          S12=machinePars.S12,
          Xpq=machinePars.Xpq,
          Tpq0=machinePars.Tpq0,
          Xpp=machinePars.Xpp,
          R_a=machinePars.R_a)
          annotation (Placement(transformation(extent={{30,-20},{70,20}})));
        parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
        Records.MachinePars1 machinePars
          annotation (Placement(transformation(extent={{64,68},{84,88}})));
        Interfaces.TM2EPConverter tM2EPConverter2_1(M_b=M_b, ratio=1)
          annotation (Placement(transformation(extent={{-24,-16},{8,16}})));
        PrimeMovers.Gas.PlantD.GasTurbineB gasTurbineB
          annotation (Placement(transformation(extent={{-126,-16},{-94,16}})));
        Controls.ThermoPower.PID pU_PID(M_b=M_b,
          Kp=0.25,
          Ti=1,
          PVmin=100e6,
          PVmax=550e6,
          CSmin=0,
          CSmax=40)                              annotation (Placement(
              transformation(extent={{-112,-58},{-130,-38}},
                                                           rotation=0)));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
           Placement(transformation(extent={{-82,-10},{-62,10}},rotation=0)));
        Modelica.Blocks.Continuous.FirstOrder powerSensor1(
          k=1,
          T=1,
          y_start=10e6,
          initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
              transformation(extent={{6,-6},{-6,6}},         rotation=0,
              origin={-94,-34})));
        Modelica.Blocks.Interfaces.RealInput DeltaPM
          "Change in reference power (in pu)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-100})));
        Interfaces.SimpleInertia prueba6_1
          annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
        inner PowerSystems.System system
          annotation (Placement(transformation(extent={{-144,68},{-124,88}})));
      equation
        connect(machine.EFD, machine.EFD0) annotation (Line(points={{26,-10},{
                18,-10},{18,-28},{78,-28},{78,-10},{72,-10}}, color={0,0,127}));
        connect(machine.p, pwPin)
          annotation (Line(points={{70,0},{110,0}}, color={0,0,255}));
        connect(tM2EPConverter2_1.PMECH, machine.PMECH) annotation (Line(points={{9.6,
                8},{18,8},{18,10},{26,10}}, color={0,0,127}));
        connect(machine.SPEED, tM2EPConverter2_1.SPEED) annotation (Line(points={{72,14},
                {82,14},{82,-32},{12,-32},{12,-8},{6.4,-8}}, color={0,0,127}));
        connect(powerSensor.flange_a, gasTurbineB.shaft_b)
          annotation (Line(points={{-82,0},{-93.68,0}}, color={0,0,0}));
        connect(pU_PID.CS, gasTurbineB.fuelFlowRate) annotation (Line(points={{-130.36,
                -48},{-140,-48},{-140,0},{-126,0}},
                                                 color={0,0,127}));
        connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-80,-11},
                {-80,-34},{-86.8,-34}},                           color={0,0,
                127}));
        connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-100.6,-34},
                {-106,-34},{-106,-42},{-112,-42}},
                                                color={0,0,127}));
        connect(pU_PID.DeltaPM, DeltaPM) annotation (Line(points={{-112,-54},{0,
                -54},{0,-100}}, color={0,0,127}));
        connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-112,
                -48},{14,-48},{14,-36},{86,-36},{86,10},{72,10}},
                                           color={0,0,127}));
        connect(prueba6_1.flangeA, powerSensor.flange_b)
          annotation (Line(points={{-54,0},{-62,0}}, color={0,0,0}));
        connect(prueba6_1.flangeB, tM2EPConverter2_1.shaft)
          annotation (Line(points={{-34,0},{-24,0}}, color={0,0,0}));
        annotation (Diagram(coordinateSystem(extent={{-160,-100},{100,100}}),
              graphics={Rectangle(
                extent={{-58,26},{10,-24}},
                lineColor={0,140,72},
                lineThickness=0.5,
                pattern=LinePattern.Dash)}),                                   Icon(
              coordinateSystem(extent={{-100,-100},{100,100}})));
      end Generator_08;

      model Generator_09 "Generating Unit for Steam Example - Jungyung's Model"
        extends OpenIPSL.Interfaces.Generator;
        OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
          v_0=v_0,
          angle_0=angle_0,
          P_0=P_0,
          Q_0=Q_0,
          M_b=M_b,
          V_b=V_b,
          Tpd0=machinePars.Tpd0,
          Tppd0=machinePars.Tppd0,
          Tppq0=machinePars.Tppq0,
          H=machinePars.H,
          D=machinePars.D,
          Xd=machinePars.Xd,
          Xq=machinePars.Xq,
          Xpd=machinePars.Xpd,
          Xppd=machinePars.Xppd,
          Xppq=machinePars.Xppq,
          Xl=machinePars.Xl,
          S10=machinePars.S10,
          S12=machinePars.S12,
          Xpq=machinePars.Xpq,
          Tpq0=machinePars.Tpq0,
          Xpp=machinePars.Xpp,
          R_a=machinePars.R_a)
          annotation (Placement(transformation(extent={{38,-20},{78,20}})));
        parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
        Records.MachinePars1 machinePars
          annotation (Placement(transformation(extent={{64,68},{84,88}})));
        Interfaces.TM2EPConverter tM2EPConverter2_1(M_b=M_b)
          annotation (Placement(transformation(extent={{-14,-16},{18,16}})));
        Controls.ThermoPower.PID pU_PID(
          M_b=M_b,
          Kp=1,
          Ti=10,
          PVmin=42e6,
          PVmax=52e6,
          CSmin=150e6,
          CSmax=180e6) annotation (Placement(transformation(extent={{-66,-56},{
                  -84,-36}}, rotation=0)));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
           Placement(transformation(extent={{-40,-10},{-20,10}},rotation=0)));
        Modelica.Blocks.Continuous.FirstOrder powerSensor1(
          k=1,
          T=1,
          y_start=56.8e6,
          initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
              transformation(extent={{6,-6},{-6,6}},         rotation=0,
              origin={-46,-34})));
        Modelica.Blocks.Interfaces.RealInput DeltaPM
          "Change in reference power (in pu)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-100})));
        PrimeMovers.Steam.PlantC.SteamTurbineC1
                      steamTurbineB
          annotation (Placement(transformation(extent={{-78,-14},{-48,14}})));
      equation
        connect(machine.EFD, machine.EFD0) annotation (Line(points={{34,-10},{
                26,-10},{26,-28},{86,-28},{86,-10},{80,-10}}, color={0,0,127}));
        connect(machine.p, pwPin)
          annotation (Line(points={{78,0},{110,0}}, color={0,0,255}));
        connect(machine.SPEED, tM2EPConverter2_1.SPEED) annotation (Line(points=
               {{80,14},{90,14},{90,-34},{22,-34},{22,-8},{16.4,-8}}, color={0,
                0,127}));
        connect(powerSensor.flange_b, tM2EPConverter2_1.shaft)
          annotation (Line(points={{-20,0},{-14,0}}, color={0,0,0}));
        connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-38,-11},
                {-38,-22},{-32,-22},{-32,-34},{-38.8,-34}},       color={0,0,
                127}));
        connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-52.6,-34},
                {-56,-34},{-56,-40},{-66,-40}}, color={0,0,127}));
        connect(pU_PID.DeltaPM, DeltaPM) annotation (Line(points={{-66,-52},{0,
                -52},{0,-100}}, color={0,0,127}));
        connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-66,-46},
                {94,-46},{94,10},{80,10}}, color={0,0,127}));
        connect(tM2EPConverter2_1.PMECH, machine.PMECH) annotation (Line(points=
               {{19.6,8},{26,8},{26,10},{34,10}}, color={0,0,127}));
        connect(pU_PID.CS, steamTurbineB.u) annotation (Line(points={{-84.36,
                -46},{-92,-46},{-92,0},{-77.7,0}}, color={0,0,127}));
        connect(steamTurbineB.primeMoverFlange, powerSensor.flange_a)
          annotation (Line(points={{-48,1.77636e-15},{-40,0}}, color={0,0,0}));
      end Generator_09;

      model Generator_10 "Generating Unit for Gas Example (ThermalPower)"
        extends OpenIPSL.Interfaces.Generator;

        parameter Modelica.Units.SI.Time H=h "inertia cst turb + gen";
        parameter Integer pp=2 "Number of poles";
        parameter Modelica.Units.SI.AngularVelocity w_nom=2*Modelica.Constants.pi*SysData.fn/pp
          "nominal angular velocity";

        OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
          v_0=v_0,
          angle_0=angle_0,
          P_0=P_0,
          Q_0=Q_0,
          M_b=M_b,
          V_b=V_b,
          Tpd0=machinePars.Tpd0,
          Tppd0=machinePars.Tppd0,
          Tppq0=machinePars.Tppq0,
          H=H,
          D=machinePars.D,
          Xd=machinePars.Xd,
          Xq=machinePars.Xq,
          Xpd=machinePars.Xpd,
          Xppd=machinePars.Xppd,
          Xppq=machinePars.Xppq,
          Xl=machinePars.Xl,
          S10=machinePars.S10,
          S12=machinePars.S12,
          Xpq=machinePars.Xpq,
          Tpq0=machinePars.Tpq0,
          Xpp=machinePars.Xpp,
          R_a=machinePars.R_a)
          annotation (Placement(transformation(extent={{30,-20},{70,20}})));
        parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
        Records.MachinePars1 machinePars
          annotation (Placement(transformation(extent={{64,68},{84,88}})));
        Interfaces.TM2EPConverter tM2EPConverter2_1(M_b=M_b, ratio=1)
          annotation (Placement(transformation(extent={{-24,-16},{8,16}})));
        PrimeMovers.Gas.PlantD.GasTurbineB gasTurbineB
          annotation (Placement(transformation(extent={{-126,-16},{-94,16}})));
        Controls.ThermoPower.PID pU_PID(M_b=M_b,
          Kp=0.25,
          Ti=1,
          PVmin=100e6,
          PVmax=550e6,
          CSmin=0,
          CSmax=40)                              annotation (Placement(
              transformation(extent={{-112,-58},{-130,-38}},
                                                           rotation=0)));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
           Placement(transformation(extent={{-82,-10},{-62,10}},rotation=0)));
        Modelica.Blocks.Continuous.FirstOrder powerSensor1(
          k=1,
          T=1,
          y_start=10e6,
          initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
              transformation(extent={{6,-6},{-6,6}},         rotation=0,
              origin={-94,-34})));
        Modelica.Blocks.Interfaces.RealInput DeltaPM
          "Change in reference power (in pu)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-100})));
        Interfaces.GasTurbineGear turboGroup(redeclare record Data =
              PowerSystems.Mechanics.TurboGroups.Parameters.GasTurbineGear (w_nom=3141.5926535898,
                ratio={30000,10000,3000}))
          annotation (Placement(transformation(extent={{-54,-16},{-34,4}})));
        inner PowerSystems.System system
          annotation (Placement(transformation(extent={{-144,68},{-124,88}})));
        outer OpenIPSL.Electrical.SystemBase SysData "Must add this line in all models";
      protected
        final parameter Real[3] gr2=diagonal(turboGroup.par.ratio)*turboGroup.par.ratio
            /turboGroup.par.ratio[end]^2;
        final parameter Modelica.Units.SI.Inertia J_red=(turboGroup.par.J_turb +
            turboGroup.par.J_comp)*gr2[1] + turboGroup.par.J_gear1*gr2[1:2] +
            turboGroup.par.J_gear2*gr2[2:3] + (turboGroup.par.J_acc + turboGroup.par.J_cpl
             + turboGroup.par.J_gen) "gear reduced inertia";
        final parameter Modelica.Units.SI.Time h=J_red*w_nom^2/(2*SysData.S_b);
      equation
        connect(machine.EFD, machine.EFD0) annotation (Line(points={{26,-10},{
                18,-10},{18,-28},{78,-28},{78,-10},{72,-10}}, color={0,0,127}));
        connect(machine.p, pwPin)
          annotation (Line(points={{70,0},{110,0}}, color={0,0,255}));
        connect(tM2EPConverter2_1.PMECH, machine.PMECH) annotation (Line(points={{9.6,
                8},{18,8},{18,10},{26,10}}, color={0,0,127}));
        connect(machine.SPEED, tM2EPConverter2_1.SPEED) annotation (Line(points={{72,14},
                {82,14},{82,-32},{12,-32},{12,-8},{6.4,-8}}, color={0,0,127}));
        connect(powerSensor.flange_a, gasTurbineB.shaft_b)
          annotation (Line(points={{-82,0},{-93.68,0}}, color={0,0,0}));
        connect(pU_PID.CS, gasTurbineB.fuelFlowRate) annotation (Line(points={{-130.36,
                -48},{-140,-48},{-140,0},{-126,0}},
                                                 color={0,0,127}));
        connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-80,-11},
                {-80,-34},{-86.8,-34}},                           color={0,0,
                127}));
        connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-100.6,-34},
                {-106,-34},{-106,-42},{-112,-42}},
                                                color={0,0,127}));
        connect(pU_PID.DeltaPM, DeltaPM) annotation (Line(points={{-112,-54},{0,
                -54},{0,-100}}, color={0,0,127}));
        connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-112,
                -48},{14,-48},{14,-36},{86,-36},{86,10},{72,10}},
                                           color={0,0,127}));
        connect(turboGroup.blades[1], powerSensor.flange_b)
          annotation (Line(points={{-54,0},{-62,0}}, color={0,0,0}));
        connect(turboGroup.airgap, tM2EPConverter2_1.shaft)
          annotation (Line(points={{-34,0},{-24,0}}, color={0,0,0}));
        annotation (Diagram(coordinateSystem(extent={{-160,-100},{100,100}}),
              graphics={Rectangle(
                extent={{-58,26},{10,-24}},
                lineColor={0,140,72},
                lineThickness=0.5,
                pattern=LinePattern.Dash)}),                                   Icon(
              coordinateSystem(extent={{-100,-100},{100,100}})));
      end Generator_10;

      package Records "Sets of generator parameters"

        record AVRPars "Example of AVR parameters"
          extends Modelica.Icons.Record;

          parameter Real T_R=1 "Voltage input time constant (s)";
          parameter Real K_A=40 "AVR gain";
          parameter Real T_A=0.04 "AVR time constant (s)";
          parameter Real V_RMAX=7.3 "Maximum AVR output (pu)";
          parameter Real V_RMIN=-7.3 "Minimum AVR output (pu)";
          parameter Real K_E=1 "Exciter field gain, s";
          parameter Real T_E=0.8 "Exciter time constant (s)";
          parameter Real K_F=0.03 "Rate feedback gain (pu)";
          parameter Real T_F=1 "Rate feedback time constant (s)";
          parameter Real E_1=2.400 "Exciter saturation point 1 (pu)";
          parameter Real S_EE_1=0.30000E-01 "Saturation at E1";
          parameter Real E_2=5.0000 "Exciter saturation point 2 (pu)";
          parameter Real S_EE_2=0.50000 "Saturation at E2";

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
        end AVRPars;

        record MachinePars1 "Original OpenIPSL GENROU Model Parameters"
          extends Modelica.Icons.Record;

          parameter Real M_b=10 "Machine base power (MVA)";
          parameter Real Tpd0=5 "d-axis transient open-circuit time constant (s)";
          parameter Real Tppd0=0.50000E-01 "d-axis sub-transient open-circuit time constant (s)";
          parameter Real Tppq0=0.1 "q-axis transient open-circuit time constant (s)";
          parameter Real H=4.0000 "Inertia constant (s)";
          parameter Real D=0 "Speed damping";
          parameter Real Xd=1.41 "d-axis reactance";
          parameter Real Xq=1.3500 "q-axis reactance";
          parameter Real Xpd=0.3 "d-axis transient reactance";
          parameter Real Xppd=0.2 "d-axis sub-transient reactance";
          parameter Real Xppq=0.2 "q-axis sub-transient reactance";
          parameter Real Xl=0.12 "leakage reactance";
          parameter Real S10=0.1 "Saturation factor at 1.0 pu";
          parameter Real S12=0.5 "Saturation factor at 1.2 pu";
          parameter Real R_a=0 "amature resistance";
          parameter Real Xpq=0.6 "q-axis transient reactance (pu)";
          parameter Real Tpq0=0.7 "q-axis transient open-circuit time constant (s)";
          parameter Real Xpp=0.2 "Sub-transient reactance (pu)";

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
        end MachinePars1;

        record MachinePars2 "Parameters taken from Anderson book"
          extends Modelica.Icons.Record;

          parameter Real M_b=10 "Machine base power (MVA)";
          parameter Real Tpd0=7.5 "d-axis transient open-circuit time constant (s)";
          parameter Real Tppd0=0.054 "d-axis sub-transient open-circuit time constant (s)";
          parameter Real Tppq0=0.107 "q-axis transient open-circuit time constant (s)";
          parameter Real H=4.28 "Inertia constant (s)";
          parameter Real D=2 "Speed damping";
          parameter Real Xd=1.64 "d-axis reactance";
          parameter Real Xq=1.575 "q-axis reactance";
          parameter Real Xpd=0.159 "d-axis transient reactance";
          parameter Real Xppd=0.102 "d-axis sub-transient reactance";
          parameter Real Xppq=0.1 "q-axis sub-transient reactance";
          parameter Real Xl=0.113 "leakage reactance";
          parameter Real S10=0.087 "Saturation factor at 1.0 pu";
          parameter Real S12=0.2681 "Saturation factor at 1.2 pu";
          parameter Real R_a=0.034 "amature resistance";
          parameter Real Xpq=0.306 "q-axis transient reactance (pu)";
          parameter Real Tpq0=1.5 "q-axis transient open-circuit time constant (s)";
          parameter Real Xpp=Xppd "Sub-transient reactance (pu)";

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
        end MachinePars2;

        record MachinePars3 "Original OpenIPSL GENROU Model Parameters"
          extends Modelica.Icons.Record;

          parameter Real Tpd0=5 "d-axis transient open-circuit time constant (s)";
          parameter Real Tppd0=0.07 "d-axis sub-transient open-circuit time constant (s)";
          parameter Real Tppq0=0.09 "q-axis transient open-circuit time constant (s)";
          parameter Real H=4.28 "Inertia constant (s)";
          parameter Real D=0 "Speed damping";
          parameter Real Xd=1.84 "d-axis reactance";
          parameter Real Xq=1.75 "q-axis reactance";
          parameter Real Xpd=0.41 "d-axis transient reactance";
          parameter Real Xppd=0.2 "d-axis sub-transient reactance";
          parameter Real Xppq=0.2 "q-axis sub-transient reactance";
          parameter Real Xl=0.12 "leakage reactance";
          parameter Real S10=0.11 "Saturation factor at 1.0 pu";
          parameter Real S12=0.39 "Saturation factor at 1.2 pu";
          parameter Real R_a=0 "amature resistance";
          parameter Real Xpq=0.6 "q-axis transient reactance (pu)";
          parameter Real Tpq0=0.9 "q-axis transient open-circuit time constant (s)";
          parameter Real Xpp=0.2 "Sub-transient reactance (pu)";

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
        end MachinePars3;

        record PSSPars "Example of PSS parameters"
          extends Modelica.Icons.Record;

          parameter Real T_w1=10 "Washout 1 time constant";
          parameter Real T_w2=10 "Washout 2 time constant";
          parameter Real T_6=1e-9 "Lag 1 time constant";
          parameter Real T_w3=10 "Washout 3 time constant";
          parameter Real T_w4=1e-9 "Washout 4 time constant";
          parameter Real T_7=10 "Lag 2 time constant";
          parameter Real K_S2=0.99 "Lag 2 gain";
          parameter Real K_S3=1 "gain";
          parameter Real T_8=0.5 "Ramp-tracking filter time constant";
          parameter Real T_9=0.1 "Ramp-tracking filter time constant";
          parameter Real K_S1=20 "PSS gain";
          parameter Real T_1=0.15 "Leadlag1 time constant (data from IEEE std, not representive, need to be tuned following system parameters)";
          parameter Real T_2=0.025 "Leadlag1 time constant";
          parameter Real T_3=0.15 "Leadlag2 time constant";
          parameter Real T_4=0.025 "Leadlag2 time constant";
          parameter Real V_STMAX=0.1 "PSS output limiation";
          parameter Real V_STMIN=-0.1 "PSS output limiation";
          parameter Integer M=0 "Ramp tracking filter coefficient";
          parameter Integer N=0 "Ramp tracking filter coefficient";

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
        end PSSPars;
      end Records;
    end GeneratingUnits;

    package Networks
      model First "First example: simple drive train"
        extends Modelica.Icons.Example;
        parameter Modelica.Units.SI.Torque amplitude=10
          "Amplitude of driving torque";
        parameter Modelica.Units.SI.Frequency f=5 "Frequency of driving torque";
        parameter Modelica.Units.SI.Inertia Jmotor(min=0)=0.1 "Motor inertia";
        parameter Modelica.Units.SI.Inertia Jload(min=0)=2 "Load inertia";
        parameter Real ratio=10 "Gear ratio";
        parameter Real damping=10 "Damping in bearing of gear";

        Modelica.Mechanics.Rotational.Components.Fixed fixed
          annotation (Placement(transformation(extent={{38,-48},{54,-32}})));
        Modelica.Mechanics.Rotational.Sources.Torque torque(useSupport=true)
          annotation (Placement(transformation(extent={{-68,-8},{-52,8}})));
        Modelica.Mechanics.Rotational.Components.Inertia inertia1(J=Jmotor)
          annotation (Placement(transformation(extent={{-46,-8},{-30,8}})));
        Modelica.Mechanics.Rotational.Components.IdealGear idealGear(ratio=
              ratio, useSupport=true)
          annotation (Placement(transformation(extent={{-8,-8},{8,8}})));
        Modelica.Mechanics.Rotational.Components.Inertia inertia2(
          J=2,
          phi(fixed=true, start=0),
          w(fixed=true, start=0))
          annotation (Placement(transformation(extent={{22,-8},{38,8}})));
        Modelica.Mechanics.Rotational.Components.Spring spring(c=1.e4, phi_rel(
              fixed=true))
          annotation (Placement(transformation(extent={{52,-8},{68,8}})));
        Modelica.Mechanics.Rotational.Components.Inertia inertia3(J=Jload, w(
              fixed=true, start=0))
          annotation (Placement(transformation(extent={{82,-8},{98,8}})));
        Modelica.Mechanics.Rotational.Components.Damper damper(d=damping)
          annotation (Placement(transformation(
              origin={46,-22},
              extent={{-8,-8},{8,8}},
              rotation=270)));
        Modelica.Blocks.Sources.Sine sine(amplitude=amplitude, f=f)
          annotation (Placement(transformation(extent={{-98,-8},{-82,8}})));
        Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor
          annotation (Placement(transformation(extent={{-24,6},{-12,18}})));
        Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor1
          annotation (Placement(transformation(extent={{44,10},{56,22}})));
      equation
        connect(idealGear.flange_b, inertia2.flange_a)
          annotation (Line(points={{8,0},{22,0}}));
        connect(inertia2.flange_b, spring.flange_a)
          annotation (Line(points={{38,0},{52,0}}));
        connect(spring.flange_b, inertia3.flange_a)
          annotation (Line(points={{68,0},{82,0}}));
        connect(damper.flange_a, inertia2.flange_b)
          annotation (Line(points={{46,-14},{46,0},{38,0}}));
        connect(damper.flange_b, fixed.flange)
          annotation (Line(points={{46,-30},{46,-40}}));
        connect(sine.y, torque.tau)
          annotation (Line(points={{-81.2,0},{-69.6,0}}, color={0,0,127}));
        connect(torque.support, fixed.flange)
          annotation (Line(points={{-60,-8},{-60,-40},{46,-40}}));
        connect(idealGear.support, fixed.flange)
          annotation (Line(points={{0,-8},{0,-40},{46,-40}}));
        connect(torque.flange, inertia1.flange_a) annotation (Line(
            points={{-52,0},{-46,0}}));
        connect(inertia1.flange_b, idealGear.flange_a)
          annotation (Line(points={{-30,0},{-8,0}}, color={0,0,0}));
        connect(speedSensor.flange, inertia1.flange_b)
          annotation (Line(points={{-24,12},{-30,12},{-30,0}}, color={0,0,0}));
        connect(speedSensor1.flange, inertia2.flange_b)
          annotation (Line(points={{44,16},{38,16},{38,0}}, color={0,0,0}));
        annotation (
          Documentation(info="<html>
<p>The drive train consists of a motor inertia which is driven by
a sine-wave motor torque. Via a gearbox the rotational energy is
transmitted to a load inertia. Elasticity in the gearbox is modeled
by a spring element. A linear damper is used to model the
damping in the gearbox bearing.</p>
<p>Note, that a force component (like the damper of this example)
which is acting between a shaft and the housing has to be fixed
in the housing on one side via component Fixed.</p>
<p>Simulate for 1 second and plot the following variables:<br>
   angular velocities of inertias inertia2 and 3: inertia2.w, inertia3.w</p>

</html>"),experiment(StopTime=1.0, Interval=0.001));
      end First;

      model SMIB01 "SMIB - Single Machine Infinite Base system with one load"
        extends Modelica.Icons.Example;
        OpenIPSL.Electrical.Branches.PwLine pwLine(
          R=0.001,
          X=0.2,
          G=0,
          B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
        OpenIPSL.Electrical.Branches.PwLine pwLine3(
          R=0.0005,
          X=0.1,
          G=0,
          B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
        OpenIPSL.Electrical.Branches.PwLine pwLine4(
          R=0.0005,
          X=0.1,
          G=0,
          B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
        OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
          PQBRAK=0.7,
          d_t=0,
          d_P=0,
          t1=0,
          characteristic=2,
          P_0=pf.powerflow.loads.PL1,
          Q_0=pf.powerflow.loads.QL1,
          v_0=pf.powerflow.bus.V3,
          angle_0=pf.powerflow.bus.A3)
          annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
        OpenIPSL.Electrical.Events.PwFault pwFault(
          t1=2,
          t2=2.15,
          R=0,
          X=0) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={26,-60})));
        OpenIPSL.Electrical.Buses.Bus B01
          annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
        inner OpenIPSL.Electrical.SystemBase SysData(S_b = 100e6, fn = 50)
          annotation (Placement(transformation(extent={{-58,28},{-18,48}})));
        OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
          annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
        OpenIPSL.Electrical.Buses.Bus B02
          annotation (Placement(transformation(extent={{56,-10},{76,10}})));
        OpenIPSL.Electrical.Buses.Bus B05
          annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
        OpenIPSL.Electrical.Branches.PwLine pwLine1(
          R=0.0005,
          G=0,
          B=0,
          X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
        OpenIPSL.Electrical.Branches.PwLine pwLine2(
          R=0.0005,
          G=0,
          B=0,
          X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
        OpenIPSL.Electrical.Buses.Bus B04
          annotation (Placement(transformation(extent={{16,20},{36,40}})));
        BaseModels.GeneratingUnits.Generator_02 generatorB(
          M_b=100000000,
          P_0=pf.powerflow.machines.PG2,
          Q_0=pf.powerflow.machines.QG2,
          v_0=pf.powerflow.bus.V2,
          angle_0=pf.powerflow.bus.A2,
          displayPF=true) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={82,0})));
        BaseModels.GeneratingUnits.Generator_01 generatorA(
          P_0=pf.powerflow.machines.PG1,
          Q_0=pf.powerflow.machines.QG1,
          v_0=pf.powerflow.bus.V1,
          angle_0=pf.powerflow.bus.A1,
          displayPF=true,
          M_b=100000000) annotation (Placement(transformation(rotation=0, extent={{-90,
                  -10},{-70,10}})));
        Examples.Systems.BasicSMIB.PF_Data.Power_Flow pf(redeclare record
            PowerFlow =
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.PF_00040)
          annotation (Placement(transformation(extent={{-88,30},{-68,50}})));
      equation
        connect(B01.p, pwLine.p)
          annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
        connect(pwLine.n, B03.p)
          annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
        connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                -4,0},{-14,0}}, color={0,0,255}));
        connect(load.p, B03.p)
          annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
        connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                {56,0},{66,0}}, color={0,0,255}));
        connect(B05.p, pwLine4.p)
          annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
        connect(B05.p, pwLine3.n)
          annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
        connect(pwFault.p, pwLine4.p)
          annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                  color={0,0,255}));
        connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                0},{-14,0}}, color={0,0,255}));
        connect(pwLine1.n, B04.p)
          annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
        connect(pwLine2.p, B04.p)
          annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
        connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                56,0},{66,0}}, color={0,0,255}));
        connect(generatorB.pwPin, B02.p)
          annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
        connect(generatorA.pwPin, B01.p)
          annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
        annotation (experiment(StopTime=10, __Dymola_Algorithm="Dassl"));
      end SMIB01;

      model SMIB02 "Partial SMIB Model with PF Record and Load"
        extends Modelica.Icons.Example;
        OpenIPSL.Electrical.Buses.Bus B01(displayPF=true)
          annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
        OpenIPSL.Electrical.Buses.Bus B03(displayPF=true)
          annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
        OpenIPSL.Electrical.Buses.Bus B04(displayPF=true)
          annotation (Placement(transformation(extent={{10,-30},{30,-10}})));
        OpenIPSL.Electrical.Buses.Bus B02(displayPF=true)
          annotation (Placement(transformation(extent={{50,-10},{70,10}})));
        OpenIPSL.Electrical.Branches.PwLine line_01(
          R=0.0010,
          X=0.2000,
          G=0.0000,
          B=0.0000)
          annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
        OpenIPSL.Electrical.Branches.PwLine line_02(
          R=0.0100,
          X=0.2000,
          G=0.0000,
          B=0.0000) annotation (Placement(transformation(extent={{10,10},{30,30}})));
        OpenIPSL.Electrical.Branches.PwLine line_03(
          R=0.0005,
          X=0.1000,
          G=0.0000,
          B=0.0000) annotation (Placement(transformation(extent={{-8,-30},{12,-10}})));
        OpenIPSL.Electrical.Branches.PwLine line_04(
          R=0.0005,
          X=0.1000,
          G=0.0000,
          B=0.0000) annotation (Placement(transformation(extent={{28,-30},{48,-10}})));
        inner OpenIPSL.Electrical.SystemBase SysData
          annotation (Placement(transformation(extent={{-96,-44},{-56,-26}})));
        BaseModels.GeneratingUnits.Generator_02 infiniteBus(
          P_0=pf.powerflow.machines.PG2,
          Q_0=pf.powerflow.machines.QG2,
          v_0=pf.powerflow.bus.V2,
          angle_0=pf.powerflow.bus.A2,
          displayPF=true,
          M_b=100000000)
          annotation (Placement(transformation(extent={{94,-10},{74,10}})));
        OpenIPSL.Electrical.Events.PwFault pwFault(
          R=0.01,
          X=0.1,
          t1=1,
          t2=1.1) annotation (Placement(transformation(
              extent={{-6,-6},{6,6}},
              rotation=270,
              origin={36,-46})));
        BaseModels.GeneratingUnits.Generator_01 generator1(
          P_0=pf.powerflow.machines.PG1,
          Q_0=pf.powerflow.machines.QG1,
          v_0=pf.powerflow.bus.V1,
          angle_0=pf.powerflow.bus.A1,
          displayPF=true,
          M_b=100000000)
          annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
        OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
          PQBRAK=0.7,
          d_t=0,
          d_P=0,
          t1=0,
          characteristic=2,
          P_0=pf.powerflow.loads.PL1,
          Q_0=pf.powerflow.loads.QL1,
          v_0=pf.powerflow.bus.V3,
          angle_0=pf.powerflow.bus.A3)
          annotation (Placement(transformation(extent={{-40,-50},{-20,-30}})));
        Examples.Systems.BasicSMIB2.PF_Data.Power_Flow pf(redeclare record
            PowerFlow =
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.PF_00045)
          annotation (Placement(transformation(extent={{-88,28},{-68,48}})));
      equation
        connect(line_01.p, B01.p)
          annotation (Line(points={{-53,0},{-60,0}}, color={0,0,255}));
        connect(line_01.n, B03.p)
          annotation (Line(points={{-35,0},{-30,0}}, color={0,0,255}));
        connect(line_02.p, B03.p) annotation (Line(points={{11,20},{-16,20},{-16,0},{
                -30,0}}, color={0,0,255}));
        connect(line_02.n, B02.p)
          annotation (Line(points={{29,20},{48,20},{48,0},{60,0}}, color={0,0,255}));
        connect(line_03.p, B03.p) annotation (Line(points={{-7,-20},{-16,-20},{-16,0},
                {-30,0}}, color={0,0,255}));
        connect(line_03.n, B04.p)
          annotation (Line(points={{11,-20},{20,-20}},color={0,0,255}));
        connect(line_04.p, B04.p)
          annotation (Line(points={{29,-20},{20,-20}}, color={0,0,255}));
        connect(line_04.n, B02.p) annotation (Line(points={{47,-20},{48,-20},{48,0},{
                60,0}}, color={0,0,255}));
        connect(infiniteBus.pwPin, B02.p)
          annotation (Line(points={{73,0},{60,0}}, color={0,0,255}));
        connect(pwFault.p, B04.p) annotation (Line(points={{36,-39},{36,-28},{24,
                -28},{24,-20},{20,-20}}, color={0,0,255}));
        connect(generator1.pwPin, B01.p)
          annotation (Line(points={{-69,0},{-60,0}}, color={0,0,255}));
        connect(load.p, B03.p)
          annotation (Line(points={{-30,-30},{-30,0}}, color={0,0,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false), graphics={
                                                      Text(
                extent={{-92,46},{94,26}},
                lineColor={0,0,0},
                lineThickness=1,
                fontSize=15,
                textStyle={TextStyle.Bold},
                textString="Single-machine infinite bus model*")}));
      end SMIB02;

      model ExampleNetworkModel
        "SMIB - Single Machine Infinite Base system with one load"
        extends Modelica.Icons.Example;
        OpenIPSL.Electrical.Branches.PwLine pwLine(
          R=0.001,
          X=0.2,
          G=0,
          B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
        OpenIPSL.Electrical.Branches.PwLine pwLine3(
          R=0.0005,
          X=0.1,
          G=0,
          B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
        OpenIPSL.Electrical.Branches.PwLine pwLine4(
          R=0.0005,
          X=0.1,
          G=0,
          B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
        OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
          PQBRAK=0.7,
          d_t=0,
          d_P=0,
          t1=0,
          characteristic=2,
          P_0=pf.powerflow.loads.PL1,
          Q_0=pf.powerflow.loads.QL1,
          v_0=pf.powerflow.bus.V3,
          angle_0=pf.powerflow.bus.A3)
          annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
        OpenIPSL.Electrical.Events.PwFault pwFault(
          t1=2,
          t2=2.15,
          R=0,
          X=0) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={26,-60})));
        OpenIPSL.Electrical.Buses.Bus B01
          annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
        inner OpenIPSL.Electrical.SystemBase SysData(S_b = 100e6, fn = 50)
          annotation (Placement(transformation(extent={{-58,28},{-18,48}})));
        OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
          annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
        OpenIPSL.Electrical.Buses.Bus B02
          annotation (Placement(transformation(extent={{56,-10},{76,10}})));
        OpenIPSL.Electrical.Buses.Bus B05
          annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
        OpenIPSL.Electrical.Branches.PwLine pwLine1(
          R=0.0005,
          G=0,
          B=0,
          X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
        OpenIPSL.Electrical.Branches.PwLine pwLine2(
          R=0.0005,
          G=0,
          B=0,
          X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
        OpenIPSL.Electrical.Buses.Bus B04
          annotation (Placement(transformation(extent={{16,20},{36,40}})));
        BaseModels.GeneratingUnits.Generator_02 generatorB(
          M_b=100000000,
          P_0=pf.powerflow.machines.PG2,
          Q_0=pf.powerflow.machines.QG2,
          v_0=pf.powerflow.bus.V2,
          angle_0=pf.powerflow.bus.A2,
          displayPF=true) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={82,0})));
        BaseModels.GeneratingUnits.Generator_01 generatorA(
          P_0=pf.powerflow.machines.PG1,
          Q_0=pf.powerflow.machines.QG1,
          v_0=pf.powerflow.bus.V1,
          angle_0=pf.powerflow.bus.A1,
          displayPF=true,
          M_b=100000000) annotation (Placement(transformation(rotation=0, extent={{-90,
                  -10},{-70,10}})));
        Examples.Systems.BasicSMIB.PF_Data.Power_Flow pf(redeclare record
            PowerFlow =
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.PF_00040)
          annotation (Placement(transformation(extent={{-88,30},{-68,50}})));
      equation
        connect(B01.p, pwLine.p)
          annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
        connect(pwLine.n, B03.p)
          annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
        connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                -4,0},{-14,0}}, color={0,0,255}));
        connect(load.p, B03.p)
          annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
        connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                {56,0},{66,0}}, color={0,0,255}));
        connect(B05.p, pwLine4.p)
          annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
        connect(B05.p, pwLine3.n)
          annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
        connect(pwFault.p, pwLine4.p)
          annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                  color={0,0,255}));
        connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                0},{-14,0}}, color={0,0,255}));
        connect(pwLine1.n, B04.p)
          annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
        connect(pwLine2.p, B04.p)
          annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
        connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                56,0},{66,0}}, color={0,0,255}));
        connect(generatorB.pwPin, B02.p)
          annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
        connect(generatorA.pwPin, B01.p)
          annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
        annotation (experiment(StopTime=10, __Dymola_Algorithm="Dassl"));
      end ExampleNetworkModel;

      package Partial

        model SMIB_Partial "Partial SMIB Model with PF Record and Load"
          OpenIPSL.Electrical.Buses.Bus B01(
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,    displayPF=true)
            annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
          OpenIPSL.Electrical.Buses.Bus B03(
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3,    displayPF=true)
            annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
          OpenIPSL.Electrical.Buses.Bus B04(
            v_0=pf.powerflow.bus.V4,
            angle_0=pf.powerflow.bus.A4,    displayPF=true)
            annotation (Placement(transformation(extent={{10,-30},{30,-10}})));
          OpenIPSL.Electrical.Buses.Bus B02(
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,    displayPF=true)
            annotation (Placement(transformation(extent={{50,-10},{70,10}})));
          OpenIPSL.Electrical.Branches.PwLine line_01(
            R=0.0010,
            X=0.2000,
            G=0.0000,
            B=0.0000)
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          OpenIPSL.Electrical.Branches.PwLine line_02(
            R=0.0100,
            X=0.2000,
            G=0.0000,
            B=0.0000) annotation (Placement(transformation(extent={{10,10},{30,30}})));
          OpenIPSL.Electrical.Branches.PwLine line_03(
            R=0.0005,
            X=0.1000,
            G=0.0000,
            B=0.0000) annotation (Placement(transformation(extent={{-8,-30},{12,-10}})));
          OpenIPSL.Electrical.Branches.PwLine line_04(
            R=0.0005,
            X=0.1000,
            G=0.0000,
            B=0.0000) annotation (Placement(transformation(extent={{28,-30},{48,-10}})));
          inner OpenIPSL.Electrical.SystemBase SysData
            annotation (Placement(transformation(extent={{-88,72},{-48,90}})));
          GeneratingUnits.Generator_02 infiniteBus(
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,          displayPF=true)
            annotation (Placement(transformation(extent={{94,-10},{74,10}})));
          replaceable
          OpenIPSL.Electrical.Loads.PSSE.Load load(
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3) constrainedby
            OpenIPSL.Electrical.Loads.PSSE.BaseClasses.baseLoad
            annotation (Placement(transformation(extent={{-34,-56},{-14,-36}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            R=0.01,
            X=0.1,
            t1=1,
            t2=1.1) annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={36,-46})));
          Examples.Systems.BasicSMIB2.PF_Data.Power_Flow pf
            annotation (Placement(transformation(extent={{-80,24},{-60,44}})));
        equation
          connect(line_01.p, B01.p)
            annotation (Line(points={{-53,0},{-60,0}}, color={0,0,255}));
          connect(line_01.n, B03.p)
            annotation (Line(points={{-35,0},{-30,0}}, color={0,0,255}));
          connect(line_02.p, B03.p) annotation (Line(points={{11,20},{-16,20},{-16,0},{
                  -30,0}}, color={0,0,255}));
          connect(line_02.n, B02.p)
            annotation (Line(points={{29,20},{48,20},{48,0},{60,0}}, color={0,0,255}));
          connect(line_03.p, B03.p) annotation (Line(points={{-7,-20},{-16,-20},{-16,0},
                  {-30,0}}, color={0,0,255}));
          connect(line_03.n, B04.p)
            annotation (Line(points={{11,-20},{20,-20}},color={0,0,255}));
          connect(line_04.p, B04.p)
            annotation (Line(points={{29,-20},{20,-20}}, color={0,0,255}));
          connect(line_04.n, B02.p) annotation (Line(points={{47,-20},{48,-20},{48,0},{
                  60,0}}, color={0,0,255}));
          connect(infiniteBus.pwPin, B02.p)
            annotation (Line(points={{73,0},{60,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-24,-36},{-24,0},{-30,0}}, color={0,0,255}));
          connect(pwFault.p, B04.p) annotation (Line(points={{36,-39},{36,-28},{24,
                  -28},{24,-20},{20,-20}}, color={0,0,255}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false), graphics={
                                                        Text(
                  extent={{-92,68},{94,48}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fontSize=15,
                  textStyle={TextStyle.Bold},
                  textString="Single-machine infinite bus model*")}));
        end SMIB_Partial;

        partial model SMIB_Fault_Partial
          "SMIB - Single Machine Infinite Base system with one load"
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-20,-4},{-8,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{14,-34},{26,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{54,-34},{66,-26}})));
          OpenIPSL.Electrical.Machines.PSSE.GENCLS gENCLS(
            M_b=100e6,
            D=0,
            angle_0=0,
            X_d=0.2,
            H=0,
            P_0=10017110,
            Q_0=8006544,
            v_0=1) annotation (Placement(transformation(extent={{100,-10},{90,10}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation constantLoad(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            angle_0=-0.5762684,
            t1=0,
            characteristic=2,
            P_0=50000000,
            Q_0=10000000,
            v_0=0.9919935) annotation (Placement(transformation(extent={{-10,-72},{10,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=2,
            t2=2.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={40,-60})));
          OpenIPSL.Electrical.Buses.Bus GEN1
            annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=100000000, fn=60)
            annotation (Placement(transformation(extent={{-100,80},{-60,100}})));
          OpenIPSL.Electrical.Buses.Bus LOAD(v_0=constantLoad.v_0, angle_0=constantLoad.angle_0)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          OpenIPSL.Electrical.Buses.Bus GEN2
            annotation (Placement(transformation(extent={{70,-10},{90,10}})));
          OpenIPSL.Electrical.Buses.Bus FAULT
            annotation (Placement(transformation(extent={{30,-40},{50,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1)
            annotation (Placement(transformation(extent={{14,26},{26,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1)
            annotation (Placement(transformation(extent={{54,26},{66,34}})));
          OpenIPSL.Electrical.Buses.Bus SHUNT
            annotation (Placement(transformation(extent={{30,20},{50,40}})));
        equation
          connect(GEN1.p, pwLine.p)
            annotation (Line(points={{-30,0},{-19.4,0}},         color={0,0,255}));
          connect(pwLine.n, LOAD.p)
            annotation (Line(points={{-8.6,0},{0,0}},            color={0,0,255}));
          connect(pwLine3.p, LOAD.p) annotation (Line(points={{14.6,-30},{10,-30},{10,0},{0,0}},
                         color={0,0,255}));
          connect(constantLoad.p, LOAD.p)
            annotation (Line(points={{0,-52},{0,0}},       color={0,0,255}));
          connect(GEN2.p, gENCLS.p)
            annotation (Line(points={{80,0},{90,0}},        color={0,0,255}));
          connect(pwLine4.n, GEN2.p) annotation (Line(points={{65.4,-30},{70,-30},{70,0},{80,0}},
                           color={0,0,255}));
          connect(FAULT.p, pwLine4.p)
            annotation (Line(points={{40,-30},{54.6,-30}}, color={0,0,255}));
          connect(FAULT.p, pwLine3.n)
            annotation (Line(points={{40,-30},{25.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{40,-48.3333},{40,-30},{54.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, LOAD.p)
            annotation (Line(points={{14.6,30},{10,30},{10,0},{0,0}},
                                                                    color={0,0,255}));
          connect(pwLine1.n,SHUNT. p)
            annotation (Line(points={{25.4,30},{40,30}}, color={0,0,255}));
          connect(pwLine2.p,SHUNT. p)
            annotation (Line(points={{54.6,30},{40,30}}, color={0,0,255}));
          connect(pwLine2.n, GEN2.p) annotation (Line(points={{65.4,30},{70,30},{70,0},{80,0}},
                           color={0,0,255}));
        end SMIB_Fault_Partial;

        partial model SMIB_VarLoad_Partial
          "Partial model containing the network elements and a non stochastic load"

          import Modelica.Constants.pi;
          OpenIPSL.Electrical.Buses.Bus GEN1(V_b=13800, displayPF=true)
                 annotation (Placement(transformation(extent={{-54,-12},{-30,12}})));
          OpenIPSL.Electrical.Buses.Bus BUS1(V_b=13800, displayPF=true)
                 annotation (Placement(transformation(extent={{-18,-12},{6,12}})));
          OpenIPSL.Electrical.Buses.Bus GEN2(V_b=13800, displayPF=true)
                 annotation (Placement(transformation(extent={{82,-12},{106,12}})));
          OpenIPSL.Electrical.Branches.PSAT.TwoWindingTransformer transformer(
            rT=0,
            xT=0.15,
            Sn=10000000,
            V_b=13800,
            Vn=13800)  annotation (Placement(transformation(extent={{-34,-10},{-14,10}})));
          OpenIPSL.Electrical.Branches.PwLine line_1(
            G=0,
            B=0,
            R=0.001,
            X=0.2) annotation (Placement(transformation(extent={{34,14},{52,26}})));
          OpenIPSL.Electrical.Branches.PwLine line_2(
            G=0,
            B=0,
            R=0.0003,
            X=0.06) annotation (Placement(transformation(extent={{4,-26},{22,-14}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=10000000, fn=60)
                                                                        annotation (Placement(transformation(extent={{-136,76},{-82,96}})));
        protected
          parameter Real S_b=SysData.S_b;
        public
          OpenIPSL.Electrical.Buses.Bus LOAD(V_b=13800, displayPF=true)
                 annotation (Placement(transformation(extent={{16,-32},{40,-8}})));
          OpenIPSL.Electrical.Branches.PwLine line_3(
            G=0,
            B=0,
            X=0.07,
            R=0.00035) annotation (Placement(transformation(extent={{38,-26},{56,-14}})));
          OpenIPSL.Electrical.Buses.Bus BUS2(V_b=13800, displayPF=true)
                 annotation (Placement(transformation(extent={{48,-32},{72,-8}})));
          OpenIPSL.Electrical.Branches.PwLine line_4(
            G=0,
            B=0,
            X=0.07,
            R=0.00035) annotation (Placement(transformation(extent={{64,-26},{82,-14}})));
          OpenIPSL.Electrical.Branches.PwLine line_5(
            G=0,
            B=0,
            R=0,
            X=0.00001) annotation (Placement(transformation(
                extent={{-9,-6},{9,6}},
                rotation=270,
                origin={35,-36})));
          OpenIPSL.Electrical.Buses.Bus BUS3(V_b=13800, displayPF=true)
                 annotation (Placement(transformation(
                extent={{-12,-12},{12,12}},
                rotation=90,
                origin={36,-66})));
          OpenIPSL.Electrical.Machines.PSSE.GENCLS infiniteGen(
            angle_0=0,
            Q_0=0.7185408e6,
            P_0=2.569692e1) annotation (Placement(transformation(extent={{120,-10},{100,10}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation variableLoad(
            V_b=13800,
            v_0=0.9912454,
            angle_0=-0.010623773778329,
            P_0=5000000,
            Q_0=1000000,
            characteristic=2,
            d_P=0,
            t1=0,
            d_t=0) annotation (Placement(transformation(extent={{26,-98},{46,-80}})));
          OpenIPSL.Electrical.Sensors.SoftPMU pMU annotation (
              Placement(transformation(
                extent={{-7,-8},{7,8}},
                rotation=-90,
                origin={36,-55})));
        equation
          connect(GEN1.p, transformer.p) annotation (Line(points={{-42,0},{-35,0}}, color={0,0,255}));
          connect(transformer.n, BUS1.p) annotation (Line(points={{-13,0},{-6,0}}, color={0,0,255}));
          connect(BUS1.p, line_1.p) annotation (Line(points={{-6,0},{-6,0},{2,0},{2,20},{34.9,20}}, color={0,0,255}));
          connect(line_1.n, GEN2.p) annotation (Line(points={{51.1,20},{88,20},{88,0},{94,0}}, color={0,0,255}));
          connect(line_2.p, line_1.p) annotation (Line(points={{4.9,-20},{2,-20},{2,20},{34.9,20}}, color={0,0,255}));
          connect(LOAD.p, line_2.n) annotation (Line(points={{28,-20},{21.1,-20}}, color={0,0,255}));
          connect(LOAD.p, line_3.p) annotation (Line(points={{28,-20},{28,-20},{38.9,-20}}, color={0,0,255}));
          connect(BUS2.p, line_3.n) annotation (Line(points={{60,-20},{55.1,-20}}, color={0,0,255}));
          connect(line_4.p, BUS2.p) annotation (Line(points={{64.9,-20},{62.45,-20},{60,-20}}, color={0,0,255}));
          connect(line_4.n, GEN2.p) annotation (Line(points={{81.1,-20},{88,-20},{88,0},{94,0}}, color={0,0,255}));
          connect(line_5.p, line_3.p) annotation (Line(points={{35,-27.9},{35,-20},{38.9,-20}}, color={0,0,255}));
          connect(infiniteGen.p, GEN2.p) annotation (Line(points={{100,0},{97,0},{94,0}}, color={0,0,255}));
          connect(variableLoad.p, BUS3.p) annotation (Line(points={{36,-80},{36,-66}}, color={0,0,255}));
          connect(pMU.p, line_5.n) annotation (Line(points={{36,-50.1},{36,-44.1},{35,-44.1}}, color={0,0,255}));
          connect(pMU.n, BUS3.p) annotation (Line(points={{36,-59.9},{36,-62},{36,-66}}, color={0,0,255}));
          annotation (
            Placement(transformation(extent={{220,-100},{232,-88}})),
            Diagram(coordinateSystem(extent={{-140,-100},{120,100}}, preserveAspectRatio=false), graphics={Text(
                  extent={{-110,80},{110,60}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fontSize=15,
                  textStyle={TextStyle.Bold},
                  textString="Single-machine Infinite Bus Model")}),
            Icon(coordinateSystem(extent={{-140,-100},{120,100}})),
            experiment(
              StopTime=10,
              Interval=0.0001,
              Tolerance=1e-006,
              __Dymola_fixedstepsize=0.0001,
              __Dymola_Algorithm="Rkfix2"),
            __Dymola_experimentSetupOutput,
            Documentation(revisions="<html>
<!--DISCLAIMER-->
<p>OpenIPSL:</p>
<p>Copyright 2016 SmarTS Lab (Sweden)</p>
<ul>
<li>SmarTS Lab, research group at KTH: <a href=\"https://www.kth.se/en\">https://www.kth.se/en</a></li>
</ul>
<p>The authors can be contacted by email: <a href=\"mailto:luigiv@kth.se\">luigiv@kth.se</a></p>

<p>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. </p>
<p>If a copy of the MPL was not distributed with this file, You can obtain one at <a href=\"http://mozilla.org/MPL/2.0/\"> http://mozilla.org/MPL/2.0</a>.</p>

<p></p>
<p>iPSL:</p>
<p>Copyright 2015-2016 RTE (France), SmarTS Lab (Sweden), AIA (Spain) and DTU (Denmark)</p>
<ul>
<li>RTE: <a href=\"http://www.rte-france.com\">http://www.rte-france.com</a></li>
<li>SmarTS Lab, research group at KTH: <a href=\"https://www.kth.se/en\">https://www.kth.se/en</a></li>
<li>AIA: <a href=\"http://www.aia.es/en/energy\"> http://www.aia.es/en/energy</a></li>
<li>DTU: <a href=\"http://www.dtu.dk/english\"> http://www.dtu.dk/english</a></li>
</ul>
<p>The authors can be contacted by email: <a href=\"mailto:info@itesla-ipsl.org\">info@itesla-ipsl.org</a></p>

<p>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. </p>
<p>If a copy of the MPL was not distributed with this file, You can obtain one at <a href=\"http://mozilla.org/MPL/2.0/\"> http://mozilla.org/MPL/2.0</a>.</p>
</html>
",         info="<html>
<table cellspacing=\"1\" cellpadding=\"1\" border=\"1\">
<tr>
<td><p>Reference</p></td>
<td><p>SMIB PSAT, d_kundur2.mdl, PSAT</p></td>
</tr>
<tr>
<td><p>Last update</p></td>
<td>February 2016</td>
</tr>
<tr>
<td><p>Author</p></td>
<td><p>Maxime Baudette, Ahsan Murad, SmarTS Lab, KTH Royal Institute of Technology</p></td>
</tr>
<tr>
<td><p>Contact</p></td>
<td><p><a href=\"mailto:luigiv@kth.se\">luigiv@kth.se</a></p></td>
</tr>
</table>
</html>"));
        end SMIB_VarLoad_Partial;

        partial model MachineTestBase
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            X=0.1,
            R=0.01,
            G=0,
            B=0.0005) annotation (Placement(transformation(origin={20,-12},
                  extent={{-6,-6},{6,6}})));
          OpenIPSL.Electrical.Branches.PwLine pwLinewithOpening1(
            G=0,
            R=0.01,
            X=0.1,
            opening=1,
            B=0.0005,
            t1=2,
            t2=2.15) annotation (Placement(transformation(origin={60,12}, extent=
                    {{-6,-6},{6,6}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            G=0,
            R=0.01,
            X=0.1,
            B=0.0005) annotation (Placement(transformation(origin={20,12}, extent=
                   {{-6,-6},{6,6}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            G=0,
            R=0.01,
            X=0.1,
            B=0.0005) annotation (Placement(transformation(origin={62,-14},
                  extent={{-6,-6},{6,6}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            G=0,
            R=0.01,
            X=0.1,
            B=0.0005) annotation (Placement(transformation(origin={60,36}, extent=
                   {{-5.99999,-5.99998},{5.99999,6}})));
          OpenIPSL.Electrical.Loads.PSAT.PQ pwLoadPQ1(P_0=8000000, Q_0=6000000)
            annotation (Placement(transformation(
                origin={94,24},
                extent={{-6,-6},{6,6}},
                rotation=90)));
          OpenIPSL.Electrical.Loads.PSAT.PQvar pwLoadPQ2(P_0=8000000, Q_0=6000000)
            annotation (Placement(transformation(
                origin={94.0335,-14.2889},
                extent={{-6.2889,-6.0335},{6.2889,6.0335}},
                rotation=90)));
          inner OpenIPSL.Electrical.SystemBase SysData
            annotation (Placement(transformation(extent={{-100,80},{-60,100}})));
          OpenIPSL.Electrical.Buses.Bus bus1
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          OpenIPSL.Electrical.Buses.Bus bus2
            annotation (Placement(transformation(extent={{30,-10},{50,10}})));
          OpenIPSL.Electrical.Buses.Bus bus3
            annotation (Placement(transformation(extent={{70,14},{90,34}})));
          OpenIPSL.Electrical.Buses.Bus bus4
            annotation (Placement(transformation(extent={{70,-24},{90,-4}})));
        equation
          connect(pwLine2.p, pwLine1.p) annotation (Line(points={{14.6,12},{6,12},{6,-12},
                  {14.6,-12}}, color={0,0,255}));
          connect(pwLine2.n, pwLine1.n) annotation (Line(points={{25.4,12},{34,12},{34,
                  -12},{25.4,-12}}, color={0,0,255}));
          connect(pwLine4.p, pwLinewithOpening1.p) annotation (Line(points={{54.6,36},
                  {48,36},{48,12},{54.6,12}},color={0,0,255}));
          connect(pwLine4.n, pwLinewithOpening1.n) annotation (Line(points={{65.4,36},
                  {72,36},{72,12},{65.4,12}},color={0,0,255}));
          connect(bus1.p, pwLine1.p) annotation (Line(points={{0,0},{6,0},{6,-12},{14.6,-12}}, color={0,0,255}));
          connect(bus2.p, pwLine1.n) annotation (Line(points={{40,0},{34,0},{34,-12},{
                  25.4,-12}}, color={0,0,255}));
          connect(bus2.p, pwLinewithOpening1.p) annotation (Line(points={{40,0},{44,0},
                  {44,20},{48,20},{48,12},{54.6,12}}, color={0,0,255}));
          connect(pwLine3.p, pwLinewithOpening1.p) annotation (Line(points={{56.6,-14},
                  {44,-14},{44,20},{48,20},{48,12},{54.6,12}}, color={0,0,255}));
          connect(bus3.p, pwLoadPQ1.p)
            annotation (Line(points={{80,24},{88,24},{88,24}},   color={0,0,255}));
          connect(bus3.p, pwLinewithOpening1.n) annotation (Line(points={{80,24},{72,24},
                  {72,12},{65.4,12}}, color={0,0,255}));
          connect(bus4.p, pwLoadPQ2.p) annotation (Line(points={{80,-14},{88,-14},{88,-14.2889}},
                                       color={0,0,255}));
          connect(pwLine3.n,bus4. p) annotation (Line(points={{67.4,-14},{67.4,-14},{80,
                  -14}}, color={0,0,255}));
        end MachineTestBase;
      end Partial;

    end Networks;

    package Functions
      extends Modelica.Icons.FunctionsPackage;

      function createModelForPowerFlow
        input String projectRootFolder;
        input String modelName;
        input String genBusName; // Generator bus where to perform sweep in P
        input String loadBusName; // Load bus where to perform sweep in P
        input Integer Pmin; // Min. value of P for parameter sweep
        input Integer Pmax; // Max. value of P for parameter sweep
        input Integer Pstep; // Step of parameter sweep

      protected
        String targetDir = "";
        String generator = "";
        String childFullName = "";
        String machinesSourceRecordPath = "";
        String [:] records;
        String [:] classList;
        String [:] listComps;
        String [:] genNames;
        Integer len = 0;
        Integer lastDot = 0;
        String recordClassName = "";
        Boolean boolRes;
        //String txtToPrint = "";
      algorithm
        // Remove create_records and run_pf batch files if they exist
        Modelica.Utilities.Files.removeFile(joinPath(projectRootFolder,
          "create_records.bat"));
        Modelica.Utilities.Files.removeFile(joinPath(projectRootFolder,
          "run_pf.bat"));

        // Unload SMIB package if it was loaded
        boolRes := eraseClasses({"SMIB"});

        // Remove "_new" folder and its contents
        Modelica.Utilities.Files.remove(joinPath(joinPath(projectRootFolder,
          "models"), "_new"));

        // Create basic folder structure
        Modelica.Utilities.Files.createDirectory(joinPath(projectRootFolder,
          "models"));
        Modelica.Utilities.Files.createDirectory(joinPath(joinPath(
          projectRootFolder, "models"), "_new"));

        // Create packages
        ModelManagement.Structure.AST.Classes.CreateClass("",
          "SMIB", "SMIB package for PF", "package", false);
        ModelManagement.Structure.AST.Classes.CreateClass("SMIB",
          "Generation_Units", "Generation Units for the SMIB model",
          "package", false);
        ModelManagement.Structure.AST.Classes.CreateClass("SMIB.Generation_Units",
          "Records", "Parameter Records for Generating Units",
          "package", false);

        // Find names of "Generating Unit" components in the model
        genNames := findComponentByClassKeyword(modelName, "Generat");

        // Locate machines data records
        compAtts := ModelManagement.Structure.AST.Components.GetComponentAttributes(
            modelName, genNames[1]);
        machinesSourceRecordPath := Modelica.Utilities.Strings.substring(
          compAtts.fullTypeName, 1, Modelica.Utilities.Strings.findLast(
            compAtts.fullTypeName, ".")-1)+".Records";

        // Add data records to the Records package
        records := ModelManagement.Structure.AST.Misc.ClassesInPackage(
          machinesSourceRecordPath);
        for i in 1:((size(records))[1]) loop

          ModelManagement.Structure.AST.Misc.CopyClass(
            machinesSourceRecordPath + "." + records[i],
            "SMIB.Generation_Units.Records."+records[i]);
        end for;

        // Copy Generating Unit classes and update component types
        ModelManagement.Structure.AST.Misc.CopyClass(modelName, "SMIB.SMIB");
        for i in 1:((size(genNames))[1]) loop
          generator := genNames[i];
          compAtts := ModelManagement.Structure.AST.Components.GetComponentAttributes(
            modelName, generator);
          ModelManagement.Structure.AST.Misc.CopyClass(
          compAtts.fullTypeName,
          "SMIB.Generation_Units.Gen"+String(i));
          ModelManagement.Structure.AST.Components.SetComponentType("SMIB.SMIB",
          generator, "Generation_Units.Gen"+String(i));

          // update record references inside component
          listComps := ModelManagement.Structure.AST.Classes.ComponentsInClass(
            compAtts.fullTypeName);
          for j in 1:((size(listComps))[1]) loop
            compAtts2 := ModelManagement.Structure.AST.Components.GetComponentAttributes(
              compAtts.fullTypeName, listComps[j]);

              // Verify if component is a record and update its class name
              if (Modelica.Utilities.Strings.find(compAtts2.fullTypeName, "Records")>0) then
                len := Modelica.Utilities.Strings.length(compAtts2.fullTypeName);
                lastDot := Modelica.Utilities.Strings.findLast(compAtts2.fullTypeName,
                  ".");
                recordClassName :=
                  Modelica.Utilities.Strings.substring(compAtts2.fullTypeName,
                    lastDot+1, len);
                ModelManagement.Structure.AST.Components.SetComponentType(
                  "SMIB.Generation_Units.Gen"+String(i), listComps[j],
                  "Records."+recordClassName);
              end if;
            //Modelica.Utilities.Streams.print(listComps[j]);
          end for;
        end for;

        // Create root folder and save files
        targetDir := projectRootFolder + "\\models\\_new\\SMIB";
        Modelica.Utilities.Streams.print(targetDir);
        system("mkdir " + targetDir);
        createPackageOrderFile("SMIB", targetDir);
        saveThisClassOnly("SMIB", "", targetDir);
        saveThisClassOnly("SMIB.SMIB", "SMIB", targetDir);

        // Create Generation_Units folder and save package.mo and package.order
        targetDir := projectRootFolder + "\\models\\_new\\SMIB\\Generation_Units";
        system("mkdir " + targetDir);
        createPackageOrderFile("SMIB.Generation_Units", targetDir);
        saveThisClassOnly("SMIB.Generation_Units", "SMIB", targetDir);

        // Save Model files within Generation_Units
        classList := ModelManagement.Structure.AST.Misc.ClassesInPackage(
          "SMIB.Generation_Units");
        for i in 1:((size(classList))[1]) loop
          childFullName := "SMIB.Generation_Units." + classList[i];
          if not
                (isPackage(childFullName)) then
            saveThisClassOnly(childFullName, "SMIB.Generation_Units", targetDir);
          end if;
        end for;

        // Create Records folder and save package.mo and package.order
        targetDir := projectRootFolder +
          "\\models\\_new\\SMIB\\Generation_Units\\Records";
        system("mkdir " + targetDir);
        createPackageOrderFile("SMIB.Generation_Units.Records", targetDir);
        saveThisClassOnly("SMIB.Generation_Units.Records", "SMIB.Generation_Units",
          targetDir);

        // Save Model files within Records
        classList := ModelManagement.Structure.AST.Misc.ClassesInPackage(
          "SMIB.Generation_Units.Records");
        for i in 1:((size(classList))[1]) loop
          childFullName := "SMIB.Generation_Units.Records." + classList[i];
          if not
                (isPackage(childFullName)) then
            saveThisClassOnly(childFullName, "SMIB.Generation_Units.Records",
              targetDir);
          end if;
        end for;
        eraseClasses({"SMIB"}); // Unload SMIB package

        // Create batch script to execute the python scripts inside the miniconda
        //  environment
        Modelica.Utilities.Streams.print("cd \"" + projectRootFolder + "\"\n" +
          "call conda activate smib_tutorial\n" +
          "python create_records.py --version 2.0.0\ncall conda deactivate\n",
          projectRootFolder + "\\create_records.bat");
        Modelica.Utilities.Streams.print("cd \"" + projectRootFolder + "\"\n" +
          "pause\ncall conda activate smib_tutorial\n" +
          "python run_pf.py SMIB --version 2.0.0 --var_genbus " + genBusName +
          " --var_loadbus " + loadBusName + " --pmin " + String(Pmin) + " --pmax " +
          String(Pmax) + " --pstep " + String(Pstep) + "\ncall conda deactivate\n" +
          "pause\n",
          projectRootFolder + "\\run_pf.bat");

        // Execute the scripts to create and populate the records
        Execute(projectRootFolder + "\\create_records.bat");
        Execute(projectRootFolder + "\\run_pf.bat");

        // Load the SMIB package
        openModel(projectRootFolder + "\\models\\_new\\SMIB\\package.mo",
          changeDirectory=false);
        eraseClasses({"SMIB"});
        openModel(projectRootFolder + "\\models\\_new\\SMIB\\package.mo",
          changeDirectory=false);

      end createModelForPowerFlow;

      function saveThisClassOnly
        "Saves only data from this class (without composition) as done by Dymola when asked for saving in independent files"
        input String className;
        input String parentName;
        input String targetDirectory;
      protected
        String classText = "";
        String classSName = "";
        String textToSave = "";
        String initialLine = "";
        String finalLine = "";
        String anots = "";
      algorithm

        classSName := getClassShortName(className);
        if isPackage(className) then
          classText := getClassText(className);
          initialLine := Modelica.Utilities.Strings.substring(classText,
            Modelica.Utilities.Strings.find(classText, "package"),
            Modelica.Utilities.Strings.find(classText, "\n"));
          finalLine := "end " + classSName + ";";
          anots := ModelManagement.Structure.AST.Classes.GetAnnotation(
            className, "uses");
          textToSave := "within " + parentName + ";\n" + initialLine;
          if (Modelica.Utilities.Strings.length(anots) <> 0) then
            textToSave := textToSave + "annotation (" + anots + ");\n";
          end if;
          textToSave := textToSave + finalLine;
          //Modelica.Utilities.Streams.print(textToSave);
          Modelica.Utilities.Streams.print(textToSave,
            targetDirectory + "\\package.mo");
        else
          classText := getClassText(className, true);
          textToSave := "within " + parentName + ";\n" + classText;
          Modelica.Utilities.Streams.print(textToSave,
            targetDirectory + "\\" + classSName + ".mo");
        end if;

      end saveThisClassOnly;

      function printFullClassStructure
        "Print the Hierarchical Class Structure starting from the specified class"
        input String className;
        output String classStr = "";
      protected
        String parentPath = "";
        String childFullName = "";
        String newItem = "";
        String [:] classList;

      algorithm
        //Modelica.Utilities.Streams.print(className + " is a " + getClassType(className) + "!");
        //classStr := className + " is a " + getClassType(className) + "!\n";
        classList := ModelManagement.Structure.AST.Misc.ClassesInPackage(className);
        parentPath := className;
        for i in 1:((size(classList))[1]) loop
          childFullName := parentPath + "." + classList[i];
          //Modelica.Utilities.Streams.print(childFullName + " is a " + getClassType(childFullName) + "!");
          classStr := classStr + childFullName + " is a " + getClassType(childFullName) + "!\n";
          if isPackage(childFullName) then
            //Modelica.Utilities.Streams.print("Hola!");
            classStr := classStr + printFullClassStructure(childFullName);
          end if;
        end for;

      end printFullClassStructure;

      function getClassType "It returns the type of the specified class"
        input String className;
        output String classType;
      algorithm
        classAtts := ModelManagement.Structure.AST.Classes.GetClassAttributes(
          className);
        classType := classAtts.restricted;
      end getClassType;

      function isPackage "Returns true if class is a package"
        input String className;
        output Boolean result;
      algorithm
        result := false;
        if Modelica.Utilities.Strings.isEqual(getClassType(className), "package") then
          result := true;
        end if;
      end isPackage;

      function createPackageOrderFile
        "Creates a package order file for the given package"
        input String className;
        input String targetDirectory;
      protected
        String [:] classList;
        String textToSave = "";
      algorithm
        classList := ModelManagement.Structure.AST.Misc.ClassesInPackage(className);
        for i in 1:((size(classList))[1]) loop
          textToSave := textToSave + classList[i] + "\n";
        end for;
        //Modelica.Utilities.Streams.print(textToSave);
        Modelica.Utilities.Streams.print(textToSave,
          targetDirectory + "\\package.order");

      end createPackageOrderFile;

      function getClassShortName
        "Returns the short name of a class given its full name"
        input String className;
        output String classSName = "";
      algorithm
        if (Modelica.Utilities.Strings.findLast(className, ".")==0) then
          classSName := className;
        else
          classSName := Modelica.Utilities.Strings.substring(className,
            Modelica.Utilities.Strings.findLast(className, ".")+1,
            Modelica.Utilities.Strings.length(className));
        end if;
      end getClassShortName;

      function joinPath
        "Creates a full file path from provided path components"
        input String basePath =  "";
        input String relativePath =  "";
        output String fullpath = "";
      protected
        Integer len = 0;
        String finalChr = "";
        String dirSep = "";
      algorithm
        len := Modelica.Utilities.Strings.length(basePath);
        finalChr :=Modelica.Utilities.Strings.substring(basePath, len);
        if (Modelica.Utilities.Strings.find(basePath, "/") > 0) then
          dirSep := "/";
        else
          dirSep := "\\";
        end if;
        if (Modelica.Utilities.Strings.isEqual(finalChr, dirSep)) then
          fullpath :=basePath + relativePath;
        else
          fullpath :=basePath + dirSep + relativePath;
        end if;
      end joinPath;

      function findComponentByClassKeyword
        "Returns an array of components which are instances of a class containing the specified string"
        input String modelName;
        input String searchString;
        output String [:] objNames;
      protected
        ModelManagement.Structure.AST.Components.ComponentAttributes compData [:];
      algorithm
        compData :=
          ModelManagement.Structure.AST.Classes.ComponentsInClassAttributes(
            modelName);
        //for size(arrTest1, 1)
        for i in 1:size(compData, 1) loop
          if (Modelica.Utilities.Strings.find(compData[i].fullTypeName,
            searchString)>0) then
            if size(objNames, 1) > 0 then
              objNames := cat(1, objNames, {compData[i].name});
            else
              objNames := {compData[i].name};
            end if;
          end if;
        end for;
        //tortuga := Modelica.Utilities.Strings.find(arrTest1[:].fullTypeName, "Generat");
      end findComponentByClassKeyword;

      function copyPowerFlowRecords
        "Copy the power flow data records to the package specified by the input"
        input String targetPackage = "";
      protected
        String pf_data_text = "";
      algorithm
        // Copy the PF_Data package from SMIB to targetPackage
        ModelManagement.Structure.AST.Misc.CopyClass("SMIB.PF_Data",
          targetPackage + ".PF_Data");

        // Update references in {targetPackage}.PF_Data
        pf_data_text := getClassText(targetPackage + ".PF_Data", true);
        pf_data_text := Modelica.Utilities.Strings.replace(pf_data_text,
          "SMIB.PF_Data", targetPackage + ".PF_Data");
        setClassText(targetPackage, pf_data_text);

        // Unload SMIB package
        eraseClasses({"SMIB"});
      end copyPowerFlowRecords;
    end Functions;

    package Interfaces
      "Interfaces for Multi-Domain modeling of Thermo-Electrical systems"
      model MSL_SimpleInterface
        Modelica.Mechanics.Rotational.Components.Inertia HP(J=J5)
          annotation (Placement(transformation(extent={{-114,-10},{-94,10}})));
        Modelica.Mechanics.Rotational.Components.Spring shaft45(c=K45)
          annotation (Placement(transformation(extent={{-88,-10},{-68,10}})));
        Modelica.Mechanics.Rotational.Components.Inertia IP(J=J4)
          annotation (Placement(transformation(extent={{-62,-10},{-42,10}})));
        Modelica.Mechanics.Rotational.Components.Spring shaft34(c=K34)
          annotation (Placement(transformation(extent={{-36,-10},{-16,10}})));
        Modelica.Mechanics.Rotational.Components.Inertia LPB(J=J3)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Modelica.Mechanics.Rotational.Components.Spring shaft23(c=K23)
          annotation (Placement(transformation(extent={{16,-10},{36,10}})));
        Modelica.Mechanics.Rotational.Components.Inertia LPA(J=J2)
          annotation (Placement(transformation(extent={{42,-10},{62,10}})));
        Modelica.Mechanics.Rotational.Components.Spring shaft12(c=K12)
          annotation (Placement(transformation(extent={{68,-10},{88,10}})));
        Modelica.Mechanics.Rotational.Components.Inertia Gen(J=J1)
          annotation (Placement(transformation(extent={{94,-10},{114,10}})));
        parameter Modelica.Units.SI.Inertia J5 "Moment of inertia";
        parameter Modelica.Units.SI.RotationalSpringConstant K45
          "Spring constant";
        parameter Modelica.Units.SI.Inertia J4
          "Moment of inertia of IP turbine";
        parameter Modelica.Units.SI.RotationalSpringConstant K34
          "Spring constant";
        parameter Modelica.Units.SI.Inertia J3 "Moment of inertia";
        parameter Modelica.Units.SI.RotationalSpringConstant K23
          "Spring constant";
        parameter Modelica.Units.SI.Inertia J2 "Moment of inertia";
        parameter Modelica.Units.SI.RotationalSpringConstant K12
          "Spring constant";
        parameter Modelica.Units.SI.Inertia J1 "Moment of inertia";
        Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_HP
                          "Flange of left shaft"
          annotation (Placement(transformation(extent={{-130,-10},{-110,10}})));
        Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_Gen
          "Flange of right shaft"
          annotation (Placement(transformation(extent={{110,-10},{130,10}})));
      equation
        connect(HP.flange_b, shaft45.flange_a)
          annotation (Line(points={{-94,0},{-88,0}}, color={0,0,0}));
        connect(shaft45.flange_b, IP.flange_a)
          annotation (Line(points={{-68,0},{-62,0}}, color={0,0,0}));
        connect(IP.flange_b, shaft34.flange_a)
          annotation (Line(points={{-42,0},{-36,0}}, color={0,0,0}));
        connect(LPB.flange_b, shaft23.flange_a)
          annotation (Line(points={{10,0},{16,0}}, color={0,0,0}));
        connect(shaft23.flange_b, LPA.flange_a)
          annotation (Line(points={{36,0},{42,0}}, color={0,0,0}));
        connect(LPA.flange_b, shaft12.flange_a)
          annotation (Line(points={{62,0},{68,0}}, color={0,0,0}));
        connect(LPB.flange_a, shaft34.flange_b)
          annotation (Line(points={{-10,0},{-16,0}}, color={0,0,0}));
        connect(shaft12.flange_b, Gen.flange_a)
          annotation (Line(points={{88,0},{94,0}}, color={0,0,0}));
        connect(HP.flange_a, flange_HP)
          annotation (Line(points={{-114,0},{-120,0}}, color={0,0,0}));
        connect(Gen.flange_b, flange_Gen)
          annotation (Line(points={{114,0},{120,0}}, color={0,0,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -120,-100},{120,100}}), graphics={Rectangle(
                extent={{-120,100},{120,-100}},
                lineColor={0,0,255},
                lineThickness=0.5)}), Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-120,-100},{120,100}}),
              graphics={Line(
                points={{102,12},{114,18}},
                color={0,0,255},
                arrow={Arrow.None,Arrow.Open}), Text(
                extent={{102,28},{110,20}},
                textColor={0,0,255},
                textString="Te",
                textStyle={TextStyle.Bold})}));
      end MSL_SimpleInterface;
      extends Modelica.Icons.InterfacesPackage;

      model TM2EPConverter
        "Interface between OpenIPSL generators and detailed turbine models from other libraries"
        import Modelica.Constants.pi;
        outer OpenIPSL.Electrical.SystemBase SysData(S_b=960000000, fn=30) "Must add this line in all models";
        parameter Integer Np=2;
        parameter OpenIPSL.Types.ApparentPower M_b "Machine base power";
        parameter Real ratio=1 "Transmission ratio (flange_a.phi/flange_b.phi)";
        parameter Real efficiency=1 "Generator efficiency";
        Modelica.Mechanics.Rotational.Interfaces.Flange_a shaft "Left flange of shaft" annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Modelica.Blocks.Interfaces.RealOutput PMECH annotation (Placement(transformation(extent={{100,40},{120,60}}), iconTransformation(extent={{100,40},{120,60}})));
        Modelica.Blocks.Interfaces.RealInput SPEED annotation (Placement(transformation(extent={{120,-70},{80,-30}}), iconTransformation(extent={{100,-60},{80,-40}})));

        Real omega_m;
        Real omega_e;
      equation
        //omega_m = der(shaft.phi);
        omega_m = (2*SysData.fn*pi)*(1+SPEED)*(2/Np);
        omega_e = omega_m*(Np/2);
        SPEED = der(shaft.phi);
        //SPEED = omega_e/(2*SysData.fn*pi) - 1;
        PMECH = omega_e*shaft.tau*efficiency/(M_b);
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
        Rectangle(
          extent={{-100,100},{100,-100}},
          lineColor={28,108,200},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-98,72},{-42,66}},
          lineColor={0,0,0},
          fillPattern=FillPattern.HorizontalCylinder,
          fillColor={135,135,135}),
        Line(
          points={{-84,74},{-84,86},{-52,86},{-52,72}},
          color={0,0,0},
          thickness=1),
        Rectangle(
          extent={{-76,90},{-60,82}},
          lineColor={28,108,200},
          fillPattern=FillPattern.Sphere,
          fillColor={255,0,0}),
        Polygon(
          points={{-44,82},{-44,56},{-62,66},{-62,72},{-44,82}},
          fillColor={217,90,16},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None,
          lineColor={0,0,0}),
        Polygon(
          points={{-94,82},{-94,56},{-76,66},{-76,72},{-94,82}},
          fillColor={217,90,16},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None,
          lineColor={0,0,0}),
        Bitmap(
          extent={{30,-96},{86,-30}},
          imageSource=
        "",
          fileName="modelica://CHP_MultiDomain/gensal.png"),
        Bitmap(
          extent={{-72,-64},{72,66}},
          imageSource=
        "iVBORw0KGgoAAAANSUhEUgAAAUQAAAJMCAYAAACCUd82AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAABISQAASEkB6uReKgAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAACAASURBVHic7L13nCRXee/9O5U693SYnNPO5qRdSSstAkkgCSQRBUYyBkQ0BmMcsOElXByuzb2Xa/vjcOF1wrxc27wYDDbCvtgGbAQIJSR50UpaaaXVhsmxp3NXOPePc6rqVHV1z8yG2fVuP6tWVzqnTvVUfev3nPAcQilFy1oWZIQQAiDMPxHh2/4AwCqA5ymlhYtSyJa17DwaaQGxZRx8cQAJAEkAMbggJOvIogjgYUqpecEKuUEjhEhg11GjlFYvdnla9p/DWkC8wiwAfkm+Lp1j1i9SSo+fYx7nbPz69gHIwIV5BUBO+OQppdbFKWHLLmVrAfEKMUJIN4BBbBB+sXhc2bpjd2dP30B3OpPtjscT3eFotCsUCnfnV3PHPvt7n/4sPzRPKX3oQpR9I0YImQC7zmZGAeQhQJJSWr7QZWvZpW/KxS5Ayy6sccW0B0BHs+M6OrsjV1173Vj/wPBEWzo9FgpHejRV65YVpR2UEgr24mTvTwpKKRRF6QRgAzFOCFEppfoFvJymRghRAPTb6zv27Os7dvTJKdM0/G99AlcdD/C0JQAL/LPSUpBXprUU4mVuhJAEgGvFbR1d3ZED1x4e6x8cmkilsxOxWGyLGgoNgIKBjwKgHIGUgv1jy6AApc4WfPPvvvyOxx750Rme9RFK6dzmXZ3XCCH9ALYBwNYdu7tvuf21X7SoWa6UK8cK+dwzC3NzTx176idPT54+mVsjKxPAEjggW3WQV461FOLlbyl74TVvvOeqq665/gOapg0AIA7wKBUA6G6zsSeBQNM0qKoGLaRhNZdDtVoFQLFt1559AhDTAC4aEAH02At7rjp4C0AJISQaiUT2h8OR/e0dXdi2czd0XZ8ul4pP51aWn56ePP30kccePV6rVcUGIRlMUXcAACEkDwbH2VZr+uVtLSBe/ua4ANFYLK5p2qCj9kC56GPKT1EUhKNRRCJRhENhqJoGVdOgKAoDJCcmIWcwNzMFSoFsR+d+AN/kp8hs+tVxI4TEALQBgCRJJJPtuEUsMzO2rihKTzzR1hNPJG/u6x/CVddcVyjmC4/Oz808eOTxRx6ZmZpc9WWf4J9hQsgJACdoy7W6LK0FxMvfnDq9YqFQcGEIJBJtiMSiCEeiiEZjUBTVdYc5TKitFp0PEIvHHZDGYvG9kiQRy7IogBghRKOU1i7CdTrq8Lobbtoly0oPYxZBe2cXKpUyKuUSalVWNJdnFISQeCyRuDGWSNw4PDpOK5XyUyvLSw+dOP7sgz954scnhHMQAKNgDTGLm3RdLdtEawHx8jfDXijkVwugFigFVFXDyPiE6xqL0IPgRgsqy94fjkQBAlCLQpKktoOHXjL88AP32+DIAJjZzAvkDUc9YMCiw6NbbgXYdcbjcaTTWUcFG6aBSqmEcrmESrmEcrkMy7ScOlEKSrRweGdnd8/Ozu6edx649vBsIb/60PPPPfMvjz/y4DF+yhRaQLws7Vz7nrXs0jcDDBTRuZlp1QaeYeiwbOBZ7NuiFii12LolQtKCZVnOOiEE0UjUqXccn9i2TzhfejMvjsPwWgBXAdgXiUYPxJOJGznPkWhrY9dlseuTiIRILIZMewd6+wcxMj6B3v4BtKXTUBSFJbLsxiNAluWutlT6Nf2Dw9cIpw1v5jW2bPOspRAvUyOEJAH0AugEsBeANDszHaO80cSkBizLBAHxqEPA6x6L6zYAKaWIxuPI51dBAaSzHfsBfJ2ferPrEccA7AIQAoD9Bw/tI0QKU4tCUiREo/G6RiOnSoBnEIlGEY5E0N7eiWqthlJ+FcViAeVSiStHitXcyknhnKVNvcKWbZq1FOJlZoTZOICrwfrkxcD/zivLi2XRLTYNw1WF1IK3rpC6alHcxpViNMZBY1mIxmJ7VFWz76UIIWRTFBQhRAOr07Nb0snw6PhB+/oSibb66gD/dVredVVR0JbOoKd/gOVIKagFzM5MvSicutXSfJlaC4iXn6UADMMdtmYCACEkJBEyrOs1w+KtrYZuBLjGXoAwd9Piyy5EwpEICJFAARCJxK65/oYtQhk2SyX28HNJiqK09/T0/mY82TZu130mEm1OeS0Rfr5vq+5lYKFWrQrVBJbx/LPPTArnbQHxMrWWy3z5mQOjaDS6KxQK3WkYxh5CSDsAUi4WEU8mAUphGDUoqhrgKnvdY6dzNnXXQYFILIrC6ioopRgcGdv3w+99x250SAOY2oRr7QGQBQBN0w4OjU1o4GXWQiFoIc3nLgsdzO1rE7/tTumgqFaqzu9Sq+ln9FrN7qdogY2NbtllaC2FePmZ8zdVFGVCkqSXE0I6wBVjpVJ2VKFhGE3cZde9tOyGF597ydxmC6AUqXR2v1CGC64Q+QicLFiVAJFl+aqRsS2svKBIJF112EwVuupQqB6wKGrVivMSqFbLLwqnLrb6IF6+1lKIl5853WzsURWEEKd1uFIpOw86A2ITVejUN8IzesVejkVjTsNLJBrZFY5ElEq5bAAIEUKilNIL2fjQC1cdjnd0drfFkklQaoGAIB5PCA1FfjVoNxgJ/RGdRhYbghXAYtdbLOTPCOdtucuXsbUU4gUwQohMCMkQQi7GyA0RiEWhTFAUBbVKhQPPgqHrDRtNLHEbtVwlZVGnnjEUDkOSJA4VErr6uhu2CeW4YNfOu9p02+dQVfXA8NiE4MrHIMlynQp0vi33uuoaWvi+arXibFtaWJgVTt8C4mVsLYV4Ho0HJR0BMAT+siGELAF45gKrJdGckSmU0rx/Z7VScUahOC4z3BEpohKkvnHNdjqxzjESjSKfWwVA0T84tA/Ak/xUGQBn/Oc/T9bO89cIISFN03YNDI+AWkzjxRNJQR02UoO8ryHb4Chdu1tOrVqDxffOTk/OC+cuomWXrbUU4nky3mhxHRgQxd81A2A/IUTdpKI4CtGyLMdltq1SKXMhRV2X2QqoR7SClZNd52irrGgsDgp2XLItLdYjpsXznmdz3OVQKLSnd2BIVRQVFBSSJCEajQXUi7pq0Fa/lqfu0O28XauxFmZQCsu0jDOnTp4Szt0C4mVsLSCeoxFCIoSQvWBRmu15RnDoJTf2xRNJW4FHAOwiF5AQgjkK0bIs5+G11RFzBS2nUcUzWsWyvK6y5QKwvksO644TjcWcbeFweHsi2Rbip1TBAiKcV+Mvli7wvoeKohwYHt0CCgawWCLBr913Df514Tr93W5qlSrAt1UqpXnTNGx1bwJoBZK9jK0FxLM0QohECBkBU4VO8NVsR2fow5/87Xfe/bZ3//mHPvJfPigkyYKNqrjQ5ihE0zTr6ruqTh0ihWnqgfWFYsuzH4LiukUpNFWDLCv2WGD1qmuu2ymc7kIM47PrDiVFUbKxWHyks7sXrLGbIh5PNleDftj7IU8pqtUqD31GUS4UZuF2sym2Gpgvb2sB8SyMEJIFcAgMcM5v+JZ3vu/6j/7Gf/+L/sHhe0CI0tHVfft7P/jh24Wkw4SQzgtcPAeIhmGUwIICOjur1YpTZ8g6Zlt1oPA3OtQrQ29DTDQadaDT09cvjmu+EA0rvXa+mqYdGBwZg12fqWoatFAoEHKiS1zX3cZTJcC63FiUBa8oFPNT4J3b0WpQueyt1aiyAeMh6reBqRTHDh463P2aN97zgWRb+pC7lVXUb92554OvfPUbXvjWfV97hu/YSQgpii3A59kMYZmC1XnFAQbBaqXsKkSh243bMRu+dbuxBfVRcHiekWgMK8vLAIBEsk2sR0wRQgg9T7KKEBIHa1CJg/c9HBwZd8piq0N3vHLjb7Ehxd9pm3W5YTMIrOZyp4UitOoPL3NrAXGdRghJA9gJIdJJsi2lvusDv/TmweHRuwmReN0ZhUQkEEmCrusghCo33nr7p144fuz9zz59dBksGvNeQsjDlFIj6FznYpRSkxBigStXyvoixu39tWoVsFj7qW7oXuitFdhBgKC7ThGNxsBxCU0LbclkO6JLi/MlsPsrCRY/8HyY2PdwJNvekY4nk05ZY4mEW3ZPS7Kvr2HAN/+tmEKs1Zw0i/OzJ4TzXxIKkTfgRQGsgE3u1fLjz5O1XOY1TAiWcBUEGL7pLe848Inf+b0/GxoZf7sIw7ZUBjv27Mf4xHYWScYCFEVpf8s73/fJaDRmv4CiuLCNLCJoC41cZsu0R6rQBq6x6x5b4nZx3aJQVBWyovBjIe89cPVu4fznpR4xoO/hwcGRcQ5mC5FolPWJDGg08bjEVsA+4aPrNe5OA5ZlGdOTZy6ZFmZCiEoIuRqsAW8CwDUAruXRwlt2HqwFxCbGb7RrIARLyHZ0hj72W5/50OEbX/HfNC3UZx+rhUIYn9iOsYltUDUNkVgcA0Mjbj1bLLb75375/3mfkH07WKSWC2F1o1Vsq1WrwsNvCpCrb0n2N0R4h/CJ2y1ejwgAFJ3dPReiHjHLPxohRFNVbVffwJADOuYuN6g7DGpgaTCUjylopoArlfK8aZp2C7NBKb1oY5h56/pV4NMkCBYHg2JffaqWbdRaQGxghJABsMCjTteRW+943ZaPfOrTn+vs7r3T3iYRgp6+fuzcsw/JVNrzUGY7OtHe0emEkOrs6nnt297z87cKpxnh44zPt3kUor1AKXW63YBSWJYJ0/QqJjQK+RXUV1FokAhHYgDvjxiPJ/31iOfjPhP7Hu7u7usPKaoKi1dRhKPRgC42zUN9Wb7GJPf3YculQnEWbjebi6YOed31fgj34r6D1x6UFcX+XSUA2wkhu/mxLTtLawHRZ4QQjRCyH8BW8N9HUVTyoY9+6u7bX/fGP9RC4QH72HgigR179qG3b4CNF7ZcpWV/+oeGeV89CxQWtu/a86Gbbr1DDJW16wK4POJoFY/LrNdqTt0fpRZMQ2eq0OMauwD0dsnxuqCW4J5GuEKklEJR1dHu3r4kP6WEelWzIQvqezg4POrUFcbiCX6tllN+vxq0AsCIOjXJFCKvTUWxmJ8Ei24DXCQgcsBdBVYXCwB46ctv++nhsS2fvu3O132mp6+/XTi8C0wtJv35tGx91gKiYPzBuxZciQDA3gPXdPzGZ/7of46MTbwLYG9fQgj6BgaxdcduaKGwr47K63ICwMj4BBRVtceJaTfd+qpfHx7bYkPCbmQ5n2/2hgqRtTTbbjObY6S+o7J4Lb4uOYHRcSzIsgLVDSVGduzet1cow7nWI3aB9z2UZTkdicZGO7p6nM7TsUQ8ANi+KDdBLnTd38xiDSpcZeZzq2IL86Y3qBBCZDBl6ADuhptvfXM62/4OSik0LbTn6utu+H/3H7xWnHc7AuBqQsjQ5owDuLysBUSvbQEPRQ8A9/7sL9z09vf+/J/G4ok99rZwJIJtO/egu7e/HiA+94sBhEJWVIyMMVFI2XrnPfe+9xOa5kSZjoJ1xzlf19GwDhEAC21lwdf1xusWW40g6FGGlgcmYXueFQpkOzrPZz2i2Lp8Vf/gMAGYilNVFZoWCgBg8N8kCIKOqjQZELnUxeLi3EVrYRZg6Kjrwze+4o3pbPu77fJRSkEIaRscGfutm269/WdDoZD9UiVg9/J+HlW8Zeu0FhC5CTO3AQA+8du/+yv7Dl77MUmSnS4rHV3d2LF7r2e4WsOP8OCBsjG/fQNDTjePWCy+772/8GvvEYrQgfPXyOJxmf07WUszA5phmPWqkI/jrbuWgNZbS4BihHfQptRCLJYQgZjkD/iGjVcndIB3HVIU5YDdWGVRIBZP+EajBHS6btjA4q0vrek1DlTAsix9dmryovRB5L/VPrhTI+D6l978+mx7x8/afxdFUZ2wbpRSkki2vfHmV776DwaGR3uFrLJgarHVCr1OawGRG2W+njNO1TAMT9+u8S1bMTQ8ym/C+rrCZh+LN0pk2zuQyWZh1+F19fS+8afe+q6bhNOMnqdGloYxEQEIDQeAYej1qpDWu8Z1IbM89Y4Wb1iJOp23FUUZHBgasZWhBOHh3qA5I1NUVR1OZbLZGA/+CkrZHNF1QWCD1GBAYxH1XpNuD9mjFOVKeV4YC25QSqtnWf4NGW+A2guhmuHawy99Q3tn1/vtdVXV0NHVjc7uXmia49BAVdWJfQeu+dzBQ4fFe8p2obNo2ZrWAqLXFvh3x9/85Z/82LJMDhYK3YkM44WB6DY3bIAQ9vUPDCEStV1LCzt27/2V6192s6gMdxJCoud4HYExEW1jXW+Yy2kaRmBXGn+jSb2bWV+PKBECVQuxztCUYsu2HaJK3EYIuZoQcg3/XEUI2UMI2UEImSCEjBJCBgghPYSQDkJImkfFHoTrLh/oHxxho0goRTgcgSTJgXBbV3Qbnwqu1qrONZZLJXEM86a4ywIM7RcJ2Xfw2p/p7O59n11ORVHQ3tkJQghkWUZHV5cT7oznEe3tH/zYzbfd8YuqptkutAJgHyGkfzOu4z+ztYDotUmw8F0Dp158If/cM089YA/xmjxzCqZp1j1E/saUtaAIEAyPjLOACJQChIRuuuX2X+8bGLJdcwWskeWsXExuYsSb4JiIcCPeeIHna2AR6gutOpVlwV9nFwlHHAWczraLQIyA1Ycl+ScDNkVqLxj0RsFa9neCQeEAgFv4t0YIURVV3dvbPwjKHH7E4ol6AAZGt2ng8luiy8/CfoG3MW92CzOH4R64DXpkz/6Db+0fHH4bpZTYMMx2dLHJvZzrAJJtKbR3dkKS3CllY/HEHTffesenU5msfV8RsJfSxCZFXfpPaS0gcuOu6gEAjmv0tS998bFatUopZQP+52ang4Hnqy9sBETnLa+qGBoZA0AAi0JR1J673/7ujyuKYt+oMZxbI4sYE7HIr8/ZWatVHJgbpnf4nqfBhFoB1xMwekXo1sLcZpYuGo3vDyjbRsxx80Kh0K7O7p6QoqmgFJBAEIlGnfI63z41WFdX6IOgCMpateakLeRXxREqF1QhckDtBuusDwBk196rfnpgePRnQCkBhQNDO0K5+AEoQqEwOrp6EbJ7PVAKVdP2XX/DjX/kq1ccxLm/cC9bu+I7cfIbYwKA3dN/FkBHOBy+qlwqvP6H3/s2edkrXglKganJ08i2d4iV2YEfByKegAmW8w0KRGNx9PT1Y/LUSTYeOJY4+I6f+9A7/uyPfvfzvBydYGr1RECx17K6ILGAGxORPfgAQGHqJiw7IILvIXOvB57rca8PHmACrBWe8kgxsix33/XT936MgBIQohIQlRCiUEqpYRoF0zDyhmEUDV3P63qtUKvVCtVKpVApl/LFYqG8MDfbWywWKpZpUkVRDvQPDrNRJKCIxtvgCdBQ922PXxaCVdjrYoAHfg0WpTD0mnNdSwvz4u9+wRSiAEO77pjs3LP/7qHRsbcDIBSAosgeGHrSgw/FJoAkSch2dGJleQnFfJ5tk5X+PfsP/nEikfz1p37yxBGerB2sXvEJehFH31yKdkUDkff9uxpMkQEAZFkOxWKx1wM4DAAPfO+7uPq6GxCORKHXapiZnkR3T9+aKtADRUuEo7s/296BYiGPpcUFgFJ0dffd89o3veXZf/jKX/+AF2eUEJKnlC7Ul76pOS5zYEzEagU2NEzT4KH3xfLBCY7guR74AjvwY0RgEgIkEm3I5Vj0m3g8cZMHsABAgRCEPJ0gDHC6vPBwC6AUsCyzVq1UtDB3xwEgGo87v+t6otsEQVAM7KDXaixKNlgL89zM9AXvg8hhuAvs5QcAZPvuvW8aGh17B6WUABSyoiDb0dEYhs6Cs4a2VBqKoiC3sgRQAgKSGN0y8d9j8cTvP/Kj7/8LTx4HcA0h5FG6edNbXPJ2pbvMWyDAMBqN7mxra/tTVVUP29tq1Qp+9L3vOipjZmoSuqE3rSv0upO+b9+nr38QkQgf5QGKHbv3/trBQ4eH+OkJ2EiWjTayiEFiK/A2sqBWqzpuoml3u/EHgvXVFzrjfxtG1aaOG57taIemamzWOrG1mhXA6VDtVdCUReHxbQelkAjRwmEWjJyCz7msaXXdberK06iBxdcabf8mtlUrlTlKqd3jQKeU1jb4+69pHIY7wTqdAwDZtnPPG4ZHx99FKQilgCTLaG/vhCQpnheT89LwvbTEY2LxODLtnQAh9stA6eru/dUbbr71nUIdogYWzq5l3K5YIPIOq318mbS1td0biUR+jxDSBQCyLDsteY8+9AMUV1dBKWDoBmYmJ9dUiIGfgBZqEILB4VHICmstJYREbrzlVb/e1dNrg/psGlkMMJi2ARjWdb1qqx+AucwWjzDN6hDru9I4IKkb5iYAxQaSACG74ai3fwCdvX3IZNuRae9Apr0D7e2daO/sQntnFzLZdrSlMkgm2xCPxRGJxhAKh6GqKmRZYXWeDsgcXYdoNIZMe2c98DzBX6nTKb5xVxsxPXWGNFqWhXK5NIML2MLMgbQDblxNMrF912uHR8ffAwoJlM0Nk23vhCTLaFif63+hOOqabQ+Fwmjv7IIsy44ST7al7rn5tjs+EQqH7Tl+MuehV8NlY1eyy6yDtSJKlFIqy/IBCC8ITdOcVmVD1/HA/d/By1/1WlBQzM1Mo72jE4qqMjhArCOk8NcXiuvuMfwW5eGzBoZG8MLxZ0EBKKrW/6a3vOOjn/29T/8Xy7IoeCMLgCMB1+EYf9AyYKpjF9i8JqCUlj2dc9kwFQYAX8s5uJKrd/0R4CoLD6NP1YEQRCIRT6tzUF4QzwUxL3BAmTBNE5ZlQlE07ibSJu6ykL/v280fnmVXNbN8SsXCFC5QCzMXZ9vhDgIgW7btuHNkfMv7QCBTUEiyjGxHJwMZpSAs0JLzUmCpAHeVHUM929kWVVHQ3tGJmelpdhwBZFnpNHTDjgJuoTVPjGNXrEKk7GlYsder1ernxf2SJEGWXVH2xKMP8joZVu82PTXJOlx7FJMF/9jZ4FETQodtniYai6G7p9eBUCyeOPQz7/q5nxGK1EkIGQ66Fh4nbwis3nM/WFcW0cqhcAQT23fj5le+Gi+5+TYHXqqqBUe3qVO3dt9Dv5r0u59+dztg7LOQv7c/o1WnOJlKV6AqGrz1nEJLcaOO101iIFq+v5POh+xRUBTyebGF+by5ywIMnb/P2NbtrxoZn3g/AJlSCiJJyLZ3ODB06mebfMQ63PoXGUWhUHBfghbVjz315GdM07CBn6PiW+IKtytZIQLAC+CdYIvF4uOapj0hSdI+gM1ZrKqqoxJN08QD//5t3Paau0ApxcLcDDo6u3jQhoAbNejmDLyZ3eVMtgPFQgEry0ugoOju7Xvrq15z13P/5xt/9yAv7xhvZFkEWCdcsG4UPWBBIkQz21Lp5L4D1+zq6OrJdnZ1s/okQRVJkoS2dAaOckVAeVH/UNrpg5ShNw9BtflVppCvrQjd9Kjb5j92LVVolzHoG8I5QAGLssCw9u7lxfkXhN9xlEdLPw1g/hzhsRVubwaMbtn6ytHxiQ8CRKEUkGUJ2WyH00fVVsM8FKdrgjpkOtDf2MK3EVY9UljNude2tPj/nTxx3AY+BfDsOVzPZWdXNBAppSuEkEXw/m7VavUvI5HIHwCAZTEFpygKdJ012h498hiuPvxSpDLtoJaF6akz6B8cbgo8LzTWhmJP3wDK5RLK5RJAKdmxe99HJ0+f/Pkjjz96Bm4jyzGw+qd2/zWlM9nI9S+9+SXpbPsdyVRqGwGRvRADQClC4RC6evuYQhSAFQxEDiF7nx+CHhA2gWAgTLEuEK4FQDet3yW29wlAtNM5rrklnpPKiuKf2iHNP2VCyGkAk5RSExswQsgEACd03Mj4xK2jW7b9AuvpwF5O6WwHZEVxgc5SOkv+Vc8eviICklKKlcVF57r1Wu3YIw98/ytCsV6klNZ13L+SjVzpapnHjrvGXk+n078lSdIhgLnNqqrykFDsd9q6cw/ueP2bhfXdCGmhpsBzHsyA7jdBUKxVq3j+uWdgGAYAimq1evKv/+JzH1xaXGhY1zOxfVfXwUOHX5fOZF9FCIlRARL2g69qGuKJJBKJJANhIxUbqAqDlaAIQa+rhsBlF0IiXOFsXzcI11CBdarQB0E4+bLluZlp5jbzPZVK6cGZqcmvPfPkkScCfm4DwBSAU3Qd/fgIIVsADNnrw6PjLx/fuuOXJYlForHdZFVtFJiGeL7cRRKw213J53Io5FcBAlAK45knj/zcyRPHX+RZFAA8TCl1W9ta1gIiABBC9oD3BYtEImPRaPRz4HeWqrLGOFslEkLwlne/H+2d3QClaEtnMTg8Ug+VtdSgT534G2AK+VWcfOF51mkaQD638v0/++Pf/U1/2a9/2c07t27fdVcsnjwMQiWPmgOrI0wkkognk1A1LaAcAaowAIqByrCZe9xADdbBdb0gFBSgDUU7f/fbl2fAtwhBJ3+AV1UsOpLLPr9hGC8sLS58/akjj3+nWq04/Tu5WWCu9AnaYMIwQsgYWAd7AMDg8OiNE9t3fpgQEgI2BsP6cUukIQyNWg3z83OwL2h2euqfn3j0oX8A8DzYtKqPUEpXG5z0irUWEOGEmDoEfkel0+lPSJL0Mr4PmqZB13Wn4+7olq14zRvfAv7YYmLbDoTsTsPrgWEgfOq3L8zPYnZqCvYDPXXm1Oe//L//4kvhcES5+ZV3vrR/aPiukBaecAHDjlNUGclkCvFEks1TTL2gORtV6F33g6sBXIU8gxWmu9wMhGerDhurQod6nvNVKxXkcznW4uzcHWzJsqxcfnX1vuePPXXfwvzcku8W0sFGFJ0RFRchZBRCSLeBoZEbJrbt+AiR5BAASBJBJtsBVVsrZCFB/ShOEgBJ4gxdWZibg24wfteq5cn7v/uvf2yZpgU2EusHlNLn1zjpFWktIHIjhOwE7woRDocHYrHYn4O3wvtVIgC8+W3vQVdvHyiAZLINQyPj8IJpg1D0Acf+nDn1InIryzYw6NLC3DeSbenDkiK3iyqJUopQOIJUOoN4IglC0PjcaKYKBQB6AAof6MR08KyLZfIodaIVXgAAIABJREFUQxGEjrpcBwjF4+2y1303UoPNIQg7Dd8HANVaBcVCAZVSydlI3eOMSqn07y8cf/Z/T505NeW7jcpgCmwGTBWO2Tv6B4cOb9m266OSLIUBNhdPOtsB7axgGLTdBWR+NYcCH7oHy8KRxx79zszMlD1CpQTgTyilfrXbMrSA6BghJALgevCXbiqV+lVZlm/l++pU4sDQCF5399sdEIxNbGdhvc4Rin4wmqaJF59/DpVKWUgHdgx/+OPxBNKZDMIRPneLD14Nz7seVejLpx5W9VAMVpZepXj2IPSBTzy3k5c33doQ9C7z7GCaBoqFAkrFAsSO7bwsRrGY/+YzR3/yVytLi/55p8tg0X0AAL39g4cmtu/6mCxLEft+SmfbPbEMm9yXQVsDFSMhgK7XsDA3D0LYdZw5eQKnT56Yyufzfwjm4h+llP7Tmie+Qq0FRMEIIdvBu0WEQqGueDz+BfCWeEVhoydElfi6N78N/YPDoGChqEbGJuCtC/QqrLU7bNsw83aDqVWrOHPqRd7yDACsf16yLY1UOsO6/gSAWATMehRhvSoU4OXPA/UqEwjKB548m8FvPSBspA6DoNcMgq5itPEpLItyEYBlUZRLBRSLBdbQJTwzlNJSbmXlS0ePPPb1SrlcF0S2p3/gmq3bd31ckuQov8eQzmShhc4WhkHbOSApxcL8HAzuKpeKRTz5xKNmqVT6I13Xp8Hc5SOU0sfXPPkVai0gCsYrug+Du8qpVOqDsiy/hu+rU4ndvX246y3vdAAwPDbBIjg3UoGNwBQIMiENb53OLS+jXC5B00JIJNs8UXeCQFafFwLPvRFV2BSC61KG5wJCnzpEgzSOMAwAI/8N3C8vYJstAyyW5GpuhfcAcM2yjPnFhYUvHP2Px/6Vjy5Cd2//ga07dn1SkuSYfQ+tH4bOkm97QNMK31bIryKfz/NqRAtH/+MxrOZW/rVUKn0bbCji0wAeoq3GlIbWAqLPeH+xQQDQNC2TSCS+CD7xlKIokCSJTUTE7fbX/xSGR7eAUiASjWJ0y9bmwLMB5wHIGiBrCFRRVdYfd86q0HN8MFSDIUjdMvmUoXs+eK7DD7UgKHrSbVgVeiHohaG47H0e6p8PlrZcKqKQz8M0TSctAJiG8cLM9OSf5laWza07dn9Klu05eQhSmQxCoXDje6/+ZgxYDQakrutYnJ9zdk+dOokzp05M5/P5PwLrJvQsgKcopc81LEDLWkD0Gw/6cBh85EcqlXqPLMs/xffVqcRsRyfe9NZ3A2APz9DImBvSvRkYRaA06J/YLH0QTF3Q2eOrG+dxLqrQgU4dUFEPQT+ERcACzrL9+zUGYQPw2cfb+bIVZ52fws1rQ4rQTuPshJsDO7ZUzKOYL0Dszsd/e8OdWvZsYOhudcViA0BSisWFeddVLhXx1H88ZnFXeQrAHBgQH6StfodN7Yody9zIKAv15IxlLRQKXwZrmQOlrJFDUdwBPovzczh+7CkHDDNTbiSc4BBh/pD3AeOhPd8NPgFRXCx/vlbQ3Cf+9ML0AHX5WmuH/PJcp+WJMCPmaQn5iZG2nTzE8cae8FwB45DrottY8Ea3EfNt/pt6zhswxUDDfRzY0Vgc2Y5ORKIxDkKbm2w4HgVFWyoFTdOc33rNF59YTRDwt4OznR2Tz+eh6zooZfWdJ547Bl3X/43DsAo2NcbRFgzXthYQg+0keJBVwzBWDcP4qr3DNE0nLJhtj/zwfliWAQqKcrmEleVF4eb3f4IeUBFiLhCspmlo4GRXQeALnly+GayD5ppuFPKrPriDN9BCcKCIYNAEL3sA2GTmPPh/ywbX6Q/sEPiSaJLen5YQgngiiWy2A6FwmNXtgkKSJaRSWWihsANKG2JesAkgbFTd4VfqfN2o1VDMrzrHzUyeQrGQnymXy98BE6snAZyklPpbwlsWYFf0WOZGRpm7cxLAOAAUCoW/S6VSrwOQpJSpRFmWef0RkFtZwrGjT2Lrjt0ApZidnkI8kbQzWxNEDY/h7nSjukbvA4Om+UF4iNgHdQ9XXTpf+RGUPsA9dvPyusgQyyiqoAausZOvx03mx2Ltb/t84rfHDbavkS8Lqez/nC2+r6ANkGQZybaUU3bbpQ0SZk64LneDkJcvZIMzTpkfwiNkE1CsrCw7R5ZLJUydOWVVKpW/pWys9TyYu3y8rgAtC7RLXiESQiQ+NWUnIaRtE099Gjz0k2maJcMwvmzvMAyjTiU+9tAP2ZSeYC2Ry4uLwlSezT8No2/75xduls6yVY0VqAjrg6UKxzWaMdA3NanlU6SN3GOPihKPt3x5edLUK0Lv7yC4xXWfYBUdqAQDlautyOvLHHyuoGv1fgCvGvS+nAK2N3LPm7xwCvlVHqWHpX/x+Weh6/r3dF2fBHOVp8AaUlqu8jrtklaIhJAw2JSUCWHbKoDnKQ+BdaGMUmoSQk6AhWxCPp//h3Q6fRd4uDDDMDwqsZBfxdNPPoEde64CpRTzs9NItqXsvJybWLyp6xRco4fLv62RWyXu9yjLgPqodapC9nD78qk7v1cJ2moVTvoGypCXo6Ei9O2Hp3xw8rLLI/ztPN9OOlH52ce4UtBzjLPP3dFwW4MNDY3lsf6QXmI4L/ZFoBs1FAqroJSFj52ZPoNiIT9bLpe/zZPZrvIKWrZuu2QVIo/+vAcCDLklAewnhBwghKQucDEmwUPJW5ZV1XX9r+0dNgj9QWR1nQUardWqWFqcd972EOsRhcCw9aquvs6xLsisJ8BqABDt6VAbNZwI+xqrwkaqyq7n9CkaUb0518XPISjNurpHGqwIgwLHeq89uB4wMGivJ193W/1vJ6rl4LrRuhfIWX18ChFufSJ82+tfjixtbmUZlgWAUpTLRUyfOUUrlcpXKAsyMc8/LVd5g3bJAhFsUHwSACRJIm955/uuVxRVfK2mARwkhOwjhPiheV6MMlfDCRZaKBT+iVI6a6/bdYm2lUslHD3ymHMjz8/O8ACzVgB46peDXeMmUFzLRQ46l7+Bx9+CHHjuoDyoF4KBrqYfql7IrAuETaJeB55nDQjWucp+APLtjcC31uRiZwvDuv0OJL2uMqUUhUKevXhBQWHh5Injtqt8Gm6r8lN0gzEbW3aJusxc+Q3b6x/48MffOLZl23v37D946idP/PgLf/OXf/IDezQAWJDUdkLILIAXKKXnew7daV6WqGVZhq7rX9Q07VcBF4ii6/zkY49g6449UFUNhq5jaWEemfYO4Q2/9kODAGXQNH2gi2yB2g0V4nFBeYguqngej2tcX4fF1uvdccBXTSAeE+Qi+7aDX4PoCvvzFr/tc9R9e/Lkh4rb+CHOmuOlUnFX/bbghXWa4C4TgFAxB7f1xLOdrwMEuqGjUFjl6xRzs9Mo5vPz5XL5X/nRp8Bc5eUNFqxluAQ7ZvPOrNeCD46/+bY7R19z193/CwSK/fYsl4rPPf7Ig3/51b/5wiO+5BQMYCeoO43k+ShTF9hk4iCESOl0+s8JIQMAHCCKo1f2HLgG+w9eBwo289nw2Ja1odZoH9bY798e6GYJkEQ9wOoh7AXYmlCsg5YvH7uuz5N2bRAGQbH+2wu9wG/As82BmwA1d7Mfht7nw/u4nM2z4zo5a4f0EtfZ/1eWFvh4eoJqtYxjR4/QUqn0WV3XTwFYAHAMrAN2Sx2ehV2KCnEbOAxT6Yx226tf/zERhgBFOBLZcuiGG39n9/4DTz78wPc//49f/9uf8LQEbAKfbkLIJFiI9LoB92dhs2DhnOKUUqtWq30hFAp9EgCfEc7biJdfWXEefDvaNvvYQR2oo+CCvuHfDnhm9/PubwBLNNh+NqrQOd4LTRGiNvT8edVD1Au/9YNQhGqT7wZg9EMvGIAu4ERYikZp/baNGVOILDybuJ2pQ7dthclCphTZ1nKpiJpe48daOPXi89B1/fschjUwV/npFgzP3i4phUgI6QabPhMA8NHf/B8f6O7pfZ19Eybb0mwCJruhgj8kq7mVRx/43nc//91//qZ/nKYd0fhFeo7x3wghHWAt3gBAMpnM5wghY/Ygf3v0ytiWbbjuxlucCYIy2XZ0dHY3VFbNPo1AVr/PBeR6oehVhM1UoQuuZqrQTVufj1cNnk8QNleHzSAoAjAIfkHgawTJ9RvXeuuMbygGeDBNA8tLC6wMBFicncHk6ZPzhULhD/i9/RyAZyilT59l4VqGSwiIvIvNITDVGr3rnrftveHmW3+DUlbGnr5+9PQNoFQsYPL0ST4aRFAkoFhZXvrB9779rS/86P5/O+nL3oBbt3LWb09CyNVgk78jFou9RFGUT9m/n6Io2LlnPw4cugEAe+RkScbw2Lgzi5oDqXUEd1gLnH5wNVaKaJhfUB4bUYWByjAAgh5lCACUT2gfkC8QBEI3vXssPOeyf3MXmN7j+GnXXA5a9+04Kxw2Go9s720GQwBYWV6EoesAAWqVCp59+igtlYqf03X9JJir/CyAH7XU4bnZJQFE3sXmAFgDyVBXd2/vL3/8t35JC4USlFLE4nFMbN8F8WEsFPKYPHUSq7kVOG4SpaCWRZcWF77znW/d98XHH31o2ncqHcCLAE7Ts+isSgjJALgKzKUfTyQSv2DPlXzw0Euw58A1zoOrKAoGBkc885g0hNrZBHfwA7aJGqyHG+rL4Enrh5kfgl5lqCisHlXhHyIREEJAwL5BWIRoAgLK4/bZaS3ThMlbkE3TgmWZsCwKQ9dRM3Toug69prsAbaYGg5TgGmC0r8VjNlT9dpZAbAZDUre9Ho7lchHFfB52j8Tnjz+D1ZWVH5RKpfvAXOWnATxKL3Df3CvBLhUgDoJ1gB4HkPjIr/+3t3X39u+klE3PuH33Xj44vv5BX83lMH3mJAr5vOehtig1FuZmvvWt+772V8eeetJ/o1TB5sCYpBv8AQghN4DN0idrmjYWiUTee/3LXo6tO/c4D5qmhTAwOAxZUQLL3Bhc668vDEy/BhTrFSm8xwYCEE46Fu1HhaYqvDGJfbNuw7aig+dcojL0A9UFjAAqKublAtAwDRi6gRoHZLlagV6rOa7v2hBsoACD4Off5rtFNnLDeNlWNwNKQAQbLxwty8Ty4gIoP35xfg5TZ04uFgqF36fMVT4O5io/tYFitayBXXQg8qCs14M1hvS98afffvXhG295IyuXhaHRcWSyHd4HOaBPXG55CVOTp1EuFj0PlGVZ1dmZqfv+8et/+/+fPPF8UKj3FwDMrAeMfGL4G8HrOTUtJN9515s/Njg8GrcfsnA4gr7BYciS1ACEYiNKcxXYSKEFgxEQW5EbQtEHzmaqkBACTVWhaSpCmgpZUV2Q2ccCbnoI+zwg9ENy/SC0jXq2seNM00SlUkGlUkG5XIFu6IEQbApAcd0pl8/OEohrwtC3XYShDctSqYhioQBCgFq1iuPHnqKlYvFPdF0/AWARrqscOOtfyzZmlwIQd4O14G7t6RtI/PLHf/NXZVkJAxZSmXaM+LqsrBWSaXlxAdOTZ1CtlIUHHLBMszQ9efpr3/jql74yOzNV8hWjCDYccK5JOUMArgYQBjAWDoezd9/73ntT6cwW+4GLxuLo7R+E5ESy9sJv/UpxbYitmbaBi9wcihSqqiIcCiEUUqHIivP72UDzK0AbwBBApioyJEmCJMmQZQmSJEGWCFuXCEBYI4FuWDANA6ZpwDAtmIYJwzSg64YHgI2+4XyzL8MwUK6UUS5XUCyW4NSK+KAXuMzX7bwgLvkekbWemODYhu5CIAyFdXE5v5pDtco6SsycOYW52ekflkqlb/BkpwD8K72EXGVe/ZUBm4ojARZX9CSl1F+vf0naRQUir5M7CGA7gNAvffw37x4YHNkPWFAUDTv27IUkyeuGof1gW5aFpcV5zExNolqtCC4hYBpG/sypk1/++7/9q7/PrSz7u+QEjpMmhKi8nDEA0LRQ/O573/M7mWz7dvbzWUgkU+ju7QPgc0PX8VkXEH2wW096gPrqF0U33M1LliVEwmFEwmFX2frVnQhSUEjETROJhBAJhxAJhRGOhJwXAgBW98d/E2rZy5awHy64LHZWi1qoVKoolysolcsolZkKLFXK0Gu6j1MU9gvJ+e0BUMtCoVRCoVBEucy7pPpg6KbiS3X8o4H0a/bErB+Gvm2kHpYEQKGQR4WX37RM+vyxp/94aXHhDD9qAcA3KKULTYq0KcYFQy//RAIOmaWU/iRg+yVlFw2IhBAJrFV5G4D2l9z4itE33PP2nwWYqhoZ24JUJrthGIrrlmWyuY2np3gATdedMwx96eSJ5//6H77yN/9UKhb87sYKgOOU0hVCiAzWkNIGAJIkSffc+7O/0dHVdciGYSqVRWd3jxdUTcJ2bRSI6wFjQyg2gKhECMKhECKRMFRVDTjWqwq1kIZ0MoG2ZALJRAwhLeRCl1JYjmKzYRwEQ7HsomsvqE7Hbbb3M1ja2w3DQD5fRC6fR251FaViyTmPCDzxvjYMA4ViEYV8ATVdRz38AtZtO5fHw99y7NlOfIukTjkSAKZlIbe06BTDsszVp5888tn8am4OwFNgDYWP0YsQxIGrwXYwCLYj4H3gsyO0iRd2KdjFBOIIGGjGtFBI/sTv/N6H4vFEF6UUiWQS41t3nBMMxeNM08TC3CzmZqZhGIannkzXa7MvHH/ui9/46t98W6/V/C3Pi2B/5Axfl970lnd8pG9g6GbKH/62VBpdPX3NIQbhGjzQDGo8cZUc9WxrAr66PAJcZP5RNQWxaBQhez5g8Ti44FEVBalkAm1tCaSSCYTDIQFsrqpjMKTevCAqNeo5tul+UPDLADwqknrSO+lAYRomcqt5rOYLWFldddUgLw/L112u1mpYza+ikC/yfOvdYtpAGXrNPmANBhAP6jwSUYShu+hdJgBquo7V3IqT1NT1+aef+slHCvnV03yTAdbKXFir1OfD+JS9thqsmzErFA6rO/dcdUO2o+P2hbm5bzz+yI/u57vKYPWdl2w4sosCRP6DvhTATgDKW9/9/hv3X33oVXZZtu/ei1AofF5gKH4Mw8D87AwW5njQBQ4qUIpqrXr6+LGnv/CPX//b7wvjpEVTXn3X3R8Y27LtThuG8UQSvX0DHrWztvILKJsNyTVUZXB+ItD821xQaqqKWCwKTVPdB95XBllW0NmeRld7O5LxGChoQ5UHwAl0ADBAGXzUjmnqsEx2rXaXGsu0WCQaAJZl8hkDAYA13thFIoRAkgivd5Q8ik9UkxQcopZ3f02vYWFxCQtLyyiXyh4FKC4bpolcLofVfN6BPM8Jggd+buYbdudu8wOSNIShva1WrSC/uupsMw3juSePPP7hcqlo14fXADxCz+OQVc+lMDXYAVY3mEHAm2B4dHx4YHj09ng88QpJlhNM4Zqz//Yv//TOSrlsj209Til98UKU8XzYxQLiXgDXAUgOjYy1feDDH/+wLMsapRTdPX3o6R847zAUP7pew9zsNJbm52GZpgdo1Url+DNHj/zlv/zj3z8sFFm75fbXvH3nnqt+yoZhJBpD/+AwgGAY2mXxKr81gBYASIoGxzTLQ0gT0jQGQtXuAgSn2sCGUSbVhs6ODLKplHObi8rP35HcNC3ovDHEMk0YhgmDzz5nQ8uOMAPAieKz9n7+W/G6REot3jgjgRAJsswgKSsKG/rmqEk3L1eBAqViCQtLS1hcWoKuG3y/eCdSF4yredit9HyXz9Z6TkjdajAMhW0iHH1grHOlCUGlXGItznzd0GuP/8djj3xMty+OKbBHKJsX6LwY71nRB6AHgObfH4nGQtt37bkxnW2/XVNDOwjh5ReAvry0+Pkf/vu3v8STmAB+eD7LeD5t04FICGkHcAuAAQD48Cd/+609ff27KKVQNQ07du9j6uECwVAMQVWr1TA3M4XlpUU2Htl5mCjKpeLRo0ce//z3vv2tYy+56RVvOnjt4bdRgICygA0Dw6OeeZG9+a/T1V3XNZ0dFENhDfFoDIoiC1UEcNLGYhH0dnWioz0NWVIcNxWoh6FhGjAN1vprGAZXfQGwE0AWBL7G+930riJ101g+l5uAQJJlqKoCVVEgywpABDfcydO93pXVPBYWF7G8vAr+Q3iUoGmayK3mkFvN83vBf+c2ek4CXGYibiW+bcHrTpebQDC63+ViAaVSyUlTq1buf+LHD/9XwatZAvA4PYcHm9fvd4KBMB10zOj4xJae/sHbY/H4zRKRoqz87KIIAQiRnOujoOVHfvT9e+dmppd48il6ifabvBhA3AvgFQDkm2+7c+sdr3/TO+0beHh0HOls+6bAUNxerVYwNzPNx0l7lVZuZfn5eCI5TAiRQSkUVcPg8ChkWfbl21wJrheI3mPXG+DBrTdUZBltyThURXVBaruMlCKZiGGorxeZdBsHH8B3AuCAsiwYhoFaTUdNCFHv7PfAMAB2zrFe8IkufZBKhC89K58AaX/9JQcoIQSKIkPTNF436shcB332fV6pVDE9O4ulpWU++sW+M9mCYZpYXFxCoVBEYwgG3tnOV12PQz8g62AoLvvUo18tEoJCfhXVSsU5vlIu3ffEjx/+Q+GkJyilz2+g8HZeMbhqUPXvjyeS0YltO29uS6dvVzVtiw1uwhUhAITCYcQSCUQiUczPTMM0LYAApWLxX777z9/8DM+KAniYUprfaBkvtF0MIL4ZwBAAfPDXPvkzQyNju22FoKgaRsYnEI3Ezh8M15w9zf1UymXMzkwin8sJqgywH2RZVjA0PAqFt8quF8Trg+HGFKWryNyHPR6LIRqNgFDqLT+lSKfaMNTfi2QiBsCGDbs2cDDopo5ajQ2Xs0zLhVEg4IRGD7Hus4EKXNd+wXV2YOlXmdRVrmK+9jZKmacRCoUQCml8P0ebkH9Vr2F2dh4Li4ueaEX241CpVLCwsMBbpZve0b77u36/f1yyuO6FIV92YOh+i8cSQpBfzaFWrTrKMbe89AdPHz3yTfsyADxB19E/kfei6AIDYeCcRWMT23Z0dffdHolGXyZJJMyGYzJFSADIsoJYPI5oPA5VVZ1hm+VyCcuLi1w1EnrsqZ/8/LNPH32WZ7tCKX10rfJttm0qEAkhaQBvApACgGQyec+td75+37UveZmjcAgh6B8cRibbfm4wtJrsC8zDfUhLpSLmZqZRyOdhP3CKqqK/fwhaKFR3/MZVH22afn0AdY8Lh0NIJGKQiNCHkJ+jPZPC0EAv4tGYByq2a2qZJnTdQLVWZUFu1+XmNoOhuwzAA1U/GIP319cjOsALOL9XufoACSCkagiHw1BUldPO/n3Yak3XMbewgIWFRaZmIIpGCyu5VSwvLzt5+u5o4f/wsxFeGPrXg5YFCALOOHAvDPk3gNXcCnRdBwFACfQzJ1/80OTpk3bEJx0sLmJg+DseZb4PQDcCwgAmU+nE2Jatr0i2pW5XFGUYzth0u1wEoVAEsXgckUjUHb/u1B+yYxbmZlGrVUEIgV6rHf3WfV/7ReE0P6FCBPpLwTYNiLyV6hBYncR2TdMmwuHwewFg174DuOMNb2Z1QfxmzWQ70Dc4BAB1ADj/MAzeV6mUUavWYJoG4vEErzNcPwSDzrFR2DX7yLKEtkQCmq1Y7X+UIh6NYGJ0GMlkoq7ri0VZUIVKtQpDN+pcWy8MA2AngMnJ0xLq+UTlGpQnFfbDB0s/GBuAF0DgcY0AKUsSotEYwqEQQOwO4fzepxS6rmNyegZLyzxYiGCGYWBhcRHFon+Ak79RJGBPAwCKbnMwDO19dv5eKBIQWJQNWbUsC4QQWJY5ffTIE+8vFvJ295scWHccyrIgChgA7VEkdTY+sX1ve1f37ZFI5CWESJpTZg45RZERicURi8WhKKrrLhN4YGhDU9drmJ+dcfZNnTn1248++MN/57mWwLrhbK6b2sQ2E4hDALbw5UQ8Hv8cj0QNQgh6+wfxurvfhra2lPPQRaIxDI+NQ1HUTYdhMJyandMLDI+rLj7Idcf51tcEI1On4XAIyUQcEojnHLIkYXiwH309nULjlAsrwzRRrVbZiA80cIMD3Vw/jBo0eqwBQ/FYz34qKte1YArPNQUCUqiHdNNQyLKMaDTCwUic39c+tlAo4fTkFCrVSt09vJrPY2Fh0Tm+MQxFV5evBbrNfhh6t60HioZhILeybD9jqNWqDzz28I8+JRTlFFiA4z4w11iGz1KZbGp4dPy2RCL5KllR+uwGEvH84UgYsVgc4UjUgSOxyyMqQx8QCWtlRrlUZNA2zblv/5/77q1UynZdxJOU0pn6X/Di2KYAkcc6vA78j9HW1vZmRVHebRhszKqiKPxHj+LOu+7G0Mi4cyMrioLh0XFEY/GLAMN11OutowGoaXrx40BHbDzx5QEgmYgjEg67efJ0HdkMtowMQdVUuI0uLI2u66jWaqxjulgn2KB+EGgEOxdG/kaV5nWO3mP952cw9Lvp/vyD6wyDAOmmdyEp7pckCZFoFJFI2OktwPYD1LIwt7iA2dn5umjotZqO2dlZHsYfQZWGPhh61+vrBOE2nATC0P72phMbXMqVMkpCd5z8au5Pjx55/Ct1BRNMkiQyumXbgWx7++2hcOQ6AqK4So+dR1YURKNxRGMx5xmFAEJCpIZAFLdZloXZ6Unn3HOzM3/w4Pf/za7vLIKpxGbF3TTbLCDuAWvGh6ZpHYlE4vNgQRLqTJIkHL7xFlx93Q38QWfbe/sGkO3obA6ddTegbByGIvgcCG0AhmtDsT69X6HJsoxUWxKK2MINikgojK1jw0ilkg6A7PxM00KlUoZhmp687GWgHozAGjD0Ac4PxqA8PRALOr8ATsBbZ0mp5ekGxNII56RUKEdjN7ruxUMZGOPxOCKRiPP3sY+t6jVMTc0it+ptDKXUwsLCAvKF+vnMbCi560EwbNRYsta32NAidMkhBAUeBIKrSXPqzKlfOfXiC0f95cu0d7QPDI28Mh6Pv1KSlS4nDwGtgdTVAAAgAElEQVRi4UgY0WgcoXDYC7o6IHqVYCMgEkKwmltBIb8KADAta+af7/vavYau28FsL5khfRcciISQLID99no6nf4vkiTdwPdB0zRYluW+cblt2b4Lt97xemecLQVFKp1B38CQ80Y/OyCeBxh6jsM68/SmwwbSgVLHRXbcYP6vu6MdE2MjkCRSB5BapYpKjdWp17n1vhZqv8LzqDUhnd/NbdgAE9AY43QfagjmoHrCJl130ACQfjAC3jS+ZVA2VDGRTEJVFFji70KB5ZUVTE5N+0a0APlCAfMLC86x9TB019cHQwhwgtOI0RSKfJkCyK0swTJMgD0fC08/+R/vW82t5CRZlkbHJ65JZ7J3aKHwNYRAYjh1XV5FURGJRRGNxiBLciDoHHXKlWEgDBsAkVoWZqYnQSlrOJ2eOvM/Hv7h/fZMgXlK6UO4BGwzgLgXbMgPYrHYwXA4/Gl7n6qqkCQ2NTSl1A3AwC3b0Yk733AP2tJpFwyRCAZHxqCqAQFj1wTi+YbhRiDoTYd1Hg8AiXgc0UjYTQMWbWbL2BB6uzrcBgQOnZquo1qpwrTYC/hcYCg2dgCNu96IeQb1KTwfrc32fWLXN/qvyd7vqaeEAEBPPaW93/tbR6NRxGNxEMkeWsjVYrWCU6fPoFK1B1gwgtX0GmZmZll4f3bDu3sDlwUw2ttcGrou6AZgaMPHMgysrLizjxqG/nitWn0qGo+/UiJyljPNgZtECMLhCMKxGEKhUGD9XzAQhW3rBCIhBLmVZRTyqyCEwDTN0//09199l2WZ9gP/BL0UovZsAhCvAw+blclk/hchZMLeJ0kSVNXb/1PXdU+9TSgUxq2vfgOGR3m9ItjUnwNDI4jFE/WA8nW6vjRgeJajVgCkU23QVLtRiamdaCSEnVu3IB6LsNZS3gJrmibKlQpMw1xfo4d/fzOViHrAuWB0wdKoT+KaZfGrTV9ednrPue2yiWAUYefkGeBG+0DulIkyNzqZSCDsc6NNy8LU1AxWVu04wwxklmlienoGFT4Vrdt+QhqD0QdIv2oMathwVWNjMNaqVcc1tffxVLCBqCgqItEYIpEoZFl2IGnnHawOvcrwbIBoWRZmps4413/m9Mn/+uiPfvA9/mvlKKX+aYU33aRNOIdzfxSLxd+hwsBuy7KcaTptU1XVmcEOAKrVCr75d1/Cww/c79zchq7jhePPYm5m+hKGodXweGsdaQkBMukUH4NscRhSdHdkcWDv7joY1mo1FArFpjBkwRUEAFlW4LFWHQypAEPq1g9SW9mx38sBmEU96UBZQ4XnXHZZhHxccFr8pejut/Pz94G0qHtNTl6W/TvbeVLmPQh5OXlSYZlvNw0Ty8srWF5ahmW6LeAEQF9fN3q7uwFIDJQcoD29PYhGIoKKh+dvCmGb/fcABYOx8A1eb06dlwzf5tlvp2Hr7jIQCoVYSzA3Oz0hQDgSQSrTjky2A9FojFWzOCldayyR1i+eSMA2WZYRi7u9fbp7en9a2N1GWHzUi2qbXocoy3IkmUx+WJKkl4rHie4zgMB6xeGxCbzi9tcyd5nfGMm2NlaviAb1iucIQ3E/1sxno9AU83TTSJKETKrNMzwQALaOD6O3qxMMSjYMLZTLFdSEbjRAMAztZY+7G7BsH9ewH2Iz5bdeN1t46EWXv35/UJkEtSe4z3ZezrH2sqdOUbiOoGM929hsiqlUCooi8+3sXmQu9CS7R7kKAwXm5ueRt1t82QPQQBna+7wK0fkWFWKdC722+2yaBsrFIkAkhEIawpEoV3jeRhE370aqjylDu+x1bnQDhdhon2maToszIQQnTzz/ycce/tGD/NdappT+GBfRNquVuR9sEinnPuFdb94JQaXKsuxRh5TW1yumMlnc9uq7kMpk+VuXTeo0ODQaMMPdBmEYqDADWn/PEwyDutUosox0us0ddUIpJIlg19YtyGZS/GG2VZaJUrkM02B1hWu6vhuAYaOO1uvuZxgALn83myDA1tUpClALqnt0Wrr9gAtyrwP2N4ahrb+ofb8iEuGBoFlhoRsGTp45w1p33YpBLC4uYWVlxYUh304afm8Uhu6yCEM/hFj2/jrA5kCshxh86dYBxCZQNE0D83OzsEwWAk6v6c988+tf/iBcu59exEg4m9kxOwVgN4SAkrFY7KpwOPxxAEl7myRJQp8nZv56RVXTcNOtd2B4fIK7ORREktE3MIh4IrnJMNxgfWJQH0N+blVTkU4lmdrl4FEUGXt3bEUyEffA0DB0lCsV5tJhHTBcQ601rnPk5fUBKUjN1bvZNni4ClxXA4s30g74b+UNReZC0C1nMABF8LlqFO7+ZjDkf297ORqLIplMOvCjYPW2ZyanUCqVXagBWMnlsLi4ZN/8TWAILxRFGAbUJ/rBhiAY2nkGwhDwwKyhOnTrDM8KiHbekgvnQj6P1VwOzIVneVNKCw/98P73TE+ethtUHqaUruIi2WaPZQ4B2ANhEHkoFOqKxWKfIoRsEY5zBonbZpomDMMQ88K+g4dw4NBLALg3b3tnF9o7u9cBqvW5yWcFQxEIfhiK+cE9r6ooSKdTIHDVU0jVsG/3NkQjYV7fxvZVqxVUa7VAgDSGoQslL6zWB9NmYBWB5alHFNWbWFY/QPlvYx8b6E4DvB5ShFVQPgEQbQC7tWDo3w/uQmczGUiyG7zWsiimpmdQKPARcxxSy8srWFxeXgcM4YDFvreDAOkHmwi05krRC0IvPBvBbX1AXBOKhA3fW1lahq7XWF4ckuVi8XtPPPrQZ2dnpuywYAZYJ+3A8debYRcj2g0Bc5/77W2SJGnJZPIXZVm+RTxWUdi8v7ZZPCyVWOaBoVG87NbboWkh7kIDsXgCvf0DkJpOBXoBYeg/DmjaJUiRZWTTKRDiDsOLRcLYu2sbQprK07OHvFypsGqETYSh152ldYALUpnePofuskdZ+o8NcJcbtSz7z+0F2Bow9NUp1u33w5CI21g072w2485Fw4+bnZvHysoqnPc4ARYWlpBbzfnc4s2DYVMgrqPucD1AJERyyuvZBjZverGQd8UNIbBMY2ny9Knff/yRB+26Q9uOUkqncRHtYs6p0gs2wZRTh5hMJl+rqur7IETfWE+9YqIthVe88jVICRFyNE1F38Awj05zEWHYAIL2R5IIsum0Z7a7eCyK/bu2Q1EkF4aWiVKl4gy9s8HmUUkBrmsjGLpuuzdN8xiHAXkFwHD9ytJbbueanLT17rS9X3TBPS8eEWqCWhS3r60cnZvN3QbvsZIkIZPJQtNYiDFbLs4vLmBpKcfhB4AAs7PzKBQLjaF4DjBs6DY7ChD1gAxQhx6wOt1r3G+WTf1299suN1uuVirIrSzB5HWF/Brp4vzcAz9++IFvVcrlx8CmPQCYMnyOUuqO77tIdrGnIU2CudDOML5oNLorEol8Eu7EToH1ioZhsHBV3BRFxeGbbsHw2ARXiqxHfHdvPxLJtksShoQQZNIpqLIMu1tNOBzGwT07oaqyA0On8cQ01wdDH2DWBUPaLNKN1/WlPki5KtVyXN76scv19YiBDSg+F7x5naHfpfYC0FGonrzWgCGa7QcAd5n9/dIsUAQAO/Xc/AJyuTy/x1mKmZkZlMrlplAMBKQfjB6QwQM3D/ggHB8ExADVtzEgBqtFy7KQy62gUi554F4qFPDsM0f/+vTJE0f4IzsP4DSAOQDH6EV0k0W7FCaq18AaW5xQ5ZqmZePx+KcIIduF49asVwSAnXsPYP8117Mbkd/A6Uw7Ojo7PQ+ICDBQt3/bZsEQADLpNmiK6sBQVRQc3LsL4bAmwNBAqVzZIAzFhpBmQ/C8navF4XgQYEid9MFD7xrmBfjSN4Ope06rAdjqYCnkUwfAOjfaXfa45AH74Xz5AGpvt7fx/el0BrFoxKlTpJRiZmYWhWIJNswsSjE1NY1qrRroNovwsu/3OsUYBMNGdYA4WyD6XWa/6934Uy4VsZpbgR3FnIDAohZOnTiO0y++AMMwHisWi1/mP1MVwFcvBVUo2kUHIuDUK24BMGhvkyRJSSaTH5Bl+U7x2PXUK3b3DeCGm29DiEeEoZQiGouhp6+fTXzvg6G9LELxQsKQUop0KomQ3U0IFIokY/+eHUjEIh5lWCyVWCfmJgByILEeGG6gtblRXh5lRgOUX7OyUK/itI+z1xvVGTogFfMWYSlcZ136AOg1W3a+BQBSSp26RL7gUZPpVBrRmNAh2qKYnJ5BpVKBDUXTsjA5OQXd0D1QXBcM4YVVYxg2cZ83BMQGaYVGETsP0zSRW1lCrVrzKNl8bgXHjz3ljpwBrFKp9BnDMI4BmALwAqX0OVxCdkkA0TZCSDeA7RBitiUSiVdpmvZBCHM8BNUrGobh6ZoTSyTw0pe/CulsO7+xKWRFwcDgCGRFCYCe5XnILyQM4/Eo4tGoAykCgn27tiHVxnrx17vJDRolAsAYBLDAjtINwIjA9MHdabxqT8y3cWOPtwHFp+yauuOC6qS+ekABkKwcAYBzYCmA1T5vA+Un5h+8XwQjQXs2i3CY9Qiwf8/JqRnUarx1lbAI3WfOTPIUovKDT+G5MPS7zUFqzdOo0QSIDtDOEoh+eJeKBRRWvUMFTcPEqRPHMTczBQCOYOFp/jmXy/1P/piaAP7tkmLQpVQYACCExAHsBRCxt0Uika2RSORThJAOe9t66hVlWcE1h1+GkfEJ2JFpwpEomz503SA7vzDUNAWZVMqBIQDs2jqOjnZWZcpak02UynYDygWG4Xpam8X8ucITIeYoRrGsgLebTAOVGbSvrs7Q34XHpyz9gKTiqBx727qVoS+dr06Rsc491qbp/2XvzWNty/L7ru/a0zn7DHe+9801dXW13dXuVNtuJ247MoTIEMkoSCgkBkHkCATJHxiQAIEIihjEP0iRHVlAwMEiioiVxAERRmMUOxh37Bi7h+qurq6qV8Ob73jGPa714481773Pufe+oepV4/W0391n77XXXntYn/39reG3CLJv3f7+HpI4McfUnOPe/QeqakcCYzqb4fDwaA0M/d8tGHYoPAPEVSb0BYB4GShWVYXJ2SnqunIAznBy9AgfvPddVGpILldu58Iw1CPRsrOzsz/NOdfzR3+iHbGb4eMYy3ypQERzAL8NwEyQk2XZd2az2Z8noq/pbXpon6sKoyjylCPnNX7rN34N/+i3/oEBWJEvP2YYCrMEDNja2DAFjYjw0q0bDRgKZLl07a+Ehg9A8XgwJFBDwTVgSBeAodBjkH1FJ1Se3Ly6DSz+OGah8tLYp9bbMBTm/EIo2JEewyzjmSlkhfAbgNQxsuV8/brZRsLeK2qDVXfstmrXAloIjkePDlHVuhcEIQoDXLmyZz7cBGBjPMZ4NFKGiyNISFknXoEw/3X9hNKrzWLUseVigZ2zn4gwOTvD8eFDb2htURR4+1tfxztvvYmyKFDXtanfj6JId4F7a7FY/KwDQ95xik80PHdABAAiqgD8PoDbeltVVZPT09N/l3P+d5x4qKqqoQrDVuPL0dEj/U0HwJz6qI8Dhvb35uYGGLPn397YwMu3bsicKRjmTff+LgCbyk5vxwqYOTBsqzkLRp2OCyZ3eyt9owYbylMVaEFCQVKt6+1OAwvU/RHuugMxHd84wnDB6MDUBaALNg1449zBAM5uc9c13Mz1mbwI77mrL4TzMVL3V91jIQQePnyEuq70GZDECXZ3to0pDQB7+3uI1cfbhVcThi7s9Ok7Yq7c1AymWKwhH1uxu8hzHD58gOViZkx+EPDw3l184/d+G2dqfnNtIuuqLcbYsqqqXzg9Pf3X8zy/7ST53edJHQIds209L4Hk2/cuY2wG4HUAIRHxs7Oz/3I8Hr+dJMm/BTUM0J2KAIDpkK3D577/C5AvvXQn1obaBZcngOFoOJSTQamCE8cxPv+5V2U1lJBAKcsSpfK3t860vZCZq9ZdGHaBsUttikukbwG7omuOAatN38brNoM1NLvNZOecRkVaWGmQNc1hd71rm7dfvTouIM02aisyUvliMmfgXODw6AgHBwfqw0wYjobI8hyLRQYCEDCGq1ev4M7de9DymrS5rBIl3T1nZSDQOTHWhgseKATHbDpBnuWe6Z0tF3j/vbexmM1AZM3jIAhMw6cQ4quLxeLny7I89DIOvE9Edx43688qPLdA1IGIHjHGFpD1igMAmM1m/1eapu+nafqXGGPXANkFRwiBOI49M3owGOLmi6+Yl3Zza+eCAIT/+wlgmMQxRsOBNa8AvP7ZV9HrxQaGnHMUueyK9axhaPLRgOH56Tdd+TfqDhtdcxhkPS4YQxioLhzKoxGva3DBUdccXDWIVXVtoUg6Hxbg3jaySs3drt4ZA9OL9T1Ea7sHQCIJj0ZcHY+05eHAsixLnJ6eYXt7G9oy2d3elvPaVBxgQJLE2NvbwdHhsQ8nIh+OMEnYjLl7CReGW+NI+6NDFjIGZMsFZrMp9C0Ak6r5/p0P8fD+HaOKdQdsp67wpCiKX5jP57/ROP0UwLfpOZykHvgUABEAiGjBGPttSKW4DwBZlr1XVdVfGI/H/34QBF9W8Uy9ojaZX/2+16WZSoQ4TjAYDi8AtMb+J4AhAGxujD0IvXjrOnZ2NgwMiQjZUlarnAdAd/1SMGx1vblAR2nhm9RWkTVUHGNIohhRHCEKQzAWIAiYMpl9WEEQCALUS0w1gT4XAHAhAVmp2QHzLAOH08VG+N1p/Gt6EmXoxLE0VNuYF1cDSH84tTK022W0+XyGXi/GYDA0UN3f3cWDh48MwzbHG1jOl1jmueIdOXbtswse/1h7R805ZqdnqMrSacQBZpMJPrz9Doo8W6UKiXP+v83n879a1/XcSZkDeBfAR2Ru5PMXnrtW5nVBQe5lAK9Af7AYYxsbGz8TRdGfAcD01yoMQyRJgp/6Z38acSKH7x1cvYaNzS1TqC4KNR+Il6t3HI+GGA4HBoab4zF+8A993kAGAJaLpVS4T6AG7dC7Zj1fQ7l11iP66zJNd9RJuwGHgSGKI/SSBFEUWeXkdqdxYShPDqHNQxdG+hgQ5KqjACHVVp7nyLJMDttEG4z6r98yfUEYQpm7TQB6YMTKfohO1SD0mi5WjDFcvXqAKLSe4efLBU5OJqbluKprfHTnDkArOlPrPotu1xo33oqW44u0GHfFWS4WWChHFUz1eRS8xt0PP8DxoZxXXltkWhUq0XGnKIq/vFgsvg4/HAF4i4jac7s+Z+FToRB1UC/wbVWv+AUAERHRZDL5a6PR6Du9Xu/fEUIMAPnAbr30GQPDIAww1q7B0DCHz1N/WLNvzXFhGGI4sDBkDHj9c5/xYFjkxfMFwy4zWsGJBQF6cYokiU0dkYEQOWrP3DeYY0GkJm+C8YVHMtMy750qT8aP41hNiTmU0yRkS2RZhrIsnXO7x1xGGUrACQ9wwig6qxwZIPQ2YU1qTUNHGcLZJgTh8PAIV69cVcKPYZgOsOznKIoCBEIcR9je3MLp2Vnb+m1teLrBGuayK81sMgHnuouQ3Hd2fIg7H7wvG4qosytNXdf1L89ms78hhHC9OpeQw/IePrsreLrhUwVEHYjoiDH2DyHrFUcAMJ/Pf7Oqqn87SZK/xBjbB2N47fUfMIVkY3MbUKbzxacr7YLixRftwxAkYfTySzfR6/UMwOqqVoX644ehuZ4uGDZajkM1h3ESJ3Dr97pguFgusMwylHmFvMhRFCWKMkeRlyhUo5EggTAK0UsSJHGCOImRJDGSWC5xnGA4GipT1DHNAQQBw2A4wGA4QFVWmE6nyLKsWyWugSHz9ncBEICAs13YbVpRmjQsDS0UYZRlWVY4OT2VLc0qwvbWJh4+OjQQ3trewnyxkPWozfcd3U0nrS3NOsDWpmaFIVO/GLLFHPPZzChCACjLAnc/eA/TyZkHQsaY6QNMRN9aLpd/Oc/z9xu5uQfZilzhUxQ+lUAEACLKGGO/A+DzAK4AQFEURVmWf2U4HP7pmy++/Pp4"
         +
        "vAn9Kd/c2n58GF5o8VVnv99DoieMF4RB2sMLN697MMvz/AlgKIyZ5sLQrD8FGDIwDIcDJL0EINaGoUrrbHKGo8MTHB4dYWngRNbUJNg6VMj1uqpQlyXm0FE1GuTfKAiwvb2Nne1tbLnTKTgmdxRF2N7exmAwwETNS6yV7VplyNwGGFhAqm47Nhfqr4BtVNGK0lOGGpANtUjKLABhPp9jkPblXMdgCMMAo+EQs8UcINnqvL+3i3sPHkNMNesAOyOs7m9TVRVms6mFLhGODh/gwd2PZNcnVQ0FwFWFy6qqfnE2m/1PZL4gAIAlZKPJKT6F4VMLRAAgIg7gG4yxKeRY6C0iKoqi+PXXvv/117XJNRpvOAXqkuayXi5R7wgAG6ORgSGRwOdefcVmXBDKUk4TuqqBAzgfhh4AGzBsdY1xG1VcFUnKnHUASQDSfop+2tcyyINhXXOcnJzg0dERjo6OUZaVOooMkPS994AEaz6rKA0QkoFnVQs8enSIR48OwQJgY2MDO9vb2N7elrMQwsI9SWLs7e4hy5aYTKYoVYfhlcrQM83VI3GADQU9F+K+MrRgtGa0vnPMfghUWkxB8/jkFNeuXQWYjDkeD7HMcgg1XWw6GGA0HGKxXNp8nNPA0s0/Zv+qukfvgIZ0XCxmZl+WLXH3g9tYLheeKmx0pfmtxWLxV7q60gC4TUZOf/rCpxqITrgH4AehxkBvbm3/xJVrN02BNOpQF+zLmr+XbITZGI9kX0gFw6sHe9hU45QhCFzIDtgXh6Hb3aUDhmvACeiRGN1D75owTHo9pP2+nJdYAHDu1WK5xHu338fh0QkErw1QLCCsKtQKiUDGK1Fd18q5rUAYhgijCGEYePWRcgXOb4KogdMTOQseQc5Tff36Nexsb6l4Mm6/lyLZ72O5WGAynaLmtUlHpy2IjKpzAagBR+bkwkJNXx9jtoFImdFMNcC4atFcACDTFDLVuq4xmUyxublhgLS1OcbJ6ZmJvbe3i+VHGS4TmKf+HBi6cZha3FhqxY15dnqM5XLhNZo4Q2RXdaWZQKrCOT7l4XsFiDcA7AFAGIZbL770yucD9fLGcSwH3HeAC7QOchdd/DQDxjBIUwPDMAzx6ssvylwq6GV5dnkYEuCawOu62+jjgAYM15jRQRhgPBqpqSnhwTAvCty+/QHu3r8PM0LFAM+Cta5rzOdzLLMlqkrCzzjd0PfIiW8UIRHCKEQURoiiEEnSw2g0QC/pwzNeFWemsymmb00xHo/xwgs3MRqOZAwVYTBI0e/3cDaZYD6feyrR3CcXgGa/VtvyfOqsUAx17q+rDEkpR901x76UjNlz6vSn0wmGwwHCMAJjkDPi9Xoo1JzOYRhhY2MD0+m6aUW6zN/Hb3mJkh4KNSBgc2sH9+98ZPKtBjsQ5/x/mc/n/01HV5p3ANwh90I/xeFTD0QmP10vQs3T0uv1vnLr5VeY/lKPxnYye2P+CQtDC0XR+O0sl1CUw9EQgIYX4ZUXbyJOYgPDoirlOGW03V0BTw5DTwFeEIZxEmM0GBpTTsOwqmu8/+GH+PDDOxDKdPJUIQhVUWI2n2M+nyPLcgM6/6NjzWVjIjv3FgRUZYUKegzwFIeHQByHGI1GGA6HGDhzDavDMZ1O8c1vfgs729u4efMm0n4fgFR2jDFsbW4iDAKcnU2Uwmua0boaQNm83n5lHBv+2YaNLmWohye6nfv0vWKNFujj4xMcHByYbRvjEQ5PbJXb1tYmZjPbb5mtBSBr7VkfrEbU/9J+iuVsBgZgMBwhSRIUhRwkwDm/V5blf75cLr/RSOgQsgX5ue9Kc5nw2EBkjIUArkI2aAwAVJCuwJvL2u1P4ctyoJaAMZaMxht/eP/KdVMoh6MNpyDrAuBDrAlHNEAJbQZR+zh3G1PqUL/pcRzhxrUrBoacBPJMvj8XHhXyBDBsepBpw1Cgn6YY9FMI+CM7PrpzF7ff/xBlVajL1I4eZOvjZDrFbDZHVZWtj4KuB/Q+MPCVoYlnngdaf8uywvHxKY6PTxAGoZn1bjQYwipH4PjkBCcnp9jf38ONG9fNXCfy+Y8QRhGOj49tKylgIY2GMtSwVHmUyhDGRDb81OCF7bQt17uUodaVMm6e51gul0jTARgDgjBE2u8hUyOVojDCeDzCbGbFGOtYawbWWLr3tjeHUYgoicHrCgDD1u4+Ht67w+u6/vtZlv0KEb3tHPGp60pzmfAkCvGzcCaKgjMNwGUCY4zjfIiug+qLUN62+/3+D9166ZW+Bl4cJ0i8uZqtAjD/WkpxBfCEHw8uYNW20XBgunMQCC/cuG6+7gICRS5bQZ8HGIIIo9EISZx4MJwvFvj619/EIls21J6sAzs5PsZkOrWmuDGdO+4l0PhtIbgahBao5i+Auq4wmUwwmUyQ9lPsH+wjTe0rRyTw8NFDHB0d4YUXbmFvb1fvQL/Xw/7+Pg4PD6UJr/MiT6mi+duaytC8Dy1l6IxQQXu/4aJujVZ/T05OcOO69bI9HAwMEAFga2tLArHJsItKQWfMsa1X7FhU6PcHWMylmb67t1/cfuftX6jr+iGk2AkhzeO7kF1p2n2DvkfCYwGRMZZC1ts9jRCqpXdexI4wBPCazlYURT/+wkuvKJMMnrncuZgRKOc0mgj/NzqOCRhMJ2yC7LR64+oVABKGgqthhR8zDHUxdR0pMACjjQ1EQejB8PDoGN/81rel2ybn2rgQOD09xenZWcN07laFF4Ggr9Rhtrt/oaCq/9PwWC4XeP/9BcbjMfb39mX3JhVqzvHe7fexXC5x8+ZNCSDIOsorVw5wdHQkTXuoPDCY/OlTrVKGGmaENiQtAJU1oVuboUxeFU+PxOGcY76YYzSS9Z9BEKDf6yFXdXlxFGE0GmGxWNjGj+5uhA3IuRGdxhTWZKH/L01TA8TBcNwbjjbKydkJID1iJQD+b/qUdqW5THhchbgN9b/Xvz4AACAASURBVDh+4o//U6/9kR//x/6Nuq4XvK4WVVXNq6qaV2U5L8tiURT5Is+W8+ViOV/MZ/Pp5HRxeny8ODx8uOB1/aTm8r7OR6/X+77haLy3u38gx8sSYThqAnEV+LBiuzAFwC3sXccMB7ojsfx969pVRKEEDgmgKkunm83HAUO/VVmeU3ayHo3HCMA8GN7+4EO88+5tGBCRVJITNeG6naaB/HOfpwovBEXAqEN9vFxRLPTBqP+fTqeYTWfY2trE3t6udCShwv0Hj7DMMnzm5ZcRmCknGHZ393E2OcVsOnPuI+z5FPn0h4McM1o4rNP9NFXO4fS9ccBo1zWYXUU6mUxkB3Tp1gbDQd8AEQC2t7YkEJ3QEnisuWddWG1QS7d5iXL4Ctx88cUvTM5OfgPAQ8hGk+95GAKPD8SxXnnx5c+83uv3P5to04lsYYFbQNwCKhcSgi8553Ne1wvO+aKuqnldV/O6qudVVS6qqlyURTHPi3wuobpYzGezxeTsdH5ydJiVZbGl8xHH8Y/devFlAPKdS5IEceyayx3gM4X6gqD0IOD3OxwOU7UfCAOGWzeuGhiCCHlZfGIw1OsBYxhvbIARDAx5zfGtt97G/QcPAed+lEWF+w/uoSgqo5A8E7lxP5oA9OKdqww7zOQuddhQioDM08nJCc7OznD16hVsbmzqPZhMpvjWW9/BZz/zipmOFgC2NjZBAsqLi4YwlPJTytqoQXh1jgaS+r0GPGXotjYz05rCzLVqGBHJKojlYoHhYAQQIQxC9HsxilJapEkSYzgcYLns6oZjdd7FQdixyVGV/TTFfCbPvb2z9wUA/xWAHMA2Yyyi72FTWYfHBeKGXtna2f2cXFsDQ13AnX2QDcTDMIyGYRDKff2+KkiiVWBaBUsQOK+Luq7yqqrKxXy2LxtQZCEZjq2HmbUKETafKxWiXkRXHEKa9tUwJnnuG9euI4xC6O6peVlAcK3SVvUdfLYwBBHGG5seDIu8wO9//ZuYTGcA7LXOFws8ePBwpXlMbl7Jf67tZ3VREGroOfv1b/2yaXg1fgNy7Prdu/eQZzn2tR9CIuRZhm+99RZefuklbGxsmGM2NzekN50i95ShAaRqaZdqEA3lp20B6I3efjLZ85Wh39gizzWZTDEcDA0qB2mKorQtzJsbmw0gtuHWqhpsOWzwTecuVckABUR57l4/fenK1esbDx/cyyHN5n0An+gk8h9HuDQQVTcXoxAHg+FrujDs7h8gCkPTCZfzGlVdg9c1al4ZH3jCLRie0gBswQRWwlAdEwRBL46TXhTH6KcptFkWBAFGG5te95pOxWdA92TD+VIFct1aefP6NVNWBQnPzyGwBnbPCIZCCGxubCBgusIMWCyW+H9/7/eRFYWn+E5OTnF0dGwhtRKIHR+WhipsQdB51k0Quh9Rd5/66cFPvRkOGW04Oj5GXha4cf0GwiAAQY4Zf+fd9/DiC7ews7NtDtvb28WDBw9QVpVShkJTyypDd4SKJXEDkFYZ2i4ybWXoX4L8UZYlFsslBoMBiIAwCNGLI1R1ber2oihWQ+e6W4lX1R92B7fm0MdrFEVIkkTNCgjcfPHlH3/44N6vqN3b+AMgdoYR1NQDV6/fGMZJclN/1fevXJVD5DoBY7fxmqPmCpp1jZrLv+663sc5B+e1OYa7dVmeOpEvZxhF2N3bQ6SH6qmCBicP7cK8SiE2tut/zrUEQYAkiU0edrY37RhmEigL2S3lUsPxngSGjVZlQQKj4RBRGAGQSrSsKvz+17/hwVC7vp8q78fmHnfUF66EYgOA/m8fit0gbP8F2vCzKqs7zGdz3L59G7du3USSJBJWQuCDDz5EHMcYDoemFVZC8ZEZPgfd+ZrZ7jRWOVplaBpV3Dx11B0CaKhEpgDLzCVNpxPZXUsdmPQTVAtuaLUxHuH0bLKmlXid2byiWbkJUSUde/0U1VwOfRwMR18EoIG4hf8fhEsBkTG2Celh5hUA/NXPff41EDEiIIpjNV74/KFxLGCIWCS/4KrPmPDiOEDtaAkWQih4cvC6Aq8lNMMw8uZi9iGmClULkjLtphpt5WMFKFNj5sv4Vw72DAyJyHizAS4IwxXD8R4Xhv1eX87/DHvvvvHNN+V4WXUNVV3j3r37yPN8PfQ6AHkhKBJ5z8CuOwDU8OuAoA9Agvez9Y7KR1sUBW7ffh83blw3Lbkg4L3bt/G5115DHMuW6SiKsbu7g0PlecYqQ3KUoTGCHWUo77N2PuwCUvdH7FaJCpwmLYa8KFFUBXqxnMI0iWIsme3vPBqNcDaZOFhr/uvCnrPWNJcZnFR8lCa9BGzO9CiaLzi7BoyxmD5l3msuGy48yRRj7DUAXwbwKuTXYnf/ytUfIPWCp2nqFIIuxdXYJvxt8BbIQiK6jwdkZ9Y4jtHr9ZEOBhiOxg0Yroeqf154ebD70C7wwk8nTfsmThCGONjdMfs5F3Y87Voz+NnAMI5iDAapozwJb3/3XRyfnJo8c85x987dBgyFWYRaiATMRE/6L6k+lZ0fjUY6ymNKXVeo1cRgQk0SJbqOvWiXqE4Qy6Wua3z00R0sFtJZAkFue++998AFN/eg3+9ja3vTg7Lr21HeQPj7VbnwQO4A3AW7B1T9hwBFRoAIi/kSNlUYYOv1Xq+Hc1uSHfJ5EATQRqm72dY3JknPHBMEweaNWy+63eu+51XihYDIGBsAuKV+mjFUe/tXbuoHnuo+ePoldpRZ53LeftJvjQ/Kdjpd8G0AGB3bWgXXxrNgbJvY+qUmIsRRZE1zEA52d4xTTQAoSll3eJE6wacNw4AFGJlhhBKGd+/dw4d37pjrEUS4/+AhirL04NX10egElhmj7B/La46qKJFnGbLlAovFAtlygTzLUBQ5yqJAkWXIsgxZtkSeLVHkufQApEGp8+iBcTUcuxQ+IF2j3bnzEUo1TzAAZHmODz/40D5PIoxGYwyHQ1Pdo+8b4EOt6QJN/yV0rdsypNfJU7g2brN7Tc8AUb5P49HY/uyqN+ysO2yYyl3HNhtoWIA47pk0D65ec1XiHwBRhT2oWxjH8WuDweBPDgaDf3I83nhVw6PfHzggcUyl85ZzoOjHEQ0luQ6+op3GynN1wdPfbs+n8gGpDt1CdeVgD4AGkFCeXT5+GIKA4SA15pwgwtnZGb7zne96z+To6BCLxXwtaPTxK/cpYHHOURYFsuUCWbaQcKu58Zlo3wc4I0WEsQT09JVlWaDIc9lv03jUaZ9vNQzR2lbXHB9++JE5FgCm05nsaqQsHADY3t4ynrxlfuGkdzFl2DLzvWOwQkXCeALXIYqk30HNrdF4iCBwzWP3/7a53NW6vNLUZm7LtDKbVT5Go43XHQ78ARBV0N1s0jiOPx9F0VfG440/lg6HqX7YfWMyN8xQuC9nl0JDA0LnxG0WBse89qG1Sg12LauAsKYOUZByJiC39eIEO5ubBiB1zSG4uDgM6TFbkztgGEUhYjVkUZAcO/u1b7zpKa/JdIrT07ML36NVUBRCjs/OlktZXyq4Az2p6jQIpbnNARKy8UJYRUXw7zXnNcqiVKpRgdF5xu7SGkkEF4zyb1EUuHv3rnmhCYTDw0OcnJ2ZOIwF2Ny0prN+tnK/VYZwAUlkGlA0+uQmZq7btDu76QJqh4XifO6rxMQxm8MgRNpP0awllCs++XyxuE4luhWLznmTvonU6/ddhThmjD2Xc7k/rXDRRhUNxH4QBDcAYGd/38AvThIzF/KqxfncNsBFTqFYUyjPUXhw9rvpt86FVaDtUomroCrUF9x2wj042PVMK9m63OWWawUMRbtO8cJdaxwYEgmkg7GBGAC8/fY7qErrhCHLMjx69OjCMHSvW59DCEJVFiirymyHe38Fl3A0qsyxHzsCqUKpn6UO0mMzR8AC5TJrRdcTDSFzp20Di/47m81weHiI/f19k879B/eV27MAYAyj0QjT2Ux5JCKYhhC5KsEJF26ssQ7baAJ7jMkP/LjmeghYZhm4EEoJMsRxhKKsoIHVT/vIirwDaF3ByMIGE32NaWI79Yi9fk8eDiCKopvbO7sbpyfHU0gB9QpjbAk5tlmov7zrN9kb86kJ5wKRMRbB1hv2giC4BUDOUaIKQKxbMc8zfxv7LYnQDcnHWeCn3zyXNnfRyuvlTOzEXLN84Xe2tixwhZBeYCBhZc7VWrdgA1wYihUw7IAl+TCMk0QOGVTv4tnZGR4dHpq8V1WFe/fve2qxtbhmuL4vTt7rqkJR5MYchronQnCIulb5uVxZ0J1QrKssAneS4EKA81I5lI3cAw0MSa6ooXAEIgZm/so0Dw+P0Ov1sbm5AQKBVxyHR0e4cnAgYafchh0eHrXGLmu6kqZeE3bqeI09phtNDFhhTHIoUNv7JB3JZoslRmPZKh4GAcLQetAZpCnOzs66W5e7OmPDx1/TTHYbU9wQBKHs+1jXAAO7+eJLnz89Of6q2v3ShZ8pYwQfmOdCdMV2d72kZ9jSfRGFaEalRFF0FdKhAjY3VXUCkRoi55g/DjjawMJaE1nDSoPyssefp/BMmg0T2yicFhi6FqG86EhIMcbUhFLyd11Xxtcg4E+23p7XxPVEY2EItc1VmWgeQ0pZmnsPDNKBgSGEwHffec/L++HRkRmXvBaGK/ZXZWEaKDQMhRDgVWX78q0JuvCtEw9MKZlQ3zv9fABVLykQRfFKGBKjBhSh7p1cf/DgPkajofHUfXJyiu3tbeU2DBgMBkiSBGUpXZ9pxecqQ3/dQtJcV0sZ+scYNencEwDIihzD8dDotzCIUKtO2UnSQ6BGdZ2vEh0ctujYNpMNNlXcpNdDzjkYGDY3t78A4Ku4fGCQjHmafleJMXYE4G0iupxr8QuEywLxs2bjpnXLn8SJr/TOg+JKU7S9oGNpg7ejEJ+nWBsmdvN8Fs7d+TedsUHY2BghCO2UAVXtO3G4KAw9TziNxhJ7fMPMdj4kvaQHFqgXXQg8OjrG2ZmtJ8zzHDPd8boFe3e8cvc9y/MMdVVbVSgIdV1C8O4hrkEQmAVAS4m491ZPZuSCkjEgVEMiOSdjbpIgVFWJMHJMaAeGmj4aivI8tm6trjmOj49xcHCgbpXA4dEhrl+9Zo7d2trCw4cPAFiaOSwzHyAzHE/XB9qNIACB0r7MvE0aRY7K1OoYzHriUXHDKEQtuDFh07SPZZbDrRdsrrUaVFr/ulSl5SoDQy/pIVdzuwyGox/98lf+6APBRSE4z+WQ2Tqr66qoyiovy6LI8yzPs2W+XCxKWve1e/LAIIcRAsDXnnbilwJiEAQv6/Xx1qYBSGQccroOD7TSsy3DXuG7BLAuBsmLQ7Z1nhXn0HnVilVvT3RBVNu2VUW8VnNVKRW97+rLh6EuO53gPAeGTTDKDxCsf0AhwInwzrvvedd5eHS0Boar75FsOMmkg1WjCjnqsvAApt4Rd2Y2s7+z7g+2UOr4zVnedJwoYqi5bLWGvGKIqkIcxUAguUdaMSpJppWiZpSLpJOTU+xs75j+fpOzKXa2d9BPegDJWRPTfh/LPHcUILx1rQi1aUzmOsmYzDrmyvtAFkQEWe1QVzWiOAIDQxQGKAGDsTRNkWW5B7Vm30OdNxeVLUXp5cNVkpK8/TSVzi8EIYqiFw4Orv5sc2J79/lp34uMMQJDCaKcgByEgohygAoiyoioUEsuhMhJiFwIUXDOcyF4wWue17zOJWzLvCrLPM/zvMizYjGf52enx0vOOQHYZ4xtENG6uRYuHS4DRBYEwQtm4+YW9IOPjRPW9WrQAgzdJmrX8ViVJiw04abbVJLogB78c60xsZv5JyIkSWLNVA1ER9mtmnjehWH39KO6NbcLhi5YG/sFIU17YEEACAEBwv37D8x8IgTCYr7Acrns+Aic3/G5yHMFQ/lx4zVHXZWwgFEviCokdW0nd+ra70JQg1AHvS1UY+J1YxMARGEIzkiakAQwyDrRKI5kOkQtGKIBQlIAkqrwCNevXTPpHx0e4caN69DqbXNrG9mD+9AKUJu8TcC6V2mu2ZjZzIlgR62YIXyMNY4HsizHOB6Z/W7Dbpr2V0BNnRQNODJ1vzvqEFvOH2DVZBBG2NrewenJ8Xoz28mHSpMB6LEg6DHGNnX6YIFRqy5UDWTNexGoe632B/I8TB3/9rff/Iu/8Wv/uzbfxwA+PiAyxhJYT9hJEAQ3ATkIvN8fGCjFq7xS68KHLiiReTm0AtNQuxgUnWVFXZ8LR1fldYLgEopVzlMs0wuDAOPRQF4hEbhqVFgJQ5wDQ6fhxIchdcNQXUvS6xsYci7w7nu3bb6Fow7X3YMuGBY56royH526qpSreRgTV8PN3PcVQe/Tf7UKdE1rF5p6KoCqqswxYcAQsBBVXYOUSczrGiyOrWo35rIxTNV5fYacnZ1hd3dXjQIBZosFltlSjSsm9HoJoihSzh+YA8NVCZNRhpqacpfcStAqESae4aeTryLPMRqPDKSiKEBdCzAGJLFqNBNipdnr91Y0pGuAtKEQfSqCMYbBQI6Blw1o8lnpIktaEsMtxxaMPrCdc7lq1tmrAWiyq0HqgByMYTgc7TkZfxyn0mvDeQrReLVJkuQFqNbm8caWqROxrW/dqmr9tgZwukCmlrXAwjn7OyEJX0muAWtzSXQVAYDNjTF0B2gAKOtqPQyderJ19YugC8JQCARhiJDZydMfPniIPC8MWKfTqZnEvet+r1qqqpTddRQMpQOOyjNpo2hFVxgbCshWwnRVBG0mA9JRaRiGHhiTJJHexlUcPTVmVdVSbUN6tInjCMQYFH+UQgPaysaGw8NHuHXzlvl9ejpBmqbQeEvTVHUtIgdydv4UwLZAG1jqUzofB6tRYdhhAcmcWEx2rVGxCbIPYi0lMcCAXr+PLMu6FaKGimMxr1eHbou0E1OfK+2jPxg04ivFFtjfgQtZ0lemP4By3f51PhDqXdSaSO83+5xywQD003TXueCPHYhmmF4URa/q9Y2tLU+1vfXm19Hr9TEYjjAYDpGmQ/XBXAGudVBcsb8FyFWQRcc2Ha8FTvhpmwe44niS03XqwkIk5wi2gJNqRq5bFWiUkYYhtWGov7qXhSFBupvXMCQiPDo6UmnJ8x0dH7ev6Rz4c16jKHILQ85RFrmnCl1wAZhxzr/KOf+aEOKIc35c1/WRnrYyDMNBHMe7YRjuBkGwF4bh62EY/igA9wVX3o04oigyrcCAHM9bK+9HABAwJl3NKfOZIFCr4zylBkCLmS5uz2ZzZHkmJ3wCkC2X8h4rU3YwGGAymVr9Q+TBTENLrZp7YwDpgFOn6eejrRI5l6OckiSR1xr4aimJY+RZ1gEpCzaDN7Pxcuqw1Qiz5lxtMzhox1fqP+iKF6w/9vT4CCenxwAYkl7vEwWi+aozxkxly8bmlld4CYQsW2K5XAKP5NPt9fsYDIYYDIfo6ykklSo7VzliFZRggOZsaCu9lcdfDAbw0vfTDsNQ5wBEhLQvn4nuHsJrbhweyO0rPGI7EPW2Ofn0lWM3DEnIKguo/HDOcXx8Yp5NnuXG5PSvf71ThqLILZyFQL5cmDxrhQbghHP+61VV/T/L5fIbRLSy3w3nfMk5XwL4SG36PwH8/GAw+Fwcxz8WhuFPuO+Yhl8URaaeUZ3TQDEMAxAJcCH1g+AcFASAGvJ20TCdTpGqd1SQwGKZYTiQM+L1egmCMFAOfi3U1Co82moyahi65HOEo5+AwmYjw2VZGiAaU1IBK07iNerQNZGfTB16IF1xLtdMN//crOjz2FvQzqe5M8xJ3uYximOTxzju7TgZSdpP88nChYEYhqHJyLtvv4WqKHD15gu4duMmRuNNJbCs+loul1gu56BH8sGn/RSpUo+9vga7hdrFoHgOyNxFptAdt6UUV8Tx0pbXF2vVoranad/AUA7Vs/FXecQW7v7GNrveMKNXqUUmFaKG5vHJiVJN8iMw0w0rl4ChUWIqjVw1xjjvwrKu6785m81+RQhhp4q7fKDlcvkWgLcYY780Ho//RBzH/xLULIpEqtHEUYtRFMl7rcznKIogqlo+cgYIzhEG7dFl66z62WyOK1eYibhYzDEcDgy3BoMBZrNZy0zWt4TBT5zkRqMibZ2iZWazmoHI36YbpvTxgWpY0QrxPMV2vjo0cvAx1aFVhmiexydyQz0yP59umma/f2+iODZpxXH0fCjEMAx39Je5yDO8+9238O533wIAjMYbuHrjFq5eu4Gr12+ir+fNVRyBEFgs5pjPZ/LBB7L7QJoOkKZDJL1eS5EZuD4J1Fpp4mIKVW9rpQ/l89EqOOPggaDG3IoOGNr+gh4M4W/zYWnkhoFRE4ZEAr1e335AhMCjR0feNcp73rxvqz42yoejcRwL1FXpdrjmAP6P2Wz2i1VVTTrelwxyAvMZZN2hXgjy5dXLELIv2UgfSER8Op3+vTAMf200Gv2pKIr+FFSDnm5ttj4MI6+hJQplIwvAwEkgIGoBB2hwATCFtaprFGWOfl+2Hy6cDwCDnGtb99/Ux5E1okHQnrL1Vo98vplshKFvJxu1CQkGXfVi0g+0L0WGOG4Ko8dRh270LnXYvFlaqV5EGTIPbqx5812AernsUrDSGtHpR3HsAjFhjDFyv9ZPGC5jMl+Jogic89bLNp9N8c5bb+Kdt94EIE3qK9du4sr1G7hy9TqSfk+BBQCkkprPZphNpwAILAgkHPsp+oOBmRzKmMOOCdsJMFwAarDbPUiql3Dl8eQeS4giC8RYKxeVZs1rAz7AgSE0+FbAEh3KEb6Z7dVJOv0UtQMAGVfg8PjI5L8oCxRFeyL51U58oRovuLn+sjBTdk6Kovj5six/o/GO5ADuATgkohlWh6VadHiXyels9wFcherexTnPJpPJf9fr9X51OBz+R4yxlwDZ8FKWJWKljjQUAVnHJseVy4Q5rxEEDjS811UVQubDYj6bI+33Jda4QJ7nxnlHP00RMCafi373DQ+dRhXWUIuSkdYyVgd1qUTLR7m/rNzRaUydX/4Kw0AqYyFaiu0y6pA5cPIBxpxDLZicIzsAzJx07c+myeyrQx1PQ9bJo5PvKFajksAQBtFWkvTCsiz0nAoJ5Ef3qYSVQFRdbkL7k10F5NdZmy2u6eKG6eQM08kZvvvWNwEm+3NduXYDV65ew97BNQs8BUlRc8xmU8wmExDJerp+OkA/TdFPBxJCWtu4oDSQJG0gd0DtYqa3C10vXU9ZkVGIIO3tRuZFQIDXjl/FLrdfSgV629AGX9e2rk7bINniLZRfwslkiqoszf3R/RBb10K0oh5VKCcQ2lw1LdMfLZfLX+Kc/5bzmCsAtyGnqGy/BBcIJIdefcgY+xDAFUjnwykAFEVxv67rn93Y2Pj3giD4Iyo+6rpGHMemm44xncMQVc3NvaWWSnSB0A7z+QL7B2pWW8awXGboK0ACcka65WJpPupaEbqA03nUUGiZyfr8rkp0+hgalUgMvOYOdCX0hXOiOIpQlKXJL5oQaqnDpnmqc7ROGWrVttpkbilOF4wdcHPV4XplafMdRbF9lgzs+q0Xtt9/97tH6lb08HEAEY46TJJkG04Fptv6B9huE82hVwBkQT09weT0BG9/6xtgQYDt7V3sX72G/YOr2D04QBBGykSWUKt5hdl0gunkDARCFEYKjin6/VSO53RAZyEGaLCtN7NXQLJhIjfBywDpWEAprDTtA4LslJ5qJIepM0RbJbrmrt2vTeJ2nWO707ZOQ46nFiqPBCgnDlYZz2cLcy+a9wRoXr/wnbOCUJclOOe/v1wu/xYR3YWEIAB8AOA2PaVpKdU785AxdgjpiPhVAIxzvjw7O/sPNzY2/lwURX9Gv2t1XZsPc1nKeYx1CybBmUpUdertBGGj8OdFjqqqjeJeLjM5IZV6p9J+3zhx9eu4JMAMH+FamayxTRFObWYuNaFUooILkfS2HkWxAQNABhhJksj+kQ6cDIQ64Wbz1AWxNpwsoOyhHcrQ13ydJq+vCu25ffDaNM159bFM9mjQinhnd2/LAeLTHCe9NrG+iRRFpvWvq27GHXHgKscuQJIQODk+xMnxIb7z5tcRBAG2d/exf3AFewdXsb27b9xqyZdNmnFlWWIyOQNIDhXsK/M67afoAtu5iq+1dJvI7nb5IbDXk/Z7zmTvMH77hAbOCh+I3bPrtdXk6q45uj9eoOAs83h2OrEwq2tk2dKHYONeoHGdegIvAkHIhpVvLhaLvwmgBvAAssvfm0T0cP1r9XhBKc0PGGNTAF8EEBMRTSaTX9zc3KQoin4agKm20X0W3Q7eXAgATDqAQNTigg8AeMtiPkdvewcMTM4SyWuEQSjNtihyFJ8zSZRWeybY0TBQb2KrzLSOcY+GpqUBv6e2VLANDR0Ky0Vkh7pzyOPDzTN7O+Bm9zpw04f5qlJejM4fM7vax7JWvvWxbp1lEIZm2GaS9NzGlKfqn3EdEE0fxDAMr+p1IjlxUnPgvg764i4KSCEEjg8f4vjwIfDm1xGEIXZ397F7cBW7+wfY3NqGMU9UYa7KAkVRYHJ2il6vh/0r18AYawHMAggtIKirQRMK3WoR1gQz6UpHrICEIUDgwgLMgrEBQ6cLTcutV6NO0U1Lm9t6XZCe8xfmXHmZm7znRe5fz4rF3hM5cZe+z3VdTxQMCXJ41BLA1+gpjx3tCkR0yhj7bQBvQHlXmkwm/+329vaLQRB8BZANLfo900B0zCrz/FwTrlstuiqx8JQPrznCJAKRnMNHKzvtsAGk1KK1iQFYU10Zz46IdPOnjm8qMPsHVVUj7TOTtAuPMHSGwjUUVpcy7DKZu81e1rhn/j2CG6+lDLsB6oKxCV6b/HpVKUcxyXhxkrhA9M3VJwwXUohBEFxzdxCR6UALwGT4ooDUYOwEJOc4fPQAh48eyAxGEbb3DrCrltHGhs4EQNIDy3Ixw3A0PgdsXXDoAKURl221KLFsj5P1iSrfQrTAM+QElgAAIABJREFUZ2DmwXCFcuyqUwScfNruODItIYfLGfVIKHI7qkR7pemuHmhfnxAELrgB7nK5+Btk/c4dAvgdIrJTwT3jQEQZY+x3APwQ5Igpmk6n/9nm5ubPMcZeASQUdV89wBZIHYQgBAFDM7Bm4YZceM0NtBiTPhjVU0AURkb5kWvmqhi6MYRBO4m1ceDEdiGjVaQMtu8kaSVKZPba65K5DQPdgbmpervh1LhJnjL00dYBtkYce6wLXhfK55nMjXN0qEp9Dr0/DALUKlriA/FjU4imorIsy99hjG0EQfAGY+wlND6zTUDqMamrAOnWQTbVYxOQdV3j8ME9HD64B0A6ktje2cOVqzdw9eZNEAGz6RSD4Qi+mQzfTF4HRfdfh3lpXloGLw3pUECatsLzZG3T0mrOALJRf2iAtKLPoqsA9fVo04EF0uUYCHa6UxWvqis0obdygQ9DzvlRkecfqEfAAfyDjxOGOhBRzRj7GoAfAZBwzvP5fP4Xx+Pxfw1goN87t3ElCBiEUC+oECvhoAupq35qXnsKRvfnBJP3mgXMvlteGbZzLTfkolGpRi16F6itYwbmAVTGdIcqAnJ0js1u6OXdBZQPxjVwgqva7PE6H60PhwveLrCZcztpNfJ3IVXpPiv9iILQPLUoij8RhXgCOf8ysiz7TpZl3wGAOI43+/3+G2EYvhEEwZcYYzeaB+oH2Ry87ypFHdy6IMAHZFcLdlWWePTgHoosw5UbN7V516EISbGsDba1imnNtoAxLz3pmVpCSGiAuc4ZqMMFmOfJRgO04RDWhaFRji4MJSADpk03Ic09mSCI5Nhe94OAc6AoBDfKmPNawxAAvklEx2vek2caiChXUPwhAEFZlo/quv5bURT9WQCmns3AQ//H9NN2TDOsKOSQkOA1t4wB5OgUh2FhEBpT3epE2z8Q0ICzx2iT2RN46IrrHaSvXa6SakwJLM7C0AWQb/I2wWau0Lvu1ce3PhwdqtLetQuA11GaLVXpKkEDdCd15luYjAFRFLkdMT82hTgB8D6AF2HvLKqqmlRV9esAfh0AkiTZ7/V6LiD3mwk14dbl3USHiwKSheqlVPaF5VRTFbXBphJumcoeUDsAAqUE9D7tcgoEM3+ITNqBWsvRA7q3ubBUeexujbYKUtdpAkCe287URI6HGOfalGz2PhYWiKRrCyC40P0JT2CH2n1igYgmjLH3IFufMZ/P//bW1tY/DWAHQOPDycActXZRdQgGpZK1ImNy7mZzhKwz5rX60DBH8UlqmbPCMZk19LTpzdDsZuMD1NWRcqIurUDtfqNYzSU0TF40AWWvyTd50YDn5eDGvGOdi2rEWQddR1Oa49xnos8eOFUEn4hCJFmC3mGMPQBwAPnybfpXD5RleViW5a8C+FUA6PV613u93pcUIN9Ax9SFLtzcL8B5gBRC2M64LDQw0F9RrcpMQTfw6lCAgAc391irKP3jmAGv3BdqkxnW7X+rozXWuwAz5+/wcWhVol9/qJ4QdCuzgBxdYq8LqJvjl517oAjpKWg7HzGBE59CtijfA1Cuekc+5vAhZJecHuc8r6rqr8dx/LMAvLpsX3F1q0PP3GsUdDn0TzqtELUGrXreYQRyurw5CDRnROOXu00rS72fCHIEikqNIXAOYCASXnmw59JD+VaYvBr8LSg6gGpCy3wwHFXppLcabk3ArVCULpDRcZwLXjc/Kp6xLBlDGEefSB0iAICI5gDmAN5jsuJiC3Ks6Q5kZbf3HhRFca8oinsA/mcArN/vv5gkiQbkF+EM11LpGxUIrAekW7/IgkCJH1nHYxDXKOgwymiNWbzGnFRnVmaLTleeLwwDCUOVznmdqj0z2jVju5w3tGCo8wrj8kv3hwRBmsz6YwBCxfnq6/U+FhbIBpRSIR5CwvCpdXp9kkBEgjH2LoDPA8BsNvtft7e3/znG2DXGmOmjBuhCBfNmNtUhWgXWwpNzjiSRx3Cl9PWBpu7bCEO1omSgiers12KxqQJ1vvRBsvCTyQeYbBSC3qS26fRlK/P5Jq85wFVdnqK0EGsB1Enbu1eeonTS9MDW/Nj4HyTvYtRCAOqyQFXVqKoSdV2iqio1Rzc3+Q7D8BOpQ2wFkt5MjtUCJmfk23aWcfOQPM/fz/P8fQB/lzEW9Pv9V5Mk+VIQBF8KguALaAzQ7gKkBqMHRKYnFPePe3JTeQU4QX4eyEIZBNX/DV6jiO/1prGNGo0t5MCwmRbgAVKXETe/xt+hglpthn65H4qOBQ7M1bVywScAdF/D50UhAsB9AC8AGBER55z/uu6w7b4btrACALULO1arJz2hE+CY4qrsRsaxh1Z78PY3Vq2Zq7lHStU3j9FpkcManYDDDWN/Mya9oytA+WBco7wupSgbqrBLaTZUnw/eBnyZVe91XaGuKlSV+qt+y/pZqGdnu9kADHKWWLkehp+gQlwXSI5UOFQLGGMxrHrchupD5sQXWZa9nWXZ2wB+mTEWpWn6/XEcvxGG4ZcYY9/fzJOs5JcmkW6JDsMQgnNoRaMnW7q0qeyotnWmsoaiN+KEyMwXLEh6L271I3QgCDRh2O507c2b4tUfdnTeZm6ji/TT6MJcw1vfA32vmteq7wn0ZhACFtSQnbGBp/wFfpJARMQYuwvgcwBQVdVvuiNYtIIzhV4X1kbhX6diAmUug6lWXROYdbhhAAdn5J1rPluieSavpRrM6BZj3fiqzghXc5xWpDK/+hmzFthsHi4Gt6ai7Iaac6fWg1etc84V5CrUVY26VgDkNZiqHvDUJQIHho6iNB82hrqullVVfTSdnL3vvhbr35rLhac67IVkv7VHagFjrAcfkGkjfr1cLr8B4BsA/noQBL00Tb8QRdEbYRi+wRh7DY0vgFD976q6tKrKmIfoNJXbCul8Relk0sKDeyhFXQsEgY3b6joDwOti46o9p+XZB2R3a7QwdZRynxBOmkToOfNEg6R5Z/0gdqlgmGNBbpcRQhCGbiveU3ex9IThEAqIy+XyO2maHhPRLgADCU+ZBIE1Cz3zr2EGqn1xHJrjvfmfAT1PsQz6XI6dLAWcD1FjEgcOcAAw69ZbQdqmA6jNgawnJAICh3faOloLJwWRVYoNK49toM+FYgO8XHDpiaiujcLTANQWlTGTXZVoSA/nouQ6r2ss5lPjD2E2nSJbLn/5wf27356cnWYAvgvpTUmHk4u/OueHpwrEZiCiAnLI1wMAYIz1YeG4g0ZhE0IUi8XidwH8LiC9LKdp+sUoir4UBMGXGWO3VDxpEqryzAVfrwo1JRqmcstcPkdRctU1RachOwbHEpb6ms8bgdI1drljKgF1/+Q2F5QKjHVdK/OZAeROBSvjRmEA31yGVYTkgtEBtbq0IAjcD9dTd8L5JIFkN5wZVGdtzvlvBUHwU0BDJUIWYts6qQt7Fzys+Wfme2YMQeQ0cpCd3ApogM8oOMDauc4v+Yis0mM2NpSyMuaySVK75XcmonLARjJBR/V1Q7ELbvo4V1G69XteWtCKr8JiPpcTjNWV6uomJFwDO2pGp+N/hlyOMpAQWMznmM+nWMxnmM2mWEynmM2myDPpEEl3pQOALMuOq6rSczC7AukMqvruaYVnCsRmINm5955awBgbwALScyABSC/L8/n8qwC+OhqNfi9Jkv9YpSNbmzVYjDPT8+sBXVO5ZS476lurJ1dhyc7XZKJz57yM6XN2TCzf4fWma1RKc9oAbUabdBy1SCSHCuq+iHESyytXeQ1D65HIgtG5Vgee0DH0/QDbdh7D86YQAakSxwDAOf8WY+ynAP0BsXBDAE/VeIW8YSpreIZhaIpyFNg6QygzUAbm/fFWzUx/arsxA01CnccbGpJVk9q1vtytOxP5JrOr2HSinaYya19v01z2VaD9PTk7w2xyZrPZnEEPPgwlxgnLxQLLxRyL+UzBb47FbIrM8b5+kcBkW4UONYBTSIbcv0w6FwkfKxCbgYi0j7w76qGM4JvYbv58WNa1Az474N8v6C6ULCx8VditDFX+PEWp3WzpdKvKOkMAHEWolZ2CWEslNs1oWt0Ao/Ps9kHU8eq6NhNeSYVor1kPK6TWNaPzeq3iITCGA+dWb+D5C1otQAhx4hUKo1SAAP78HOhY3P2x64kaTDp20BIPcICoAtlzahPWIaNVSA3l52ZW8tIxp9WHVV6DrhNV6TnwArX7WJ5rKrN1prJnSBs1WRQ5JmenZr8xb9U5ijxDtlxgMZ8b+C0XMywXi86BFRcJ+uOkn2sURcdlWb4F2ePhG0R077ESvkD4RIHoBnXxuovPR0w+vc8AeAkAGGOx+zIREeq6kt1PlDnrqiILOsAFIwzPXFV4vrlMJB3buofVvFJ5AfQs6RZwGobUcAfmDPEzHbHd+VQa0Gy1Stu6RKGmHSUiJL0Ybq2AdDyhMtpxze531QCFtGkX/CEWBDEJUQHoM8bGtN7568cdTFcgzvmxnmsFgIUCkx5SfCXYVkhGsTHlQcZRUkEo6/D0h8b2d3Ry4tHOzSIz7FDWrTqfUokGMDq2halWXmHAOmHr1SE+VVO5oaIZQ75caKZiNj3Do4cPkC0k/JaLefsjcYmwquqCMebNshgEQQXrXPiptio3w3MDxGZQLYquv71WXVZdVUiUWSM4RxD4Y6RbjShrVKH93PsmpXssN/3+JFBqzg3oGGPd3q2d9JvD9axy1Nv9rjW6s7QHTWgFKacFpTgGQboGiKIQZSnnUPY+DuafVYfwrl2OAQYzwEz7/fQHs+XiH6qbsg+/IvuTDgaIdV0vEmeSLTnRuSzQURg6QmmNKWkUYmhgJKvGdD0s2h515A+7asjFnF3+CBMjKBtpaMFl0tH8Uh3/jUkLCzZdh+iC7bzr69oGA8y2qczAjMMLxoB7dz7EnQ9uX+pBrYOeDm45dB2/OGm4Zf+Z9np4boGogrlrjZsCAKjqCkmvZ0zmKPILuV9fBmsydwDCr2u0ytBuIJAe7C8TR125Hpplx2DeMe9ylxkNWJUo02g0xLgq1Rmp4nrBqepauiRSSjSOE5RlBYAQx5GjDJ170VCHWtUqZQgCBwGIovDHAGggHgB479JP79kF0zeyrusQ0gFFKPvmKUgEDKGaM9qrN1xVQMEQR4kHDqkQATCGSvVPtFCzmWGWZs4+B5Y6soEbWfC6B8IHX6iA7p5Q54+ANlw8sLH2tXdeP1r7XCia4YuMoSi6/Xs8LvS8sro+PLOxy83wvAPRvVs14H9d67ICDWUR57xjJjk4Ju9ak1mdzFNOmoX6WKCu9RzAMk5RFN54YwY53EqbvrYuUjekUKs1Was/AMZxg1aQgFWJGubuNuvdWsZN+33MF3MQAUkvQRgFsp5Tw791jQT3fZS+BaUoZ9Jtv7bxRoyxPSI6wvMR9EsQQMKaAXokiSyIYRh6UOg0CxvLaDRUAoyBsUAOzVTvm9CmITkcU1lxhKGtZ9N7PTHYUHqtdRiVBjDlvds3d/U/wUX7GjrA1oSkzkenckRzm1M3D4Yis0DUw2mZfzNWQu8JGj+WcOqMvZv7DMLzDkRjMgshWiZbXVfWtDUD8Y0U9EDiK8PuOkN5tG8yG3hCtupyNUSMCFgs7OxsRGRaBzsnjGqYvO3hfA4odTw974k+Ho4ZTdJRr4EpATu7Ozg8PoRWIKPhCKenZ/71tIKVkQELAGIAERix7XQw+KPZcqknlXqVMXZMT/BmP8WgFcNBEARbgOzVG0axKcyRUoeuWtLqsamEGJPm9UDNxQxIF/3Mme+kUN6EWEdx9La11pkXx1eLNr5rKuv/3cmVVGbNdVR1tVbtrjeTYdKz98eBonO8ENzsLwrJJd0I9xShVxLRPSK6K4S4I4S4yzm/U1XVnaqqThtxu2Z7fGrheQeimXqM5Jhqf2ddGV5xp3O2VnZa37VUoaMMW6rSVYWOOakBWlV6AnHCMsthTU7VsuvMBLRyjhQHjBqCLri1aWwbVnxlqLdVVYW65mZqg93tbQBMfQyA4WiIk9NT33LWd6WphFW2rQdqQhTFP8MY+02SQzZHkLPj3X/CZ/o0Qg/y3b0ShuEYAKIwgh3uFajfq8w4DcbAAGE0Gil/gzJOL4mVXSpPuFwuW8oQ6FaA9kCr/khBxuxxDrQwtPGjKFL9EO0+5sCL1xz2OjTYHPh5YFuhCr2PQ0NRgjnDZ2WeFnrSstb1XihwInpIRHc0+Djnd+q6vluW5aMLfmiXeModsZvheQeiqxDnzXvGTV9EXQnbVdCbqtDZ3nwGnipUi2t4E1CWctY3IkKWZ85cJ7YS3qsnbE4yZeDn9ld0VCXgHe9NWu/uV0uWZRiORiBBiOIQG+MRJhM5vetwMJSAq/0O5eh89eQ1BqE0mwkAGG6m6eBPLJeLv6ciaZX4SY9vTgDcABAyxjYYk1NVanUVx7Fyj6ULfNAGQuCDYjgeeWZlkiQGTpUahWGCa/qaTQ1pyNRedSOZW/PFnLpIZXIHrunMIOuAXTUZwoAMYMpSgQNJ10y223ERKK5QlLKOXJnLRX4RGBIRHRHRXSK6I4S4K4S4U9f1naIoHtDjT0pWQbqhe/9ZWyifBiBGAHaqqrqiJyrXQXuFBrRCBFyT2YebV5PWaTI76GuBVYO3qkvoEYgaSGlfThYfBqHf3YZWzb7XbE12THbHDZerBt3uNqZ+kQhFkWMwGJi4uzs7mJxNjUk2HKSYTmdYQUF7v1RgTHZX4QoAYRT+i0EQ/KoQooBUZl9kjP3uJ2w6fxbALgAEQbARxYlRe0EQIE6SdsHvNCut0+LRcKQgJuvuXEfGyyyzAHNNTkDd5yYMXctZQ6x5vF6XLePkmNQEwH3XZX5tZ+i64e6Muf8cxddWxH4VwnmLENwIxyL3GlQWRPS+EOIuEd3hnN/hnN8ty/Iu5/xxvSNx2Lm7vYXsVBbPPDyXQGTyKe5Beuz+AQBMNHp5RlGMXt/Mg2Xq6HwO+mavZ5a6gPCko4rnp2AAWpaVkwawzHL01CRgLGCNrjU+2AB4rckmnoZxowFFb+tWjjKdPC+NG30iws7ODt5977auLMBwNMZkOmtgD2iC0A1mJjsiAGwnTQf/2mIx/zm1ewvA9wH4dufBzzgwxnYhJ58CACS9/htyuJ0sxEkLhisUolJwjDEMh0MEYWCAkvTcRk2G5WKpz222Acow9qxkx/RV8ez+bjBqKMr9dlsURzqi/Ov4A6y1K6xLLmgAE866D1WZB87VHDOMQfD6XpZlf4dzfiyEOAbw1mM8PgHZQNIFvefCzdxzBUTG2BjAdci6qhgyfwwAhBA5Y4x29g7YtRu3sHdgGhdBJLuc+MrQh5sBXMNktsrQB6hOypiaCh5V5XysiLBcLrG9tQkIOXIgCALUvLbpunWHrhkM1wwmoxLlMV0OIdoNMaTqGfM8R5r2QQT00z4Gg4GZQ3g0HHrm8qq6wyYbwyCQLfcAWBD+VDoYvJ8tl/+j2n2DMZYT0e0neNyXDoyxDQBfhpoALen1Dvr9wWd0wQ7DUJrOF4Ghs288GnnqKkm0OpMOY4uyUFySxq3Nj/wrWahlIfP2E2AgY1SavR5zHgNDdXwSJdbs1pBSSq+u+Gq114DaunpDnWc3LTjbhRDmN+f8w6qq7qgMr1NsBCBHt9rLn5NGuZXhEwcik/0Lr0KCcNTYzQHg2o1bVz7z6ms/vLmzgyTpWZCov+lggMFwtEIZkgGCVYYOBS6hDnVDhm2RlhOag9Rk9SQrw6taO55o1B0CHQ0o6GxAaXrMdsFo05THZFmGfl9OkkhCqsTFQk5SH4YhNjfHODtb3TjX9YoGykM5kZxXJAyjv9Dr9e8URf67KspnmByL/m3SGXmGgTF2BcDrkJYDwjBMtza3/2UWMKbrBHu93uVUUyDrGzc2xmZbFIZyyJ5C0XK5tHWBrA1D3yS22hDMmViKAQSGgEHebKPY/ONdKPb6iYVhwIxSYwxqMiwfak2wrawqOKfe0ChJyHmhteot8tydflY7Du6CXvZxvA/PKnwiQGSyP8MeJAR34X5WVdjbP9j4/h944x8fb2z+yX6a3rIAhAFYFEUYDEcYjTdgPMa49YZwseayz1FJuLg6BOSxVVmpjs+Es8nUgRQQqrmaW3WH5PtTbE4vYI6hdgtzUzkKr3qAkOeFgScA7O/t4qOPPrT3cm8fEyefF3pGkN0+qrKU9x0siJPkPxBC/JtVVb6vol0DMGCMfe1ZNbQoSLyiFgZgjwVBtLWz9y+wKNzUBbvX68uhepcBIhh2d3eMD0TGoMxl+zoulfcVSS2FuC4YGjUHc7yGoY5nAAk9mX1bOWqzX4+6YoDsDuXku9ajR1pqz4faufWG6NjmLFVZGoBmeXYbwG1IEL5JRO8+rWf8PIWPFYjK5LkGaxJ7IY6T8I0f/pEvH1y9/pNpmv4oCJEBgYICY0A6HGMwGCBJeg24kQc2Vx06hFNnW68OTWodJnaW54jiEQhAlmfI8wJJkoCIpLOFLk83DiBXmcT6b+e616ji75eNOzn6aR8gQjpIsbe3j0eHj0CQFfTb29s4Pu72lKQLq741DHaejyiKpH87RgBh1Ov3fy4Ig/+0yPPfVodvAvhRxthtAHeepjpgjG1DNqBoBxMHURzvbW3v/tkwCm/qAp30EtPv8DLmcq+XYHNj04ApCEKk/R40unR1hEO9i8HQs54dBWh2NExsJx0ASNO+E595LebaSrko9NfWG2oodpjYAFCVhYlzfPjoH0F6mQGecV/ATzI8cyAy6SRWm8TDrjif+/wXXn7pM5/9yfF4859gQbAtQSYMlkBAr59iMBghHdgWXqN4GlBrqkMvygXVoVGiHkTltizLMB4NzTnPJhPs7+0BIDMXTM1rr+uNB2lnm0yyoRxVvObEUuTAUDS2LxYL9Ps9k+aLL9zE0dGRnBcEwO7uLk5PT88djC9hSLKcEoAgQBiHoKoGSXIO4jj5T4Ig+KvZcvm31WExgNcAvMDkvCcPnqSuiMm65FehWpJViPrp4Msbm5t/jgXBWMMwimPEsduQsg6Cfpy9vT0ETM9exxSINESAqWqMsvfGuUvnwdBJR99XC0hfQTL3OMZU9YfTZzGwyrcoCh9enlJ88npDHacsC5MnIURx+53vWpPj+RrX/lTDMwGiMon3IdVgp0l8cOXa5hfe+ME/tr2z+5NRnLwKspM1adBIk3iIwXCEIAwtzJo95LFeHbbrDtGpDtUOs3hRnHNlee6cEzg7k0DUDIjiSDW++GOPdT7EKsCJtkntNs74jTG+8iyKAstlphpXCEnSw9WrV3D3nuxHHYYhdnd38ejRo8azgqlD9GHIlAMfQhCEiGKAVxzECATGwij+V4fD8ct5vvwvOOe603wfsp7vNcaYnlri+CKqUVkP+5BD8YaNfWy8ufnTaTr45xljkYZKHMdIvHrDi8MwTVOMR2NZLchkg0wvkeYyY3Ko3mRqq80s9rpgqCvxHBi6wq9hOqtr8vZpNRgwaf7rONprtj6wKMvHMn99cHYpQmbyAKbMZfU7yxZ3iEwvj/J5aRF+FuGpApExtgkJwSvoMImTXi/6oR/5yo9cuXbjJ/uD9A+DELl1g9IkZhiMRhgOR9Jxg3ABR7b06vBY6rBlGDsgtXFbiaogOEdZFLKvGEHVI1pAaXdULRiS26jSNZSvaSZbc9lvWXbXFSwFYTqdotfrmeNvXr+Ohw8fmU7FOzs7ODk5MS3lFoa66LowlOfQZloQhGBxIF2eqfOzMPjJwXD4Fc75f59l2f9AQuh6xBjSIrgOgDPGFpB1T7n6KyD7NOplgBWOaMcbmz/c76d/PgiDF9yCn/R6qkX5IhBsA3N/b8/AEIxh0NcQkuc9m04djyuGYlDfCNXQ4YQWDP2/FobroAgf8ID1+K3iF2Vl1Jyr8Doh2VyCi94nqUR1uvP5zFWHbuPK91x4YiAqk/iaWjpN4te/+KXPvPzqa8okZpsGgk59Xj9NMRyOkA4GAPQESWr0iYM3D2prwGbqBLvUIbACpO24xnR2zFcCsMxzbMYxAEJRlcjyHP2+bAFP4rgxbM/W/8k0G3M2dyhGvx6yA5ZOWnq9qirM53MMh0MF5hg3rl/DBx/KueYDxnBwcIC7d+/qp2fuP1P1iE0YGruNAARAHCRm+gIVRlEU/yujUfzPcF79Up5lf19YMALSXdOlncwOR+PvSweDnwnD8AdNPRgYgoAh6af/H3tvHmzLcdd5frPWs59z9/29e9+mxVqwkbCMDW3GG2YzTEA0M000A0TTQwANDEt76B4mupsZdw9gppseR7Ob7jB2sBrbyLLa2IDxItmyLduyZElv3+529n2pyvkj96o65557n/TekyAj7j1VWZlZWVlVn/r+cpUTCxwFhvl8HplsWr7wruOwjxthZmowGqHZFFYhKyNKWIcbCqgx61DKToaNmcDsH4n9chgaUGTmsgAgCOSC9AQEYUj5ynTJ16iD24QkplKJErwQJjPbr1fL57Vb87I1l4EbACJh3SBWwWa3jpnEyytrxfte9eAbZufm3+K47gkBQDHUlwKwbRfZXA7ZXJ7P8EzlC643aECHkuESzF4ONqqBLaYOx4FUO42uEk1Msq1et4tCLi+zUa3VsbS4wMvGYt1v9C46Iq2IAlRqL5Tp68rSVJmRBhoDkKzcms0G0uk0U3YIsby8hGvb2xj2B6AAisUCOp0OqtWKMpUJQOVQCQrZiZgClFAJSaGJXMdFGAa88zbAX/QFy/V+3nG9n0RIPxcEo0/1+73HRqPRVIqCWJaTzebu9zzvNbbjvMYi1qJQQeIldlwXnuuxUSRHhKHv+1heXlTAAGENKRJQQLVW4+UqKwB5dQK0xaJ09WcqQUMtxkztBBgSlWY2k1bJEMKUOY8z6PcPda0koiD1a04Kq8AKDAdDqUq3r1/Vp377B4WoO8JK7E6wsaSG8/2U8w3f+E2vXl5df0sqk/kGUGozPinYWISbxLnLQ0ouAAAgAElEQVQ8fD+lABgDWxRZzJlg0zmoK0RorExQh9ADIPGcBynKXq+nhaEoV6tYWlyQgPJ9H4PBAAKC0sRNMo0T+itGYahvJ/kJ/yAI0Gw2UcjnmaizbGysr+PcWfVMLy8vYzAYoNVqaTCkcptwKCbBUChG23Zg2w6CIGCrHgICBClik9dZjvc61/dDUHqWUuwBtEwp3ac0LFOKgWXbcxYhc8Sy5i1izVmWdRKEZAx1xFWP4zisK0pEFUrlOBYMMF56x3GwtrbKZlnnYPBcly0sBcaLfn/AO7WbMGTHibzl0mxFklksLyASVsUxjvHwnuexpSD4OYllSyiBEPR5vd5EhSfiToAmhJoUH5zIn3huCSEIw7B/5eIF0SEb+AeFGHMnEIHh/a968PSJ03e8OV8ofguxrCL4iy9gCMpN4lwemUyWmSZhZKidZE1crenmqnIG9aaCmg7d+PmokURMVRqpsjq7To+PYwZQrzUw6A/4xA8hfN9Ds2GayXFlN94cjkNSy0dkvLOpQgmazSYymQxbq5lSLMzPo9loYHdvn7UcE4q1tTVcuHAe/b54+BUMKSWAhKEm/zXRJJzjOKC2jTAM+CJcehBiEYucBshpZc1JvPD3UpmMEhwCYJYD13Mn9i80X2iLR7fM+jKw8corq8twPbVMgGNbyPJeC4JL1WpVXUEUhkB8G2JlPgVDQzmSqBmtmdjE7Lydy2aNsOK6wUHX7w/k9UxSeNObx+Ljo8oRhJnL4mi307mmVYFQAHnCRinh5eiOAkQ5muQNb/3ON62srX+f63hbwsyVSggUjusil8tHTGIdbBpmJipE5Qx1eCDUaOycCpPivIj8jVGICXFazTbSfgrC5N0t72NtaRkUrPuN47oYDPqxZQLMFfU0tZegImHALgmckeO8zrJer6M0U5L+m5ub6PZ6aDbYB95xbGysb+Dc+fN8RAokDMX7yl5WjrgEGApHiJpdWoywYQtywQCDCUK+DWHGsTC2Y8N2XDb9P19TOUnFJANx/N/C4gIymYyEoWURZMU+z2On00GvxxtQD4KhBq5kGCrz04QhK1kx16I8RgiymSwrccI6Y1uWmuR2MBgYQ+nGK0Ttb5pGFK2Po0h7NBQjVAiazfpVqAlaCYD7ATQJ63e6+3ID41Gm45ZxSqXZuz3X22J7rGCIRZDPF7G6dgwbx7ZQmpmVra464iarQ10hKnWYqBAFuBKhBjN8/ITJaUnvSXGAdrslpx0DgL29ssQ3pUAqlYp1xI6Zvkmw1I+L606AZVQZ6n7tdhsdPp4ZlJk/p0+dZK2Y/EX3fA/r6+vsvhHdBIW2rZlZCX/EEi+eBULYMp6u68L3U/BTPjzPh+d5cBwXtuPCdmxYtgPbceE6LlzPg+f78NNppLNZ+H6KdbIWL6rF4DXuhbamgGGpVESpxDpgW2Bxspk0V2CsiEajEfb3+VR7NwxDFTYKReYXh2E6lYLN14EmhIBo6hAEaHe7hopj57UmfxQOMJ3FRyoazvM9CGU7N7945+vf9NZX27atfw7zAO4D8BAhZFEvo5e6O4pCbIJ3mK3XKk8XiqXvoJSCWDbm5xeQzXKTWDc15UutgUU6XSXqu2OgpsFUiUsTpQqmEUWpUpgQHmbeY396XSVFu9PmrbpsXHOr3UEmkwYo2CSjIuc6wMZALVanGJ3cYZIyFH5ExatWq7As0b+OLTx1+vQpPP30MwgC1lqZy2WxurKCa9ev85dXV4kCtMrKizrlT7R9sc1ffGKai0T6iZcW6qWWijCufqKQnkYp5nM5LC4sGoBIp1JwxYL0vJx3dva4AjsMDK3pYEgSjmkwJGCT+UrFDLDx1OLaKNDrxRtURIHrH6xYecRM5+ifZZQNIQSpdFpeZyqVnj9x6szbj22e+CdXL198z9/81Uc+PhoORReDHBgYW1wx7rzUFeNRFKIctnP54oXnxTalAXL5vFwpzKCMCANIozZm+iZBDTABZSSnhYyCdKzZO05RJhyPuSRoA81mW2aKgmJ3f5+XB/NL+f4YgEXqAcPocRUnOipFbWPi8TCkKFfKGI5GLCyHwdbWceOln5mdwfHjx4w1SaaBUOyl0rYtTeGNC6OOW0rpWUL1WdqfFvYQfenmZmexsroiTW9CWMOF76vJXwFgb2+f9c18wWCogDUNDC3bRob3DGDhLG10CtDjiztNLvc4GOW2WPA+0cSO+/l+CkvLq/wesufGdb2NrZNn3v4DP/Jjv/umb3/bGx3X1dmRA5um7zWEkCXyEpaMRwFiA2z86olnn/5KaRQMuxQUNGSTSJpg0zml1CGNASgKKU2ujTVjzaiTYBZvwUZSDo1THGQui3N2ux05YScAlMtl0CCUKi+dyRh9DkV+plJ7Sce5AktUhnybaMeD0Qh7e3vQx4OXiiWsrq1K9QAAuVwOW1ub2owx7DyTgBM1ZS0rqZLfBKElwWZCEBHwmWlb5p88T/SXn8OysLK8grn5eXaMX4fjuGx4nva6Vqs1dLpdBoYXA4bsMdFgaBkwBOHLF1hKTdu2o2b0BkG3O667TRLg4n+QqlstmRBTkoQYKrFQLOL4iZMolmb58EZ2na7rrm+dPPMv/+k/+/Hfe8t3fs+bI2DMgoHxoZcqGKcGIiEkTwi5A8BDADYAlCilaDdbvEmeotfrJkPNkNGCSAqOgnvTNIyYCDt8Y4oKzXMT5Z5QbUacGDKNvVZLLfcyHI5QrlZ52mz6LX30iDnv4SFhOOY4ifpDP85mFt/fL8uwALCytIS1tVV2b7mv7/vY2tpCLpfD9MowqgSJVv8nAKiBcAwsk1RhDLgkcg5Lncvi8RzHwcb6BvJiSi9ukruuy/r4aa9ou9VBvd6Q8OfPuTx+eBjGf+U2TYYhIQSFfF6WNwiB5TgShiGlfD7GMeU/1X1Sn76JSpLIUCCEwHU9LC6vYPPkKZRmZtkHjy12ANf11rZOnvn5H/rn/+L3v+1t3/sWz/P19ZJ1MC6/lMA4FRAJIScBvBoMhC6AtjhWKbMpVShlffPGqcNxrcNyK6r6ktRhFE8xYo1XiYnK0gg6IW4kn1GINhstI9jVa9dZGVDmmc1kOPwnw268aawUIKLHiR5WKUNo8UEpOt0O6vW68YFYXFzEyZMnYDm2VIuObWPj2AZmZ2cnv2AT4DY5nqkMleqLq0KIMJp/YiMKP55Op3D8+AZSaTHag8EwlfKRyaSNdU0G/QHK5fKLAEOamI5QWDoMASCfz6nlPAnr32lpaq3b7R5ctjEojlGOiQpe/UkwWmIbEowLyyvYOnkGpdlZIx3Xc1c3T57+uR/6sZ/6/e/4H//xW1OptN4ukQVwD5gpvfJSACM5qBKUECLmopPOsqzjnud9q+u6DyyvrW9+4ze/AZSyoWLrxzb5C5qwTrLuH47x53/6TC+sG4em+GSYyILXwj8000MkXVl/l5g/7S9hmcVx17O0tIQMn1iBUoozp06iVCxKM7laqaDb63Ewaq3J2roqarif3keTH9fnTdRarsV8iuLDM+6aADZKaHZmBtlMRqrIkAK9bhfnL1zgfRIhodtsNrG7t8c76hoPBfuJ+BH9V6sn48+Rdtysz1JqFJF9XbnwujVep6W/yLZtY3ZmBjMzMyBiKQAQWDZBJm02oADAaDjC9vaOHKtMMQ6GIs/A9MrQiqUTvQ6RkGVZWFlZgevY3I/A89Psw8BPsLO3j5DSMRBLUOcHfZwOrNaIfqziaYRBiGplH/VaDeIDwC7Rwmg02rl6+eIfPvqh9z/a63Wji0p1wOZUvKHZkF5MNw0QHwSrM0Q2m73f87y3EkJeNxqNfADwPB/f/j3/WM7EcmzrBCxiGSvDTQbLmGNj40T8DwDr1MfC+PHJwDTDep6HtdUVuZ/NZnHXHWcg6gX6/QHKlXIEfAJU1JwiTMx9qB+PAF+qVWgABcxuPpSql54qFZrP5VEqFhREwbqdXLx0Ca2mudorBUWtVsP+flmtPBcFor4fBeMYEOoQNAEo4JkARU0RgTCgFItFzM3NqvkQeX2ZbVvIptN8wl6m3ACCXq/H6lRFIxYQH45n5Bt4MWBICFs3e25uRsLQcRw4rievodPtoN5ojgFTxG8qKEYbs24MoEEQcDBWjY+gRQhGo9HOtcuX3vfIh/78kW6n/ZIB4zRAfA34pA0zMzP/j2VZrwTMtUXe+O1vQzbLhootr6wilcocDkzhGP9onBj8pol3UNxp4utAGh92eXlJrsBHKXDnmVPI57ISOvvlMvq9vgSfoRapNtGDTJNDLaocEYGpnJE7DnJQsOUNAKMbj59KYW5mli2MRak8fm17O3EiWRqGKFeqqFQqMj+GEmQPC/cRfpFfCcKDoKirwmQo5nN5zM3PsS5FGigJYaNnspk0B52CXbPZQKVSlbCClmc93xKLLyIMAYLV1WW+uh477qXSGpy4OgypTCdeXXA4ZXdoII41sc10giBAtczASKmoMmBLJgRBsHfl8qX3fuSDf/ZIu9WMrsXSBQPj9dsFjNMA8V6w6bxQLBZ/yHGc/xmAnGjUsix83QMPYe3YJigFCsUiZufm5QupXlilbqKQiZq+kxViMpRgpJ1sLh8FggeF09NP+T5WVpYlzPL5HO44xWobKKXoDwYo75cNhajWTTHBB0Bej1KReis1VN4QgWUkLPsNEYqqVx7PdV3Mz8/DdhxATlhL0Wg0sbOzg/4gvpZQEATY399X9ZExCCLy4o8DIY+lAw9jAKgBNZPJYGF+nrcWa1AFq4NM+b7WrYbTi1KUKxU+dtuEodKOOgy17RcJhrlcFnNzsyJlNjrH9WS8Xq+LWr0ZKwsFRTXBhVknOwUQXyQTOwhCVMv7qFXLEoyiISkIgr1rVy6+7+H3/8mHb2cwTgPE42DTuCOXyz3k+/6/A9iKXKKrwOr6Mdz/4GsAyobrrW0cnwC1JPhNC6BwTByKIAgwHPYxHAz5FOtsbjnHcQ9MNxGasUlo4+cUfhDblGJ1ZZm3KjMY3XXnaWTTabYPinq1hna3E/kgUMNkjipHVedII/WIynQ26lwRh6K4z0pFsnQty8L83Bw8vpSquhY2rndvv4wgME1lgAG43eqg2W6h024jCLROzQZMxoMwah4nQdGyLGTSaeRyOeRyObYIPeF5EXHBFmVK+75m/rLfMAixt7eLHp8pRnuwNe1I"
         +
        ""
         +
        ""
         +
        ""
         +
        ""
         +
        "kv5MNY0yX+vLrpF2+rqkXCqxspyy8/8BjJw+yfRk8NQRXd097LnsCpWI1iPRaIxkS6vSZsFjIpsFdrlwFQutcvCy54dA1DONPX9dPyIB5rFVpv/oNDCTXea3C0a4zFd9f/e+AfADf5l2rHqgtK5RhEIgJem1NVZXUpRKJfM+hIjFogwN7zCTp3rzJeIrWy8Mrc/E2DllbQgBUha//PlPv+XMyePWtJ1pVEqtwOfrYpaLRkM0X04rUS3UMZWHhndYO5FIttj9dNYL7nq59ZdWM5Ndy/YLgwsEQqhJ0FdWllWwtvnf6JnTNWEIsLKc4tCBRzh57AiFfAGh/Vcpl0mvrrC0OE8ul0Ua0razvVqQ3TZd88K7XE/rauaznqw2jZwg7kQV6x+R0nzyibrQq1NeNQxSiwuMnj3DwtyMC4ZCQKVSYXpy3JwESj/f5sFQCMHgtu32MUKhcPwVr36tnqSkHf8smJeEiwiI+E3lX0MNTLclGo1xzfU3AQpO4VCIzq5utS4cbUcEaSBqo8us9ms8zkOOgHKlxOrysj2aRQgYPXeGyYnRpi5oYW6Wg488yNkzpyhXyhr4BNIwyGXSLC3Ok15bVROT+wBYGxz+F7921pgNwyfwWBtNC+aF03qubSPgdH9KxSLzs9OMjZxheWkJw6hqWmuIbCZtfmtq1r/pyXEMw/DAUDv3ecAQIUgkk3T39NnH7xsYfPUNt9w+pD0+lwnrob4ktlwUJrNQYzmfj6Md7kSZyvqQI264+TaGhtWke1JCd08v8UTCXPdmrNEmgGqY+dqV5RUJlMslVlJLGIYTlTAzOX709MnjO9lA2qZQKET/0DZ27NxNa1sbXkMZIBZP0NraSjyecJvA4Ji/tZY9f4PK1F/zB8P71/5hCDKPG5nGbrNb18iEfnzvj4/vuMJ3HDdEHRBh7a/X8ZrZQC6bYXVlmXwh70AM53rnZ6d58onHGDl9iluf93ye/+KX2vu3trWzc8++YLCxcRhay+VyiVPHj2J908vLS9/9yPvf/VfaI3FUSjmznufsQpcLHojmg3sbKhU6qPf8w6g5aW3pHxziltvvBBT0EskWNbcyQTAMLmuU+draVimXTS3CsLaSWpz/wZEnH/8OyoR/EWou65oz/dWTzu4eduzcQ29/vw0c69IFai6Yrp5uhAjXB6KwSwKAaIGrAQg1jdgPP2e70wXRCIh+ADpaVgAQg0AmnHPWB6J1DCesBgmFfI5MOk0um8GQhtYuVV8aknNnT3H48QPMzVqZ8JX84q++gcuvuhrzRtDXP6gC/wNgGNT2ZmFofaYnJ0gtLlj3SP77N7763x996CdWf0weeOjZHBf4dMvFAMSduL3IdwG/pdeJRKO86Gd/nlgiDlJNFtU3MEgoFApM21UPkFZlv5aopFIpsbyoYGhtSS0t/uipJw7crzWpipqV8D+h5rLYUBKORLKFHTt3M7R9B5GIcwgBJFtb6ejsttfrQVBf9gPR+WvBzgVCax8dhOaJaoGvrlboBaALGn5Nsz4QPXDVyt1lkM/nyGTS5NIZl6mrt6lUKnLiyGGOHDpIxjaR3RKLxbnrzf+N7r4++/g7du2ho7Nr02EoRIhKpczJY0fMEU6wtrLy0w++58/erTXpRL35Vi42uaCBKNZhKm/bsctck3R395BItmh5DWtD0b3smUfZM1lUpVxheWmRquEM91xOLf34yYOPfgjoRU19KlGZQTJmlWHUWNAXo+l665FwJMK24R3s2LWHZItyEEUiUfoG1JxCOgTVem0guk1gbd0FxCAQng8Q62uFtYHoblNtbRDXdusYhUKebCZNNpO2tfmgc68spzj+1KHqiWNPhSvlxkNyu3t6eeNbfot4Ig6oKSj2Xn6Fa2rO84ehA8XZ6UkVx6oaLb9//72/9+Pvf+e02ZwiKonsls9o91yQCxaI5kvlNZU/hCeBZf/gELfe8QLbpE0mk3T19DowC8xYE6wZ1tQYwTSTdRhKVlKpB5448Mhfoh5KUKDOEjy72U7gtahJftY9LSRAT28/N912B6AgOLRtu6YZ1oGfXqYDzVXHA0QfCHVYWfttUCvUjuOHB651/Vi1gegcyypfXJhnbXVFg78Oc8isrTFy+iQjZ04tLC7M/RB4CpVQuKnA531XXMWvvP7X7XPG4wn2XXEl4bB3Aqbzg6EQAqNa5fjRw0hDmfeZ9Npj73/nn/yp1pzTUsqxZtp9ocuFDESvqfwG1DwQtkQiUV78cz9PPJ5EIgmJMP1DQ4REyJ3SCzRArheGSjNMLS0qT69Ztrqy/PATj+1/n5QybxYawCEpZUoI0YPKwhPkXGkDXgW8BpXBuGnZuWcvV1x1HaCCzQeGttnbgiDoN4upAUQLljqwHBDaL7e1Xy0QurRP7/J5ANEDxWAgOsdbmJsjvbbqg2Eum+HcmVOcPX1CLszNHgMeAEa0W9yKSpKqT1JWU17wkpfx/Be91D5+R2cnu/bsc9pfZ1x0szC0PnMz06o/0/xeHvjhd//w2/d97SmzKWWUllhppt0XslyQQAwwlXegTGWXk+KGm29jx649Nvy6enpJJlvqwNAs841JrqMZViqkFhe8MHz08Ucffo+UMmcWGqg5JJa0awAFvMtQCTR9lwm8EKU13tzMfbn6+hvZbnYNxOIJevv67UP5IYgLem5NDwcUVls1TdILQru8Sc1QB5ZP62wARK+J7Iafdmz73F6QwLmzp21tqljIM3r2DGdPn2RuZqoopXwMlbjACnK2xDDLOoG/xNMtEyRCCF5715vYe/lV9rUMDG6jf3DbJsAQFxQNw+D4kSepVqsIIcjlsk+95//7v/9Qa86IlHKkZmMvErng4hDNF0wPwBbAH+GBYf/AIDt27TUrCELhsDZWWXuh1UGx//heRGfZOr/1klerVZaXFjGMqg2Z9NrqwSce2/9eDwwP6zAEO0fcLPAQcBj/tJAS9WL+MfDbwP04pnegtLV1YDbYnq3N92kqzrBWen93UHOlXFb5HMtlqtVqYOqy+i+29xzNDBFsMndjjY9hGEjNc/yDb/8bD/74+4uz05P3SinfA9yHA0OJSoF/zvyOxlGm80fqfQ/6d/zv3/wqq8spG9oL83NkMulNhSFCEI5E7GBthKC1te2G177xzc/TmrNbCLHuiegvNLkQpxDYidNvCMpTe523UrlSplQuEIsmAIk0DBYX5ujt7ScUCSOkACGRCIREjTEGhMr/75sGwFoGpTUaRtXpMxQCpCSTXjt08NGH/8IwDGuguwSeklIu1roYMyRiHpgXaiLxnSjNUf8xO4eaM3cCBcdAae9ot7U6Z/pK8GqIPm3QVxb81zpOJpMhm16jWqm6NUfzJKFQiFAoTDgcIhQOm8thQuEw4VCYUFhtFzi6t7Uci8dIJpLuF14/vgUG8Kzr2/X2uIESDkcwdUyEEPT0D3xrZnryp/pXghr6toxKZzUKzAI34ZjK30GlktPzEQZKsVDgm3f/K2966+8Qi6n5eqYnx0hefrXKu7kJMLSW+weHWFyYUxNSCcFNtz7vN++9+18PGIYhUQrEHuB0/RZf2HJBaYhCmcp6BuzteKYDsGQlleLhH/+ATGYN662tViosLMxSNodVWVqCbYapk+DSDH0vGEgLhtWqfexMOn344KMP/blRrVreYwuGTU+1aE4kbvVdncWvEe7076UknkgSiUTNtkI0Hm3yRWusVen7lopF1laW3SNjtHtjXgdVo0q5XKZYLFLI58hm0qTXVlldWWY5pRLiphYXWF5aZDm1yHJqiZXlFAuzs0xPTSDN0BelQW6ephgKhQiHw+Z1QUdHh56lJYPSAB9DTdb+UynluJSyhNIQS1rdv6PJeUwWF+b4zn1fs++jUTWYGDvn06jXA0MC6ofDYbYN77DXky0tV9z1n9/6Iv35EUJsKPb1QpELCoio/jbdVP5j6gQ353I5Hv7JD1hcmMXW7gzJ0pIaB+yCoWUua8uWSW0/gKhhWanUItVqxW5ENpM+evCRh95drVSstOkSOCKlnN/IRZpJOM8BT3g27am1T1t7u+sFiUZizZmrQtQ0o4P2T6fVJfrqQvD5zLvkLtPusaeuEIJqtcri4nww0GqBz3cNtcdoh8IRO/N0LG5lycBAaeoPSikPSinn9YBmc+7jw2ghp8C78fc1BsqJo09x4OGf2j+8xWKB6cnxDcOwVt2+gUE1+sp8rq+78eb/GolErV+rELC3mfZeqHKhmcy6d+91BJjKXqlUKhzY/yDX3nATu/ZcjhV/s7qcolqp0N7RCUI95cL8xzKjrWVQprQhDVJLC1QqarIzISTZTOb4wf0PvatSKVvTLUrUkKm5Tbheb3bY3bUqtrV32GAKhyKEw+Fgk9hetTc6Tgxzm2Ni638F1UqFUrFov3yHHz/A5MQosWiMaCxGLBYjai3H485yLE4sFiMWjxGNJcx6akKvqtmnJ6X6Xlrb20Go0SKlYpFEMmm3zQUP20TW4IwXFk7b9X3D4TBGtYpAkEy2CGAM1VeYklIGR1wDUsoVIcQpnOiGFAqKH6CJd+1H3/02Q9t2sHvf5YiQYG11hcWFefoHhzYFhtZnePtOxs6dRQhBPJHc9aa3/s7Pf/aTH/2u2YztQogxLfrhopILBohCzf6le2PV7PH2a11bpJQcPXyIbCZjJndQPVaZ9BrlSpnu7h6ECCHNfkIfGAFDGiwtLVApV2xwZLPZkwf2P/jOcrmkO0SOm86SzZA2bbmf4AnEVcW2DqxbEY1FHFjUhaC9pG23+uzMbfa6UFq1uW5UDaYmxqiUy1TKZcidf35QIQT/6dffovragEIhrwLNPVqlo2V6ujR8QHT3P+pArJiQbe/oLAKWw6vh+yKlnBBq7hIrpuko8Ang/2piX75597/ym7/7B3ZSkbnZaVpaW2m3kr6eJwyFEPT09TM3N0OxoBILX3Xt9W9paW39YS6b3fRpS59rcsGYzOZcrnp/3FeBP6eB51WX0ZEzHHjkQarVMhYZivk8C/NzlMslq6vdo4VgaoaLVMoV28zL5XKnH3v4gXeUSkXdZDoupZwOPPnGpFVb3lOvYntHB5YVGo3Ga78wXvO1ponpNznzNvQEszOTlMulek1at0gpWZifURcRClEs5Gu3KcDMbwQMa3skHLHhGolE9XvcrAJxHOV4seQ+4NvN7JjLZbnni5+jaib7BZgYO0fZdIS4s+KsH4bq3oQY3rHL/lGLxeJDb37r7/6i1owhIURrUPsudLlggGjKKVTfjSU/Bf6QJvtxQKXUeuinP6JQyNn9gtVKhcWFeXLZjOKk3a8okEiWlxYpl0q2KprP5UYO7H/gHaViUQ+lOSGlnDrfC/SIriHWNJfBMZmFEERjMQ0C/v6+Wi9YvZeuVCo6GbtDgonRc5t8qUrmZ2ewzN1iUf3WNQL1elOXhSNhLO03Eono97gpIJrD4A6jAp4t+Qhwspn9Z6cnuf/ee+wfXaNqMH7urBnNAG4oNg9DtLo9vX20tLbZ2y6/8po3d/f0bfm0pc92uaCAaPZ7PIbK4mHJKeD3cY8oqCuZtVUe/NH3WZibwVarJMoDurSoZsMzYZhaMGFowqWYz48e2P/g2wv5vK6tntzsAfRCqQ+6ibynVt1ksoVo1PQqI5xlD0AIKGsWJLls1l4ul0rF+bmZB4CDKNPrOOr+LwC5gCYaKE2+oTY/OzOl3muzY7dYLDSvGdXQlnxANIfPKThGdE0pJIRo6p0xn8WncJwsZdRk7as1d9Lk8BMHOPjIg/ZzVSjkmZ4YqwH85mDoLRscGrZ/XCLRaM+b3/o7r9GaMCAuwrjEC6YP0RIpZVYI8RjuuLAF4H8Cf4oawdJQSqUiB/Y/yJ59V3DNdTdASE3iXsgXWCjP0NXdSzq9qsxCUzUs5Arjj+1/4O35XFZ3mJyWUk5s1vVp0oK7f7S2Q6Wj3akqIBqL2y+a3kfoLDt9a86qt0ypykIoUzafy2GZccuppYellFb2HokCg665h1He/woKFBY0dgP/WO+iV5aXKRZMZwpqvhJb07H7CPX26VBwNHsXJDz9j3bYDRAOh9s8TYjgDq+pKeYwzDPAFWbRAqob5/040RA15T/+7ZsMbdtTv5N+AAATkklEQVTJrr17EagkEq1t7S4nSzPaYVCd1OICE2Pn7O9WCMGuvZe9LhKJ3l2plK3vow3/gIALWi4oDdESMy7sICpg1pI88HZU32LTMjpymod++kPy2awNjmrVYGlhgVLBTA+PoFgoTB7c/8Dbc9mMnnDzzBYOmtdfVEFdD3OnZS0RiYTtFz7whWmYxVpbN+vm83lAWhzl3JmTB7XTr+KGIaj0ZjkUWPSxjmM0egGlNMfkKogVCkEaYi0TubnYxHAkYkM17DaZITjxRp3myjFA/4F8EvhUM/sa1Spf/ZfPkEmn7e9pZmqCXDazYRgaRpVzZ08xdu6sGp5owrBYKIzcd8+X/l8NhlB7svkLVi5IIILqx5FSHsFtKkvgk6isN9XAHQNkdWWZB370XaanxrEUK1MBASEoFgvTB/Y/+PZMJq33EZ6VUo6e/5XUFN2UGyB4vDOAGTqkHnx7hEpD6NWBhgc0uawVay4oFgqjs9NToyjYGTge2mblUKMKs9NTdphNsVgw+9Y2biJ7ry8cVn2IIAiHw17nwkasqmOoLEaW3AP8oJkdM5k17v7Cp6lqwz/Hzp2lUik3vFbvd5xJpzn+1JOspFK2JSCEkDNTk19975/98e//5PvfGdVOPS2lbMq8v5DkgjOZvSKlHBFC5HDPxfxvKG3kT1HhKg2lUqlw6MCjrKRSU9fccPOAEEQFUCoUZw/sf/Dt6bVV3Sw+ZwZOb6U07VBp71QhG4DtUAHH/NWXg8oQjint+ougWq1QMrU0hGBtdfVe4IR5iBJqVE0YpVlFtL9WWJSBGl1k9Yc+gcoWXlPmZqacl15B2Jw2wRtC05yJbJVZ65GwFpYkzx+IUsqqEOJJ4A5t/79B9fvua7T/xNgo3/7mPXa6sEqlwujIGa64+tqaP2T6tQFMT044903dKKqVytL+B370V/d88XOPe065gup7v+jkggcigJRyVgiRR/UrWllIjqDSgf0x8IImD3VsdOTMF7LZbM9Nt97+JoQIPfbIg29fW13RzeJRKeXZzWt9TWk65KajvcOON4xZ/YcE9w26lmuBUAOi8ryrF08iy8eeeuKH2qlnTY+rgdvj6hIhRDcOEBtqiGurK+RyWVrb2hFAoZAzR+IEANC6Hg/8bOBpYPWazOY+kfaOznh6bdVy+GzonZFS5oQQR3AyExWBd6BiFP3zyXrksf0PsGP3Hm6944UgIJfNMjU+xq69l9WFYT6XZXx0xOzjdb6/menJI3d//p/eOTpyRtcCJcqiGr1YpxW4KIAIIKVcFcrZcjMOTNKofsXXoaYVqNc/dBz4AlBdmJtZ+PH3vvOxltbWxdWVZV0THJNSntmC5rtEKE+n7mGuqSG2tLQSjjiXFWugIVqOErOwCSA6wdiFXO6h1NJiBkeancAohTMOewbV5zZYb4e56Wkuu/IqLMdKfY2QGkBU1+oDYjiC40wW9Pb1t54vEAGklItCiBEcrXAWeK/5ETV3NOW+e77E4PAOduzcjRCCpaVFWts76B8Y9F2zUa0yPTXB0sK8eRXqPlSNavHhn/zovq996XOP4Dbj86jhpBedmazLBduHGCRmKMSjgDc4+uuokQS14gQPAn+CFjJRLpfOra4s6/2TE1LKpytTiNfDvKdWRe8IB8vD7O07s4HRdKqtkBZ7qKAyNzv9H9qp0/WGuXlkGbdzpaGWODM9Ybe3VCza85zU6xsUvmsM/lhxiBYwO7q69e6J8w1FscKPLDkAfKaZHSuVCl/8zCcdrRyYGh91hTwJIUgtLXDsqUMszitfjjCvY2VleeIfPvLBD3/tS597DPXDYzm7poH9FzsM4SIDIqj+HDNjzBHcjpUzwO8C3/Pscghl2uRQqZFmgUmch1qiNMOmgm43SXRzua6H2eo/FEIQiURcHmZHa6rnlAgGI0KQ1bydhmGknjz46AHt1E1Pb2lmatbh6U1a4ZPZqUm77QjMUSvBaa8a9bF5IRkJRxxzOiRobW3byGiVWtcKKjZTj8f8ImoQQUNZXVnmS5/9lJ3tB2D07CmqlQr5fJ5Tx48yfu6sEyQvBNVKpXhg/4P3vedtf/Tx0yeOLqHu9TyqG+OwlPKYOdLropeLxmT2itmvuAbcgNOHk0fFiD0B/A9Ux/LbcAKGJfAT1C9qF8qxMfMMDITXNZYh6mT0ae9w8l1EYzHN3MVl+pr/B5S5/1omtZSooXomlNLp1e9WKhUrTEPiDnlqRpZxpkx4slHlTCZNem1NAR9BPp+jzdKGrevQTGQ80NdNZGH1F6L3ITr1Wlpb1z1apZ5IKSvCcbJY8Yh/DeyigYMMYOTMKb593z388uveCALK5TInjx+hVC7Z353V/qnxsUNf/vynvzU1MZZG9eXOoGC4hEoy0vTQ1otBLloggt3R/RjKy7lL2/QfqF/xFO7RE3oozbz5eSZE11jqvkAdHV025Kz+Qx8EffALKnMDMZfNOPn6gHNnTn9XO+2iGQu6Hklp17KISnZbM78jKLO5o6sbAY7ToC4Ag50o3v7HkBmaY+2TSCQ3TUO0xBxAcBS40SzKA+8EPk6dJB2WPPDD77Fz115uvv1OhBCUSiUFdvMactnMwnf//d5v/PQH/2H1aRdQyWwzqFyaYxep36SuXNRABHvc6SkhxDIqNMfqI/L2J448DaE0zYquseypVUkI4ZjMQDSWaBKI9oaaQMxmM7bnulwunTxz8tiYduqNJLBYwZ2d6BANgDg9OcHV191otQGjWiUSjTbwImteZ4KBaDlW1NQPgng8sZl9iLZIKeeFEKM43+Ek8D5UyrCGTpavfvGzDG3fzrbtTqIGaRiVp558/Ptf/tynf1wsFiwzeME89iJqTP1FmdqrGbno+hBriZm5ej/qxXRt4lk0AY9Q7k89CHtPrbotra1mlmz1ksdi7izZjfvXgmPcqlXDTh2lOvGXdGdKGfXirUvMPiy9U7+xY2VqQvMkK7O58fX5rwmrXOtHDEfC9nGj8fima4ianMUdvL4f+JdmdiyXSnz2Hz5OIZ+TIJifnT7+dx96/wc+96mP/8CEYdk8/mnUJGZPXIJhfbnoNURdpJRFIcRB1BjoLlTf3IQ2IdSzQZoew9zR0WVqDkpigRqiXxt0Qm+s/jirTFXMZTNmUQikLB85dEAfdTF7HjFsKdR9B9WPWDefZT6XYyW1RE9vv202d3Z1B5rN9Uxkd38jtmOlaqZzi8ViWwZEKaUUKj7xDpwfus+hxj/f2Wj/1OLC49++7+vHWlpaq9+7/95j2qZVlIl8FjVQ4JLTpAm5BESPmC/zCn5N8dki3jHMNc3Kjs4uLPCFw06WbLWjF376sheIJkLNv9lM2nam5LK5h5cWF/TYw/PJ96iPY7Zms6s7kmNmcsKcTtWtIa7HRPY6YISAcCRiX2M0Gt1Up4pXpJRlIcRh4HaUk0WiTOePo+YFCpJpVJ7FkYd+/H293EB195xEZVk6/8y8F5FcMpmfe6JrK9uo42Hu6OzSzOUa0456QOH7eGL2SsWiOY5WAWV2ZvI72ikz64g9DJJV3AkFGobfTE2MY6KNSrniCjdZj4ns3m5NNGVqixtLErsuMe/bca0oi3KyeE3cAio5xG/jz2q9gupq+IGU8vFLMFy/XALic0+acqgAdHR12cCLxeN1IdHsJ2vNGYyKPXz80Yf12MPzygZuOrh0zby5fkQs01iFAjXTb1iz3ISk3feKIBJ1ZbwJC0tV3mQxp5YY14pGUfOxWPIA8N+Ar6CiH06gvPEZ1OCB7wI/3KT5ei5KuWQyP/ekqZAbIQTtnV12H2AsFrdNQF/foNoB549Tz+5nNMUaJYEQpFeWv3+esYdBkgJ6zOXDKI2x5g93sVhgaWGO/sFtCCHI53J09/Suy0TW+xotczscjtjbwuGIN8FDlCZzIm5ATqPiYq25xX8C/AMqGcmjnrpVVELkS32EmySXNMTnkIh1eJhb29rNERfCdAy4h+wRoBXpWhOedQWbLAaONnb29Endu7yR2MMg0ad7yNFE1pUpc7pOEO54RK+JvA5NOBIJ2/t5smbDFioSZh/2UyjT2JK78cMwBTwipTxzCYabJ5eA+NySVtxe1z21KnZ0ddkwFEIQi9fpQ2zGnAyFzESl6rDlUunUyWNPjWqnbHqoXgNJ404o27gfcXwMS6utViuUS41zBdbqI7U++miVAA1xSy0rbeL7INAVUUkYLvURboFcAuJzS1zze1DHw9zZ2Y3tFAhHXPOE1NYGa3+q1SqFQt7uP0wtLurOlA3FHgaJqSHp3uaG/YjTUxNInOQOucB+xPXA38mJKKg5jcCWipRyDXgI9UNjoH4oRoGHN3Ea20vikUtAfG6JDsRh6oya6OzqNtGFx6HSpHPB81HOFAVYCZUnH380KO/hZokOxKPUyaUIUCmXmZ+Zsc1mBcQAL3IT2bJdGiKAEITC4WQ0FtPflael711KWZRSHkU5Sizz2DsdwyXZRLkExOeWNJ0l2w5QFm4Pc11tsA4wsum0CsQWgnwu+9Di/JweXrNZ5rIlej9iEXc4SqBMTThms9OPGBRyUx+K1v2J2HGI6jMwuE3/MXpaZ6O7WJO1PhNyCYjPLWkqS7YQgo7OTrsPMZtJs7QwTy6bbXL+ETc0isUi5UrZcjozMzWpO1Oypnm3mZLBrRU27EecGBu1uwgMo9pgetIm5lXR+hAF0NPbt6XB2Zfk2SGXvtjniAi/h7nOtKMdhCyTDzAMSTaTViNMQiGSiQTJ1jZaWlqJuVKCKQ3LO6wvm07b2w1ZXT7wyIObFnsYJGYWnRRO1uxDwH+pt8/s9CRVM7kDCPLZLC0trbbZa2uIriB0fGW6hqi2qf3bOzu3PDj7kjzzcklDfO5I0x5mWTWYHB+lUi7b/YiWtghq6s7lpUWmJseYHB9lcWGO9Noa5VLJZ1IDZLNpez29uvL9cqlkeT8lm28uW6L3I57AHYbik2q1wsz0pD30znKsNGsiez/hiMk8c72treOShngRyKUv9rkjrtES1PEwZzJpHvzh9xChEAMDQwzv3MX2Hbvo6Oq2zV7r32qlQjadVn2ECEIhQSKRJJ5MkEi0UK1WkIa0NakzJ0/o3uWlTYo9DBK9H7GCynB+e70dJsdG2b3nMrMfUUWkhEKWBujXBm2NEKcboVgqUsjn7X5ItV2QbGm5pCFeBHLpi33uiNfD3PC7k4bB3Ow0c7PTPPHYftra2hneuZvtO3cxtG27qQXZhESgzNVCIU+hkGeNFUxagIBSsXj62FOHRrVTbJV2aCXvLeKM1T5EAyBOjJ5DvFRBzzAkxUKeltY29EQPFuBA5VAs5PPk83kK+RyFfA7DMFxB6ahdSCSTz5hT5ZI8fXIJiM8daXra0VqSyaQ5dfwIp44fIRyJMLRtO0PbttM3MEhP/wBR00xUfYcOJS2NcmlxwRt7uMDWSgqVwAKamWdldopyuWROpKWuNxyJUC6VKZdKlMslSqWiWi+biq3mOHGvu/tTPUliw1ySC1IuAfG5I3roRR6VGmvvRg9WrVSYmhgzw1WUydjd08euPXsPbd+5u9re0bUzkUz0O2SkcujAI3rs4dwmxx4GyTIOEE+jvM/eIGlbpKH6TvddcTVCwNL8vDkNp7tPVHe0EABDoFosFkZz2cyp5aWlk+NjI6cOPvKgni390giRC1QuAfG5I6vAgLl8wPz0o5KI3gHcAiQ2enApJamlhUpqaeEbhw4+mgfo6OxKX3vDze29AwNXC4SYn53Ww2s23bscIHo/okQNZ3thvR0mxs5x2ZXX2MkrXP2GoCWxUGUSWFyYp5DPPbW0tDAyMXpu4uzJ4wey2UytKWnBneH6/2/vfFabiKI4/B3UYhWMQUEQd6I0GzcuxJ1738Cn6NP4Em4FV4oFhQoqdWFRoS0I1dgh86/YtGnNdXHucMMYk9QmNZOcDw7JTCaTgZBfzr33zO8YM4QJYnWI0IWU86V9T32cQxsW3fNx/R8+4yM9/nt5lm6vvnq5B7wvHTeJ2sM/cM7ti0ibUG60xhBB/Lq1WcoAwXUdu3lGGsekaUyatMiSmDSOiaIfuroOzwlzon/LfA/RniSTniow/hMmiBXBLzK8AW6jmWJ5HusQ9cR7BzwGbqCZ4x2gQbDUGsQL1GFmERXGfq0TusB6n/2TIia4Rg+dR4x2mqy+XlEBTGKyJCZLU7rdoYYwvX80xe+iiw7TM/Re4sg5N/A2QqPaiN0VVD18kXYduOpjcfA7ABXRBrDkH28BCz2vt4BHBP/Bb6gIXEJ7zDi//f00MyQRuYb2zi54Qui7chJytBNdERt+3x5qv/UJdQC3H8gcYRliBfGLGS0fn0XkAkEcL9O/4L7oI73it88CN1FxbKCCUAwVfwFfJlhjeByS0vYa8OCY5/iJOktvo47UG+h0w4GPIhsuxG/drLXmE8sQZwwROQNcQcWxzmjZY5nIOfdhrBd2AkTkPqHs6CGw3OewA1TwEx8ROie4iQphxx8zyC2mg84R7oznyo2qYRnijOHdk4tsEBFZIAx7a/75oO/9CC1xmSZigiC+BZ6hYtfsiXImOQoOzQxzH02bI5xvLEOcM3yd3UWCONbQ2r4jdGi55ZybqrISEakDd8dwqjZB/HIgN/t9oxcTRAMRkWlfPBCRJXTlfBQ6qPi1UZHPgF3L/oxh2JDZqIoBadFsqoaWyOz7aJfjFO6gMWaU32oOzCfTyF2VAAAAAElFTkSuQmCC",
          fileName="modelica://CHP_MultiDomain/gears.png")}),
                                                           Diagram(coordinateSystem(preserveAspectRatio=false)));
      end TM2EPConverter;

      model GasTurbineGear "Gas turbine with gear and generator-rotor"
        extends PowerSystems.Mechanics.TurboGroups.Partials.TurboBase1(final n=
              size(par.P_nom, 1));

        replaceable record Data =
          PowerSystems.Mechanics.TurboGroups.Parameters.GasTurbineGear
          "turbo-group par"   annotation(choicesAllMatching=true);
        final parameter Data par "turbo-group par"
          annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
        PowerSystems.Mechanics.Rotational.ElectricRotor genRotor(
          J=par.J_gen,
          w(start=w_start*par.ratio[end]/par.ratio[1]),
          a(start=0))
          annotation (Placement(transformation(extent={{70,-10},{90,10}})));
      protected
        PowerSystems.Mechanics.Rotational.ThermalTurbineRotor turbine(J=par.J_turb)
          annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft1(stiff=par.stiff_sh[
              1])
          annotation (Placement(transformation(extent={{-70,-10},{-60,10}})));
        PowerSystems.Mechanics.Rotational.ThermalTurbineRotor compressor(J=par.J_comp)
          annotation (Placement(transformation(extent={{-40,-10},{-60,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft2(stiff=par.stiff_sh[
              2])
          annotation (Placement(transformation(extent={{-40,-10},{-30,10}})));
        PowerSystems.Mechanics.Rotational.Gear gear1(ratio=par.ratio[1:2], J=
              par.J_gear1)
          annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft3(stiff=par.stiff_sh[
              3])
          annotation (Placement(transformation(extent={{-10,-10},{0,10}})));
        PowerSystems.Mechanics.Rotational.Gear gear2(ratio=par.ratio[2:3], J=
              par.J_gear2)
          annotation (Placement(transformation(extent={{0,-10},{20,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft4(stiff=par.stiff_sh[
              4])
          annotation (Placement(transformation(extent={{20,-10},{30,10}})));
        PowerSystems.Mechanics.Rotational.Rotor accessory(J=par.J_acc)
          annotation (Placement(transformation(extent={{30,-10},{40,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft5(stiff=par.stiff_sh[
              5])
          annotation (Placement(transformation(extent={{40,-10},{50,10}})));
        PowerSystems.Mechanics.Rotational.Shaft coupling(J=par.J_cpl, stiff=par.stiff_cpl)
          annotation (Placement(transformation(extent={{50,-40},{60,40}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft6(stiff=par.stiff_sh[
              6])
          annotation (Placement(transformation(extent={{60,-10},{70,10}})));

      initial equation
        turbine.w = compressor.w;
        turbine.a = compressor.a;
        compressor.w = (par.ratio[1]/par.ratio[2])*gear1.w;
        compressor.a = (par.ratio[1]/par.ratio[2])*gear1.a;
        gear1.w = (par.ratio[2]/par.ratio[3])*gear2.w;
        gear1.a = (par.ratio[2]/par.ratio[3])*gear2.a;
        gear2.w = accessory.w;
        gear2.a = accessory.a;
        accessory.w = coupling.w;
        accessory.a = coupling.a;
        coupling.w = genRotor.w;
        coupling.a = genRotor.a;

      equation
        connect(turbine.flange_b,shaft1.flange_a)
          annotation (Line(points={{-70,0},{-70,0}}, color={0,0,0}));
        connect(compressor.flange_b,shaft1.flange_b)
          annotation (Line(points={{-60,0},{-60,0}}, color={0,0,0}));
        connect(compressor.flange_a,shaft2.flange_a)
          annotation (Line(points={{-40,0},{-40,0}}, color={0,0,0}));
        connect(shaft2.flange_b,gear1.flange_a)
          annotation (Line(points={{-30,0},{-30,0}}, color={0,0,0}));
        connect(gear1.flange_b,shaft3.flange_a)
          annotation (Line(points={{-10,0},{-10,0}}, color={0,0,0}));
        connect(shaft3.flange_b,gear2.flange_a)
          annotation (Line(points={{0,0},{0,0}}, color={0,0,0}));
        connect(gear2.flange_b,shaft4.flange_a)
          annotation (Line(points={{20,0},{20,0}}, color={0,0,0}));
        connect(shaft4.flange_b,accessory.flange_a)
          annotation (Line(points={{30,0},{30,0}}, color={0,0,0}));
        connect(accessory.flange_b,shaft5.flange_a)
          annotation (Line(points={{40,0},{40,0}}, color={0,0,0}));
        connect(shaft5.flange_b,coupling.flange_a)
          annotation (Line(points={{50,0},{50,0}}, color={0,0,0}));
        connect(coupling.flange_b,shaft6.flange_a)
          annotation (Line(points={{60,0},{60,0}}, color={0,0,0}));
        connect(shaft6.flange_b,genRotor.flange_a)
          annotation (Line(points={{70,0},{70,0}}, color={0,0,0}));
        connect(blades[1], turbine.rotor) annotation (Line(points={{-100,60},{-80,
                60},{-80,6}}, color={0,0,0}));
        connect(blades[2], compressor.rotor) annotation (Line(points={{-100,60},{
                -50,60},{-50,6}}, color={0,0,0}));
        connect(airgap, genRotor.rotor) annotation (Line(points={{100,60},{80,60},{
                80,6}}, color={0,0,0}));
        annotation (defaultComponentName = "GTgrp",
          Documentation(
                  info="<html>
<p>Example model of a small gas-turbine with gear and generator rotor.
(Turbine, compressor, gear, accessory, generator).<br>
An appropriate torque model has to be connected to GasTurbineGear.blades.</p>
<p><i>
No pole pair reduction of equations of motion is performed.<br>
Therefore phi and w represent the mechanical angle and angular velocity.
</i></p>
</html>"),Icon(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={
              Polygon(
                points={{-100,40},{-60,60},{-60,-60},{-100,-40},{-100,40}},
                lineColor={0,0,0},
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={215,215,215}),
              Polygon(
                points={{-60,40},{-10,70},{-10,-70},{-60,-40},{-60,40}},
                lineColor={0,0,0},
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={215,215,215}),
              Polygon(
                points={{-60,70},{-60,40},{-10,70},{-60,70}},
                lineColor={176,0,0},
                fillColor={176,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-60,-70},{-60,-40},{-10,-70},{-60,-70}},
                lineColor={176,0,0},
                fillColor={176,0,0},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-88,10},{-70,10}},
                color={0,0,0},
                thickness=0.5),
              Line(
                points={{-50,10},{-20,10}},
                color={0,0,0},
                thickness=0.5),
              Line(
                points={{-88,-10},{-20,-10}},
                color={0,0,0},
                thickness=0.5)}),
          Diagram(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Text(
                extent={{-100,-60},{100,-80}},
                lineColor={175,175,175},
                fillColor={175,175,175},
                fillPattern=FillPattern.Solid,
                textString=
                    "stator reaction torque- and friction-models may be added here")}));
      end GasTurbineGear;

      model SteamTurboGroup "Steam turbo-group with generator-rotor"
        extends PowerSystems.Mechanics.TurboGroups.Partials.TurboBase1(final n=
              size(par.P_nom, 1));

        replaceable record Data =
          PowerSystems.Mechanics.TurboGroups.Parameters.SteamTurboGroup
          "turbo-group par"   annotation(choicesAllMatching=true);
        final parameter Data par "turbo-group par"
          annotation (Placement(transformation(extent={{-92,28},{-72,48}})));
        PowerSystems.Mechanics.Rotational.ElectricRotor genRotor(
          J=par.J_gen,
          w(start=w_start),
          a(start=0))
          annotation (Placement(transformation(extent={{50,-10},{70,10}})));
        PowerSystems.Types.SI.Angle[n] delta "difference angles";
      protected
        PowerSystems.Mechanics.Rotational.Rotor aux1(J=par.J_aux[1])
          annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft1(stiff=par.stiff[1])
          annotation (Placement(transformation(extent={{-80,-10},{-70,10}})));
        PowerSystems.Mechanics.Rotational.ThermalTurbineRotor turbine1(J=par.J_turb[
              1])
          annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft2(stiff=par.stiff[2])
          annotation (Placement(transformation(extent={{-50,-10},{-40,10}})));
        PowerSystems.Mechanics.Rotational.ThermalTurbineRotor turbine2(J=par.J_turb[
              2])
          annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft3(stiff=par.stiff[3])
          annotation (Placement(transformation(extent={{-20,-10},{-10,10}})));
        PowerSystems.Mechanics.Rotational.ThermalTurbineRotor turbine3(J=par.J_turb[
              3])
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft4(stiff=par.stiff[4])
          annotation (Placement(transformation(extent={{10,-10},{20,10}})));
        PowerSystems.Mechanics.Rotational.ThermalTurbineRotor turbine4(J=par.J_turb[
              4])
          annotation (Placement(transformation(extent={{20,-10},{40,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft5(stiff=par.stiff[5])
          annotation (Placement(transformation(extent={{40,-10},{50,10}})));
        PowerSystems.Mechanics.Rotational.ShaftNoMass shaft6(stiff=par.stiff[6])
          annotation (Placement(transformation(extent={{70,-10},{80,10}})));
        PowerSystems.Mechanics.Rotational.Rotor aux2(J=par.J_aux[2])
          annotation (Placement(transformation(extent={{80,-10},{100,10}})));

      initial equation
        aux1.w = turbine1.w;
        aux1.a = turbine1.a;
        turbine1.w = turbine2.w;
        turbine1.a = turbine2.a;
        turbine2.w = turbine3.w;
        turbine2.a = turbine3.a;
        turbine3.w = turbine4.w;
        turbine3.a = turbine4.a;
        turbine4.w = genRotor.w;
        turbine4.a = genRotor.a;
        genRotor.w = aux2.w;
        genRotor.a = aux2.a;

      equation
        delta = {turbine2.flange_a.phi-turbine1.flange_b.phi,turbine3.flange_a.phi -turbine2.flange_b.phi,
          turbine4.flange_a.phi-turbine3.flange_b.phi,genRotor.flange_a.phi -turbine4.flange_b.phi};

        connect(aux1.flange_b,shaft1.flange_a)
          annotation (Line(points={{-80,0},{-80,0}}, color={0,0,0}));
        connect(shaft1.flange_b,turbine1.flange_a)
          annotation (Line(points={{-70,0},{-70,0}}, color={0,0,0}));
        connect(turbine1.flange_b,shaft2.flange_a)
          annotation (Line(points={{-50,0},{-50,0}}, color={0,0,0}));
        connect(shaft2.flange_b,turbine2.flange_a)
          annotation (Line(points={{-40,0},{-40,0}}, color={0,0,0}));
        connect(turbine2.flange_b,shaft3.flange_a)
          annotation (Line(points={{-20,0},{-20,0}}, color={0,0,0}));
        connect(shaft3.flange_b,turbine3.flange_a)
          annotation (Line(points={{-10,0},{-10,0}}, color={0,0,0}));
        connect(turbine3.flange_b,shaft4.flange_a)
          annotation (Line(points={{10,0},{10,0}}, color={0,0,0}));
        connect(shaft4.flange_b,turbine4.flange_a)
          annotation (Line(points={{20,0},{20,0}}, color={0,0,0}));
        connect(turbine4.flange_b,shaft5.flange_a)
          annotation (Line(points={{40,0},{40,0}}, color={0,0,0}));
        connect(shaft5.flange_b,genRotor.flange_a)
          annotation (Line(points={{50,0},{50,0}}, color={0,0,0}));
        connect(genRotor.flange_b,shaft6.flange_a)
          annotation (Line(points={{70,0},{70,0}}, color={0,0,0}));
        connect(shaft6.flange_b,aux2.flange_a)
          annotation (Line(points={{80,0},{80,0}}, color={0,0,0}));
        connect(blades[1], turbine1.rotor)
                                          annotation (Line(points={{-100,60},{-60,
                60},{-60,6}}, color={0,0,0}));
        connect(blades[2], turbine2.rotor)
                                          annotation (Line(points={{-100,60},{-30,
                60},{-30,6}}, color={0,0,0}));
        connect(blades[3], turbine3.rotor)
                                          annotation (Line(points={{-100,60},{0,60},
                {0,6}}, color={0,0,0}));
        connect(blades[4], turbine4.rotor)
                                          annotation (Line(points={{-100,60},{30,60},
                {30,6}}, color={0,0,0}));
        connect(airgap, genRotor.rotor) annotation (Line(points={{100,60},{60,60},{
                60,6}}, color={0,0,0}));
        annotation (defaultComponentName = "turboGrp",
          Documentation(
                  info="<html>
<p>Example model of a large steam turbo-group with generator rotor.<br>
(Aux, HP1, HP2, MP, LP, Generator, Exciter).<br><br>
The rigid massive rotating parts are connected with massless elastic shafts. The model therefore has several mechanical degrees of freedom and allows the study of coupled electrical and mechanical resonances.<br>
An appropriate torque model has to be connected to SteamTurboGroup.blades.</p>
<p><i>
No pole pair reduction of equations of motion is performed.<br>
Therefore phi and w represent the mechanical angle and angular velocity.
</i></p>
</html>
"),       Icon(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              grid={2,2}),
            graphics={
              Polygon(
                points={{-100,40},{-60,60},{-60,-60},{-100,-40},{-100,40}},
                lineColor={0,0,0},
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={215,215,215}),
              Polygon(
                points={{-60,40},{-10,70},{-10,-70},{-60,-40},{-60,40}},
                lineColor={0,0,0},
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={215,215,215}),
              Polygon(
                points={{-60,70},{-60,40},{-10,70},{-60,70}},
                lineColor={176,0,0},
                fillColor={176,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-60,-70},{-60,-40},{-10,-70},{-60,-70}},
                lineColor={176,0,0},
                fillColor={176,0,0},
                fillPattern=FillPattern.Solid)}),
          Diagram(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Text(
                extent={{-100,-60},{100,-80}},
                lineColor={175,175,175},
                fillColor={175,175,175},
                fillPattern=FillPattern.Solid,
                textString=
                    "stator reaction torque- and friction-models may be added here")}));
      end SteamTurboGroup;

      model SimpleInertia
        Modelica.Mechanics.Rotational.Components.Inertia inertiaT(J=4000)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Modelica.Mechanics.Rotational.Interfaces.Flange_a flangeA
          "Flange of left shaft"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Modelica.Mechanics.Rotational.Interfaces.Flange_b flangeB
          "Flange of right shaft"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
      equation
        connect(inertiaT.flange_a, flangeA)
          annotation (Line(points={{-10,0},{-100,0}}, color={0,0,0}));
        connect(inertiaT.flange_b, flangeB)
          annotation (Line(points={{10,0},{100,0}}, color={0,0,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(extent={{-100,100},{100,-100}}, lineColor={28,108,200})}),
                                                                       Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end SimpleInertia;

    end Interfaces;
  end BaseModels;

  package PrimeMovers
    package Gas
      package PlantA
        model Plant
          parameter Real tableEtaC[6, 4]=[0, 95, 100, 105; 1, 82.5e-2, 81e-2,
              80.5e-2; 2, 84e-2, 82.9e-2, 82e-2; 3, 83.2e-2, 82.2e-2, 81.5e-2; 4,
              82.5e-2, 81.2e-2, 79e-2; 5, 79.5e-2, 78e-2, 76.5e-2];
          parameter Real tablePhicC[6, 4]=[0, 95, 100, 105; 1, 38.3e-3, 43e-3,
              46.8e-3; 2, 39.3e-3, 43.8e-3, 47.9e-3; 3, 40.6e-3, 45.2e-3, 48.4e-3;
              4, 41.6e-3, 46.1e-3, 48.9e-3; 5, 42.3e-3, 46.6e-3, 49.3e-3];
          parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 22.6, 27, 32; 2, 22,
              26.6, 30.8; 3, 20.8, 25.5, 29; 4, 19, 24.3, 27.1; 5, 17, 21.5, 24.2];
          parameter Real tablePhicT[5, 4]=[1, 90, 100, 110; 2.36, 4.68e-3, 4.68e-3,
              4.68e-3; 2.88, 4.68e-3, 4.68e-3, 4.68e-3; 3.56, 4.68e-3, 4.68e-3,
              4.68e-3; 4.46, 4.68e-3, 4.68e-3, 4.68e-3];
          parameter Real tableEtaT[5, 4]=[1, 90, 100, 110; 2.36, 89e-2, 89.5e-2,
              89.3e-2; 2.88, 90e-2, 90.6e-2, 90.5e-2; 3.56, 90.5e-2, 90.6e-2,
              90.5e-2; 4.46, 90.2e-2, 90.3e-2, 90e-2];
          ThermoPower.Electrical.Generator generator(Pnom=4e6, initOpt=ThermoPower.Choices.Init.Options.steadyState)
            annotation (Placement(transformation(extent={{14,-20},{54,20}},   rotation=0)));
          Modelica.Blocks.Interfaces.RealInput fuelFlowRate        annotation (
              Placement(transformation(extent={{-114,-10},{-94,10}},  rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput generatedPower annotation (
              Placement(transformation(extent={{96,-10},{116,10}},  rotation=0)));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
             Placement(transformation(extent={{-12,-10},{8,10}},  rotation=0)));
          Modelica.Blocks.Continuous.FirstOrder powerSensor1(
            k=1,
            T=1,
            y_start=56.8e6,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{34,-44},{50,-28}},     rotation=0)));
          inner ThermoPower.System system(allowFlowReversal=false)
            annotation (Placement(transformation(extent={{58,54},{78,74}})));
          ThermoPower.Electrical.Grid grid(Pgrid=1e9)
            annotation (Placement(transformation(extent={{66,-10},{86,10}})));
          GasTurbine gasTurbine(
            tableEtaC=tableEtaC,
            tablePhicC=tablePhicC,
            tablePR=tablePR,
            tablePhicT=tablePhicT,
            tableEtaT=tableEtaT) annotation (Placement(transformation(rotation=
                    0, extent={{-82,-30},{-22,30}})));
        equation
          connect(powerSensor.flange_a,gasTurbine.shaft_b)
                                                         annotation (Line(
              points={{-12,0},{-21.4,0}},
              color={0,0,0},
              thickness=0.5));
          connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-10,-11},
                  {-10,-36},{32.4,-36}},   color={0,0,127}));
          connect(powerSensor1.y, generatedPower) annotation (Line(points={{50.8,
                  -36},{92,-36},{92,0},{106,0}},   color={0,0,127}));
          connect(generator.shaft, powerSensor.flange_b) annotation (Line(
              points={{16.8,0},{8,0}},
              color={0,0,0},
              thickness=0.5));
          connect(generator.port, grid.port) annotation (Line(
              points={{51.2,0},{67.4,0}},
              color={0,0,255},
              thickness=0.5));
          connect(fuelFlowRate, gasTurbine.fuelFlowRate)
            annotation (Line(points={{-104,0},{-82,0}}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false)),
            Icon(coordinateSystem(
                preserveAspectRatio=false),
                                   graphics={Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={170,170,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-98,98},{100,-98}},
                  lineColor={170,170,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"));
        end Plant;

        model GasTurbine
          extends Icons.GasTurbineIcon;
          Modelica.Blocks.Interfaces.RealInput fuelFlowRate annotation (
              Placement(transformation(extent={{-184,-22},{-140,22}}, rotation=
                    0), iconTransformation(extent={{-110,-10},{-90,10}})));
          ThermoPower.Gas.Compressor compressor(
            redeclare package Medium = ThermoPower.Media.Air,
            tablePhic=tablePhicC,
            tableEta=tableEtaC,
            pstart_in=0.343e5,
            pstart_out=8.3e5,
            Tstart_in=244.4,
            tablePR=tablePR,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
            Tstart_out=600.4,
            explicitIsentropicEnthalpy=true,
            Tdes_in=244.4,
            Ndesign=157.08) annotation (Placement(transformation(extent={{-102,
                    -94},{-42,-34}}, rotation=0)));
          ThermoPower.Gas.Turbine turbine(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            pstart_in=7.85e5,
            pstart_out=1.52e5,
            tablePhic=tablePhicT,
            tableEta=tableEtaT,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
            Tstart_out=800,
            Tdes_in=1400,
            Tstart_in=1370,
            Ndesign=157.08) annotation (Placement(transformation(extent={{50,
                    -94},{110,-34}}, rotation=0)));
          ThermoPower.Gas.CombustionChamber CombustionChamber1(
            gamma=1,
            Cm=1,
            pstart=8.11e5,
            Tstart=1370,
            V=0.05,
            S=0.05,
            initOpt=ThermoPower.Choices.Init.Options.steadyState,
            HH=41.6e6) annotation (Placement(transformation(extent={{-16,16},{
                    24,56}}, rotation=0)));
          ThermoPower.Gas.SourcePressure SourceP1(
            redeclare package Medium = ThermoPower.Media.Air,
            p0=0.343e5,
            T=244.4) annotation (Placement(transformation(extent={{-132,-34},{
                    -112,-14}}, rotation=0)));
          ThermoPower.Gas.SinkPressure SinkP1(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            p0=1.52e5,
            T=800) annotation (Placement(transformation(extent={{120,28},{140,
                    48}}, rotation=0)));
          ThermoPower.Gas.SourceMassFlow SourceW1(
            redeclare package Medium = ThermoPower.Media.NaturalGas,
            w0=2.02,
            p0=811000,
            T=300,
            use_in_w0=true) annotation (Placement(transformation(extent={{-44,
                    66},{-24,86}}, rotation=0)));
          ThermoPower.Gas.PressDrop PressDrop1(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
            wnom=102,
            rhonom=2,
            dpnom=26000,
            pstart=811000,
            Tstart=1370) annotation (Placement(transformation(
                origin={56,4},
                extent={{-10,-10},{10,10}},
                rotation=270)));
          ThermoPower.Gas.PressDrop PressDrop2(
            pstart=8.3e5,
            FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
            A=1,
            redeclare package Medium = ThermoPower.Media.Air,
            dpnom=0.19e5,
            wnom=100,
            rhonom=4.7,
            Tstart=600) annotation (Placement(transformation(
                origin={-48,16},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          Modelica.Blocks.Continuous.FirstOrder gasFlowActuator(
            k=1,
            T=4,
            y_start=500,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (
              Placement(transformation(extent={{-82,88},{-66,104}}, rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateInletCC(
              redeclare package Medium = ThermoPower.Media.Air) annotation (
              Placement(transformation(extent={{-44,26},{-24,46}}, rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateOutletCC(
              redeclare package Medium = ThermoPower.Media.FlueGas) annotation (
             Placement(transformation(extent={{32,26},{52,46}}, rotation=0)));
          ThermoPower.Gas.SensT sensT(redeclare package Medium =
                ThermoPower.Media.Air) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-52,-16})));
          parameter Real tableEtaC[6, 4]=[0, 95, 100, 105; 1, 82.5e-2, 81e-2,
              80.5e-2; 2, 84e-2, 82.9e-2, 82e-2; 3, 83.2e-2, 82.2e-2, 81.5e-2; 4,
              82.5e-2, 81.2e-2, 79e-2; 5, 79.5e-2, 78e-2, 76.5e-2];
          parameter Real tablePhicC[6, 4]=[0, 95, 100, 105; 1, 38.3e-3, 43e-3,
              46.8e-3; 2, 39.3e-3, 43.8e-3, 47.9e-3; 3, 40.6e-3, 45.2e-3, 48.4e-3;
              4, 41.6e-3, 46.1e-3, 48.9e-3; 5, 42.3e-3, 46.6e-3, 49.3e-3];
          parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 22.6, 27, 32; 2, 22,
              26.6, 30.8; 3, 20.8, 25.5, 29; 4, 19, 24.3, 27.1; 5, 17, 21.5, 24.2];
          parameter Real tablePhicT[5, 4]=[1, 90, 100, 110; 2.36, 4.68e-3, 4.68e-3,
              4.68e-3; 2.88, 4.68e-3, 4.68e-3, 4.68e-3; 3.56, 4.68e-3, 4.68e-3,
              4.68e-3; 4.46, 4.68e-3, 4.68e-3, 4.68e-3];
          parameter Real tableEtaT[5, 4]=[1, 90, 100, 110; 2.36, 89e-2, 89.5e-2,
              89.3e-2; 2.88, 90e-2, 90.6e-2, 90.5e-2; 3.56, 90.5e-2, 90.6e-2,
              90.5e-2; 4.46, 90.2e-2, 90.3e-2, 90e-2];
          Modelica.Mechanics.Rotational.Interfaces.Flange_b shaft_b annotation (
             Placement(transformation(rotation=0, extent={{140,-20},{180,20}}),
                iconTransformation(extent={{92,-10},{112,10}})));
        equation
          connect(SourceW1.flange,CombustionChamber1. inf) annotation (Line(
              points={{-24,76},{4,76},{4,56}},
              color={159,159,223},
              thickness=0.5));
          connect(turbine.outlet,SinkP1. flange) annotation (Line(
              points={{104,-40},{104,38},{120,38}},
              color={159,159,223},
              thickness=0.5));
          connect(SourceP1.flange,compressor. inlet) annotation (Line(
              points={{-112,-24},{-96,-24},{-96,-40}},
              color={159,159,223},
              thickness=0.5));
          connect(PressDrop1.outlet,turbine. inlet) annotation (Line(
              points={{56,-6},{56,-40}},
              color={159,159,223},
              thickness=0.5));
          connect(compressor.shaft_b,turbine. shaft_a) annotation (Line(
              points={{-54,-64},{62,-64}},
              color={0,0,0},
              thickness=0.5));
          connect(gasFlowActuator.u,fuelFlowRate)         annotation (Line(points={{-83.6,
                  96},{-110,96},{-110,0},{-162,0}},           color={0,0,127}));
          connect(gasFlowActuator.y,SourceW1. in_w0) annotation (Line(points={{-65.2,
                  96},{-40,96},{-40,81}},   color={0,0,127}));
          connect(CombustionChamber1.ina,stateInletCC. outlet) annotation (Line(
              points={{-16,36},{-28,36}},
              color={159,159,223},
              thickness=0.5));
          connect(stateInletCC.inlet,PressDrop2. outlet) annotation (Line(
              points={{-40,36},{-46,36},{-46,26},{-48,26}},
              color={159,159,223},
              thickness=0.5));
          connect(stateOutletCC.inlet,CombustionChamber1. out) annotation (Line(
              points={{36,36},{24,36}},
              color={159,159,223},
              thickness=0.5));
          connect(stateOutletCC.outlet,PressDrop1. inlet) annotation (Line(
              points={{48,36},{56,36},{56,14}},
              color={159,159,223},
              thickness=0.5));
          connect(sensT.inlet,compressor. outlet)
            annotation (Line(points={{-48,-22},{-48,-40}},   color={159,159,223}));
          connect(sensT.outlet,PressDrop2. inlet)
            annotation (Line(points={{-48,-10},{-48,6}},   color={159,159,223}));
          connect(shaft_b, turbine.shaft_b) annotation (Line(points={{160,0},{
                  122,0},{122,-64},{98,-64}}, color={0,0,0}));
          annotation (Diagram(coordinateSystem(extent={{-160,-160},{160,160}})),
              Icon(coordinateSystem(extent={{-100,-100},{100,100}})));
        end GasTurbine;

      end PlantA;

      package PlantB
        model Plant
          parameter Real tableEtaC[6, 4]=[0, 95, 100, 105; 1, 0.8995, 0.8831,
              0.1075; 2, 0.9158, 0.9038, 0.894; 3, 0.9071, 0.8962, 0.8886; 4,
              0.8995, 0.8853, 0.8613; 5, 0.8668, 0.8504, 0.8341];
          parameter Real tablePhicC[6, 4]=[0, 95, 100, 105; 1, 0.08067, 0.09057,
              46.8e-3; 2, 0.08278, 0.09225, 0.1009; 3, 0.08551, 0.0952, 0.1019;
              4, 0.08762, 0.0971, 0.103; 5, 0.08909, 0.09815, 0.1038];
          parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 19.2431, 22.9896,
              27.2469; 2, 18.7323, 22.649, 26.2252; 3, 17.7105, 21.7124, 24.6925;
              4, 16.1779, 20.6906, 23.0747; 5, 14.4749, 18.3065, 20.6055];
          parameter Real tablePhicT[5, 4]=[1, 90, 100, 110; 2.36, 4.68e-3, 4.68e-3,
              4.68e-3; 2.88, 4.68e-3, 4.68e-3, 4.68e-3; 3.56, 4.68e-3, 4.68e-3,
              4.68e-3; 4.46, 4.68e-3, 4.68e-3, 4.68e-3];
          parameter Real tableEtaT[5, 4]=[1, 90, 100, 110; 2.36, 89e-2, 89.5e-2,
              89.3e-2; 2.88, 90e-2, 90.6e-2, 90.5e-2; 3.56, 90.5e-2, 90.6e-2,
              90.5e-2; 4.46, 90.2e-2, 90.3e-2, 90e-2];
          ThermoPower.Electrical.Generator generator(Pnom=200e6,
                                                               initOpt=ThermoPower.Choices.Init.Options.steadyState)
            annotation (Placement(transformation(extent={{92,-80},{132,-40}}, rotation=0)));
          Modelica.Blocks.Interfaces.RealInput fuelFlowRate        annotation (
              Placement(transformation(extent={{-210,-10},{-190,10}}, rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput generatedPower annotation (
              Placement(transformation(extent={{196,-10},{216,10}}, rotation=0)));
          ThermoPower.Gas.Compressor compressor(
            redeclare package Medium = ThermoPower.Media.Air,
            eta_mech=0.995,
            pstart_in=101325,
            pstart_out=1950000,
            Tstart_in=288.15,
            Tstart_out=673.15,
            tablePhic=tablePhicC,
            tableEta=tableEtaC,
            tablePR=tablePR,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
            explicitIsentropicEnthalpy=true,
            Ndesign=314.16,
            Tdes_in=288.15) annotation (Placement(transformation(extent={{-158,-90},{-98,
                    -30}}, rotation=0)));
          ThermoPower.Gas.Turbine turbine(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            eta_mech=0.995,
            pstart_in=1932000,
            pstart_out=101325,
            tablePhic=tablePhicT,
            tableEta=tableEtaT,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
            Tstart_out=893.15,
            Tdes_in=1573.15,
            Tstart_in=1504.442,
            Ndesign=314.16) annotation (Placement(transformation(extent={{-6,-90},{54,-30}},
                  rotation=0)));
          ThermoPower.Gas.CombustionChamber CombustionChamber1(
            pstart=1932000,
            Tstart=1504.442,
            V=0.1,
            S=0.1,
            initOpt=ThermoPower.Choices.Init.Options.steadyState,
            HH=50e6) annotation (Placement(transformation(extent={{-72,20},{-32,60}},
                  rotation=0)));
          ThermoPower.Gas.SourcePressure SourceP1(
            redeclare package Medium = ThermoPower.Media.Air,
            p0=101325,
            T=288.15) annotation (Placement(transformation(extent={{-188,-30},{-168,-10}},
                  rotation=0)));
          ThermoPower.Gas.SinkPressure SinkP1(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            p0=101325,
            T=893.15) annotation (Placement(transformation(extent={{94,-10},{114,10}},
                  rotation=0)));
          ThermoPower.Gas.SourceMassFlow SourceW1(
            redeclare package Medium = ThermoPower.Media.NaturalGas,
            w0=13.65,
            p0=1932000,
            use_in_w0=true) annotation (Placement(transformation(extent={{-100,70},{-80,
                    90}}, rotation=0)));
          ThermoPower.Gas.PressDrop PressDrop1(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
            wnom=598,
            rhonom=2,
            dpnom=1000,
            pstart=1940000,
            Tstart=1504.442) annotation (Placement(transformation(
                origin={0,8},
                extent={{-10,-10},{10,10}},
                rotation=270)));
          ThermoPower.Gas.PressDrop PressDrop2(
            pstart=1950000,
            FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
            A=1,
            redeclare package Medium = ThermoPower.Media.Air,
            dpnom=1000,
            wnom=580,
            rhonom=4.7,
            Tstart=668.15)
                        annotation (Placement(transformation(
                origin={-104,10},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
             Placement(transformation(extent={{60,-70},{80,-50}}, rotation=0)));
          Modelica.Blocks.Continuous.FirstOrder gasFlowActuator(
            k=1,
            T=4,
            y_start=500,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{-138,92},{-122,108}}, rotation=0)));
          Modelica.Blocks.Continuous.FirstOrder powerSensor1(
            k=1,
            T=1,
            y_start=56.8e6,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{146,-118},{162,-102}}, rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateInletCC(
              redeclare package Medium = ThermoPower.Media.Air) annotation (Placement(
                transformation(extent={{-100,30},{-80,50}}, rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateOutletCC(
              redeclare package Medium = ThermoPower.Media.FlueGas) annotation (
              Placement(transformation(extent={{-24,30},{-4,50}}, rotation=0)));
          inner ThermoPower.System system(allowFlowReversal=false)
            annotation (Placement(transformation(extent={{158,160},{178,180}})));
          ThermoPower.Electrical.Grid grid(Pgrid=1e9)
            annotation (Placement(transformation(extent={{144,-70},{164,-50}})));
        equation
          connect(SourceW1.flange, CombustionChamber1.inf) annotation (Line(
              points={{-80,80},{-52,80},{-52,60}},
              color={159,159,223},
              thickness=0.5));
          connect(turbine.outlet, SinkP1.flange) annotation (Line(
              points={{48,-36},{48,0},{94,0}},
              color={159,159,223},
              thickness=0.5));
          connect(SourceP1.flange, compressor.inlet) annotation (Line(
              points={{-168,-20},{-152,-20},{-152,-36}},
              color={159,159,223},
              thickness=0.5));
          connect(PressDrop1.outlet, turbine.inlet) annotation (Line(
              points={{-1.83697e-015,-2},{-1.83697e-015,-36},{0,-36}},
              color={159,159,223},
              thickness=0.5));
          connect(compressor.outlet, PressDrop2.inlet) annotation (Line(
              points={{-104,-36},{-104,0}},
              color={159,159,223},
              thickness=0.5));
          connect(compressor.shaft_b, turbine.shaft_a) annotation (Line(
              points={{-110,-60},{6,-60}},
              color={0,0,0},
              thickness=0.5));
          connect(powerSensor.flange_a, turbine.shaft_b) annotation (Line(
              points={{60,-60},{42,-60}},
              color={0,0,0},
              thickness=0.5));
          connect(gasFlowActuator.u, fuelFlowRate)        annotation (Line(points={
                  {-139.6,100},{-166,100},{-166,0},{-200,0}}, color={0,0,127}));
          connect(gasFlowActuator.y, SourceW1.in_w0) annotation (Line(points={{-121.2,
                  100},{-96,100},{-96,85}}, color={0,0,127}));
          connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{62,-71},
                  {62,-110},{144.4,-110}}, color={0,0,127}));
          connect(powerSensor1.y, generatedPower) annotation (Line(points={{162.8,-110},
                  {184.4,-110},{184.4,0},{206,0}}, color={0,0,127}));
          connect(CombustionChamber1.ina, stateInletCC.outlet) annotation (Line(
              points={{-72,40},{-84,40}},
              color={159,159,223},
              thickness=0.5));
          connect(stateInletCC.inlet, PressDrop2.outlet) annotation (Line(
              points={{-96,40},{-104,40},{-104,20}},
              color={159,159,223},
              thickness=0.5));
          connect(stateOutletCC.inlet, CombustionChamber1.out) annotation (Line(
              points={{-20,40},{-32,40}},
              color={159,159,223},
              thickness=0.5));
          connect(stateOutletCC.outlet, PressDrop1.inlet) annotation (Line(
              points={{-8,40},{1.83697e-015,40},{1.83697e-015,18}},
              color={159,159,223},
              thickness=0.5));
          connect(generator.shaft, powerSensor.flange_b) annotation (Line(
              points={{94.8,-60},{80,-60}},
              color={0,0,0},
              thickness=0.5));
          connect(generator.port, grid.port) annotation (Line(
              points={{129.2,-60},{145.4,-60}},
              color={0,0,255},
              thickness=0.5));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1)),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1), graphics={Rectangle(
                  extent={{-200,200},{200,-200}},
                  lineColor={170,170,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-140,140},{140,-140}},
                  lineColor={170,170,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"));
        end Plant;

        model PlantA
          parameter Real tableEtaC[6, 4]=[0, 95, 100, 105; 1, 0.8995, 0.8831,
              0.1075; 2, 0.9158, 0.9038, 0.894; 3, 0.9071, 0.8962, 0.8886; 4,
              0.8995, 0.8853, 0.8613; 5, 0.8668, 0.8504, 0.8341];
          parameter Real tablePhicC[6, 4]=[0, 95, 100, 105; 1, 0.08067, 0.09057,
              46.8e-3; 2, 0.08278, 0.09225, 0.1009; 3, 0.08551, 0.0952, 0.1019;
              4, 0.08762, 0.0971, 0.103; 5, 0.08909, 0.09815, 0.1038];
          parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 19.2431, 22.9896,
              27.2469; 2, 18.7323, 22.649, 26.2252; 3, 17.7105, 21.7124, 24.6925;
              4, 16.1779, 20.6906, 23.0747; 5, 14.4749, 18.3065, 20.6055];
          parameter Real tablePhicT[5, 4]=[1, 90, 100, 110; 2.36, 4.68e-3, 4.68e-3,
              4.68e-3; 2.88, 4.68e-3, 4.68e-3, 4.68e-3; 3.56, 4.68e-3, 4.68e-3,
              4.68e-3; 4.46, 4.68e-3, 4.68e-3, 4.68e-3];
          parameter Real tableEtaT[5, 4]=[1, 90, 100, 110; 2.36, 89e-2, 89.5e-2,
              89.3e-2; 2.88, 90e-2, 90.6e-2, 90.5e-2; 3.56, 90.5e-2, 90.6e-2,
              90.5e-2; 4.46, 90.2e-2, 90.3e-2, 90e-2];
          Modelica.Blocks.Interfaces.RealInput fuelFlowRate        annotation (
              Placement(transformation(extent={{-210,-10},{-190,10}}, rotation=0)));
          ThermoPower.Gas.Compressor compressor(
            redeclare package Medium = ThermoPower.Media.Air,
            eta_mech=0.995,
            pstart_in=101325,
            pstart_out=1950000,
            Tstart_in=288.15,
            Tstart_out=673.15,
            tablePhic=tablePhicC,
            tableEta=tableEtaC,
            tablePR=tablePR,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
            explicitIsentropicEnthalpy=true,
            Ndesign=314.16,
            Tdes_in=288.15) annotation (Placement(transformation(extent={{-124,
                    -92},{-64,-32}},
                           rotation=0)));
          ThermoPower.Gas.Turbine turbine(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            eta_mech=0.995,
            pstart_in=1932000,
            pstart_out=101325,
            tablePhic=tablePhicT,
            tableEta=tableEtaT,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
            Tstart_out=893.15,
            Tdes_in=1573.15,
            Tstart_in=1504.442,
            Ndesign=314.16) annotation (Placement(transformation(extent={{28,-92},
                    {88,-32}},
                  rotation=0)));
          ThermoPower.Gas.CombustionChamber CombustionChamber1(
            pstart=1932000,
            V=0.1,
            S=0.1,
            initOpt=ThermoPower.Choices.Init.Options.steadyState,
            HH=50e6) annotation (Placement(transformation(extent={{-38,18},{2,
                    58}},
                  rotation=0)));
          ThermoPower.Gas.SourcePressure SourceP1(
            redeclare package Medium = ThermoPower.Media.Air,
            p0=101325,
            T=288.15) annotation (Placement(transformation(extent={{-164,-30},{
                    -144,-10}},
                  rotation=0)));
          ThermoPower.Gas.SinkPressure SinkP1(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            p0=101325,
            T=893.15) annotation (Placement(transformation(extent={{128,-12},{
                    148,8}},
                  rotation=0)));
          ThermoPower.Gas.SourceMassFlow SourceW1(
            redeclare package Medium = ThermoPower.Media.NaturalGas,
            w0=13.65,
            p0=1932000,
            use_in_w0=true) annotation (Placement(transformation(extent={{-66,68},
                    {-46,88}},
                          rotation=0)));
          ThermoPower.Gas.PressDrop PressDrop1(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
            wnom=598,
            rhonom=2,
            dpnom=1000,
            pstart=1940000,
            Tstart=1504.442) annotation (Placement(transformation(
                origin={34,6},
                extent={{-10,-10},{10,10}},
                rotation=270)));
          ThermoPower.Gas.PressDrop PressDrop2(
            pstart=1950000,
            FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
            A=1,
            redeclare package Medium = ThermoPower.Media.Air,
            dpnom=1000,
            wnom=580,
            rhonom=4.7,
            Tstart=668.15)
                        annotation (Placement(transformation(
                origin={-70,8},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          Modelica.Blocks.Continuous.FirstOrder gasFlowActuator(
            k=1,
            T=4,
            y_start=500,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{-104,90},{-88,106}},  rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateInletCC(
              redeclare package Medium = ThermoPower.Media.Air) annotation (Placement(
                transformation(extent={{-66,28},{-46,48}},  rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateOutletCC(
              redeclare package Medium = ThermoPower.Media.FlueGas) annotation (
              Placement(transformation(extent={{10,28},{30,48}},  rotation=0)));
          inner ThermoPower.System system(allowFlowReversal=false)
            annotation (Placement(transformation(extent={{158,160},{178,180}})));
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=
                314.16, useSupport=false)      annotation (Placement(transformation(
                  extent={{-198,-78},{-168,-48}},
                                               rotation=0)));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
            annotation (Placement(transformation(extent={{-158,-76},{-132,-50}})));
          Modelica.Mechanics.Rotational.Components.Inertia inertia(J=10000)
            annotation (Placement(transformation(extent={{92,-80},{128,-44}})));
        equation
          connect(SourceW1.flange, CombustionChamber1.inf) annotation (Line(
              points={{-46,78},{-18,78},{-18,58}},
              color={159,159,223},
              thickness=0.5));
          connect(turbine.outlet, SinkP1.flange) annotation (Line(
              points={{82,-38},{82,-2},{128,-2}},
              color={159,159,223},
              thickness=0.5));
          connect(SourceP1.flange, compressor.inlet) annotation (Line(
              points={{-144,-20},{-132,-20},{-132,-38},{-118,-38}},
              color={159,159,223},
              thickness=0.5));
          connect(PressDrop1.outlet, turbine.inlet) annotation (Line(
              points={{34,-4},{34,-38}},
              color={159,159,223},
              thickness=0.5));
          connect(compressor.outlet, PressDrop2.inlet) annotation (Line(
              points={{-70,-38},{-70,-2}},
              color={159,159,223},
              thickness=0.5));
          connect(compressor.shaft_b, turbine.shaft_a) annotation (Line(
              points={{-76,-62},{40,-62}},
              color={0,0,0},
              thickness=0.5));
          connect(gasFlowActuator.u, fuelFlowRate)        annotation (Line(points={{-105.6,
                  98},{-184,98},{-184,0},{-200,0}},           color={0,0,127}));
          connect(gasFlowActuator.y, SourceW1.in_w0) annotation (Line(points={{-87.2,
                  98},{-62,98},{-62,83}},   color={0,0,127}));
          connect(CombustionChamber1.ina, stateInletCC.outlet) annotation (Line(
              points={{-38,38},{-50,38}},
              color={159,159,223},
              thickness=0.5));
          connect(stateInletCC.inlet, PressDrop2.outlet) annotation (Line(
              points={{-62,38},{-70,38},{-70,18}},
              color={159,159,223},
              thickness=0.5));
          connect(stateOutletCC.inlet, CombustionChamber1.out) annotation (Line(
              points={{14,38},{2,38}},
              color={159,159,223},
              thickness=0.5));
          connect(stateOutletCC.outlet, PressDrop1.inlet) annotation (Line(
              points={{26,38},{34,38},{34,16}},
              color={159,159,223},
              thickness=0.5));
          connect(powerSensor1.flange_b, compressor.shaft_a) annotation (Line(
                points={{-132,-63},{-122,-63},{-122,-62},{-112,-62}}, color={0,
                  0,0}));
          connect(powerSensor1.flange_a, ConstantSpeed1.flange) annotation (
              Line(points={{-158,-63},{-158,-64},{-168,-64},{-168,-63}}, color=
                  {0,0,0}));
          connect(inertia.flange_a, turbine.shaft_b)
            annotation (Line(points={{92,-62},{76,-62}}, color={0,0,0}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1)),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1), graphics={Rectangle(
                  extent={{-200,200},{200,-200}},
                  lineColor={170,170,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-140,140},{140,-140}},
                  lineColor={170,170,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"));
        end PlantA;

        model OpenLoopSimulator
          extends Modelica.Icons.Example;

          Plant plant annotation (Placement(
                transformation(extent={{20,-20},{60,20}}, rotation=0)));
          Modelica.Blocks.Sources.Step fuelFlowRate(
            height=2.65,
            startTime=500,
            offset=11)     annotation (Placement(transformation(extent={{-40,-10},{
                    -20,10}}, rotation=0)));
          inner ThermoPower.System system
            annotation (Placement(transformation(extent={{80,80},{100,100}})));
        equation
          connect(plant.fuelFlowRate, fuelFlowRate.y)
            annotation (Line(points={{20,0},{-19,0}}, color={0,0,127}));
          annotation (
            Diagram(graphics),
            experiment(
              StopTime=1000,
              __Dymola_NumberOfIntervals=5000,
              Tolerance=1e-006),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model allows to simulate an open loop transients.
</html>"),  __Dymola_experimentSetupOutput);
        end OpenLoopSimulator;

        model OpenLoopSimulatorA
          extends Modelica.Icons.Example;

          PlantA plant annotation (Placement(
                transformation(extent={{20,-20},{60,20}}, rotation=0)));
          Modelica.Blocks.Sources.Step fuelFlowRate(
            height=2.65,
            startTime=500,
            offset=11)     annotation (Placement(transformation(extent={{-40,-10},{
                    -20,10}}, rotation=0)));
          inner ThermoPower.System system
            annotation (Placement(transformation(extent={{80,80},{100,100}})));
        equation
          connect(plant.fuelFlowRate, fuelFlowRate.y)
            annotation (Line(points={{20,0},{-19,0}}, color={0,0,127}));
          annotation (
            Diagram(graphics),
            experiment(
              StopTime=1000,
              __Dymola_NumberOfIntervals=5000,
              Tolerance=1e-006),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model allows to simulate an open loop transients.
</html>"),  __Dymola_experimentSetupOutput);
        end OpenLoopSimulatorA;

        model ClosedLoopSimulator
          extends Modelica.Icons.Example;

          Plant plant annotation (Placement(
                transformation(extent={{20,-20},{60,20}}, rotation=0)));
          Modelica.Blocks.Sources.Ramp powerSetPoint(
            offset=4e6,
            height=2e6,
            duration=10,
            startTime=500) annotation (Placement(transformation(extent={{-80,-6},{-60,
                    14}}, rotation=0)));
          ThermoPower.Examples.RankineCycle.Models.PID pID(
            Ti=5,
            PVmin=2e6,
            PVmax=12e6,
            CSmin=0,
            CSmax=4,
            steadyStateInit=true,
            Kp=0.25,
            holdWhenSimplified=true) annotation (Placement(transformation(extent={{-32,-10},
                    {-12,10}}, rotation=0)));
          inner ThermoPower.System system
            annotation (Placement(transformation(extent={{80,80},{100,100}})));
        equation
          connect(plant.fuelFlowRate, pID.CS)
            annotation (Line(points={{20,0},{-12,0}}, color={0,0,127}));
          connect(pID.SP, powerSetPoint.y)
            annotation (Line(points={{-32,4},{-59,4}}, color={0,0,127}));
          connect(pID.PV, plant.generatedPower) annotation (Line(points={{-32,-4},{
                  -50,-4},{-50,-40},{80,-40},{80,0},{60.6,0}}, color={0,0,127}));
          annotation (
            Diagram(graphics),
            experiment(StopTime=1000, Tolerance=1e-006),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model simulates a simple continuous-time control system for the steam power plant. The generated power is controlled to the set point by a PI controller with anti-windup.</p>
<p>The model starts at steady state.
</html>"));
        end ClosedLoopSimulator;

        package ComponentsTest
          model TestCompressorInertia
            extends Modelica.Icons.Example;
            package Medium =
                Modelica.Media.IdealGases.MixtureGases.CombustionAir;
          protected
            parameter Real tableEta[6, 4]=[0, 95, 100, 105; 1, 0.8995, 0.8831,
                0.1075; 2, 0.9158, 0.9038, 0.894; 3, 0.9071, 0.8962, 0.8886; 4,
                0.8995, 0.8853, 0.8613; 5, 0.8668, 0.8504, 0.8341];
            parameter Real tablePhic[6, 4]=[0, 95, 100, 105; 1, 0.08067, 0.09057,
                46.8e-3; 2, 0.08278, 0.09225, 0.1009; 3, 0.08551, 0.0952, 0.1019;
                4, 0.08762, 0.0971, 0.103; 5, 0.08909, 0.09815, 0.1038];
            parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 19.2431, 22.9896,
                27.2469; 2, 18.7323, 22.649, 26.2252; 3, 17.7105, 21.7124, 24.6925;
                4, 16.1779, 20.6906, 23.0747; 5, 14.4749, 18.3065, 20.6055];

          public
            ThermoPower.Gas.SourcePressure
                                    SourceP1(
              redeclare package Medium = Medium, T=288.15) annotation (Placement(transformation(extent={{-80,6},{-60,26}},
                    rotation=0)));
            ThermoPower.Gas.SinkPressure
                                  SinkP1(
              redeclare package Medium = Medium,
              p0=2026000,
              T=722.737) annotation (Placement(transformation(extent={{40,6},{60,26}},
                    rotation=0)));
            Modelica.Mechanics.Rotational.Components.Inertia Inertia1(J=10000)
              annotation (Placement(transformation(extent={{10,-10},{30,10}},
                    rotation=0)));
            ThermoPower.Gas.Compressor Compressor(
              redeclare package Medium = Medium,
              eta_mech=0.995,
              pstart_in=0.35e5,
              pstart_out=8.3e5,
              Tstart_in=244.4,
              Tstart_out=691.4,
              tablePhic=tablePhic,
              tableEta=tableEta,
              tablePR=tablePR,
              Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
              explicitIsentropicEnthalpy=false,
              Ndesign=314.16,
              Tdes_in=288.15) annotation (Placement(transformation(extent={{-40,-20},{
                      0,20}}, rotation=0)));
            inner ThermoPower.System system
              annotation (Placement(transformation(extent={{80,80},{100,100}})));
          initial equation
            Inertia1.w = 523.3;

          equation
            connect(SourceP1.flange, Compressor.inlet) annotation (Line(
                points={{-60,16},{-36,16}},
                color={159,159,223},
                thickness=0.5));
            connect(Compressor.outlet, SinkP1.flange) annotation (Line(
                points={{-4,16},{40,16}},
                color={159,159,223},
                thickness=0.5));
            connect(Compressor.shaft_b, Inertia1.flange_a) annotation (Line(
                points={{-8,0},{-8,-0.05},{10,-0.05},{10,0}},
                color={0,0,0},
                thickness=0.5));
            annotation (
              experiment(StopTime=2),
              experimentSetupOutput,
              Documentation(info="<html>
This model test the <tt>Compressor</tt> model with an inertial load. Boundary conditions and data refer to an turbojet engine at 11.000 m.

<p>Simulate for 2 seconds. The compressor slows down.
</html>"));
          end TestCompressorInertia;

          model TestCompressorConstSpeed
            extends Modelica.Icons.Example;
            package Medium =
                Modelica.Media.IdealGases.MixtureGases.CombustionAir;
          protected
            parameter Real tableEta[6, 4]=[0, 95, 100, 105; 1, 0.8995, 0.8831,
                0.1075; 2, 0.9158, 0.9038, 0.894; 3, 0.9071, 0.8962, 0.8886; 4,
                0.8995, 0.8853, 0.8613; 5, 0.8668, 0.8504, 0.8341];
            parameter Real tablePhic[6, 4]=[0, 95, 100, 105; 1, 0.08067, 0.09057,
                46.8e-3; 2, 0.08278, 0.09225, 0.1009; 3, 0.08551, 0.0952, 0.1019;
                4, 0.08762, 0.0971, 0.103; 5, 0.08909, 0.09815, 0.1038];
            parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 19.2431, 22.9896,
                27.2469; 2, 18.7323, 22.649, 26.2252; 3, 17.7105, 21.7124, 24.6925;
                4, 16.1779, 20.6906, 23.0747; 5, 14.4749, 18.3065, 20.6055];

          public
            ThermoPower.Gas.SourcePressure
                                    SourceP1(
              redeclare package Medium = Medium, T=288.15)
                       annotation (Placement(transformation(extent={{-80,6},{-60,26}},
                    rotation=0)));
            ThermoPower.Gas.SinkPressure
                                  SinkP1(
              redeclare package Medium = Medium,
              p0=2026000,
              T=722.737)
                       annotation (Placement(transformation(extent={{62,6},{82,26}},
                    rotation=0)));
            ThermoPower.Gas.Compressor Compressor(
              redeclare package Medium = Medium,
              eta_mech=0.995,
              pstart_in=101325,
              pstart_out=1950000,
              Tstart_in=288.15,
              Tstart_out=673.15,
              tablePhic=tablePhic,
              tableEta=tableEta,
              tablePR=tablePR,
              Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
              Ndesign=314.16,
              Tdes_in=288.15)
                             annotation (Placement(transformation(extent={{-20,-20},{
                      20,20}}, rotation=0)));
            Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=314.16,
                               useSupport=false) annotation (Placement(transformation(
                    extent={{-50,-10},{-30,10}}, rotation=0)));
            inner ThermoPower.System system
              annotation (Placement(transformation(extent={{80,80},{100,100}})));
            ThermoPower.Gas.SensT sensT(
              redeclare package Medium = Medium)
              annotation (Placement(transformation(extent={{30,10},{50,30}})));
          equation
            connect(SourceP1.flange, Compressor.inlet) annotation (Line(
                points={{-60,16},{-16,16}},
                color={159,159,223},
                thickness=0.5));
            connect(ConstantSpeed1.flange, Compressor.shaft_a) annotation (Line(
                points={{-30,0},{-30,0},{-26,-0.2},{-12,0}},
                color={0,0,0},
                thickness=0.5));
            connect(sensT.inlet, Compressor.outlet)
              annotation (Line(points={{34,16},{16,16}}, color={159,159,223}));
            connect(sensT.outlet, SinkP1.flange)
              annotation (Line(points={{46,16},{62,16}}, color={159,159,223}));
            annotation (
              experiment(StopTime=2),
              experimentSetupOutput,
              Documentation(info="<html>
This model test the <tt>Compressor</tt> model at constant speed.

<p>Simulate for 2s.

</html>"));
          end TestCompressorConstSpeed;

          model TestCompressorConstSpeed2
            extends Modelica.Icons.Example;
            package Medium =
                Modelica.Media.IdealGases.MixtureGases.CombustionAir;
          protected
            parameter Real tableEta[6, 4]=[0, 95, 100, 105; 1, 0.8995, 0.8831,
                0.1075; 2, 0.9158, 0.9038, 0.894; 3, 0.9071, 0.8962, 0.8886; 4,
                0.8995, 0.8853, 0.8613; 5, 0.8668, 0.8504, 0.8341];
            parameter Real tablePhic[6, 4]=[0, 95, 100, 105; 1, 0.08067, 0.09057,
                46.8e-3; 2, 0.08278, 0.09225, 0.1009; 3, 0.08551, 0.0952, 0.1019;
                4, 0.08762, 0.0971, 0.103; 5, 0.08909, 0.09815, 0.1038];
            parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 19.2431, 22.9896,
                27.2469; 2, 18.7323, 22.649, 26.2252; 3, 17.7105, 21.7124, 24.6925;
                4, 16.1779, 20.6906, 23.0747; 5, 14.4749, 18.3065, 20.6055];

          public
            ThermoPower.Gas.SourcePressure
                                    SourceP1(
              redeclare package Medium = Medium, T=288.15)
                       annotation (Placement(transformation(extent={{-72,28},{-52,48}},
                    rotation=0)));
            ThermoPower.Gas.SinkPressure
                                  SinkP1(
              redeclare package Medium = Medium,
              p0=2026000,
              T=722.737)
                       annotation (Placement(transformation(extent={{62,18},{82,38}},
                    rotation=0)));
            ThermoPower.Gas.Compressor Compressor(
              redeclare package Medium = Medium,
              eta_mech=0.995,
              pstart_in=101325,
              pstart_out=1950000,
              Tstart_in=288.15,
              Tstart_out=673.15,
              tablePhic=tablePhic,
              tableEta=tableEta,
              tablePR=tablePR,
              Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
              Ndesign=314.16,
              Tdes_in=288.15)
                             annotation (Placement(transformation(extent={{-20,-20},{
                      20,20}}, rotation=0)));
            Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=314.16,
                               useSupport=false) annotation (Placement(transformation(
                    extent={{-76,-10},{-56,10}}, rotation=0)));
            inner ThermoPower.System system
              annotation (Placement(transformation(extent={{80,80},{100,100}})));
            ThermoPower.Gas.SensT sensT(
              redeclare package Medium = Medium)
              annotation (Placement(transformation(extent={{30,22},{50,42}})));
            Modelica.Mechanics.Rotational.Components.Inertia inertia(J=10000)
              annotation (Placement(transformation(extent={{46,-10},{66,10}})));
            Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
              annotation (Placement(transformation(extent={{-44,-10},{-24,10}})));
          equation
            connect(SourceP1.flange, Compressor.inlet) annotation (Line(
                points={{-52,38},{-26,38},{-26,16},{-16,16}},
                color={159,159,223},
                thickness=0.5));
            connect(sensT.inlet, Compressor.outlet)
              annotation (Line(points={{34,28},{16,28},{16,16}},
                                                         color={159,159,223}));
            connect(sensT.outlet, SinkP1.flange)
              annotation (Line(points={{46,28},{62,28}}, color={159,159,223}));
            connect(ConstantSpeed1.flange, powerSensor1.flange_a)
              annotation (Line(points={{-56,0},{-44,0}}, color={0,0,0}));
            connect(Compressor.shaft_a, powerSensor1.flange_b)
              annotation (Line(points={{-12,0},{-24,0}}, color={0,0,0}));
            connect(Compressor.shaft_b, inertia.flange_a)
              annotation (Line(points={{12,0},{46,0}}, color={0,0,0}));
            annotation (
              experiment(StopTime=2),
              experimentSetupOutput,
              Documentation(info="<html>
This model test the <tt>Compressor</tt> model at constant speed.

<p>Simulate for 2s.

</html>"));
          end TestCompressorConstSpeed2;

          model TestGasTurbine
            extends Modelica.Icons.Example;
            package Medium =
                Modelica.Media.IdealGases.MixtureGases.CombustionAir;
          protected
            parameter Real tablePhic[5, 4]=[1, 90, 100, 110; 8.4904, 0.012, 0.012,
                0.012; 10.3611, 0.012, 0.012, 0.012; 12.8075, 0.012,
                0.012, 0.012; 16.0454, 0.012, 0.012, 0.012];
            parameter Real tableEta[5, 4]=[1, 90, 100, 110; 8.4904, 0.8873, 0.8923,
                0.8903; 10.3611, 0.8973, 0.9033, 0.9023; 12.8075, 0.9023, 0.9033,
                0.9023; 16.0454, 0.8993, 0.9003, 0.8973];
          public
            ThermoPower.Gas.SourcePressure
                                    SourceP1(
              redeclare package Medium = Medium,
              T=1504.442,
              p0=1932000)
                         annotation (Placement(transformation(extent={{-78,30},{-58,50}},
                    rotation=0)));
            ThermoPower.Gas.Turbine Turbine1(
              redeclare package Medium = Medium,
              tablePhic=tablePhic,
              tableEta=tableEta,
              pstart_in=1932000,
              pstart_out=101325,
              Tstart_in=1504.442,
              Tstart_out=893.15,
              Ndesign=314.16,
              Tdes_in=1573.15,
              Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix) annotation (
                Placement(transformation(extent={{-40,-20},{0,20}}, rotation=0)));
            ThermoPower.Gas.SinkPressure SinkP1(redeclare package Medium = Medium, T=893.15)
              annotation (Placement(transformation(extent={{38,28},{58,48}},rotation=0)));
            inner ThermoPower.System system
              annotation (Placement(transformation(extent={{80,80},{100,100}})));
            ThermoPower.Gas.SensT sensT(redeclare package Medium = Medium)
              annotation (Placement(transformation(extent={{6,32},{26,52}})));
            Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=314.16,
                useSupport=false)                annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},  rotation=0,
                  origin={-80,0})));
            Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
              annotation (Placement(transformation(extent={{-62,-10},{-42,10}})));
          equation
            connect(SourceP1.flange, Turbine1.inlet) annotation (Line(
                points={{-58,40},{-46,40},{-46,16},{-36,16}},
                color={159,159,223},
                thickness=0.5));
          initial equation
            //Inertia1.w = 314.16;

          equation
            connect(Turbine1.outlet, sensT.inlet)
              annotation (Line(points={{-4,16},{-4,38},{10,38}}, color={159,159,223}));
            connect(SinkP1.flange, sensT.outlet)
              annotation (Line(points={{38,38},{22,38}}, color={159,159,223}));
            connect(ConstantSpeed1.flange, powerSensor.flange_a)
              annotation (Line(points={{-70,0},{-62,0}}, color={0,0,0}));
            connect(Turbine1.shaft_a, powerSensor.flange_b)
              annotation (Line(points={{-32,0},{-42,0}}, color={0,0,0}));
            annotation (
              experiment(StopTime=10),
              experimentSetupOutput,
              Documentation(info="<html>
This model test the Turbine model with an inertial load. Boundary conditions and data refer to an turbojet engine at 11.000 m.

<p>Simulate for 5 seconds.
</html>"));
          end TestGasTurbine;

          model TestCC
            extends Modelica.Icons.Example;

            ThermoPower.Gas.SourceMassFlow
                                    Wcompressor(
              redeclare package Medium = ThermoPower.Media.Air,
              p0=2026000,
              w0=582.6,
              T=722.737)
                        annotation (Placement(transformation(extent={{-94,-10},{-74,10}},
                            rotation=0)));
            ThermoPower.Gas.CombustionChamber CombustionChamber1(
              initOpt=ThermoPower.Choices.Init.Options.steadyState,
              HH=41.6e6,
              pstart=1120000,
              V=0.1,
              S=0.1) annotation (Placement(transformation(extent={{-38,-10},{-18,10}},
                    rotation=0)));
            ThermoPower.Gas.SourceMassFlow
                                    Wfuel(redeclare package Medium =
                  ThermoPower.Media.NaturalGas, use_in_w0=true)
                                                annotation (Placement(transformation(
                    extent={{-50,28},{-30,48}}, rotation=0)));
            ThermoPower.Gas.PressDrop PressDrop1(
              redeclare package Medium = ThermoPower.Media.FlueGas,
              FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
              rhonom=3.3,
              wnom=158.9,
              pstart=11.2e5,
              dpnom=0.426e5) annotation (Placement(transformation(extent={{-4,-10},{
                      16,10}}, rotation=0)));
            ThermoPower.Gas.SensT SensT1(redeclare package Medium =
                  ThermoPower.Media.FlueGas) annotation (Placement(transformation(
                    extent={{26,-6},{46,14}}, rotation=0)));
            Modelica.Blocks.Sources.Step Step1(
              startTime=0.5,
              height=-0.35,
              offset=14)  annotation (Placement(transformation(extent={{-78,56},{-58,
                      76}}, rotation=0)));
            ThermoPower.Gas.ValveLin ValveLin1(redeclare package Medium =
                  ThermoPower.Media.FlueGas, Kv=161.1/9.77e5) annotation (Placement(
                  transformation(extent={{54,-10},{74,10}}, rotation=0)));
            ThermoPower.Gas.SinkPressure
                                  SinkP1(redeclare package Medium =
                  ThermoPower.Media.FlueGas) annotation (Placement(transformation(
                    extent={{84,-10},{104,10}}, rotation=0)));
            Modelica.Blocks.Sources.Constant Constant1(k=1)
                                                       annotation (Placement(
                  transformation(extent={{22,28},{42,48}}, rotation=0)));
            inner ThermoPower.System system
              annotation (Placement(transformation(extent={{80,80},{100,100}})));
            ThermoPower.Gas.SensT sensT( redeclare package Medium =
                  ThermoPower.Media.Air) annotation (Placement(transformation(extent={{-66,-6},{-46,14}})));
          equation
            connect(Wfuel.flange, CombustionChamber1.inf) annotation (Line(
                points={{-30,38},{-28,38},{-28,10}},
                color={159,159,223},
                thickness=0.5));
            connect(CombustionChamber1.out, PressDrop1.inlet) annotation (Line(
                points={{-18,0},{-4,0}},
                color={159,159,223},
                thickness=0.5));
            connect(PressDrop1.outlet, SensT1.inlet) annotation (Line(
                points={{16,0},{30,0}},
                color={159,159,223},
                thickness=0.5));
            connect(Step1.y, Wfuel.in_w0) annotation (Line(points={{-57,66},{-46,66},
                    {-46,43}}, color={0,0,127}));
            connect(ValveLin1.outlet, SinkP1.flange) annotation (Line(
                points={{74,0},{84,0}},
                color={159,159,223},
                thickness=0.5));
            connect(SensT1.outlet, ValveLin1.inlet) annotation (Line(
                points={{42,0},{54,0}},
                color={159,159,223},
                thickness=0.5));
            connect(Constant1.y, ValveLin1.cmd)
              annotation (Line(points={{43,38},{64,38},{64,7}}, color={0,0,127}));
            connect(Wcompressor.flange, sensT.inlet)
              annotation (Line(points={{-74,0},{-62,0}}, color={159,159,223}));
            connect(CombustionChamber1.ina, sensT.outlet)
              annotation (Line(points={{-38,0},{-50,0}}, color={159,159,223}));
            annotation (Documentation(info="<html>
This model tests the <tt>CombustionChamber</tt> model. The model start at steady state. At time t = 0.5, the fuel flow rate is reduced by 10%.

<p>Simulate for 5s.
</html>"),       experiment(StopTime=5));
          end TestCC;

          model TestCC2
            extends Modelica.Icons.Example;

            ThermoPower.Gas.SourceMassFlow
                                    Wcompressor(
              redeclare package Medium = ThermoPower.Media.Air,
              p0=2026000,
              w0=582.6,
              T=722.737)
                        annotation (Placement(transformation(extent={{-94,-10},{-74,10}},
                            rotation=0)));
            ThermoPower.Gas.CombustionChamber CombustionChamber1(
              Tstart=1504.442,
              initOpt=ThermoPower.Choices.Init.Options.steadyState,
              HH=50e6,
              pstart=1932000,
              V=0.1,
              S=0.1) annotation (Placement(transformation(extent={{-38,-10},{-18,10}},
                    rotation=0)));
            ThermoPower.Gas.SourceMassFlow
                                    Wfuel(redeclare package Medium =
                  ThermoPower.Media.NaturalGas,
              p0=1932000,
              w0=13.65,                         use_in_w0=true)
                                                annotation (Placement(transformation(
                    extent={{-50,28},{-30,48}}, rotation=0)));
            ThermoPower.Gas.SensT SensT1(redeclare package Medium =
                  ThermoPower.Media.FlueGas) annotation (Placement(transformation(
                    extent={{22,-6},{42,14}}, rotation=0)));
            Modelica.Blocks.Sources.Step Step1(
              startTime=0.5,
              height=-0.35,
              offset=14)  annotation (Placement(transformation(extent={{-78,56},{-58,
                      76}}, rotation=0)));
            ThermoPower.Gas.SinkPressure
                                  SinkP1(redeclare package Medium =
                  ThermoPower.Media.FlueGas,
              p0=1932000,
              T=1604.442)                    annotation (Placement(transformation(
                    extent={{84,-10},{104,10}}, rotation=0)));
            inner ThermoPower.System system
              annotation (Placement(transformation(extent={{80,80},{100,100}})));
            ThermoPower.Gas.SensT sensT( redeclare package Medium =
                  ThermoPower.Media.Air) annotation (Placement(transformation(extent={{-66,-6},{-46,14}})));
          equation
            connect(Wfuel.flange, CombustionChamber1.inf) annotation (Line(
                points={{-30,38},{-28,38},{-28,10}},
                color={159,159,223},
                thickness=0.5));
            connect(Step1.y, Wfuel.in_w0) annotation (Line(points={{-57,66},{-46,66},
                    {-46,43}}, color={0,0,127}));
            connect(Wcompressor.flange, sensT.inlet)
              annotation (Line(points={{-74,0},{-62,0}}, color={159,159,223}));
            connect(CombustionChamber1.ina, sensT.outlet)
              annotation (Line(points={{-38,0},{-50,0}}, color={159,159,223}));
            connect(SensT1.outlet, SinkP1.flange)
              annotation (Line(points={{38,0},{84,0}}, color={159,159,223}));
            connect(CombustionChamber1.out, SensT1.inlet)
              annotation (Line(points={{-18,0},{26,0}}, color={159,159,223}));
            annotation (Documentation(info="<html>
This model tests the <tt>CombustionChamber</tt> model. The model start at steady state. At time t = 0.5, the fuel flow rate is reduced by 10%.

<p>Simulate for 5s.
</html>"),       experiment(StopTime=5));
          end TestCC2;

          model TestCompressorConstSpeedLosses
            extends Modelica.Icons.Example;
            parameter Real tableEtaC[6, 4]=[0, 95, 100, 105; 1, 0.8995, 0.8831,
                0.1075; 2, 0.9158, 0.9038, 0.894; 3, 0.9071, 0.8962, 0.8886; 4,
                0.8995, 0.8853, 0.8613; 5, 0.8668, 0.8504, 0.8341];
            parameter Real tablePhicC[6, 4]=[0, 95, 100, 105; 1, 0.08067, 0.09057,
                46.8e-3; 2, 0.08278, 0.09225, 0.1009; 3, 0.08551, 0.0952, 0.1019;
                4, 0.08762, 0.0971, 0.103; 5, 0.08909, 0.09815, 0.1038];
            parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 19.2431, 22.9896,
                27.2469; 2, 18.7323, 22.649, 26.2252; 3, 17.7105, 21.7124, 24.6925;
                4, 16.1779, 20.6906, 23.0747; 5, 14.4749, 18.3065, 20.6055];
            parameter Real tablePhicT[5, 4]=[1, 90, 100, 110; 2.36, 4.68e-3, 4.68e-3,
                4.68e-3; 2.88, 4.68e-3, 4.68e-3, 4.68e-3; 3.56, 4.68e-3, 4.68e-3,
                4.68e-3; 4.46, 4.68e-3, 4.68e-3, 4.68e-3];
            parameter Real tableEtaT[5, 4]=[1, 90, 100, 110; 2.36, 89e-2, 89.5e-2,
                89.3e-2; 2.88, 90e-2, 90.6e-2, 90.5e-2; 3.56, 90.5e-2, 90.6e-2,
                90.5e-2; 4.46, 90.2e-2, 90.3e-2, 90e-2];
            ThermoPower.Gas.Compressor compressor(
              redeclare package Medium = ThermoPower.Media.Air,
              eta_mech=0.995,
              pstart_in=101325,
              pstart_out=1950000,
              Tstart_in=288.15,
              Tstart_out=673.15,
              tablePhic=tablePhicC,
              tableEta=tableEtaC,
              tablePR=tablePR,
              Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
              explicitIsentropicEnthalpy=true,
              Ndesign=314.16,
              Tdes_in=288.15) annotation (Placement(transformation(extent={{-38,-70},{22,-10}},
                             rotation=0)));
            ThermoPower.Gas.SourcePressure SourceP1(
              redeclare package Medium = ThermoPower.Media.Air, T=288.15)
                        annotation (Placement(transformation(extent={{-68,-10},{-48,10}},
                    rotation=0)));
            ThermoPower.Gas.PressDrop PressDrop2(
              pstart=1950000,
              FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
              A=1,
              redeclare package Medium = ThermoPower.Media.Air,
              dpnom=1000,
              wnom=580,
              rhonom=4.7,
              Tstart=668.15)
                          annotation (Placement(transformation(
                  origin={16,30},
                  extent={{-10,-10},{10,10}},
                  rotation=90)));
            ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateInletCC(
                redeclare package Medium = ThermoPower.Media.Air) annotation (Placement(
                  transformation(extent={{20,50},{40,70}},    rotation=0)));
            inner ThermoPower.System system(allowFlowReversal=false)
              annotation (Placement(transformation(extent={{-88,58},{-68,78}})));
            Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=314.16,
                useSupport=false)                annotation (Placement(transformation(
                    extent={{-90,-50},{-70,-30}},rotation=0)));
            Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
              annotation (Placement(transformation(extent={{-58,-50},{-38,-30}})));
            Modelica.Mechanics.Rotational.Components.Inertia inertia(J=10000)
              annotation (Placement(transformation(extent={{28,-50},{48,-30}})));
            ThermoPower.Gas.SensT sensT(redeclare package Medium =
                  ThermoPower.Media.Air)
              annotation (Placement(transformation(extent={{44,54},{64,74}})));
            ThermoPower.Gas.SinkPressure
                                  SinkP1(
              redeclare package Medium = ThermoPower.Media.Air,
              p0=2026000,
              T=722.737)
                       annotation (Placement(transformation(extent={{74,50},{94,70}},
                    rotation=0)));
          equation
            connect(SourceP1.flange, compressor.inlet) annotation (Line(
                points={{-48,0},{-32,0},{-32,-16}},
                color={159,159,223},
                thickness=0.5));
            connect(compressor.outlet, PressDrop2.inlet) annotation (Line(
                points={{16,-16},{16,20}},
                color={159,159,223},
                thickness=0.5));
            connect(stateInletCC.inlet, PressDrop2.outlet) annotation (Line(
                points={{24,60},{16,60},{16,40}},
                color={159,159,223},
                thickness=0.5));
            connect(ConstantSpeed1.flange,powerSensor1. flange_a)
              annotation (Line(points={{-70,-40},{-58,-40}},
                                                         color={0,0,0}));
            connect(powerSensor1.flange_b, compressor.shaft_a)
              annotation (Line(points={{-38,-40},{-26,-40}}, color={0,0,0}));
            connect(inertia.flange_a, compressor.shaft_b)
              annotation (Line(points={{28,-40},{10,-40}}, color={0,0,0}));
            connect(sensT.outlet,SinkP1. flange)
              annotation (Line(points={{60,60},{74,60}}, color={159,159,223}));
            connect(sensT.inlet, stateInletCC.outlet)
              annotation (Line(points={{48,60},{36,60}}, color={159,159,223}));
            annotation (
              Diagram(coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}},
                  initialScale=0.1)),
              Icon(coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-100,-100},{100,120}},
                  initialScale=0.1)),
              Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",       info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"),    experiment(StopTime=2, __Dymola_Algorithm="Dassl"));
          end TestCompressorConstSpeedLosses;

          model TestGasTurbineConstSpeedLosses
            extends Modelica.Icons.Example;
          protected
            parameter Real tablePhicT[5, 4]=[1, 90, 100, 110; 8.4904, 0.012, 0.012,
                0.012; 10.3611, 0.012, 0.012, 0.012; 12.8075, 0.012,
                0.012, 0.012; 16.0454, 0.012, 0.012, 0.012];
            parameter Real tableEtaT[5, 4]=[1, 90, 100, 110; 8.4904, 0.8873, 0.8923,
                0.8903; 10.3611, 0.8973, 0.9033, 0.9023; 12.8075, 0.9023, 0.9033,
                0.9023; 16.0454, 0.8993, 0.9003, 0.8973];
          public
            ThermoPower.Gas.SourcePressure
                                    SourceP1(
              redeclare package Medium = ThermoPower.Media.FlueGas,
              T=1504.442,
              p0=1932000)
                         annotation (Placement(transformation(extent={{-96,54},{-76,74}},
                    rotation=0)));
            ThermoPower.Gas.Turbine Turbine1(
              redeclare package Medium = ThermoPower.Media.FlueGas,
              tablePhic=tablePhicT,
              tableEta=tableEtaT,
              pstart_in=1932000,
              pstart_out=101325,
              Tstart_in=1504.442,
              Tstart_out=893.15,
              Ndesign=314.16,
              Tdes_in=1573.15,
              Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix) annotation (
                Placement(transformation(extent={{-40,-20},{0,20}}, rotation=0)));
            ThermoPower.Gas.SinkPressure SinkP1(redeclare package Medium =
                  ThermoPower.Media.FlueGas, T=893.15)
              annotation (Placement(transformation(extent={{38,28},{58,48}},rotation=0)));
            inner ThermoPower.System system
              annotation (Placement(transformation(extent={{80,80},{100,100}})));
            ThermoPower.Gas.SensT sensT(redeclare package Medium =
                  ThermoPower.Media.FlueGas)
              annotation (Placement(transformation(extent={{6,32},{26,52}})));
            Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=314.16,
                useSupport=false)                annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},  rotation=0,
                  origin={-80,0})));
            Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
              annotation (Placement(transformation(extent={{-62,-10},{-42,10}})));
            ThermoPower.Gas.PressDrop PressDrop1(
              redeclare package Medium = ThermoPower.Media.FlueGas,
              FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
              wnom=598,
              rhonom=2,
              dpnom=1000,
              pstart=1940000,
              Tstart=1504.442)
                           annotation (Placement(transformation(
                  origin={-58,40},
                  extent={{-10,-10},{10,10}},
                  rotation=270)));
          initial equation
            //Inertia1.w = 314.16;

          equation
            connect(Turbine1.outlet, sensT.inlet)
              annotation (Line(points={{-4,16},{-4,38},{10,38}}, color={159,159,223}));
            connect(SinkP1.flange, sensT.outlet)
              annotation (Line(points={{38,38},{22,38}}, color={159,159,223}));
            connect(ConstantSpeed1.flange, powerSensor.flange_a)
              annotation (Line(points={{-70,0},{-62,0}}, color={0,0,0}));
            connect(Turbine1.shaft_a, powerSensor.flange_b)
              annotation (Line(points={{-32,0},{-42,0}}, color={0,0,0}));
            connect(SourceP1.flange, PressDrop1.inlet) annotation (Line(points={{-76,64},{
                    -58,64},{-58,50}}, color={159,159,223}));
            connect(PressDrop1.outlet, Turbine1.inlet) annotation (Line(points={{-58,30},{
                    -58,16},{-36,16}}, color={159,159,223}));
            annotation (
              experiment(StopTime=10),
              experimentSetupOutput,
              Documentation(info="<html>
This model test the Turbine model with an inertial load. Boundary conditions and data refer to an turbojet engine at 11.000 m.

<p>Simulate for 5 seconds.
</html>"));
          end TestGasTurbineConstSpeedLosses;
        end ComponentsTest;

        model PlantB
          parameter Real tableEtaC[6, 4]=[0, 95, 100, 105; 1, 0.8995, 0.8831,
              0.1075; 2, 0.9158, 0.9038, 0.894; 3, 0.9071, 0.8962, 0.8886; 4,
              0.8995, 0.8853, 0.8613; 5, 0.8668, 0.8504, 0.8341];
          parameter Real tablePhicC[6, 4]=[0, 95, 100, 105; 1, 0.08067, 0.09057,
              46.8e-3; 2, 0.08278, 0.09225, 0.1009; 3, 0.08551, 0.0952, 0.1019;
              4, 0.08762, 0.0971, 0.103; 5, 0.08909, 0.09815, 0.1038];
          parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 19.2431, 22.9896,
              27.2469; 2, 18.7323, 22.649, 26.2252; 3, 17.7105, 21.7124, 24.6925;
              4, 16.1779, 20.6906, 23.0747; 5, 14.4749, 18.3065, 20.6055];
          parameter Real tablePhicT[5, 4]=[1, 90, 100, 110; 2.36, 4.68e-3, 4.68e-3,
              4.68e-3; 2.88, 4.68e-3, 4.68e-3, 4.68e-3; 3.56, 4.68e-3, 4.68e-3,
              4.68e-3; 4.46, 4.68e-3, 4.68e-3, 4.68e-3];
          parameter Real tableEtaT[5, 4]=[1, 90, 100, 110; 2.36, 89e-2, 89.5e-2,
              89.3e-2; 2.88, 90e-2, 90.6e-2, 90.5e-2; 3.56, 90.5e-2, 90.6e-2,
              90.5e-2; 4.46, 90.2e-2, 90.3e-2, 90e-2];
          Modelica.Blocks.Interfaces.RealInput fuelFlowRate        annotation (
              Placement(transformation(extent={{-210,-10},{-190,10}}, rotation=0)));
          ThermoPower.Gas.Compressor compressor(
            redeclare package Medium = ThermoPower.Media.Air,
            eta_mech=0.995,
            pstart_in=101325,
            pstart_out=1950000,
            Tstart_in=288.15,
            Tstart_out=673.15,
            tablePhic=tablePhicC,
            tableEta=tableEtaC,
            tablePR=tablePR,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
            explicitIsentropicEnthalpy=true,
            Ndesign=314.16,
            Tdes_in=288.15) annotation (Placement(transformation(extent={{-124,-92},{-64,
                    -32}}, rotation=0)));
          ThermoPower.Gas.CombustionChamber CombustionChamber1(
            pstart=1932000,
            V=0.1,
            S=0.1,
            initOpt=ThermoPower.Choices.Init.Options.steadyState,
            HH=50e6) annotation (Placement(transformation(extent={{-38,18},{2,58}},
                  rotation=0)));
          ThermoPower.Gas.SourcePressure SourceP1(
            redeclare package Medium = ThermoPower.Media.Air,
            p0=101325,
            T=288.15) annotation (Placement(transformation(extent={{-164,-30},{-144,-10}},
                  rotation=0)));
          ThermoPower.Gas.SourceMassFlow SourceW1(
            redeclare package Medium = ThermoPower.Media.NaturalGas,
            w0=13.65,
            p0=1932000,
            use_in_w0=true) annotation (Placement(transformation(extent={{-66,68},{-46,88}},
                          rotation=0)));
          ThermoPower.Gas.PressDrop PressDrop2(
            pstart=1950000,
            FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
            A=1,
            redeclare package Medium = ThermoPower.Media.Air,
            dpnom=1000,
            wnom=580,
            rhonom=4.7,
            Tstart=668.15)
                        annotation (Placement(transformation(
                origin={-70,20},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          Modelica.Blocks.Continuous.FirstOrder gasFlowActuator(
            k=1,
            T=4,
            y_start=500,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{-104,90},{-88,106}},  rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateInletCC(
              redeclare package Medium = ThermoPower.Media.Air) annotation (Placement(
                transformation(extent={{-66,28},{-46,48}},  rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateOutletCC(
              redeclare package Medium = ThermoPower.Media.FlueGas) annotation (
              Placement(transformation(extent={{10,28},{30,48}},  rotation=0)));
          inner ThermoPower.System system(allowFlowReversal=false)
            annotation (Placement(transformation(extent={{158,160},{178,180}})));
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=314.16,
              useSupport=false)                annotation (Placement(transformation(
                  extent={{-198,-78},{-168,-48}},
                                               rotation=0)));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
            annotation (Placement(transformation(extent={{-158,-76},{-132,-50}})));
          Modelica.Mechanics.Rotational.Components.Inertia inertia(J=10000)
            annotation (Placement(transformation(extent={{-52,-80},{-16,-44}})));
          ThermoPower.Gas.SinkPressure
                                SinkP1(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            p0=1932000,
            T=1604.442)                    annotation (Placement(transformation(
                  extent={{72,28},{92,48}},   rotation=0)));
          ThermoPower.Gas.SensT sensT1(redeclare package Medium =
                ThermoPower.Media.Air)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-74,-14})));
          ThermoPower.Gas.SensT sensT3(redeclare package Medium =
            ThermoPower.Media.FlueGas) annotation (Placement(transformation(extent={{38,32},{58,52}})));
        equation
          connect(SourceW1.flange, CombustionChamber1.inf) annotation (Line(
              points={{-46,78},{-18,78},{-18,58}},
              color={159,159,223},
              thickness=0.5));
          connect(SourceP1.flange, compressor.inlet) annotation (Line(
              points={{-144,-20},{-132,-20},{-132,-38},{-118,-38}},
              color={159,159,223},
              thickness=0.5));
          connect(gasFlowActuator.u, fuelFlowRate)        annotation (Line(points={{-105.6,
                  98},{-184,98},{-184,0},{-200,0}},           color={0,0,127}));
          connect(gasFlowActuator.y, SourceW1.in_w0) annotation (Line(points={{-87.2,98},
                  {-62,98},{-62,83}},       color={0,0,127}));
          connect(CombustionChamber1.ina, stateInletCC.outlet) annotation (Line(
              points={{-38,38},{-50,38}},
              color={159,159,223},
              thickness=0.5));
          connect(stateOutletCC.inlet, CombustionChamber1.out) annotation (Line(
              points={{14,38},{2,38}},
              color={159,159,223},
              thickness=0.5));
          connect(powerSensor1.flange_b, compressor.shaft_a) annotation (Line(points={{-132,
                  -63},{-122,-63},{-122,-62},{-112,-62}}, color={0,0,0}));
          connect(powerSensor1.flange_a, ConstantSpeed1.flange) annotation (Line(points=
                 {{-158,-63},{-158,-64},{-168,-64},{-168,-63}}, color={0,0,0}));
          connect(compressor.shaft_b, inertia.flange_a)
            annotation (Line(points={{-76,-62},{-52,-62}}, color={0,0,0}));
          connect(compressor.outlet, sensT1.inlet)
            annotation (Line(points={{-70,-38},{-70,-20}}, color={159,159,223}));
          connect(sensT1.outlet, PressDrop2.inlet)
            annotation (Line(points={{-70,-8},{-70,10}}, color={159,159,223}));
          connect(PressDrop2.outlet, stateInletCC.inlet) annotation (Line(points={{-70,30},
                  {-70,38},{-62,38}}, color={159,159,223}));
          connect(sensT3.inlet, stateOutletCC.outlet)
            annotation (Line(points={{42,38},{26,38}}, color={159,159,223}));
          connect(SinkP1.flange, sensT3.outlet)
            annotation (Line(points={{72,38},{54,38}}, color={159,159,223}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1)),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1), graphics={Rectangle(
                  extent={{-200,200},{200,-200}},
                  lineColor={170,170,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-140,140},{140,-140}},
                  lineColor={170,170,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"));
        end PlantB;

        model OpenLoopSimulatorB
          extends Modelica.Icons.Example;

          PlantB plant annotation (Placement(
                transformation(extent={{20,-20},{60,20}}, rotation=0)));
          Modelica.Blocks.Sources.Step fuelFlowRate(
            height=2.65,
            startTime=500,
            offset=11)     annotation (Placement(transformation(extent={{-40,-10},{
                    -20,10}}, rotation=0)));
          inner ThermoPower.System system
            annotation (Placement(transformation(extent={{80,80},{100,100}})));
        equation
          connect(plant.fuelFlowRate, fuelFlowRate.y)
            annotation (Line(points={{20,0},{-19,0}}, color={0,0,127}));
          annotation (
            Diagram(graphics),
            experiment(
              StopTime=1000,
              __Dymola_NumberOfIntervals=5000,
              Tolerance=1e-006),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model allows to simulate an open loop transients.
</html>"),  __Dymola_experimentSetupOutput);
        end OpenLoopSimulatorB;

        model PlantC
          parameter Real tableEtaC[6, 4]=[0, 95, 100, 105; 1, 0.8995, 0.8831,
              0.1075; 2, 0.9158, 0.9038, 0.894; 3, 0.9071, 0.8962, 0.8886; 4,
              0.8995, 0.8853, 0.8613; 5, 0.8668, 0.8504, 0.8341];
          parameter Real tablePhicC[6, 4]=[0, 95, 100, 105; 1, 0.08067, 0.09057,
              46.8e-3; 2, 0.08278, 0.09225, 0.1009; 3, 0.08551, 0.0952, 0.1019;
              4, 0.08762, 0.0971, 0.103; 5, 0.08909, 0.09815, 0.1038];
          parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 19.2431, 22.9896,
              27.2469; 2, 18.7323, 22.649, 26.2252; 3, 17.7105, 21.7124, 24.6925;
              4, 16.1779, 20.6906, 23.0747; 5, 14.4749, 18.3065, 20.6055];
          parameter Real tablePhicT[5, 4]=[1, 90, 100, 110; 2.36, 4.68e-3, 4.68e-3,
              4.68e-3; 2.88, 4.68e-3, 4.68e-3, 4.68e-3; 3.56, 4.68e-3, 4.68e-3,
              4.68e-3; 4.46, 4.68e-3, 4.68e-3, 4.68e-3];
          parameter Real tableEtaT[5, 4]=[1, 90, 100, 110; 2.36, 89e-2, 89.5e-2,
              89.3e-2; 2.88, 90e-2, 90.6e-2, 90.5e-2; 3.56, 90.5e-2, 90.6e-2,
              90.5e-2; 4.46, 90.2e-2, 90.3e-2, 90e-2];
          Modelica.Blocks.Interfaces.RealInput fuelFlowRate        annotation (
              Placement(transformation(extent={{-210,-10},{-190,10}}, rotation=0)));
          ThermoPower.Gas.Compressor compressor(
            redeclare package Medium = ThermoPower.Media.Air,
            eta_mech=0.995,
            pstart_in=101325,
            pstart_out=1950000,
            Tstart_in=288.15,
            Tstart_out=673.15,
            tablePhic=tablePhicC,
            tableEta=tableEtaC,
            tablePR=tablePR,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
            explicitIsentropicEnthalpy=true,
            Ndesign=314.16,
            Tdes_in=288.15) annotation (Placement(transformation(extent={{-124,-92},{-64,
                    -32}}, rotation=0)));
          ThermoPower.Gas.CombustionChamber CombustionChamber1(
            pstart=1932000,
            V=0.1,
            S=0.1,
            Tstart=1504.442,
            initOpt=ThermoPower.Choices.Init.Options.steadyState,
            HH=50e6) annotation (Placement(transformation(extent={{-38,18},{2,58}},
                  rotation=0)));
          ThermoPower.Gas.SourcePressure SourceP1(
            redeclare package Medium = ThermoPower.Media.Air,
            p0=101325,
            T=288.15) annotation (Placement(transformation(extent={{-164,-30},{-144,-10}},
                  rotation=0)));
          ThermoPower.Gas.SourceMassFlow SourceW1(
            redeclare package Medium = ThermoPower.Media.NaturalGas,
            w0=13.65,
            p0=1932000,
            use_in_w0=true) annotation (Placement(transformation(extent={{-66,68},{-46,88}},
                          rotation=0)));
          ThermoPower.Gas.PressDrop PressDrop2(
            pstart=1950000,
            FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
            A=1,
            redeclare package Medium = ThermoPower.Media.Air,
            dpnom=1000,
            wnom=580,
            rhonom=4.7,
            Tstart=668.15)
                        annotation (Placement(transformation(
                origin={-70,20},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          Modelica.Blocks.Continuous.FirstOrder gasFlowActuator(
            k=1,
            T=4,
            y_start=500,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{-104,90},{-88,106}},  rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateInletCC(
              redeclare package Medium = ThermoPower.Media.Air) annotation (Placement(
                transformation(extent={{-66,28},{-46,48}},  rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateOutletCC(
              redeclare package Medium = ThermoPower.Media.FlueGas) annotation (
              Placement(transformation(extent={{10,28},{30,48}},  rotation=0)));
          inner ThermoPower.System system(allowFlowReversal=false)
            annotation (Placement(transformation(extent={{158,160},{178,180}})));
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=314.16,
              useSupport=false)                annotation (Placement(transformation(
                  extent={{-198,-78},{-168,-48}},
                                               rotation=0)));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
            annotation (Placement(transformation(extent={{-158,-76},{-132,-50}})));
          Modelica.Mechanics.Rotational.Components.Inertia inertia(J=10000)
            annotation (Placement(transformation(extent={{106,-80},{142,-44}})));
          ThermoPower.Gas.SensT sensT1(redeclare package Medium =
                ThermoPower.Media.Air)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-74,-14})));
          ThermoPower.Gas.SensT sensT3(redeclare package Medium =
            ThermoPower.Media.FlueGas) annotation (Placement(transformation(extent={{-10,-10},
                    {10,10}},
                rotation=270,
                origin={42,2})));
          ThermoPower.Gas.Turbine Turbine1(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            eta_mech=0.995,
            tablePhic=tablePhicT,
            tableEta=tableEtaT,
            pstart_in=1932000,
            pstart_out=101325,
            Tstart_in=1504.442,
            Tstart_out=893.15,
            Ndesign=314.16,
            Tdes_in=1573.15,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix) annotation (
              Placement(transformation(extent={{32,-92},{92,-32}},rotation=0)));
          ThermoPower.Gas.SinkPressure SinkP1(redeclare package Medium =
                ThermoPower.Media.FlueGas, T=893.15)
            annotation (Placement(transformation(extent={{140,-12},{160,8}},
                                                                          rotation=0)));
          ThermoPower.Gas.SensT sensT4(redeclare package Medium =
                ThermoPower.Media.FlueGas)
            annotation (Placement(transformation(extent={{104,-8},{124,12}})));
        equation
          connect(SourceW1.flange, CombustionChamber1.inf) annotation (Line(
              points={{-46,78},{-18,78},{-18,58}},
              color={159,159,223},
              thickness=0.5));
          connect(SourceP1.flange, compressor.inlet) annotation (Line(
              points={{-144,-20},{-132,-20},{-132,-38},{-118,-38}},
              color={159,159,223},
              thickness=0.5));
          connect(gasFlowActuator.u, fuelFlowRate)        annotation (Line(points={{-105.6,
                  98},{-184,98},{-184,0},{-200,0}},           color={0,0,127}));
          connect(gasFlowActuator.y, SourceW1.in_w0) annotation (Line(points={{-87.2,98},
                  {-62,98},{-62,83}},       color={0,0,127}));
          connect(CombustionChamber1.ina, stateInletCC.outlet) annotation (Line(
              points={{-38,38},{-50,38}},
              color={159,159,223},
              thickness=0.5));
          connect(stateOutletCC.inlet, CombustionChamber1.out) annotation (Line(
              points={{14,38},{2,38}},
              color={159,159,223},
              thickness=0.5));
          connect(powerSensor1.flange_b, compressor.shaft_a) annotation (Line(points={{-132,
                  -63},{-122,-63},{-122,-62},{-112,-62}}, color={0,0,0}));
          connect(powerSensor1.flange_a, ConstantSpeed1.flange) annotation (Line(points=
                 {{-158,-63},{-158,-64},{-168,-64},{-168,-63}}, color={0,0,0}));
          connect(compressor.outlet, sensT1.inlet)
            annotation (Line(points={{-70,-38},{-70,-20}}, color={159,159,223}));
          connect(sensT1.outlet, PressDrop2.inlet)
            annotation (Line(points={{-70,-8},{-70,10}}, color={159,159,223}));
          connect(PressDrop2.outlet, stateInletCC.inlet) annotation (Line(points={{-70,30},
                  {-70,38},{-62,38}}, color={159,159,223}));
          connect(sensT3.inlet, stateOutletCC.outlet)
            annotation (Line(points={{38,8},{38,38},{26,38}},
                                                       color={159,159,223}));
          connect(Turbine1.outlet, sensT4.inlet) annotation (Line(points={{86,
                  -38},{86,-2},{108,-2}}, color={159,159,223}));
          connect(SinkP1.flange, sensT4.outlet)
            annotation (Line(points={{140,-2},{120,-2}}, color={159,159,223}));
          connect(inertia.flange_a, Turbine1.shaft_b)
            annotation (Line(points={{106,-62},{80,-62}}, color={0,0,0}));
          connect(compressor.shaft_b, Turbine1.shaft_a)
            annotation (Line(points={{-76,-62},{44,-62}}, color={0,0,0}));
          connect(sensT3.outlet, Turbine1.inlet)
            annotation (Line(points={{38,-4},{38,-38}}, color={159,159,223}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1)),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1), graphics={Rectangle(
                  extent={{-200,200},{200,-200}},
                  lineColor={170,170,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-140,140},{140,-140}},
                  lineColor={170,170,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"));
        end PlantC;

        model OpenLoopSimulatorC
          extends Modelica.Icons.Example;

          PlantC plant annotation (Placement(
                transformation(extent={{20,-20},{60,20}}, rotation=0)));
          Modelica.Blocks.Sources.Step fuelFlowRate(
            height=2.65,
            startTime=500,
            offset=11)     annotation (Placement(transformation(extent={{-40,-10},{
                    -20,10}}, rotation=0)));
          inner ThermoPower.System system
            annotation (Placement(transformation(extent={{80,80},{100,100}})));
        equation
          connect(plant.fuelFlowRate, fuelFlowRate.y)
            annotation (Line(points={{20,0},{-19,0}}, color={0,0,127}));
          annotation (
            Diagram(graphics),
            experiment(
              StopTime=1000,
              __Dymola_NumberOfIntervals=5000,
              Tolerance=1e-006),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model allows to simulate an open loop transients.
</html>"),  __Dymola_experimentSetupOutput);
        end OpenLoopSimulatorC;

        model PlantD
          parameter Real tableEtaC[6, 4]=[0, 95, 100, 105; 1, 0.8995, 0.8831,
              0.1075; 2, 0.9158, 0.9038, 0.894; 3, 0.9071, 0.8962, 0.8886; 4,
              0.8995, 0.8853, 0.8613; 5, 0.8668, 0.8504, 0.8341];
          parameter Real tablePhicC[6, 4]=[0, 95, 100, 105; 1, 0.08067, 0.09057,
              46.8e-3; 2, 0.08278, 0.09225, 0.1009; 3, 0.08551, 0.0952, 0.1019;
              4, 0.08762, 0.0971, 0.103; 5, 0.08909, 0.09815, 0.1038];
          parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 19.2431, 22.9896,
              27.2469; 2, 18.7323, 22.649, 26.2252; 3, 17.7105, 21.7124, 24.6925;
              4, 16.1779, 20.6906, 23.0747; 5, 14.4749, 18.3065, 20.6055];
          parameter Real tablePhicT[5, 4]=[1, 90, 100, 110; 2.36, 4.68e-3, 4.68e-3,
              4.68e-3; 2.88, 4.68e-3, 4.68e-3, 4.68e-3; 3.56, 4.68e-3, 4.68e-3,
              4.68e-3; 4.46, 4.68e-3, 4.68e-3, 4.68e-3];
          parameter Real tableEtaT[5, 4]=[1, 90, 100, 110; 2.36, 89e-2, 89.5e-2,
              89.3e-2; 2.88, 90e-2, 90.6e-2, 90.5e-2; 3.56, 90.5e-2, 90.6e-2,
              90.5e-2; 4.46, 90.2e-2, 90.3e-2, 90e-2];
          ThermoPower.Gas.Compressor compressor(
            redeclare package Medium = ThermoPower.Media.Air,
            eta_mech=0.995,
            pstart_in=101325,
            pstart_out=1950000,
            Tstart_in=288.15,
            Tstart_out=673.15,
            tablePhic=tablePhicC,
            tableEta=tableEtaC,
            tablePR=tablePR,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
            explicitIsentropicEnthalpy=true,
            Ndesign=314.16,
            Tdes_in=288.15) annotation (Placement(transformation(extent={{-124,-92},{-64,
                    -32}}, rotation=0)));
          ThermoPower.Gas.CombustionChamber CombustionChamber1(
            pstart=1932000,
            V=0.1,
            S=0.1,
            Tstart=1504.442,
            initOpt=ThermoPower.Choices.Init.Options.steadyState,
            HH=50e6) annotation (Placement(transformation(extent={{-38,18},{2,58}},
                  rotation=0)));
          ThermoPower.Gas.SourcePressure SourceP1(
            redeclare package Medium = ThermoPower.Media.Air,
            p0=101325,
            T=288.15) annotation (Placement(transformation(extent={{-164,-30},{-144,-10}},
                  rotation=0)));
          ThermoPower.Gas.SourceMassFlow SourceW1(
            redeclare package Medium = ThermoPower.Media.NaturalGas,
            w0=13.65,
            p0=1932000,
            use_in_w0=true) annotation (Placement(transformation(extent={{-66,68},{-46,88}},
                          rotation=0)));
          ThermoPower.Gas.PressDrop PressDrop2(
            pstart=1950000,
            FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
            A=1,
            redeclare package Medium = ThermoPower.Media.Air,
            dpnom=1000,
            wnom=580,
            rhonom=4.7,
            Tstart=668.15)
                        annotation (Placement(transformation(
                origin={-70,20},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateInletCC(
              redeclare package Medium = ThermoPower.Media.Air) annotation (Placement(
                transformation(extent={{-66,28},{-46,48}},  rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateOutletCC(
              redeclare package Medium = ThermoPower.Media.FlueGas) annotation (
              Placement(transformation(extent={{10,28},{30,48}},  rotation=0)));
          inner ThermoPower.System system(allowFlowReversal=false)
            annotation (Placement(transformation(extent={{158,160},{178,180}})));
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=314.16,
              useSupport=false)                annotation (Placement(transformation(
                  extent={{-198,-78},{-168,-48}},
                                               rotation=0)));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
            annotation (Placement(transformation(extent={{-158,-76},{-132,-50}})));
          Modelica.Mechanics.Rotational.Components.Inertia inertia(J=10000)
            annotation (Placement(transformation(extent={{106,-80},{142,-44}})));
          ThermoPower.Gas.SensT sensT1(redeclare package Medium =
                ThermoPower.Media.Air)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-74,-14})));
          ThermoPower.Gas.SensT sensT3(redeclare package Medium =
            ThermoPower.Media.FlueGas) annotation (Placement(transformation(extent={{-10,-10},
                    {10,10}},
                rotation=270,
                origin={42,2})));
          ThermoPower.Gas.Turbine Turbine1(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            eta_mech=0.995,
            tablePhic=tablePhicT,
            tableEta=tableEtaT,
            pstart_in=1932000,
            pstart_out=101325,
            Tstart_in=1504.442,
            Tstart_out=893.15,
            Ndesign=314.16,
            Tdes_in=1573.15,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix) annotation (
              Placement(transformation(extent={{32,-92},{92,-32}},rotation=0)));
          ThermoPower.Gas.SinkPressure SinkP1(redeclare package Medium =
                ThermoPower.Media.FlueGas, T=893.15)
            annotation (Placement(transformation(extent={{140,-12},{160,8}},
                                                                          rotation=0)));
          ThermoPower.Gas.SensT sensT4(redeclare package Medium =
                ThermoPower.Media.FlueGas)
            annotation (Placement(transformation(extent={{104,-8},{124,12}})));
          Modelica.Blocks.Sources.Step Step1(
            startTime=50,
            height=-0.35,
            offset=14)  annotation (Placement(transformation(extent={{-114,82},
                    {-94,102}},
                          rotation=0)));
        equation
          connect(SourceW1.flange, CombustionChamber1.inf) annotation (Line(
              points={{-46,78},{-18,78},{-18,58}},
              color={159,159,223},
              thickness=0.5));
          connect(SourceP1.flange, compressor.inlet) annotation (Line(
              points={{-144,-20},{-132,-20},{-132,-38},{-118,-38}},
              color={159,159,223},
              thickness=0.5));
          connect(CombustionChamber1.ina, stateInletCC.outlet) annotation (Line(
              points={{-38,38},{-50,38}},
              color={159,159,223},
              thickness=0.5));
          connect(stateOutletCC.inlet, CombustionChamber1.out) annotation (Line(
              points={{14,38},{2,38}},
              color={159,159,223},
              thickness=0.5));
          connect(powerSensor1.flange_b, compressor.shaft_a) annotation (Line(points={{-132,
                  -63},{-122,-63},{-122,-62},{-112,-62}}, color={0,0,0}));
          connect(powerSensor1.flange_a, ConstantSpeed1.flange) annotation (Line(points=
                 {{-158,-63},{-158,-64},{-168,-64},{-168,-63}}, color={0,0,0}));
          connect(compressor.outlet, sensT1.inlet)
            annotation (Line(points={{-70,-38},{-70,-20}}, color={159,159,223}));
          connect(sensT1.outlet, PressDrop2.inlet)
            annotation (Line(points={{-70,-8},{-70,10}}, color={159,159,223}));
          connect(PressDrop2.outlet, stateInletCC.inlet) annotation (Line(points={{-70,30},
                  {-70,38},{-62,38}}, color={159,159,223}));
          connect(sensT3.inlet, stateOutletCC.outlet)
            annotation (Line(points={{38,8},{38,38},{26,38}},
                                                       color={159,159,223}));
          connect(Turbine1.outlet, sensT4.inlet) annotation (Line(points={{86,
                  -38},{86,-2},{108,-2}}, color={159,159,223}));
          connect(SinkP1.flange, sensT4.outlet)
            annotation (Line(points={{140,-2},{120,-2}}, color={159,159,223}));
          connect(inertia.flange_a, Turbine1.shaft_b)
            annotation (Line(points={{106,-62},{80,-62}}, color={0,0,0}));
          connect(sensT3.outlet, Turbine1.inlet)
            annotation (Line(points={{38,-4},{38,-38}}, color={159,159,223}));
          connect(Step1.y, SourceW1.in_w0) annotation (Line(points={{-93,92},{
                  -62,92},{-62,83}}, color={0,0,127}));
          connect(compressor.shaft_b, Turbine1.shaft_a)
            annotation (Line(points={{-76,-62},{44,-62}}, color={0,0,0}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1)),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1), graphics={Rectangle(
                  extent={{-200,200},{200,-200}},
                  lineColor={170,170,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-140,140},{140,-140}},
                  lineColor={170,170,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"),  experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
        end PlantD;

        model PlantE
          parameter Real tableEtaC[6, 4]=[0, 95, 100, 105; 1, 0.8995, 0.8831,
              0.1075; 2, 0.9158, 0.9038, 0.894; 3, 0.9071, 0.8962, 0.8886; 4,
              0.8995, 0.8853, 0.8613; 5, 0.8668, 0.8504, 0.8341];
          parameter Real tablePhicC[6, 4]=[0, 95, 100, 105; 1, 0.08067, 0.09057,
              46.8e-3; 2, 0.08278, 0.09225, 0.1009; 3, 0.08551, 0.0952, 0.1019;
              4, 0.08762, 0.0971, 0.103; 5, 0.08909, 0.09815, 0.1038];
          parameter Real tablePR[6, 4]=[0, 95, 100, 105; 1, 19.2431, 22.9896,
              27.2469; 2, 18.7323, 22.649, 26.2252; 3, 17.7105, 21.7124, 24.6925;
              4, 16.1779, 20.6906, 23.0747; 5, 14.4749, 18.3065, 20.6055];
          parameter Real tablePhicT[5, 4]=[1, 90, 100, 110; 2.36, 4.68e-3, 4.68e-3,
              4.68e-3; 2.88, 4.68e-3, 4.68e-3, 4.68e-3; 3.56, 4.68e-3, 4.68e-3,
              4.68e-3; 4.46, 4.68e-3, 4.68e-3, 4.68e-3];
          parameter Real tableEtaT[5, 4]=[1, 90, 100, 110; 2.36, 89e-2, 89.5e-2,
              89.3e-2; 2.88, 90e-2, 90.6e-2, 90.5e-2; 3.56, 90.5e-2, 90.6e-2,
              90.5e-2; 4.46, 90.2e-2, 90.3e-2, 90e-2];
          Modelica.Blocks.Interfaces.RealInput fuelFlowRate        annotation (
              Placement(transformation(extent={{-210,-10},{-190,10}}, rotation=0)));
          ThermoPower.Gas.Compressor compressor(
            redeclare package Medium = ThermoPower.Media.Air,
            eta_mech=0.995,
            pstart_in=101325,
            pstart_out=1950000,
            Tstart_in=288.15,
            Tstart_out=673.15,
            tablePhic=tablePhicC,
            tableEta=tableEtaC,
            tablePR=tablePR,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix,
            explicitIsentropicEnthalpy=true,
            Ndesign=314.16,
            Tdes_in=288.15) annotation (Placement(transformation(extent={{-124,-92},{-64,
                    -32}}, rotation=0)));
          ThermoPower.Gas.CombustionChamber CombustionChamber1(
            pstart=1932000,
            V=0.1,
            S=0.1,
            Tstart=1504.442,
            initOpt=ThermoPower.Choices.Init.Options.steadyState,
            HH=50e6) annotation (Placement(transformation(extent={{-38,18},{2,58}},
                  rotation=0)));
          ThermoPower.Gas.SourcePressure SourceP1(
            redeclare package Medium = ThermoPower.Media.Air,
            p0=101325,
            T=288.15) annotation (Placement(transformation(extent={{-164,-30},{-144,-10}},
                  rotation=0)));
          ThermoPower.Gas.SourceMassFlow SourceW1(
            redeclare package Medium = ThermoPower.Media.NaturalGas,
            w0=13.65,
            p0=1932000,
            use_in_w0=true) annotation (Placement(transformation(extent={{-66,68},{-46,88}},
                          rotation=0)));
          ThermoPower.Gas.PressDrop PressDrop2(
            pstart=1950000,
            FFtype=ThermoPower.Choices.PressDrop.FFtypes.OpPoint,
            A=1,
            redeclare package Medium = ThermoPower.Media.Air,
            dpnom=1000,
            wnom=580,
            rhonom=4.7,
            Tstart=668.15)
                        annotation (Placement(transformation(
                origin={-70,20},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          Modelica.Blocks.Continuous.FirstOrder gasFlowActuator(
            k=1,
            T=4,
            y_start=288.15,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{-104,90},{-88,106}},  rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateInletCC(
              redeclare package Medium = ThermoPower.Media.Air) annotation (Placement(
                transformation(extent={{-66,28},{-46,48}},  rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateOutletCC(
              redeclare package Medium = ThermoPower.Media.FlueGas) annotation (
              Placement(transformation(extent={{10,28},{30,48}},  rotation=0)));
          inner ThermoPower.System system(allowFlowReversal=false)
            annotation (Placement(transformation(extent={{158,160},{178,180}})));
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=314.16,
              useSupport=false)                annotation (Placement(transformation(
                  extent={{-198,-78},{-168,-48}},
                                               rotation=0)));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
            annotation (Placement(transformation(extent={{-158,-76},{-132,-50}})));
          Modelica.Mechanics.Rotational.Components.Inertia inertia(J=10000)
            annotation (Placement(transformation(extent={{106,-80},{142,-44}})));
          ThermoPower.Gas.SensT sensT1(redeclare package Medium =
                ThermoPower.Media.Air)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-74,-14})));
          ThermoPower.Gas.SensT sensT3(redeclare package Medium =
            ThermoPower.Media.FlueGas) annotation (Placement(transformation(extent={{-10,-10},
                    {10,10}},
                rotation=270,
                origin={42,2})));
          ThermoPower.Gas.Turbine Turbine1(
            redeclare package Medium = ThermoPower.Media.FlueGas,
            eta_mech=0.995,
            tablePhic=tablePhicT,
            tableEta=tableEtaT,
            pstart_in=1932000,
            pstart_out=101325,
            Tstart_in=1504.442,
            Tstart_out=893.15,
            Ndesign=314.16,
            Tdes_in=1573.15,
            Table=ThermoPower.Choices.TurboMachinery.TableTypes.matrix) annotation (
              Placement(transformation(extent={{32,-92},{92,-32}},rotation=0)));
          ThermoPower.Gas.SinkPressure SinkP1(redeclare package Medium =
                ThermoPower.Media.FlueGas)
            annotation (Placement(transformation(extent={{140,-12},{160,8}},
                                                                          rotation=0)));
          ThermoPower.Gas.SensT sensT4(redeclare package Medium =
                ThermoPower.Media.FlueGas)
            annotation (Placement(transformation(extent={{104,-8},{124,12}})));
        equation
          connect(SourceW1.flange, CombustionChamber1.inf) annotation (Line(
              points={{-46,78},{-18,78},{-18,58}},
              color={159,159,223},
              thickness=0.5));
          connect(SourceP1.flange, compressor.inlet) annotation (Line(
              points={{-144,-20},{-132,-20},{-132,-38},{-118,-38}},
              color={159,159,223},
              thickness=0.5));
          connect(gasFlowActuator.u, fuelFlowRate)        annotation (Line(points={{-105.6,
                  98},{-184,98},{-184,0},{-200,0}},           color={0,0,127}));
          connect(gasFlowActuator.y, SourceW1.in_w0) annotation (Line(points={{-87.2,98},
                  {-62,98},{-62,83}},       color={0,0,127}));
          connect(CombustionChamber1.ina, stateInletCC.outlet) annotation (Line(
              points={{-38,38},{-50,38}},
              color={159,159,223},
              thickness=0.5));
          connect(stateOutletCC.inlet, CombustionChamber1.out) annotation (Line(
              points={{14,38},{2,38}},
              color={159,159,223},
              thickness=0.5));
          connect(powerSensor1.flange_b, compressor.shaft_a) annotation (Line(points={{-132,
                  -63},{-122,-63},{-122,-62},{-112,-62}}, color={0,0,0}));
          connect(powerSensor1.flange_a, ConstantSpeed1.flange) annotation (Line(points=
                 {{-158,-63},{-158,-64},{-168,-64},{-168,-63}}, color={0,0,0}));
          connect(compressor.outlet, sensT1.inlet)
            annotation (Line(points={{-70,-38},{-70,-20}}, color={159,159,223}));
          connect(sensT1.outlet, PressDrop2.inlet)
            annotation (Line(points={{-70,-8},{-70,10}}, color={159,159,223}));
          connect(PressDrop2.outlet, stateInletCC.inlet) annotation (Line(points={{-70,30},
                  {-70,38},{-62,38}}, color={159,159,223}));
          connect(sensT3.inlet, stateOutletCC.outlet)
            annotation (Line(points={{38,8},{38,38},{26,38}},
                                                       color={159,159,223}));
          connect(Turbine1.outlet, sensT4.inlet) annotation (Line(points={{86,
                  -38},{86,-2},{108,-2}}, color={159,159,223}));
          connect(SinkP1.flange, sensT4.outlet)
            annotation (Line(points={{140,-2},{120,-2}}, color={159,159,223}));
          connect(inertia.flange_a, Turbine1.shaft_b)
            annotation (Line(points={{106,-62},{80,-62}}, color={0,0,0}));
          connect(compressor.shaft_b, Turbine1.shaft_a)
            annotation (Line(points={{-76,-62},{44,-62}}, color={0,0,0}));
          connect(sensT3.outlet, Turbine1.inlet)
            annotation (Line(points={{38,-4},{38,-38}}, color={159,159,223}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1)),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{200,200}},
                initialScale=0.1), graphics={Rectangle(
                  extent={{-200,200},{200,-200}},
                  lineColor={170,170,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-140,140},{140,-140}},
                  lineColor={170,170,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"));
        end PlantE;

        model OpenLoopSimulatorE
          extends Modelica.Icons.Example;

          PlantE plant annotation (Placement(
                transformation(extent={{20,-20},{60,20}}, rotation=0)));
          Modelica.Blocks.Sources.Step fuelFlowRate(
            height=2.65,
            startTime=500,
            offset=11)     annotation (Placement(transformation(extent={{-40,-10},{
                    -20,10}}, rotation=0)));
          inner ThermoPower.System system
            annotation (Placement(transformation(extent={{80,80},{100,100}})));
        equation
          connect(plant.fuelFlowRate, fuelFlowRate.y)
            annotation (Line(points={{20,0},{-19,0}}, color={0,0,127}));
          annotation (
            Diagram(graphics),
            experiment(
              StopTime=1000,
              __Dymola_NumberOfIntervals=5000,
              Tolerance=1e-006),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model allows to simulate an open loop transients.
</html>"),  __Dymola_experimentSetupOutput);
        end OpenLoopSimulatorE;
      end PlantB;

      package PlantC

        model GasTurbineSimplified
          extends
            ThermoPower.PowerPlants.GasTurbine.Interfaces.GasTurbineSimplified;
          parameter Modelica.Units.SI.Power maxPower=235e6;
          parameter Modelica.Units.SI.MassFlowRate flueGasNomFlowRate=614
            "Nominal flue gas flow rate";
          parameter Modelica.Units.SI.MassFlowRate flueGasMinFlowRate=454
            "Minimum flue gas flow rate";
          parameter Modelica.Units.SI.MassFlowRate flueGasOffFlowRate=
              flueGasMinFlowRate/100 "Flue gas flow rate with GT switched off";
          parameter Modelica.Units.SI.MassFlowRate fuelNomFlowRate=12.1
            "Nominal fuel flow rate";
          parameter Modelica.Units.SI.MassFlowRate fuelIntFlowRate=7.08
            "Intermediate fuel flow rate";
          parameter Modelica.Units.SI.MassFlowRate fuelMinFlowRate=4.58
            "Minimum fuel flow rate";
          parameter Modelica.Units.SI.MassFlowRate fuelOffFlowRate=0.1
            "Flue gas flow rate with GT switched off";
          parameter Real constTempLoad=0.60
            "Fraction of load from which the temperature is kept constant";
          parameter Real intLoad=0.42
            "Intermediate load for fuel consumption computations";
          parameter Modelica.Units.SI.Temperature flueGasNomTemp=843
            "Maximum flue gas temperature";
          parameter Modelica.Units.SI.Temperature flueGasMinTemp=548
            "Minimum flue gas temperature (zero electrical load)";
          parameter Modelica.Units.SI.Temperature flueGasOffTemp=363.15
            "Flue gas temperature with GT switched off";
          parameter Modelica.Units.SI.SpecificEnthalpy fuel_LHV=49e6
            "Fuel Lower Heating Value";
          parameter Modelica.Units.SI.SpecificEnthalpy fuel_HHV=55e6
            "Fuel Higher Heating Value";
          FlueGasMedium.BaseProperties gas;
          Modelica.Units.SI.MassFlowRate w;
          Modelica.Units.SI.Power P_el=noEvent(if GTLoad > 0 then GTLoad*maxPower
               else 0) "Electrical power output";
          Modelica.Units.SI.MassFlowRate fuelFlowRate "Fuel flow rate";
        equation
          gas.p = flueGasOut.p;
          gas.Xi = FlueGasMedium.reference_X[1:FlueGasMedium.nXi];
          gas.T = noEvent(if GTLoad > constTempLoad then flueGasNomTemp else if
            GTLoad > 0 then flueGasMinTemp + GTLoad/constTempLoad*(flueGasNomTemp
             - flueGasMinTemp) else flueGasMinTemp*(1 + GTLoad) - flueGasOffTemp*
            GTLoad);
          w = noEvent(if GTLoad > constTempLoad then flueGasMinFlowRate + (GTLoad
             - constTempLoad)/(1 - constTempLoad)*(flueGasNomFlowRate -
            flueGasMinFlowRate) else if GTLoad > 0 then flueGasMinFlowRate else
            flueGasMinFlowRate*(1 + GTLoad) - flueGasOffFlowRate*GTLoad);
          fuelFlowRate = noEvent(if GTLoad > intLoad then fuelIntFlowRate + (
            GTLoad - intLoad)/(1 - intLoad)*(fuelNomFlowRate - fuelIntFlowRate)
             else if GTLoad > 0 then fuelMinFlowRate + GTLoad/intLoad*(
            fuelIntFlowRate - fuelMinFlowRate) else fuelMinFlowRate*(1 + GTLoad)
             - fuelOffFlowRate*GTLoad);

          flueGasOut.m_flow = -w;
          flueGasOut.h_outflow = gas.h;
          flueGasOut.Xi_outflow = gas.Xi;
          annotation (Diagram(graphics));
        end GasTurbineSimplified;

        model TestGasTurbine

          ThermoPower.PowerPlants.GasTurbine.Examples.GasTurbineSimplified gasTurbine
            annotation (Placement(transformation(extent={{-40,-40},{0,0}},
                  rotation=0)));
          ThermoPower.Gas.SinkPressure
                                sinkP(redeclare package Medium =
                ThermoPower.Media.FlueGas) annotation (Placement(transformation(
                  extent={{62,-14},{82,6}}, rotation=0)));
          Modelica.Blocks.Sources.Constant const(k=1)
                                                 annotation (Placement(
                transformation(extent={{-90,-30},{-70,-10}}, rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateReader_gas(
              redeclare package Medium = ThermoPower.Media.FlueGas) annotation (
              Placement(transformation(extent={{20,-14},{40,6}}, rotation=0)));
          inner ThermoPower.System system
            annotation (Placement(transformation(extent={{70,70},{90,90}})));
        equation
          connect(const.y, gasTurbine.GTLoad)
            annotation (Line(points={{-69,-20},{-40,-20}}, color={0,0,127}));
          connect(stateReader_gas.inlet, gasTurbine.flueGasOut) annotation (Line(
              points={{24,-4},{0,-4}},
              color={159,159,223},
              thickness=0.5));
          connect(stateReader_gas.outlet, sinkP.flange) annotation (Line(
              points={{36,-4},{62,-4}},
              color={159,159,223},
              thickness=0.5));
          annotation (Diagram(graphics));
        end TestGasTurbine;
      end PlantC;

      package PlantD
        model GasTurbine "Model of gas turbine, compressor and combustor"
          package Medium_Fuel =ThermalPower.Media.Gases.NaturalGasWithH2;
          package Medium =ThermalPower.Media.Gases.MoistFlueGas;
          Modelon.Visualizers.RealValue realValue1(
              precision=0, number=turbine.summary.shaftSpeed*60/(2*3.14))
            annotation (Placement(transformation(extent={{-45,-71},{-25,-51}})));
          Modelon.Visualizers.RealValue realValue2(
                        precision=2, number=combustor.Q_combust*1e-6)
            annotation (Placement(transformation(extent={{-17,-71},{3,-51}})));
          Modelon.Visualizers.RealValue realValue3(
                       precision=2, number=combustor.gas_out.p*1e-5)
            annotation (Placement(transformation(extent={{11,-71},{31,-51}})));
          Modelon.Visualizers.RealValue realValue4(
              precision=2, number=combustor.lambda)
            annotation (Placement(transformation(extent={{39,-71},{59,-51}})));
          ThermalPower.FlueGas.Sensors.MultiData
                                    multiData(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-86,-40},{-66,-20}})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                              multiDisplayVis_phTmdot(displayUnits=
                true)
            annotation (Placement(transformation(extent={{-91,-35},{-61,-5}})));
          ThermalPower.FlueGas.Sensors.MultiData
                                    multiData1(redeclare package Medium =
              Medium_Fuel)
            annotation (Placement(transformation(extent={{-36,70},{-16,90}})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                              multiDisplayVis_phTmdot1(displayUnits=
                true)
            annotation (Placement(transformation(extent={{-41,75},{-11,105}})));
          ThermalPower.FlueGas.Sensors.MultiData
                                    multiData2(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=270,
                origin={82,-20})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                              multiDisplayVis_phTmdot2(displayUnits=
                true)
            annotation (Placement(transformation(extent={{87,-25},{117,5}})));
          Modelon.ThermoFluid.Compressors.DynamicCompressor compressor(
            redeclare package Medium = Medium,
            eta_mech=eta_mech_compressor,
            positiveFlow=false,
            internalLeakage=false,
            redeclare model CharMap = CharMap_compressor,
            T_start=293.15)  annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=0,
                origin={-48,20})));
          ThermalPower.FlueGas.TurboMachinery.Turbines.Turbine
                                               turbine(
            redeclare package Medium = Medium,
            w_start=w_start,
            redeclare model CharMap = CharMap,
            T_start(displayUnit="K") = Tstart_turbine,
            eta_mech=eta_mech)
                             annotation (Placement(transformation(
                extent={{16,16},{-16,-16}},
                rotation=180,
                origin={32,12})));
          ThermalPower.FlueGas.Combustors.Combustor combustor(
            A_inner=A_inner,
            kc_combust=kc_combust,
            Cm=Cm,
            V=V_combustor,
            pstart=pstart_combustor,
            Tstart=Tstart_combustor,
            initOpt=initOpt_combustor) annotation (Placement(transformation(
                extent={{10,10},{-10,-10}},
                rotation=180,
                origin={-12,42})));

          ThermalPower.FlueGas.Sensors.MultiData
                                    multiData3(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=270,
                origin={12,30})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                              multiDisplayVis_phTmdot3(displayUnits=
                true)
            annotation (Placement(transformation(extent={{23,25},{53,55}})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                              multiDisplayVis_phTmdot4(
                                                                      displayUnits=
                true)
            annotation (Placement(transformation(extent={{-81,29},{-51,59}})));
          ThermalPower.FlueGas.Sensors.MultiData
                                    multiData4(
                                              redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-38,34})));
          ThermalPower.FlueGas.Interfaces.VolumePort fuel_in(redeclare package
              Medium =
                Medium_Fuel) annotation (Placement(transformation(extent={{-82,70},{-62,
                    90}}), iconTransformation(extent={{-46,92},{-32,106}})));
          ThermalPower.FlueGas.Interfaces.FlowPort gas_out(redeclare package
              Medium =
                Medium) annotation (Placement(transformation(extent={{72,-108},{92,-88}}),
                iconTransformation(extent={{36,-106},{50,-92}})));
          ThermalPower.FlueGas.Interfaces.VolumePort gas_in(redeclare package
              Medium =
                Medium) annotation (Placement(transformation(extent={{-132,-114},{-112,-94}}),
                iconTransformation(extent={{-126,-108},{-112,-94}})));
          replaceable model CharMap =
              Modelon.ThermoFluid.Turbines.Characteristics.TableBasedSAE (normalizedCorrection=true, effMap=[0, 1, 2, 3, 4, 6, 9, 12, 16, 20, 25, 30; 20000, 0.85, 0.853, 0.856, 0.86, 0.865, 0.87, 0.8725, 0.875, 0.8752, 0.8754, 0.876; 40000, 0.85, 0.853, 0.856, 0.86, 0.865, 0.87, 0.8725, 0.875, 0.8752, 0.8754, 0.876; 60000, 0.85, 0.853, 0.856, 0.86, 0.865, 0.87, 0.8725, 0.875, 0.8752, 0.8754, 0.876], flowMap=[0, 20, 25, 30; 0, 0.0002, 0.0002, 0.0002; 10000, 180, 210, 225; 40000, 220, 235, 242; 60000, 250, 267, 281], p_ref=450000, T_ref=973.15)
            constrainedby
            Modelon.ThermoFluid.Turbines.Characteristics.TableBasedSAE               annotation (__Dymola_choicesAllMatching=true, Dialog(group="Turbine"));
          parameter Real eta_mech=0.99 "Mechanical efficiency" annotation(Dialog(group="Turbine"));
          parameter Modelica.Units.SI.Temperature T_start=573.15 "Initial temperature"
            annotation (Dialog(group="Turbine"));
          parameter Modelica.Units.SI.AngularVelocity w_start=1000 "Initial angular velocity"
            annotation (Dialog(group="Turbine"));
          replaceable model CharMap_compressor =
            Modelon.ThermoFluid.Compressors.Characteristics.Dynamic.TableBasedFlowFromPR
              (                                                                             normalizedCorrection=true, effMap=[0, 1, 2, 4, 6, 9, 12, 16, 20, 25, 30; 10000, 0.85, 0.84, 0.82, 0.81, 0.795, 0.789, 0.785, 0.783, 0.781, 0.78; 40000, 0.85, 0.84, 0.82, 0.81, 0.795, 0.789, 0.785, 0.783, 0.781, 0.78; 60000, 0.85, 0.84, 0.82, 0.81, 0.795, 0.789, 0.785, 0.783, 0.781, 0.78], flowMap=[0, 20, 25, 30; 0, 0.00002, 0.00002, 0.00002; 10000, 900, 870, 820; 40000, 950, 920, 900; 60000, 980, 940, 920], p_ref=200000, T_ref=973.15)
            constrainedby
            Modelon.ThermoFluid.Compressors.Characteristics.Dynamic.TableBasedSAE               annotation (__Dymola_choicesAllMatching=true, Dialog(group="Compressor"));

          parameter Real eta_mech_compressor=1.0 "Mechanical efficiency" annotation(Dialog(group="Compressor"));
          parameter Boolean internalLeakage_compressor=false "Include internal mass flow leakage" annotation(Dialog(group="Compressor"));

          parameter Modelica.Units.SI.HeatCapacity Cm=0 "Metal Heat Capacity" annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.Volume V_combustor=10 "Inner volume" annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.Area A_inner=0 "Inner surface" annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.CoefficientOfHeatTransfer kc_combust=0 "Heat Transfer Coefficient"
            annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.AbsolutePressure pstart_combustor=2400000 "Combustor pressure start value"
            annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.Temperature Tstart_combustor=1648.15 "Combustor temperature start value"
            annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.Temperature Tstart_turbine=573.15 "Turbine temperature start value"
            annotation (Dialog(group="Combustor"));
          parameter Modelon.ThermoFluid.Choices.InitOptions initOpt_combustor=Modelon.ThermoFluid.Choices.InitOptions.steadyState "Initialization option" annotation(Dialog(group="Combustor"));
          Modelica.Mechanics.Rotational.Interfaces.Flange_b shaft_b1 annotation (
              Placement(transformation(extent={{142,-8},{158,8}}), iconTransformation(
                  extent={{142,-8},{158,8}})));
        equation

          connect(multiData.u, multiDisplayVis_phTmdot.y)
            annotation (Line(points={{-76,-30},{-76,-30},{-76,-20}}, color={0,0,0}));
          connect(multiData1.u, multiDisplayVis_phTmdot1.y) annotation (Line(points={
                  {-26,80},{-26,84},{-26,86},{-26,90}}, color={0,0,0}));
          connect(multiDisplayVis_phTmdot2.y, multiData2.u) annotation (Line(points={{102,-10},
                  {102,-20},{82,-20}},                  color={0,0,0}));
          connect(compressor.portA, multiData.port_b) annotation (Line(points={{-58,20},
                  {-58,-30},{-70,-30}},     color={0,191,0}));
          connect(combustor.gas_out, multiData3.port_a)
            annotation (Line(points={{-3,42},{12,42},{12,36}}, color={0,191,0}));
          connect(multiDisplayVis_phTmdot3.y, multiData3.u) annotation (Line(points={
                  {38,40},{38,40},{38,30},{12,30}}, color={0,0,0}));
          connect(compressor.flange, turbine.shaft_a) annotation (Line(points={{-48,13},
                  {18,13},{18,12.32},{17.28,12.32}},    color={0,0,0}));
          connect(multiData3.port_b, turbine.port_a)
            annotation (Line(points={{12,24},{12,21.92},{17.6,21.92}},
                                                                 color={0,191,0}));
          connect(turbine.port_b, multiData2.port_a) annotation (Line(points={{45.76,
                  1.12},{82,1.12},{82,-14}}, color={0,191,0}));
          connect(multiData4.u, multiDisplayVis_phTmdot4.y)
            annotation (Line(points={{-38,34},{-66,34},{-66,44}}, color={0,0,0}));
          connect(compressor.portB, multiData4.port_a) annotation (Line(points={{-38,20},
                  {-38,28}},              color={255,128,0}));
          connect(multiData4.port_b, combustor.gas_in) annotation (Line(points={{-38,
                  40},{-38,40},{-38,42},{-21,42}}, color={0,191,0}));
          connect(multiData1.port_b, combustor.fuel_in)
            annotation (Line(points={{-20,80},{-12,80},{-12,51}}, color={0,191,0}));
          connect(gas_out, multiData2.port_b) annotation (Line(points={{82,-98},{82,-26}},
                                               color={0,191,0}));
          connect(fuel_in, multiData1.port_a)
            annotation (Line(points={{-72,80},{-32,80}}, color={0,191,0}));
          connect(gas_in, multiData.port_a) annotation (Line(points={{-122,-104},{-122,
                  -30},{-82,-30}},      color={0,191,0}));
          connect(turbine.shaft_b, shaft_b1) annotation (Line(points={{46.08,12.32},{120,
                  12.32},{120,0},{150,0}}, color={0,0,0}));
          annotation (Diagram(coordinateSystem(extent={{-150,-100},{150,100}}),
                                       graphics={
                Rectangle(
                  extent={{-52,-50},{68,-74}},
                  lineColor={215,215,215},
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid,
                  radius=2),
                Text(
                  extent={{-56,-66},{-6,-70}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="Speed [rpm]"),
                Text(
                  extent={{-28,-66},{22,-70}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="Q combust [MW]"),
                Text(
                  extent={{0,-66},{50,-70}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="Combustor [bar]"),
                Text(
                  extent={{28,-66},{78,-70}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="lambda")}),
            experiment(StopTime=1000),
            __Dymola_experimentSetupOutput,
            Documentation(revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>",         info="<html>
<h4>Open brayton cycle</h4>
<p>The open Brayton cycle is a system model component consisting of a combustor, compressor and turbine. Ambient air supplied to the compressor is 
compressed with a compression ratio in the range 20 to 25. The compressed air is then introduced in the combustor where fuel is added as well. The default fuel used in the model is natural gas.
After combustion, which is assumed to be complete, the exhaust gas is fed to the turbine. Work produced by the turbine is supplied both to a generator and the compressor.</p>
</html>"),  Icon(coordinateSystem(extent={{-150,-100},{150,100}}), graphics={
                Rectangle(
                  extent={{-53,1.5},{52,-1.5}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={-38,60.25},
                  rotation=0),
                Rectangle(
                  extent={{-141,6},{141,-6}},
                  pattern=LinePattern.None,
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={9,0},
                  rotation=360),
                Line(
                  points={{-142,80}},
                  color={0,0,0},
                  pattern=LinePattern.None),
                Rectangle(
                  extent={{-136,28},{-78,-30}},
                  fillColor={119,216,119},
                  fillPattern=FillPattern.Solid,
                  radius=3,
                  pattern=LinePattern.None),
                Rectangle(
                  extent={{2,28},{60,-30}},
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  radius=3,
                  pattern=LinePattern.None),
                Ellipse(
                  extent={{-58,80},{-18,40}},
                  pattern=LinePattern.None,
                  fillColor={119,216,119},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-38.5,1.5},{38.5,-1.5}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={42.5,-60.5},
                  rotation=-90),
                Polygon(
                  points={{-15,15},{-15,-7},{11,-21},{11,29},{-15,15}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  origin={31,-5},
                  rotation=360),
                Ellipse(
                  extent={{-54,76},{-22,44}},
                  pattern=LinePattern.None,
                  fillColor={255,168,112},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0}),
                Polygon(
                  points={{-15,-11},{11,15},{15,13},{-11,-13},{-15,-11}},
                  lineColor={28,108,200},
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  origin={-37,59},
                  rotation=90),
                Polygon(
                  points={{-52,50},{-26,76},{-24,72},{-50,46},{-52,50}},
                  lineColor={28,108,200},
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
                Text(
                  extent={{-82,-46},{10,-68}},
                  lineColor={0,0,0},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  textString="%name"),
                Rectangle(
                  extent={{-38.5,1.5},{38.5,-1.5}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={-119.5,-56.5},
                  rotation=-90),
                Rectangle(
                  extent={{-38.5,1.5},{38.5,-1.5}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={-89.5,21.5},
                  rotation=90),
                Rectangle(
                  extent={{-38.5,1.5},{38.5,-1.5}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={12.5,21.5},
                  rotation=90),
                Polygon(
                  points={{15,15},{15,-7},{-11,-21},{-11,29},{15,15}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  origin={-107,-5},
                  rotation=360),
                Rectangle(
                  extent={{-10,1},{10,-1}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={-39,88},
                  rotation=-90),  Text(
                  extent={{-193,100},{-43,110}},
                  lineColor={0,0,0},
                  textString="Firing Power [MW]"),
                                           Rectangle(
                  extent={{-165,97},{-66,71}},
                  lineColor={255,168,112},
                  fillColor={255,168,112},
                  fillPattern=FillPattern.Solid),Text(
                  extent={{-186,72},{-46,93}},
                  lineColor={0,0,0},
                  textString=DynamicSelect("0",
                      String(
                      combustor.Q_combust/1e6,
                      format="1.f"))),     Rectangle(
                  extent={{47,-39},{146,-65}},
                  lineColor={175,175,175},
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid),Text(
                  extent={{28,-64},{168,-43}},
                  lineColor={0,0,0},
                  textString=DynamicSelect("0",
                      String(
                      (-shaft_b1.tau*turbine.summary.shaftSpeed*0.99)/1e6,
                      format="1.f"))),
                                  Text(
                  extent={{23,-82},{173,-72}},
                  lineColor={0,0,0},
                  textString="Power [MW]")}));
        end GasTurbine;

        model GasTurbineB
          extends Icons.GasTurbineIcon;

          replaceable package GasMedium =
            ThermalPower.Media.Gases.MoistFlueGas
          constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);

          inner ThermalPower.System_TPL system_TPL
            annotation (Placement(transformation(extent={{-154,62},{-134,82}})));

          package Medium_Fuel =
              ThermalPower.Media.Gases.NaturalGasWithH2;

          Modelica.Blocks.Interfaces.RealInput fuelFlowRate annotation (
              Placement(transformation(extent={{-176,-24},{-132,20}}, rotation=
                    0), iconTransformation(extent={{-110,-10},{-90,10}})));
          Modelica.Mechanics.Rotational.Interfaces.Flange_b shaft_b annotation (
             Placement(transformation(rotation=0, extent={{140,-20},{180,20}}),
                iconTransformation(extent={{92,-10},{112,10}})));
          GasTurbine gasTurbine
            annotation (Placement(transformation(extent={{-42,-32},{54,32}})));
          ThermalPower.FlueGas.SourcesAndSinks.MassFlowBoundary feedFuel(
            redeclare package Medium = Medium_Fuel,
            m_flow0=2,
            use_mdot_in=true) annotation (Placement(transformation(extent={{-98,32},{-64,
                    64}}, rotation=0)));
          ThermalPower.FlueGas.SourcesAndSinks.PressureBoundary_pTX airSource(
              redeclare package Medium = GasMedium, N_ports=1) annotation (Placement(
                transformation(
                extent={{-16,-16},{16,16}},
                rotation=0,
                origin={-94,-52})));
          ThermalPower.FlueGas.SourcesAndSinks.PressureBoundary_pTX airSink(redeclare
              package Medium = GasMedium, N_ports=1) annotation (Placement(
                transformation(
                extent={{-17,-16},{17,16}},
                rotation=180,
                origin={85,-50})));
        equation
          connect(airSource.port[1],gasTurbine. gas_in) annotation (Line(points={{-79.6,
                  -52},{-32.08,-52},{-32.08,-32.32}},                color={0,191,0}));
          connect(feedFuel.port,gasTurbine. fuel_in) annotation (Line(points={{-65.7,48},
                  {-6.48,48},{-6.48,31.68}},          color={0,191,0}));
          connect(airSink.port[1],gasTurbine. gas_out) annotation (Line(points={{69.7,-50},
                  {18,-50},{18,-36},{19.76,-36},{19.76,-31.68}},
                                                      color={0,191,0}));
          connect(gasTurbine.shaft_b1, shaft_b)
            annotation (Line(points={{54,0},{160,0}}, color={0,0,0}));
          connect(fuelFlowRate, feedFuel.mdot_in) annotation (Line(points={{-154,-2},{-136,
                  -2},{-136,0},{-120,0},{-120,80},{-91.2,80},{-91.2,56}}, color={0,0,127}));
          annotation (Diagram(coordinateSystem(extent={{-160,-160},{160,160}})),
              Icon(coordinateSystem(extent={{-100,-100},{100,100}})));
        end GasTurbineB;

        model Plant
          replaceable package GasMedium =
            ThermalPower.Media.Gases.MoistFlueGas
          constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);

          Modelica.Blocks.Interfaces.RealInput fuelFlowRate        annotation (
              Placement(transformation(extent={{-114,-10},{-94,10}},  rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput generatedPower annotation (
              Placement(transformation(extent={{96,-10},{116,10}},  rotation=0)));
          GasTurbineB gasTurbineB
            annotation (Placement(transformation(extent={{-52,-16},{-20,16}})));
          Modelon.ThermoFluid.Electrical.SimpleGenerator generator(w_nom=500*2*3.141592)
            annotation (Placement(transformation(extent={{38,-10},{58,10}})));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
            annotation (Placement(transformation(extent={{0,-10},{20,10}})));
          inner ThermalPower.System_TPL system_TPL
            annotation (Placement(transformation(extent={{-82,58},{-62,78}})));
        equation
          connect(gasTurbineB.shaft_b, powerSensor.flange_a)
            annotation (Line(points={{-19.68,0},{0,0}},
                                                     color={0,0,0}));
          connect(generator.flange_a, powerSensor.flange_b)
            annotation (Line(points={{40,0},{20,0}}, color={0,0,0}));
          connect(fuelFlowRate, gasTurbineB.fuelFlowRate)
            annotation (Line(points={{-104,0},{-52,0}},      color={0,0,127}));
          connect(powerSensor.power, generatedPower) annotation (Line(points={{2,-11},{2,
                  -30},{80,-30},{80,0},{106,0}}, color={0,0,127}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false)),
            Icon(coordinateSystem(
                preserveAspectRatio=false),
                                   graphics={Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={170,170,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-98,98},{100,-98}},
                  lineColor={170,170,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"));
        end Plant;

        model Plant2
          replaceable package GasMedium =
            ThermalPower.Media.Gases.MoistFlueGas
          constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);

          Modelica.Blocks.Interfaces.RealInput fuelFlowRate        annotation (
              Placement(transformation(extent={{-114,-10},{-94,10}},  rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput generatedPower annotation (
              Placement(transformation(extent={{96,-10},{116,10}},  rotation=0)));
          GasTurbineB gasTurbineB
            annotation (Placement(transformation(extent={{-52,-16},{-20,16}})));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
            annotation (Placement(transformation(extent={{18,-10},{38,10}})));
          inner ThermalPower.System_TPL system_TPL
            annotation (Placement(transformation(extent={{-82,58},{-62,78}})));
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(w_fixed=2
                *500*3.141592)
            annotation (Placement(transformation(extent={{68,-10},{48,10}})));
          Modelica.Mechanics.Rotational.Components.Inertia inertia(J=10000)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Modelica.Blocks.Continuous.FirstOrder powerSensor1(
            k=1,
            T=1,
            y_start=56.8e6,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{42,-50},{62,-30}},  rotation=0)));
        equation
          connect(fuelFlowRate, gasTurbineB.fuelFlowRate)
            annotation (Line(points={{-104,0},{-52,0}},      color={0,0,127}));
          connect(gasTurbineB.shaft_b, inertia.flange_a)
            annotation (Line(points={{-19.68,0},{-10,0}},
                                                       color={0,0,0}));
          connect(powerSensor.flange_a, inertia.flange_b)
            annotation (Line(points={{18,0},{10,0}}, color={0,0,0}));
          connect(constantSpeed.flange, powerSensor.flange_b)
            annotation (Line(points={{48,0},{38,0}}, color={0,0,0}));
          connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{
                  20,-11},{20,-40},{40,-40}}, color={0,0,127}));
          connect(powerSensor1.y, generatedPower) annotation (Line(points={{63,
                  -40},{80,-40},{80,0},{106,0}}, color={0,0,127}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false)),
            Icon(coordinateSystem(
                preserveAspectRatio=false),
                                   graphics={Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={170,170,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-98,98},{100,-98}},
                  lineColor={170,170,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"));
        end Plant2;

        model ClosedLoopTest
          extends Modelica.Icons.Example;
          Plant plant
            annotation (Placement(transformation(extent={{10,-10},{30,10}})));
          ThermoPower.Examples.RankineCycle.Models.PID pID(
            Ti=1,
            PVmin=100e6,
            PVmax=550e6,
            CSmin=0,
            CSmax=40,
            steadyStateInit=true,
            Kp=1,
            holdWhenSimplified=true) annotation (Placement(transformation(extent={{-20,-10},
                    {0,10}},   rotation=0)));
          Modelica.Blocks.Sources.Ramp powerSetPoint(
            offset=300e6,
            height=100e6,
            duration=10,
            startTime=500) annotation (Placement(transformation(extent={{-58,-6},
                    {-38,14}},
                          rotation=0)));
        equation
          connect(plant.fuelFlowRate, pID.CS)
            annotation (Line(points={{9.6,0},{0,0}}, color={0,0,127}));
          connect(powerSetPoint.y, pID.SP)
            annotation (Line(points={{-37,4},{-20,4}}, color={0,0,127}));
          connect(pID.PV, plant.generatedPower) annotation (Line(points={{-20,
                  -4},{-30,-4},{-30,-40},{40,-40},{40,0},{30.6,0}}, color={0,0,
                  127}));
          annotation (experiment(
              StopTime=1000,
              __Dymola_NumberOfIntervals=1000,
              Tolerance=1e-06,
              __Dymola_Algorithm="Dassl"));
        end ClosedLoopTest;
      end PlantD;

      package PlantE
        model GasTurbine "Model of gas turbine, compressor and combustor"
          package Medium_Fuel =ThermalPower.Media.Gases.NaturalGasWithH2;
          package Medium =ThermalPower.Media.Gases.MoistFlueGas;
          Modelon.Visualizers.RealValue realValue1(
              precision=0, number=turbine.summary.shaftSpeed*60/(2*3.14))
            annotation (Placement(transformation(extent={{-45,-71},{-25,-51}})));
          Modelon.Visualizers.RealValue realValue2(
                        precision=2, number=combustor.Q_combust*1e-6)
            annotation (Placement(transformation(extent={{-17,-71},{3,-51}})));
          Modelon.Visualizers.RealValue realValue3(
                       precision=2, number=combustor.gas_out.p*1e-5)
            annotation (Placement(transformation(extent={{11,-71},{31,-51}})));
          Modelon.Visualizers.RealValue realValue4(
              precision=2, number=combustor.lambda)
            annotation (Placement(transformation(extent={{39,-71},{59,-51}})));
          ThermalPower.FlueGas.Sensors.MultiData
                                    multiData(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-86,-40},{-66,-20}})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                              multiDisplayVis_phTmdot(displayUnits=
                true)
            annotation (Placement(transformation(extent={{-91,-35},{-61,-5}})));
          ThermalPower.FlueGas.Sensors.MultiData
                                    multiData1(redeclare package Medium =
              Medium_Fuel)
            annotation (Placement(transformation(extent={{-36,70},{-16,90}})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                              multiDisplayVis_phTmdot1(displayUnits=
                true)
            annotation (Placement(transformation(extent={{-41,75},{-11,105}})));
          ThermalPower.FlueGas.Sensors.MultiData
                                    multiData2(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=270,
                origin={82,-20})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                              multiDisplayVis_phTmdot2(displayUnits=
                true)
            annotation (Placement(transformation(extent={{87,-25},{117,5}})));
          Modelon.ThermoFluid.Compressors.DynamicCompressor compressor(
            redeclare package Medium = Medium,
            eta_mech=eta_mech_compressor,
            positiveFlow=false,
            internalLeakage=false,
            redeclare model CharMap = CharMap_compressor,
            T_start=293.15)  annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=0,
                origin={-48,20})));
          ThermalPower.FlueGas.TurboMachinery.Turbines.Turbine
                                               turbine(
            redeclare package Medium = Medium,
            w_start=w_start,
            redeclare model CharMap = CharMap,
            T_start(displayUnit="K") = Tstart_turbine,
            eta_mech=eta_mech)
                             annotation (Placement(transformation(
                extent={{16,16},{-16,-16}},
                rotation=180,
                origin={32,12})));
          ThermalPower.FlueGas.Combustors.Combustor combustor(
            A_inner=A_inner,
            kc_combust=kc_combust,
            Cm=Cm,
            V=V_combustor,
            pstart=pstart_combustor,
            Tstart=Tstart_combustor,
            initOpt=initOpt_combustor) annotation (Placement(transformation(
                extent={{10,10},{-10,-10}},
                rotation=180,
                origin={-12,42})));

          ThermalPower.FlueGas.Sensors.MultiData
                                    multiData3(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=270,
                origin={12,30})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                              multiDisplayVis_phTmdot3(displayUnits=
                true)
            annotation (Placement(transformation(extent={{23,25},{53,55}})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                              multiDisplayVis_phTmdot4(
                                                                      displayUnits=
                true)
            annotation (Placement(transformation(extent={{-81,29},{-51,59}})));
          ThermalPower.FlueGas.Sensors.MultiData
                                    multiData4(
                                              redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-38,34})));
          ThermalPower.FlueGas.Interfaces.VolumePort fuel_in(redeclare package
              Medium =
                Medium_Fuel) annotation (Placement(transformation(extent={{-82,70},{-62,
                    90}}), iconTransformation(extent={{-46,92},{-32,106}})));
          ThermalPower.FlueGas.Interfaces.FlowPort gas_out(redeclare package
              Medium =
                Medium) annotation (Placement(transformation(extent={{72,-108},{92,-88}}),
                iconTransformation(extent={{36,-106},{50,-92}})));
          ThermalPower.FlueGas.Interfaces.VolumePort gas_in(redeclare package
              Medium =
                Medium) annotation (Placement(transformation(extent={{-132,-114},{-112,-94}}),
                iconTransformation(extent={{-126,-108},{-112,-94}})));
          replaceable model CharMap =
              Modelon.ThermoFluid.Turbines.Characteristics.TableBasedSAE (normalizedCorrection=true, effMap=[0, 1, 2, 3, 4, 6, 9, 12, 16, 20, 25, 30; 20000, 0.85, 0.853, 0.856, 0.86, 0.865, 0.87, 0.8725, 0.875, 0.8752, 0.8754, 0.876; 40000, 0.85, 0.853, 0.856, 0.86, 0.865, 0.87, 0.8725, 0.875, 0.8752, 0.8754, 0.876; 60000, 0.85, 0.853, 0.856, 0.86, 0.865, 0.87, 0.8725, 0.875, 0.8752, 0.8754, 0.876], flowMap=[0, 20, 25, 30; 0, 0.0002, 0.0002, 0.0002; 10000, 180, 210, 225; 40000, 220, 235, 242; 60000, 250, 267, 281], p_ref=450000, T_ref=973.15)
            constrainedby
            Modelon.ThermoFluid.Turbines.Characteristics.TableBasedSAE               annotation (__Dymola_choicesAllMatching=true, Dialog(group="Turbine"));
          parameter Real eta_mech=0.99 "Mechanical efficiency" annotation(Dialog(group="Turbine"));
          parameter Modelica.Units.SI.Temperature T_start=573.15 "Initial temperature"
            annotation (Dialog(group="Turbine"));
          parameter Modelica.Units.SI.AngularVelocity w_start=1000 "Initial angular velocity"
            annotation (Dialog(group="Turbine"));
          replaceable model CharMap_compressor =
            Modelon.ThermoFluid.Compressors.Characteristics.Dynamic.TableBetaParameters
              ( normalizedCorrection=true,
                flowMap=[0,1,2,3,4,5; 2850,481.5,494.1,510.39,522.98,531.76;
                    3000,540.59,550.62,568.23,579.57,585.84; 3150,279.34,602.25,
                    608.22,614.78,619.56],
                effMap=[0,1,2,3,4,5; 2850,0.8995,0.9158,0.9071,0.8995,0.8668; 3000,
                    0.8831,0.9038,0.8962,0.8853,0.8504; 3150,0.1075,0.894,0.8886,
                    0.8613,0.8341],
                betaMap=[0,15,16,17,18,19,20,21,22,23,24,25,26,27,28;
                    2850,4.69836,4.11321,3.48431,2.78135,1.59595,0,0,0,0,0,0,0,0,0;
                    3000,6.08184,5.75187,5.42582,5.10173,4.78051,4.39454,3.71205,
                    2.71193,0.76744,0,0,0,0,0; 3150,6.93924,6.58985,6.24944,
                    5.90143,5.56033,5.21163,4.86649,4.50015,4.04419,3.43754,
                    2.80572,2.15232,1.30649,0.01761],
                p_ref=101325,
                T_ref=288.15, betaMin=1,betaMax=4.5)
            constrainedby
            Modelon.ThermoFluid.Compressors.Characteristics.Dynamic.TableBetaParameters               annotation (__Dymola_choicesAllMatching=true, Dialog(group="Compressor"));

          parameter Real eta_mech_compressor=1.0 "Mechanical efficiency" annotation(Dialog(group="Compressor"));
          parameter Boolean internalLeakage_compressor=false "Include internal mass flow leakage" annotation(Dialog(group="Compressor"));

          parameter Modelica.Units.SI.HeatCapacity Cm=0 "Metal Heat Capacity" annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.Volume V_combustor=10 "Inner volume" annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.Area A_inner=0 "Inner surface" annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.CoefficientOfHeatTransfer kc_combust=0 "Heat Transfer Coefficient"
            annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.AbsolutePressure pstart_combustor=2400000 "Combustor pressure start value"
            annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.Temperature Tstart_combustor=1648.15 "Combustor temperature start value"
            annotation (Dialog(group="Combustor"));
          parameter Modelica.Units.SI.Temperature Tstart_turbine=573.15 "Turbine temperature start value"
            annotation (Dialog(group="Combustor"));
          parameter Modelon.ThermoFluid.Choices.InitOptions initOpt_combustor=Modelon.ThermoFluid.Choices.InitOptions.steadyState "Initialization option" annotation(Dialog(group="Combustor"));
          Modelica.Mechanics.Rotational.Interfaces.Flange_b shaft_b1 annotation (
              Placement(transformation(extent={{142,-8},{158,8}}), iconTransformation(
                  extent={{142,-8},{158,8}})));
        equation

          connect(multiData.u, multiDisplayVis_phTmdot.y)
            annotation (Line(points={{-76,-30},{-76,-30},{-76,-20}}, color={0,0,0}));
          connect(multiData1.u, multiDisplayVis_phTmdot1.y) annotation (Line(points={
                  {-26,80},{-26,84},{-26,86},{-26,90}}, color={0,0,0}));
          connect(multiDisplayVis_phTmdot2.y, multiData2.u) annotation (Line(points={{102,-10},
                  {102,-20},{82,-20}},                  color={0,0,0}));
          connect(compressor.portA, multiData.port_b) annotation (Line(points={{-58,20},
                  {-58,-30},{-70,-30}},     color={0,191,0}));
          connect(combustor.gas_out, multiData3.port_a)
            annotation (Line(points={{-3,42},{12,42},{12,36}}, color={0,191,0}));
          connect(multiDisplayVis_phTmdot3.y, multiData3.u) annotation (Line(points={
                  {38,40},{38,40},{38,30},{12,30}}, color={0,0,0}));
          connect(compressor.flange, turbine.shaft_a) annotation (Line(points={{-48,13},
                  {18,13},{18,12.32},{17.28,12.32}},    color={0,0,0}));
          connect(multiData3.port_b, turbine.port_a)
            annotation (Line(points={{12,24},{12,21.92},{17.6,21.92}},
                                                                 color={0,191,0}));
          connect(turbine.port_b, multiData2.port_a) annotation (Line(points={{45.76,
                  1.12},{82,1.12},{82,-14}}, color={0,191,0}));
          connect(multiData4.u, multiDisplayVis_phTmdot4.y)
            annotation (Line(points={{-38,34},{-66,34},{-66,44}}, color={0,0,0}));
          connect(compressor.portB, multiData4.port_a) annotation (Line(points={{-38,20},
                  {-38,28}},              color={255,128,0}));
          connect(multiData4.port_b, combustor.gas_in) annotation (Line(points={{-38,
                  40},{-38,40},{-38,42},{-21,42}}, color={0,191,0}));
          connect(multiData1.port_b, combustor.fuel_in)
            annotation (Line(points={{-20,80},{-12,80},{-12,51}}, color={0,191,0}));
          connect(gas_out, multiData2.port_b) annotation (Line(points={{82,-98},{82,-26}},
                                               color={0,191,0}));
          connect(fuel_in, multiData1.port_a)
            annotation (Line(points={{-72,80},{-32,80}}, color={0,191,0}));
          connect(gas_in, multiData.port_a) annotation (Line(points={{-122,-104},{-122,
                  -30},{-82,-30}},      color={0,191,0}));
          connect(turbine.shaft_b, shaft_b1) annotation (Line(points={{46.08,12.32},{120,
                  12.32},{120,0},{150,0}}, color={0,0,0}));
          annotation (Diagram(coordinateSystem(extent={{-150,-100},{150,100}}),
                                       graphics={
                Rectangle(
                  extent={{-52,-50},{68,-74}},
                  lineColor={215,215,215},
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid,
                  radius=2),
                Text(
                  extent={{-56,-66},{-6,-70}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="Speed [rpm]"),
                Text(
                  extent={{-28,-66},{22,-70}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="Q combust [MW]"),
                Text(
                  extent={{0,-66},{50,-70}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="Combustor [bar]"),
                Text(
                  extent={{28,-66},{78,-70}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="lambda")}),
            experiment(StopTime=1000),
            __Dymola_experimentSetupOutput,
            Documentation(revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>",         info="<html>
<h4>Open brayton cycle</h4>
<p>The open Brayton cycle is a system model component consisting of a combustor, compressor and turbine. Ambient air supplied to the compressor is 
compressed with a compression ratio in the range 20 to 25. The compressed air is then introduced in the combustor where fuel is added as well. The default fuel used in the model is natural gas.
After combustion, which is assumed to be complete, the exhaust gas is fed to the turbine. Work produced by the turbine is supplied both to a generator and the compressor.</p>
</html>"),  Icon(coordinateSystem(extent={{-150,-100},{150,100}}), graphics={
                Rectangle(
                  extent={{-53,1.5},{52,-1.5}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={-38,60.25},
                  rotation=0),
                Rectangle(
                  extent={{-141,6},{141,-6}},
                  pattern=LinePattern.None,
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={9,0},
                  rotation=360),
                Line(
                  points={{-142,80}},
                  color={0,0,0},
                  pattern=LinePattern.None),
                Rectangle(
                  extent={{-136,28},{-78,-30}},
                  fillColor={119,216,119},
                  fillPattern=FillPattern.Solid,
                  radius=3,
                  pattern=LinePattern.None),
                Rectangle(
                  extent={{2,28},{60,-30}},
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  radius=3,
                  pattern=LinePattern.None),
                Ellipse(
                  extent={{-58,80},{-18,40}},
                  pattern=LinePattern.None,
                  fillColor={119,216,119},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-38.5,1.5},{38.5,-1.5}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={42.5,-60.5},
                  rotation=-90),
                Polygon(
                  points={{-15,15},{-15,-7},{11,-21},{11,29},{-15,15}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  origin={31,-5},
                  rotation=360),
                Ellipse(
                  extent={{-54,76},{-22,44}},
                  pattern=LinePattern.None,
                  fillColor={255,168,112},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0}),
                Polygon(
                  points={{-15,-11},{11,15},{15,13},{-11,-13},{-15,-11}},
                  lineColor={28,108,200},
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  origin={-37,59},
                  rotation=90),
                Polygon(
                  points={{-52,50},{-26,76},{-24,72},{-50,46},{-52,50}},
                  lineColor={28,108,200},
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
                Text(
                  extent={{-82,-46},{10,-68}},
                  lineColor={0,0,0},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  textString="%name"),
                Rectangle(
                  extent={{-38.5,1.5},{38.5,-1.5}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={-119.5,-56.5},
                  rotation=-90),
                Rectangle(
                  extent={{-38.5,1.5},{38.5,-1.5}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={-89.5,21.5},
                  rotation=90),
                Rectangle(
                  extent={{-38.5,1.5},{38.5,-1.5}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={12.5,21.5},
                  rotation=90),
                Polygon(
                  points={{15,15},{15,-7},{-11,-21},{-11,29},{15,15}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  origin={-107,-5},
                  rotation=360),
                Rectangle(
                  extent={{-10,1},{10,-1}},
                  pattern=LinePattern.None,
                  fillColor={119,217,119},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0},
                  origin={-39,88},
                  rotation=-90),  Text(
                  extent={{-193,100},{-43,110}},
                  lineColor={0,0,0},
                  textString="Firing Power [MW]"),
                                           Rectangle(
                  extent={{-165,97},{-66,71}},
                  lineColor={255,168,112},
                  fillColor={255,168,112},
                  fillPattern=FillPattern.Solid),Text(
                  extent={{-186,72},{-46,93}},
                  lineColor={0,0,0},
                  textString=DynamicSelect("0",
                      String(
                      combustor.Q_combust/1e6,
                      format="1.f"))),     Rectangle(
                  extent={{47,-39},{146,-65}},
                  lineColor={175,175,175},
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid),Text(
                  extent={{28,-64},{168,-43}},
                  lineColor={0,0,0},
                  textString=DynamicSelect("0",
                      String(
                      (-shaft_b1.tau*turbine.summary.shaftSpeed*0.99)/1e6,
                      format="1.f"))),
                                  Text(
                  extent={{23,-82},{173,-72}},
                  lineColor={0,0,0},
                  textString="Power [MW]")}));
        end GasTurbine;

        model Plant "Three pressure level boiler"
          extends Modelon.Icons.Experiment;
          replaceable package GasMedium =
            ThermalPower.Media.Gases.MoistFlueGas
          constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);

          inner ThermalPower.System_TPL system_TPL
            annotation (Placement(transformation(extent={{-168,38},{-148,58}})));

          GasTurbine gasTurbine
            annotation (Placement(transformation(extent={{32,-52},{-52,4}})));
          package Medium_Fuel =
              ThermalPower.Media.Gases.NaturalGasWithH2;
          ThermalPower.FlueGas.SourcesAndSinks.MassFlowBoundary feedFuel(
            redeclare package Medium = Medium_Fuel,
            m_flow0=2,
            use_mdot_in=true) annotation (Placement(transformation(extent={{24,10},{4,30}},
                          rotation=0)));
          ThermalPower.FlueGas.SourcesAndSinks.PressureBoundary_pTX airSource(
              redeclare package Medium = GasMedium, N_ports=1) annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={40,-72})));

          Modelica.Blocks.Sources.Trapezoid trapezoid(
            amplitude=4,
            rising=300,
            width=3000,
            falling=300,
            period=4000,
            offset=20,
            startTime=1000)
            annotation (Placement(transformation(extent={{-30,36},{-10,56}})));
          ThermalPower.FlueGas.SourcesAndSinks.PressureBoundary_pTX airSink(redeclare
              package Medium = GasMedium, N_ports=1) annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={-40,-74})));
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(w_fixed=2*500
                *3.141592)
            annotation (Placement(transformation(extent={{-150,-34},{-130,-14}})));
          Modelica.Mechanics.Rotational.Components.Inertia inertia(J=10000)
            annotation (Placement(transformation(extent={{-90,-34},{-70,-14}})));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
            annotation (Placement(transformation(extent={{-120,-34},{-100,-14}})));
        equation
          connect(airSource.port[1], gasTurbine.gas_in) annotation (Line(points={{31,-72},
                  {24,-72},{24,-52.28},{23.32,-52.28}},              color={0,191,0}));
          connect(feedFuel.port, gasTurbine.fuel_in) annotation (Line(points={{5,20},{
                  0.92,20},{0.92,3.72}},              color={0,191,0}));
          connect(trapezoid.y, feedFuel.mdot_in)
            annotation (Line(points={{-9,46},{20,46},{20,25}}, color={0,0,127}));
          connect(airSink.port[1], gasTurbine.gas_out) annotation (Line(points={{-31,
                  -74},{-22.04,-74},{-22.04,-51.72}}, color={0,191,0}));
          connect(inertia.flange_b, gasTurbine.shaft_b1)
            annotation (Line(points={{-70,-24},{-52,-24}}, color={0,0,0}));
          connect(powerSensor.flange_b, inertia.flange_a)
            annotation (Line(points={{-100,-24},{-90,-24}}, color={0,0,0}));
          connect(powerSensor.flange_a, constantSpeed.flange)
            annotation (Line(points={{-120,-24},{-130,-24}}, color={0,0,0}));
            annotation (Placement(transformation(extent={{-70,78},{-50,98}})),
                      Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}})),                                  Diagram(
                coordinateSystem(preserveAspectRatio=false, extent={{-180,-160},{180,
                    100}}), graphics={                   Text(
                  extent={{-80,80},{-36,68}},
                  lineColor={0,0,0},
                  textString="Power GasTurbine [MWe]")}),
            experiment(
              StopTime=5000,
              __Dymola_NumberOfIntervals=1000,
              __Dymola_Algorithm="Dassl"),
            Documentation(info="<html>
<h4>Information</h4>
<p>Combined cycle power plant model with a three-pressure reheat system and <a href=\"modelica://ThermalPower.Experiments.SubComponents.CCS\">simplified post combustion CO2 capture</a>. The model includes the full
steam cycle and an <a href=\"modelica://ThermalPower.FlueGas.TurboMachinery.OpenCycleGasTurbine\">open Brayton cycle</a> for power generation using natural gas. Steam is extracted from the <a href=\"modelica://ThermalPower.Experiments.SubComponents.HRSG\">HRSG</a> to feed the reboiler duty of the carbon capture.</p>
<h4>Output</h4>
<p>The model diagram contains a dynamic TQ-diagram from the package <a href=\"modelica://ThermalPower.Visualizers\">ThermalPower.Visualizers</a>. 
The diagram illustrates the pinch between the gas and the steam side throughout the HRSG component by showing water/steam and gas temperatures versus the accumulated heat transfer from gas inlet to gas outlet.</p>
<h4>Scenario</h4>
<p>The scenario includes steady state operation at 80% of the nominal load, a positive load change of 20%, steady state operation at nominal load and a negative load change back to the partial load operation point at 80%. </p>
<h4>Acknowledgements</h4>
<p>This model was originally developed by Rub&eacute;n Mochol&iacute; Monta&ntilde;&eacute;s during his Ph.D. studies (2014-2017) at
EPT-NTNU. His contributions to the library are greatly appreciated. See the publication below for further documentation.</p>

<h4>References</h4>
<p><b>Monta&ntilde;&eacute;s R.M. et al. </b>&QUOT;Demonstrating load-change transient performance of a commercial
scale natural gas combined cycle power plant with Post combustion CO<sub>2</sub> capture&QUOT; <i>International Journal
of Greenhouse Gas Control Technologies. vol. 63. August 2017 pp. 158-174.</i></p>
</html>

",                revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"),  __Dymola_experimentFlags(
              Advanced(GenerateVariableDependencies=false, OutputModelicaCode=false),
              Evaluate=false,
              OutputCPUtime=true,
              OutputFlatModelica=false));
        end Plant;

        model CompressorBetaTable
          "Table based compressor example using beta parameterization"
          extends Modelon.Icons.Experiment;

          Modelon.ThermoFluid.Compressors.DynamicCompressor
                                                     compressor(
            w_start=3000,
            T_start=303.15,
            redeclare model CharMap =
              Modelon.ThermoFluid.Compressors.Characteristics.Dynamic.TableBetaParameters
                (
                normalizedCorrection=true,
                flowMap=[0,1,2,3,4,5; 2850,481.5,494.1,510.39,522.98,531.76;
                    3000,540.59,550.62,568.23,579.57,585.84; 3150,279.34,602.25,
                    608.22,614.78,619.56],
                effMap=[0,1,2,3,4,5; 2850,0.8995,0.9158,0.9071,0.8995,0.8668; 3000,
                    0.8831,0.9038,0.8962,0.8853,0.8504; 3150,0.1075,0.894,0.8886,
                    0.8613,0.8341],
                betaMap=[0,15,16,17,18,19,20,21,22,23,24,25,26,27,28;
                    2850,4.69836,4.11321,3.48431,2.78135,1.59595,0,0,0,0,0,0,0,0,0;
                    3000,6.08184,5.75187,5.42582,5.10173,4.78051,4.39454,3.71205,
                    2.71193,0.76744,0,0,0,0,0; 3150,6.93924,6.58985,6.24944,
                    5.90143,5.56033,5.21163,4.86649,4.50015,4.04419,3.43754,
                    2.80572,2.15232,1.30649,0.01761],
                p_ref=101325,
                T_ref=288.15, betaMin=1,betaMax=4.5),
            redeclare package Medium =
                Modelon.Media.PreDefined.IdealGases.NasaAirMixture)
            annotation (Placement(transformation(extent={{-12,-20},{8,0}})));

          Modelon.ThermoFluid.Sources.PressureBoundary pressureBoundary(
            N=1,
            use_p_in=false,
            p=101325,
            T=288.15,
            redeclare package Medium =
                Modelon.Media.PreDefined.IdealGases.NasaAirMixture)
            annotation (Placement(transformation(extent={{-50,-20},{-30,0}})));
          Modelon.ThermoFluid.Sources.PressureBoundary pressureBoundary1(
            N=1,
            use_p_in=true,
            p=2026000,
            T=722.737,
            redeclare package Medium =
                Modelon.Media.PreDefined.IdealGases.NasaAirMixture)
                      annotation (Placement(transformation(extent={{46,-20},{26,0}})));
          Modelica.Mechanics.Rotational.Sources.Speed speed annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-2,18})));
          Modelica.Blocks.Sources.Constant const(k=100*3.141593)
            annotation (Placement(transformation(extent={{-46,32},{-26,52}})));
          Modelica.Blocks.Sources.Constant const1(k=2020000)
                                                       annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={66,24})));
        equation
          connect(pressureBoundary.fluidPort[1], compressor.portA) annotation (Line(
              points={{-31,-10},{-12,-10}},
              color={255,128,0},
              smooth=Smooth.None));
          connect(compressor.portB, pressureBoundary1.fluidPort[1]) annotation (Line(
              points={{8,-10},{27,-10}},
              color={255,128,0},
              smooth=Smooth.None));
          connect(speed.flange, compressor.flange) annotation (Line(
              points={{-2,8},{-2,-3}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(const1.y, pressureBoundary1.p_in)
            annotation (Line(points={{55,24},{42,24},{42,0}}, color={0,0,127}));
          connect(const.y, speed.w_ref)
            annotation (Line(points={{-25,42},{-2,42},{-2,30}}, color={0,0,127}));
          annotation (
            experiment(StopTime=10),
            Documentation(info="<html>
<p><h4>Purpose</h4></p>
<p>Test the compressor model using the characteristic with beta parameterization.</p>
<p><h4>Test criteria</h4></p>
<p>Simulates for 10 seconds with trajectories generated for the plot variables specified below.</p>
<p><h4>Details</h4></p>
<p>Compare trajectories for the variables:</p>
<p><ul>
<li>compressor.summary.m_flow</li>
<li>compressor.summary.shaftTorque</li>
</ul></p>
</html>"));
        end CompressorBetaTable;

        model TryMe
          parameter Real tableBeta[:, :]=fill(
                0,
                0,
                2) "Table for eta(N_T,beta)";
          parameter String fileName="noName" "File where matrix is stored";
          Modelica.Blocks.Tables.CombiTable2Ds Beta(
            tableOnFile=false,
            table=tableBeta,
            tableName="NoName",
            smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative)
            annotation (Placement(transformation(extent={{-8,-8},{12,12}},rotation=0)));
          Modelica.Blocks.Interfaces.RealInput N_T
            annotation (Placement(transformation(extent={{-120,30},{-80,70}})));
          Modelica.Blocks.Interfaces.RealInput beta
            annotation (Placement(transformation(extent={{-120,-70},{-80,-30}})));
          Modelica.Blocks.Interfaces.RealOutput PR
            annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        equation
          // PR = PressRatio(beta, N_T)
          //beta = Beta.u1;
          Beta.u2 =beta;
          Beta.u1 = N_T;
          PR = Beta.y;
          //Beta.y = PR;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end TryMe;

        model TestMe
          // betaMap=[0,1,2,3,4,5; 2850,19.243,18.732,17.71,16.178,14.475;
                   // 3000,22.99,22.649,21.712,20.691,18.306; 3150,27.247,26.225,
                  //  24.692,23.075,20.605]
          parameter Real tablePR[4, 6]=[0,1,2,3,4,5; 2850,19.243,18.732,17.71,
                    16.178,14.475; 3000,22.99,22.649,21.712,20.691,18.306; 3150,
                    27.247,26.225,24.692,23.075,20.605];
          TryMe tryMe(tableBeta=tablePR) annotation (Placement(transformation(extent={{-12,-8},{8,12}})));
          Modelica.Blocks.Sources.Constant const(k=2850)
            annotation (Placement(transformation(extent={{-68,14},{-48,34}})));
          Modelica.Blocks.Sources.Ramp ramp(
            height=14,
            duration=14,
            offset=14,
            startTime=2)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=180,
                origin={48,-34})));
          Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints
            annotation (Placement(transformation(
                extent={{-20,-12},{20,12}},
                rotation=180,
                origin={-2,-34})));
        equation
          connect(const.y, tryMe.N_T) annotation (Line(points={{-47,24},{-34,24},{-34,7},
                  {-12,7}}, color={0,0,127}));
          connect(inverseBlockConstraints.y1, tryMe.beta) annotation (Line(points={{-23,
                  -34},{-34,-34},{-34,-3},{-12,-3}}, color={0,0,127}));
          connect(inverseBlockConstraints.u1, ramp.y)
            annotation (Line(points={{20,-34},{37,-34}}, color={0,0,127}));
          connect(inverseBlockConstraints.u2, tryMe.PR) annotation (Line(points={{14,-34},
                  {2,-34},{2,-12},{26,-12},{26,2},{8,2}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            experiment(
              StopTime=18,
              __Dymola_NumberOfIntervals=1000,
              __Dymola_Algorithm="Dassl"));
        end TestMe;
      end PlantE;
    end Gas;

    package Steam
      package PlantA
        extends Modelica.Icons.Package;

        model Plant
          import ThermoPower;
          replaceable package FlueGas = ThermoPower.Media.FlueGas constrainedby
            Modelica.Media.Interfaces.PartialMedium "Flue gas model";
          replaceable package Water = ThermoPower.Water.StandardWater
            constrainedby Modelica.Media.Interfaces.PartialPureSubstance
            "Fluid model";
          Modelica.Blocks.Continuous.FirstOrder powerSensor(
            k=1,
            T=1,
            y_start=56.8e6,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{24,30},{44,50}},    rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput generatedPower annotation (
              Placement(transformation(extent={{90,-10},{110,10}},  rotation=0),
                iconTransformation(extent={{92,-10},{112,10}})));
          Modelica.Blocks.Interfaces.RealInput gasFlowRate annotation (Placement(
                transformation(extent={{-110,50},{-90,70}},   rotation=0),
                iconTransformation(extent={{-110,50},{-90,70}})));
          Modelica.Blocks.Interfaces.RealInput gasTemperature annotation (Placement(
                transformation(extent={{-110,-10},{-90,10}},  rotation=0),
                iconTransformation(extent={{-110,-10},{-90,10}})));
          Modelica.Blocks.Interfaces.RealInput nPump annotation (Placement(
                transformation(extent={{-110,-70},{-90,-50}},   rotation=0),
                iconTransformation(extent={{-108,-70},{-88,-50}})));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
            annotation (Placement(transformation(extent={{-8,14},{20,-14}},
                  rotation=0)));
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
              w_fixed=157, phi(start=0, fixed=true))
            annotation (Placement(transformation(extent={{52,-10},{32,10}})));
          SteamTurbineA steamTurbineA
            annotation (Placement(transformation(extent={{-48,-14},{-18,14}})));
          Modelica.Blocks.Interfaces.RealOutput voidFraction
            "Connector of Real output signal"
            annotation (Placement(transformation(extent={{90,-70},{110,-50}})));
        equation
          connect(generatedPower, powerSensor.y)
            annotation (Line(points={{100,0},{60,0},{60,40},{45,40}},
                                                           color={0,0,127}));

          connect(constantSpeed.flange, powerSensor1.flange_b)
            annotation (Line(points={{32,0},{20,-1.77636e-15}},
                                                         color={0,0,0}));
          connect(steamTurbineA.gasFlowRate, gasFlowRate) annotation (Line(
                points={{-47.7,8.4},{-80,8.4},{-80,60},{-100,60}}, color={0,0,
                  127}));
          connect(steamTurbineA.gasTemperature, gasTemperature) annotation (
              Line(points={{-47.7,1.77636e-15},{-84,1.77636e-15},{-84,0},{-100,
                  0}}, color={0,0,127}));
          connect(steamTurbineA.nPump, nPump) annotation (Line(points={{-47.7,
                  -8.4},{-80,-8.4},{-80,-60},{-100,-60}}, color={0,0,127}));
          connect(powerSensor1.power, powerSensor.u) annotation (Line(points={{
                  -5.2,15.4},{-5.2,40},{22,40}}, color={0,0,127}));
          connect(powerSensor1.flange_a, steamTurbineA.primeMoverFlange)
            annotation (Line(points={{-8,-1.77636e-15},{-18,1.77636e-15}},
                color={0,0,0}));
          connect(steamTurbineA.voidFraction, voidFraction) annotation (Line(
                points={{-18,-9.8},{-12,-9.8},{-12,-60},{100,-60}}, color={0,0,
                  127}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1)),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1), graphics={Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-88,84},{100,-96}},
                  lineColor={0,0,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
This is a simple model of a steam plant.
</html>"));
        end Plant;

        model SteamTurbineA "ThermoPower based 1P Steam Turbine"
          extends Icons.SteamTurbineIcon;
          replaceable package FlueGas = ThermoPower.Media.FlueGas constrainedby
            Modelica.Media.Interfaces.PartialMedium "Flue gas model";
          replaceable package Water = ThermoPower.Water.StandardWater
            constrainedby Modelica.Media.Interfaces.PartialPureSubstance
            "Fluid model";

          Modelica.Mechanics.Rotational.Interfaces.Flange_b primeMoverFlange
            "Flange of shaft"
            annotation (Placement(transformation(extent={{290,-10},{310,10}}),
              iconTransformation(extent={{90,-10},{110,10}})));
          ThermoPower.Examples.RankineCycle.Models.PrescribedPressureCondenser condenser(
            p=5390,
            redeclare package Medium = Water,
            initOpt=ThermoPower.Choices.Init.Options.fixedState)
                                                        annotation (Placement(
                transformation(extent={{100,-100},{140,-60}}, rotation=0)));
          ThermoPower.Examples.RankineCycle.Models.PrescribedSpeedPump prescribedSpeedPump(
            n0=1500,
            nominalMassFlowRate=55,
            q_nom={0,0.055,0.1},
            redeclare package FluidMedium = Water,
            head_nom={450,300,0},
            rho0=1000,
            nominalOutletPressure=3000000,
            nominalInletPressure=50000) annotation (Placement(transformation(extent={{40,-180},
                    {0,-140}},           rotation=0)));
          Modelica.Blocks.Continuous.FirstOrder temperatureActuator(
            k=1,
            y_start=750,
            T=4,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{-280,90},{-260,110}}, rotation=0)));
          Modelica.Blocks.Continuous.FirstOrder powerSensor(
            k=1,
            T=1,
            y_start=56.8e6,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{202,110},{222,130}},rotation=0)));
          Modelica.Blocks.Continuous.FirstOrder gasFlowActuator(
            k=1,
            T=4,
            y_start=500,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{-280,-10},{-260,10}}, rotation=0)));
          Modelica.Blocks.Continuous.FirstOrder nPumpActuator(
            k=1,
            initType=Modelica.Blocks.Types.Init.SteadyState,
            T=2,
            y_start=1500) annotation (Placement(transformation(extent={{-280,-110},{-260,
                    -90}},       rotation=0)));
          Modelica.Blocks.Continuous.FirstOrder voidFractionSensor(
            k=1,
            T=1,
            initType=Modelica.Blocks.Types.Init.SteadyState,
            y_start=0.2) annotation (Placement(transformation(extent={{234,-110},{254,-90}},
                               rotation=0)));
          ThermoPower.Water.SteamTurbineStodola steamTurbine(
            wstart=55,
            wnom=55,
            Kt=0.0104,
            redeclare package Medium = Water,
            PRstart=30,
            pnom=3000000) annotation (Placement(transformation(extent={{50,30},{100,80}},
                          rotation=0)));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
            annotation (Placement(transformation(extent={{138,68},{166,40}},
                  rotation=0)));
          ThermoPower.Examples.RankineCycle.Models.HE economizer(
            redeclare package FluidMedium = Water,
            redeclare package FlueGasMedium = FlueGas,
            N_F=6,
            exchSurface_G=40095.9,
            exchSurface_F=3439.389,
            extSurfaceTub=3888.449,
            gasVol=10,
            fluidVol=28.977,
            metalVol=8.061,
            rhomcm=7900*578.05,
            lambda=20,
            gasNomFlowRate=500,
            fluidNomFlowRate=55,
            gamma_G=30,
            gamma_F=3000,
            rhonom_G=1,
            Kfnom_F=150,
            FFtype_G=ThermoPower.Choices.Flow1D.FFtypes.OpPoint,
            FFtype_F=ThermoPower.Choices.Flow1D.FFtypes.Kfnom,
            N_G=6,
            gasNomPressure=101325,
            fluidNomPressure=3000000,
            Tstart_G=473.15,
            Tstart_M=423.15,
            dpnom_G=1000,
            dpnom_F=20000) annotation (Placement(transformation(extent={{-120,-80},{-80,
                    -120}},      rotation=0)));
          ThermoPower.Examples.HRB.Models.Evaporator evaporator(
            redeclare package FluidMedium = Water,
            redeclare package FlueGasMedium = FlueGas,
            gasVol=10,
            fluidVol=12.400,
            metalVol=4.801,
            gasNomFlowRate=500,
            fluidNomFlowRate=55,
            N=4,
            rhom=7900,
            cm=578.05,
            gamma=85,
            exchSurface=24402,
            gasNomPressure=101325,
            fluidNomPressure=3000000,
            Tstart=623.15,
            FFtype_G=ThermoPower.Choices.Flow1D.FFtypes.OpPoint,
            dpnom_G=1000,
            rhonom_G=1) annotation (Placement(transformation(extent={{-120,0},{-80,-40}},
                           rotation=0)));
          ThermoPower.Examples.RankineCycle.Models.HE superheater(
            redeclare package FluidMedium = Water,
            redeclare package FlueGasMedium = FlueGas,
            N_F=7,
            exchSurface_G=2314.8,
            exchSurface_F=450.218,
            extSurfaceTub=504.652,
            gasVol=10,
            fluidVol=4.468,
            metalVol=1.146,
            rhomcm=7900*578.05,
            lambda=20,
            gasNomFlowRate=500,
            gamma_G=90,
            gamma_F=6000,
            fluidNomFlowRate=55,
            rhonom_G=1,
            Kfnom_F=150,
            FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
            FFtype_G=ThermoPower.Choices.Flow1D.FFtypes.OpPoint,
            FFtype_F=ThermoPower.Choices.Flow1D.FFtypes.Kfnom,
            N_G=7,
            gasNomPressure=101325,
            fluidNomPressure=3000000,
            Tstart_G=723.15,
            Tstart_M=573.15,
            dpnom_G=1000,
            dpnom_F=20000) annotation (Placement(transformation(extent={{-120,80},{-80,40}},
                              rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateGasInlet(
              redeclare package Medium = FlueGas) annotation (Placement(
                transformation(extent={{-150,50},{-130,70}}, rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas
            stateGasInletEvaporator(redeclare package Medium = FlueGas) annotation (
             Placement(transformation(extent={{-150,-30},{-130,-10}}, rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas
            stateGasInletEconomizer(redeclare package Medium = FlueGas) annotation (
             Placement(transformation(extent={{-150,-110},{-130,-90}}, rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_gas stateGasOutlet(
              redeclare package Medium = FlueGas) annotation (Placement(
                transformation(extent={{-70,-110},{-50,-90}}, rotation=0)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_water
            stateWaterSuperheater_in(redeclare package Medium = Water) annotation (
              Placement(transformation(
                origin={-100,20},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_water
            stateWaterSuperheater_out(redeclare package Medium = Water) annotation (
             Placement(transformation(
                origin={-100,102},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_water
            stateWaterEvaporator_in(redeclare package Medium = Water) annotation (
              Placement(transformation(
                origin={-100,-60},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          ThermoPower.PowerPlants.HRSG.Components.StateReader_water
            stateWaterEconomizer_in(redeclare package Medium = Water) annotation (
              Placement(transformation(
                origin={-100,-140},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          ThermoPower.Gas.SourceMassFlow sourceW_gas(
            w0=500,
            redeclare package Medium = FlueGas,
            T=750,
            use_in_w0=true,
            use_in_T=true) annotation (Placement(
                transformation(extent={{-200,50},{-180,70}}, rotation=0)));
          ThermoPower.Gas.SinkPressure sinkP_gas(T=400, redeclare package Medium =
                FlueGas)
            annotation (Placement(transformation(extent={{-40,-110},{-20,-90}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealInput gasFlowRate annotation (Placement(
                transformation(extent={{-310,-10},{-290,10}}, rotation=0),
                iconTransformation(extent={{-108,50},{-88,70}})));
          Modelica.Blocks.Interfaces.RealInput gasTemperature annotation (Placement(
                transformation(extent={{-310,90},{-290,110}}, rotation=0),
                iconTransformation(extent={{-108,-10},{-88,10}})));
          Modelica.Blocks.Interfaces.RealInput nPump annotation (Placement(
                transformation(extent={{-310,-110},{-290,-90}}, rotation=0),
                iconTransformation(extent={{-108,-70},{-88,-50}})));
          inner ThermoPower.System system(allowFlowReversal=false, initOpt=ThermoPower.Choices.Init.Options.steadyState)
            annotation (Placement(transformation(extent={{240,160},{260,180}})));
          Modelica.Blocks.Interfaces.RealOutput voidFraction
            "Connector of Real output signal"
            annotation (Placement(transformation(extent={{294,-110},{314,-90}}),
              iconTransformation(extent={{90,-80},{110,-60}})));
        equation
          connect(prescribedSpeedPump.inlet,condenser. waterOut) annotation (Line(
              points={{40,-160},{120,-160},{120,-100}},
              thickness=0.5,
              color={0,0,255}));
          connect(gasFlowActuator.u,gasFlowRate)
            annotation (Line(points={{-282,0},{-300,0}}, color={0,0,127}));
          connect(temperatureActuator.u,gasTemperature)
            annotation (Line(points={{-282,100},{-300,100}}, color={0,0,127}));
          connect(nPumpActuator.u,nPump)
            annotation (Line(points={{-282,-100},{-300,-100}}, color={0,0,127}));
          connect(powerSensor1.flange_a,steamTurbine. shaft_b) annotation (Line(
              points={{138,54},{91,54},{91,55}},
              color={0,0,0},
              thickness=0.5));
          connect(stateGasInlet.inlet,sourceW_gas. flange) annotation (Line(
              points={{-146,60},{-180,60}},
              color={159,159,223},
              thickness=0.5));
          connect(condenser.steamIn,steamTurbine. outlet) annotation (Line(
              points={{120,-60},{120,75},{95,75}},
              thickness=0.5,
              color={0,0,255}));
          connect(prescribedSpeedPump.outlet,stateWaterEconomizer_in. inlet)
            annotation (Line(
              points={{0,-160},{-100,-160},{-100,-146}},
              thickness=0.5,
              color={0,0,255}));
          connect(stateWaterEconomizer_in.outlet,economizer. waterIn)
            annotation (Line(points={{-100,-134},{-100,-120}}, thickness=0.5));
          connect(economizer.waterOut,stateWaterEvaporator_in. inlet) annotation (
              Line(
              points={{-100,-80},{-100,-66}},
              thickness=0.5,
              color={0,0,255}));
          connect(stateWaterEvaporator_in.outlet,evaporator. waterIn) annotation (
              Line(
              points={{-100,-54},{-100,-40}},
              thickness=0.5,
              color={0,0,255}));
          connect(economizer.gasIn,stateGasInletEconomizer. outlet) annotation (
              Line(
              points={{-120,-100},{-134,-100}},
              color={159,159,223},
              thickness=0.5));
          connect(stateGasInletEconomizer.inlet,evaporator. gasOut) annotation (
              Line(
              points={{-146,-100},{-160,-100},{-160,-50},{-40,-50},{-40,-20},{-80,-20}},
              color={159,159,223},
              thickness=0.5));
          connect(sinkP_gas.flange,stateGasOutlet. outlet) annotation (Line(
              points={{-40,-100},{-54,-100}},
              color={159,159,223},
              thickness=0.5));
          connect(stateGasOutlet.inlet,economizer. gasOut) annotation (Line(
              points={{-66,-100},{-80,-100}},
              color={159,159,223},
              thickness=0.5));
          connect(evaporator.gasIn,stateGasInletEvaporator. outlet) annotation (
              Line(
              points={{-120,-20},{-134,-20}},
              color={159,159,223},
              thickness=0.5));
          connect(stateGasInletEvaporator.inlet,superheater. gasOut) annotation (
              Line(
              points={{-146,-20},{-160,-20},{-160,30},{-40,30},{-40,60},{-80,60}},
              color={159,159,223},
              thickness=0.5));
          connect(evaporator.waterOut,stateWaterSuperheater_in. inlet) annotation (
              Line(
              points={{-100,0},{-100,14}},
              thickness=0.5,
              color={0,0,255}));
          connect(stateWaterSuperheater_in.outlet,superheater. waterIn) annotation (
             Line(
              points={{-100,26},{-100,40}},
              thickness=0.5,
              color={0,0,255}));
          connect(superheater.waterOut,stateWaterSuperheater_out. inlet)
            annotation (Line(
              points={{-100,80},{-100,96}},
              thickness=0.5,
              color={0,0,255}));
          connect(stateWaterSuperheater_out.outlet,steamTurbine. inlet) annotation (
             Line(
              points={{-100,108},{-100,120},{55,120},{55,75}},
              thickness=0.5,
              color={0,0,255}));
          connect(superheater.gasIn,stateGasInlet. outlet) annotation (Line(
              points={{-120,60},{-134,60}},
              color={159,159,223},
              thickness=0.5));
          connect(powerSensor.u,powerSensor1. power) annotation (Line(points={{200,120},
                  {140.8,120},{140.8,69.4}},color={0,0,127}));
          connect(voidFractionSensor.u,evaporator. voidFraction) annotation (Line(
                points={{232,-100},{200,-100},{200,-32},{-78.8,-32}}, color={0,0,
                  127}));
          connect(gasFlowActuator.y,sourceW_gas. in_w0) annotation (Line(points={{-259,0},
                  {-220,0},{-220,80},{-196,80},{-196,65}},    color={0,0,127}));
          connect(temperatureActuator.y,sourceW_gas. in_T) annotation (Line(points={{-259,
                  100},{-190,100},{-190,65}},        color={0,0,127}));
          connect(nPumpActuator.y,prescribedSpeedPump. nPump) annotation (Line(
                points={{-259,-100},{-220,-100},{-220,-190},{80,-190},{80,-148},{34.4,-148}},
                               color={0,0,127}));
          connect(powerSensor1.flange_b, primeMoverFlange) annotation (Line(points={{166,
                  54},{202,54},{202,-2},{300,-2},{300,0}}, color={0,0,0}));
          connect(voidFractionSensor.y, voidFraction)
            annotation (Line(points={{255,-100},{304,-100}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}})),                Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-300,-200},{300,200}},
                initialScale=0.1)));
        end SteamTurbineA;
      end PlantA;

      package PlantB "Steam System designed by Shah"

        package Components
          model SteamTurbineStodola "Steam turbine using Stodola's law"
            extends
              ThermalPower.TwoPhase.TurboMachinery.Turbines.Templates.TurbineBase(
              feed(m_flow(start=m_flow_nom, min=Modelica.Constants.eps)),
              drain(m_flow(start=-m_flow_nom, max=-Modelica.Constants.eps)),
              summary(x=x),
              pstartin=p1_nom,
              pstart=p2_nom,
              hstartin=h1_nom,
              hstartout=hstartin- eta_is_nom*(hstartin - Medium.isentropicEnthalpy(pstart, Medium.setState_phX(
              pstartin,
              hstartin,
              Medium.reference_X))));
            parameter Real eta_is_nom=0.92 "Nominal isentropic efficiency"
              annotation (Dialog(group="Efficiency"));
            parameter Boolean useNominalPoint=true "Calculate flow coefficient"
              annotation (
              Dialog(tab="General", group="Flow characteristic"),
              Evaluate=true,
              choices(choice=true "from nominal", choice=false "provide value"));
            parameter Modelica.Units.SI.Area Kt=0.003 "Flow area coefficient, see info"
              annotation (Dialog(
                tab="General",
                group="Flow characteristic",
                enable=not useNominalPoint));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom "Nominal inlet flowrate"
              annotation (Dialog(
                tab="General",
                group="Flow characteristic",
                enable=useNominalPoint));
            parameter Boolean use_T_nom=true "If true use T_nom else d_nom" annotation (
                Evaluate,Dialog(
                tab="General",
                group="Flow characteristic",
                enable=useNominalPoint));
            parameter Modelica.Units.SI.Temperature T_nom=Medium.temperature(
                Medium.setState_phX(
                p1_nom,
                h1_nom,
                Medium.reference_X)) "Nominal inlet temperature" annotation (Dialog(
                tab="General",
                group="Flow characteristic",
                enable=useNominalPoint and use_T_nom));
            parameter Modelica.Units.SI.SpecificEnthalpy h1_nom=3.47e6 "Nominal inlet specific enthalpy"
              annotation (Dialog(tab="General", group="Flow characteristic"));

            parameter ThermalPower.Units.Density d_nom=if use_T_nom then Medium.density_pTX(
                  p1_nom,
                  T_nom,
                  Medium.reference_X) else Medium.density_phX(
                p1_nom,
                h1_nom,
                Medium.reference_X) "Nominal inlet density" annotation (Dialog(
                tab="General",
                group="Flow characteristic",
                enable=useNominalPoint and not use_T_nom));

            parameter Modelica.Units.SI.AbsolutePressure p1_nom "Nominal inlet pressure"
              annotation (Dialog(
                tab="General",
                group="Flow characteristic",
                enable=useNominalPoint));
            parameter Modelica.Units.SI.AbsolutePressure p2_nom "Nominal outlet pressure"
              annotation (Dialog(
                tab="General",
                group="Flow characteristic",
                enable=useNominalPoint));
            parameter Boolean use_Bauman=false
              "Efficiency degradation using Baumann's formula"
              annotation (Evaluate, Dialog(group="Efficiency"));
            parameter Real alpha_Bauman=0.8 "Bauman coefficient"
              annotation (Dialog(enable=use_Bauman, group="Efficiency"));
            constant Modelica.Units.SI.AbsolutePressure pcrit=Medium.criticalPressure;

            Modelon.Media.Units.AbsolutePressure p_sat=drain.p "Saturation pressure";

            Modelon.Media.Units.SpecificEnthalpy hl=Medium.bubbleEnthalpy_pX(p_sat)
              "Liquid specific enthalpy";
            Modelon.Media.Units.SpecificEnthalpy hv=Medium.dewEnthalpy_pX(p_sat)
              "Vapor specific enthalpy";
            Real x "Vapour mass fraction";
            final parameter Modelica.Units.SI.Area Kt_internal(fixed=false)
              "Flow area coefficient";
          initial equation
            assert(m_flow_nom > 0,"parameter m_flow_nom must have a positive value");
            assert(d_nom > 0,"parameter d_nom must have a positive value");
            assert(p1_nom-p2_nom > 0,"parameter p2_nom must be smaller than p1_nom");
            if useNominalPoint then
                Kt_internal = m_flow_nom/(sqrt(p1_nom*d_nom)*
                  Modelon.Math.Smoothing.regRoot2(1 - (p2_nom/
                  p1_nom)^2));
            else
               Kt_internal=Kt;
            end if;
          equation
            x = noEvent(if drain.p/pcrit < 1.0 then max(0.0, min(1.0, (h_out - hl)/max(hv
               - hl, 1e-6))) else 1.0) "Steam inflow quality";

            m_flow = F_user*Kt_internal*partialArc*sqrt(feed.p*Medium.density(state))*
              Modelon.Math.Smoothing.regRoot2(1 - p_ratio^2)
              "Stodola's law";
            if use_Bauman then
              eta_is = eta_is_nom*(1 - alpha_Bauman*(1 - x));
            else
              eta_is = eta_is_nom "Constant efficiency";
            end if;
            annotation (Documentation(info="<html>
<h4>Description</h4>
<p>Steam turbine based on Stodola&apos;s cone law (law of the ellipse) and with an optional efficiency degradation using Baumann&apos;s formula.</p>
<p>The inlet flowrate can be controlled using the <code>partialArc</code> signal if the corresponding connector is wired. In this case, it is assumed that the flow rate is reduced by partial arc admission, not by throttling (i.e. no loss of thermodynamic efficiency occurs). To simulate throttling, insert a valve model before the turbine inlet. </p>
<h4>Parametrization</h4>
<p>Parameter <code>useNominalPoint</code> decides if the flow area coefficient is given as a parameter <code>Kt</code> or calculated from nominal values at an operating point. The flow area coefficient Kt, defined at design conditions by Kt = m_flow*sqrt(R*T)/sqrt(p1^2 - p2^2), can be interpreted as effective turbine flow area. </p>
<h5>Isentropic efficiency</h5>
<p>By default is the isentropic efficiency a parmeter equal to<code> eta_is_nom</code>. But if <code>use_Bauman</code> is true the efficiency is degraded if the fluid enters the two-phase region according to Baumans formula: <code>eta_is&nbsp;=&nbsp;eta_is_nom*(1&nbsp;-&nbsp;alpha_Bauman*(1&nbsp;-&nbsp;x)), </code>where<code> alpha_Bauman</code> is a parameter and <code>x</code> is the inlet steam quality.</p>
<h4>Assumptions</h4>
<ul>
<li>Stodola&apos;s law (infinite number of stages) </li>
<li>Constant isentropic efficiency with an optional efficiency degradation using Baumann&apos;s formula </li>
<li>No energy or mass storage</li>
<li>No shaft inertia. If needed, connect a <a href=\"modelica://Modelica.Mechanics.Rotational.Components.Inertia\">Modelica.Mechanics.Rotational.Components.Inertia</a> model to one of the shaft connectors. </li>
</ul>
<h4>References</h4>
<dl><dt>Cooke, D. H.:</dt>
<p style=\"margin-left: 30px;\"><b>On Prediction of Off-Design Multistage Turbine Pressures by Stodola&apos;s Ellipse</b></p>
<p style=\"margin-left: 30px;\"> J. Eng. Gas Turbines Power, Volume 107, Issue 3, pp. 596, 1985.</p>
<dl><dt>Bolland, O.:</dt>
<p style=\"margin-left: 30px;\"><b>Thermal power generation</b></p>
<p style=\"margin-left: 30px;\">pp. 119, 2008.</p>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
          end SteamTurbineStodola;

          model Condenser "Water-cooled surface condenser, two-phase equilibrium"
            extends
              ThermalPower.SubComponents.Internal.Icons.Water.CondenserHorizontal(
              viz_level=y,
              viz_level_min=y_min,
              viz_level_max=y_max);
            import Modelica.Constants.pi;
            replaceable package Medium =
                Modelon.Media.PreDefined.TwoPhase.WaterIF97 constrainedby
              Modelon.Media.Interfaces.TwoPhaseMedium "Medium model"
                             annotation (choicesAllMatching);
            replaceable package CoolMedium =
                Modelon.Media.PreDefined.TwoPhase.WaterIF97                              constrainedby
              Modelon.Media.Interfaces.TwoPhaseMedium "Cooling medium"
                               annotation (choicesAllMatching);
            Medium.ThermodynamicState fluid;
            CoolMedium.ThermodynamicState state_coolingwater(h(start=
                    CoolMedium.specificEnthalpy(CoolMedium.setState_pTX(
                    2e5,
                    Tmstart - 5,
                    CoolMedium.fixedComposition))));

            constant Modelica.Units.SI.AbsolutePressure pcrit=Medium.criticalPressure;
            parameter Integer DrumOrientation=0 "0: Horizontal; 1: Vertical"
              annotation (Dialog(tab="General", group="Geometry"));
            parameter Modelica.Units.SI.Length diameter=1 "Shell cylinder diameter"
              annotation (Dialog(tab="General", group="Geometry"));
            parameter Modelica.Units.SI.Length length=5
              "Shell cylinder length (along tubes)"
              annotation (Dialog(tab="General", group="Geometry"));

            parameter Integer N_tubes=1000 "Total number of parallel tubes"
              annotation (Dialog(tab="General", group="Geometry - cooling tubes"));
            parameter Modelica.Units.SI.Length tubelength=length
              "Effective tubelength (single tube)"
              annotation (Dialog(tab="General", group="Geometry - cooling tubes"));
            parameter Modelica.Units.SI.Length d_inner=0.016
              "Inner diameter (single tube)"
              annotation (Dialog(tab="General", group="Geometry - cooling tubes"));
            parameter Modelica.Units.SI.Length d_outer=0.020
              "Outer diameter (single tube)"
              annotation (Dialog(tab="General", group="Geometry - cooling tubes"));
            parameter Modelica.Units.SI.Volume V_hotwell=1.0 "Hotwell liquid volume"
              annotation (Dialog(tab="General", group="Geometry"));
            parameter Modelica.Units.SI.Area A_hotwell=1.0 "Hotwell surface area"
              annotation (Dialog(tab="General", group="Geometry"));
            parameter ThermalPower.SubComponents.Internal.Choices.ThermoStates states=ThermalPower.SubComponents.Internal.Choices.ThermoStates.ph
              "State selection"  annotation(Evaluate,Dialog(tab="Advanced",group="State selection"));
          final parameter Modelica.Units.SI.Area Aheat_inner=N_tubes*pi*tubelength*
                d_inner "Inner heat transfer area (total)";
            final parameter Modelica.Units.SI.Area Aheat_outer=N_tubes*pi*tubelength*
                d_outer "Inner heat transfer area (total)";
            final parameter Modelica.Units.SI.Area Afreeflow=tubelength*(diameter -
                d_outer*sqrt(N_tubes)) "Outer free flow area";
            parameter Modelica.Units.SI.AbsolutePressure pstart=1e5
              "Pressure start value" annotation (Dialog(tab="Initialization"));
            parameter Modelica.Units.SI.SpecificEnthalpy hstart=Medium.bubbleEnthalpy_pX(
                pstart) "Enthalpy start value" annotation (Dialog(tab="Initialization"));
            parameter Modelica.Units.SI.Temperature Tmstart=300
              "Tube wall temperature start value"
              annotation (Dialog(tab="Initialization"));
            parameter Modelica.Units.SI.Length ystart=0.1 "Level start value"
              annotation (Dialog(tab="Initialization"));
            parameter Real[Medium.nC] Cstart=fill(0,Medium.nC)
              "Trace component concentration start value" annotation (Dialog(tab="Initialization"));
            parameter Modelon.ThermoFluid.Choices.InitOptions initOpt=
                Modelon.ThermoFluid.Choices.InitOptions.initialValues
              "Initialization option" annotation (Dialog(tab="Initialization"));
            replaceable model WallMaterial =
                ThermalPower.Thermal.MetalProperties.SimpleSteelV2A constrainedby
              ThermalPower.Thermal.MetalProperties.PartialMaterial annotation (Dialog(
                  group="Pipe material"), choicesAllMatching=true);

             Modelon.Media.Units.AbsolutePressure p(start=pstart, stateSelect=(if states==ThermalPower.SubComponents.Internal.Choices.ThermoStates.ph then StateSelect.prefer else StateSelect.default))
              "Fluid pressure";
             Modelica.Units.SI.SpecificEnthalpy h(
              start=hstart,
              min=Medium.limits.HMIN,
              stateSelect=(if states == ThermalPower.SubComponents.Internal.Choices.ThermoStates.ph
                   then StateSelect.prefer else StateSelect.default))
              "Fluid specific enthalpy";

          //   Modelon.Media.Units.AbsolutePressure p(start=pstart) "Fluid pressure";
          //   SpecificEnthalpy h(start=hstart) "Fluid specific enthalpy";

            Modelica.Units.SI.Temperature T[1] "Saturated water temperature";
            Modelica.Units.SI.Length y(start=ystart)
              "Level (relative to the condenser bottom outlet)";
            final parameter Modelica.Units.SI.Length y_max=if DrumOrientation == 0 then
                diameter else length
              "Maximum possible level (relative to the condenser bottom outlet)";
            final parameter Modelica.Units.SI.Length y_min=min(-V_hotwell/A_hotwell, -1e-5)
              "Minimum possible Level (relative to the condenser bottom outlet)";
            constant Modelica.Units.SI.Area Aunit=1.0
              "Unit area to match units of levels and volumes";
            Modelica.Units.SI.Mass M(stateSelect=(if states == ThermalPower.SubComponents.Internal.Choices.ThermoStates.UM
                   then StateSelect.prefer else StateSelect.default)) "Total mass";
            Modelica.Units.SI.Energy E_tot(stateSelect=(if states == ThermalPower.SubComponents.Internal.Choices.ThermoStates.ph
                   then StateSelect.prefer else StateSelect.default))
              "Total internal energy";
            Modelica.Units.SI.SpecificInternalEnergy u "Specific Interal Energy";
            ThermalPower.Units.Density d "Density";
            Modelica.Units.SI.Volume V_tot=V_hotwell + length*pi*diameter^2/4
              "Total volume";
            Modelica.Units.SI.Volume Vl(start=V_hotwell + ystart*Aunit) "Liquid volume";
            Modelica.Units.SI.Power Q_cool "Total power to cooling water";
            Modelica.Units.SI.MassFlowRate m_flow "Total mass flowrate";
            Modelica.Units.SI.ReynoldsNumber Re[1] "Fluid Reynolds number";
            Modelica.Units.SI.DynamicViscosity eta[1] "Dynamic viscosity (outer HT)";
            Real[1] twoPhaseFraction={1.0}
              "NOT USED, necessary for compatibility with heat transfer model";
            Modelica.Units.SI.MassFraction[1] x
              "Mass fraction of vapor in flow over tubes";
            Modelica.Units.SI.MassFraction x_vol
              "Mass fraction of vapor in the fluid volume";
            Modelica.Units.SI.Temperature Tcool_in "Cooling water inlet temperature";
            Modelica.Units.SI.Temperature Tcool_out "Cooling water outlet temperature";
            Modelica.Units.NonSI.Temperature_degC dT_lm "Log mean temperature difference, water side";
            // Heat transfer components
            replaceable model HeatTransferModel =
                ThermalPower.SubComponents.HeatTransfer.Pipes.KcCond   constrainedby
              ThermalPower.SubComponents.HeatTransfer.Pipes.Interfaces.Tubes
              "Steam side heat transfer model" annotation (choicesAllMatching, Dialog(
                  group="Heat transfer"));

            // StateSelect.always only way to avoid dynamic state selection for cooling tubes
            ThermalPower.Thermal.Walls.StandardWall tubeWall(
              T(stateSelect=StateSelect.always),
              Tstart1=Tmstart,
              TstartN=Tmstart,
              n=1,
              n_ext=1,
              s=(d_outer - d_inner)/2,
              A_heat=N_tubes*pi*tubelength*(d_inner + d_outer)/2,
              redeclare model WallMaterial = WallMaterial) annotation (Placement(
                  transformation(
                  origin={2,40},
                  extent={{-10,10},{10,-10}},
                  rotation=270)));
               final parameter Modelica.Units.SI.SpecificInternalEnergy u_offset_reference=
                Medium.specificInternalEnergy(Medium.setState_pTX(system_TPL.p_reference,
                system_TPL.T_reference));
            Modelon.Media.Units.SpecificEnthalpy hl=Medium.bubbleEnthalpy_pX(p)
              "Liquid specific enthalpy";
            Modelon.Media.Units.SpecificEnthalpy hv=Medium.dewEnthalpy_pX(p)
              "Vapor specific enthalpy";
            ThermalPower.Units.LiquidDensity rhol=Medium.density(bubble)
              "Saturated liquid density";
            ThermalPower.Units.GasDensity rhov=Medium.density(dew)
              "Saturated vapor density";
            Medium.ThermodynamicState dew "Thermodynamic state at dewpoint";
            Medium.ThermodynamicState bubble "Thermodynamic state at bubblepoint";
            Modelica.Units.SI.DynamicViscosity eta_liq=Medium.dynamicViscosity(bubble);
            Modelica.Units.SI.DynamicViscosity eta_vap=Medium.dynamicViscosity(dew);
            Real[Medium.nC] C(start=Cstart) "Trace component concentrations";
            Real[Medium.nC] dC "Trace concentration derivative";

            ThermalPower.TwoPhase.Condensers.Records.CondenserSummary summary(
              T_gas=T[1],
              T_liquid=T[1],
              Tin_cooling=Tcool_in,
              Tout_cooling=Tcool_out,
              Q_flow=Q_cool,
              level=y,
              m=M,
              p=p,
              m_flow_cooling_in=feed_cool.m_flow,
              m_flow_in=feed.m_flow,
              m_flow_out=-drain.m_flow,
              m_flow_cooling_out=-drain_cool.m_flow,
              h_out=actualStream(drain.h_outflow),
              hin_cooling=actualStream(feed_cool.h_outflow),
              hout_cooling=actualStream(drain_cool.h_outflow),
              level_max=y_max,
              level_min=y_min,
              h_in=h_in)
              annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
            ThermalPower.TwoPhase.Interfaces.VolumePort feed(redeclare package
                Medium =
                  Medium) annotation (Placement(transformation(extent={{-83,44},{-63,64}}),
                  iconTransformation(extent={{-83,44},{-63,64}})));
            ThermalPower.TwoPhase.Interfaces.FlowPort drain_cool(redeclare
                package Medium =
                  CoolMedium) annotation (Placement(transformation(extent={{102,-22},{122,
                      -2}}), iconTransformation(extent={{102,-22},{122,-2}})));
            ThermalPower.TwoPhase.Interfaces.FlowPort feed_cool(redeclare
                package Medium =
                  CoolMedium)
              annotation (Placement(transformation(extent={{102,18},{122,38}})));
            ThermalPower.TwoPhase.Interfaces.VolumePort drain(redeclare package
                Medium =
                  Medium) annotation (Placement(transformation(extent={{-10,-70},{10,-50}}),
                  iconTransformation(extent={{-10,-70},{10,-50}})));
            Modelica.Blocks.Interfaces.RealOutput level annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={-110,-36}), iconTransformation(
                  extent={{-7,-7},{7,7}},
                  rotation=180,
                  origin={-114,-36})));
            ThermalPower.SubComponents.HeatTransfer.Pipes.Components.HeatTransferTwoPhase
              heatRes_inner(
              F_user=F_htc_cond,
              n=1,
              m_flow={feed_cool.m_flow/N_tubes},
              p={feed_cool.p},
              redeclare package Medium = CoolMedium,
              n_channels={N_tubes},
              A={pi*d_inner^2/4},
              L=tubelength,
              Dhyd={d_inner},
              cp={CoolMedium.specificHeatCapacityCp(state_coolingwater)},
              redeclare model HeatTransfer =
                  ThermalPower.SubComponents.HeatTransfer.Pipes.KcSimpleLiquid,
              Fr={0},
              Re_liq={0},
              twoPhaseFraction={0},
              eta={CoolMedium.dynamicViscosity(state_coolingwater)},
              lam={CoolMedium.thermalConductivity(state_coolingwater)},
              Re=Modelon.Math.Smoothing.above(
                  Modelon.ThermoFluid.Functions.CharacteristicNumbers.ReynoldsNumber(
                    heatRes_inner.m_flow[1],
                    heatRes_inner.Dhyd[1],
                    heatRes_inner.A,
                    heatRes_inner.eta[1]),
                  1,
                  10),
              A_heat={Aheat_inner/N_tubes},
              sat={CoolMedium.PhaseBoundaryProps(
                  d_liq=1,
                  d_vap=1,
                  eta_vap=1,
                  eta_liq=1,
                  lam_vap=1,
                  lam_liq=1,
                  cp_vap=1,
                  cp_liq=1,
                  x=0)}) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={22,40})));

            Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature T_cool[1]
              annotation (Placement(transformation(extent={{56,33},{41,48}})));
            Modelica.Blocks.Sources.RealExpression T_cool_avg[1](y=tubeWall.T - {dT_lm})
              annotation (Placement(transformation(extent={{88,31},{68,51}})));
            ThermalPower.SubComponents.HeatTransfer.Pipes.Components.HeatTransferTwoPhase
              heatRes_outer(
              n=1,
              L=tubelength,
              Fr={Modelon.Math.Smoothing.above(
                  Modelon.ThermoFluid.Functions.CharacteristicNumbers.FroudeNumber(
                    heatRes_outer.m_flow[1],
                    heatRes_outer.Dhyd[1],
                    heatRes_outer.A[1],
                    heatRes_outer.sat[1].d_liq),
                  1,
                  5)},
              Re_liq={Modelon.Math.Smoothing.above(
                  Modelon.ThermoFluid.Functions.CharacteristicNumbers.ReynoldsNumber(
                    heatRes_outer.m_flow[1],
                    heatRes_outer.Dhyd[1],
                    heatRes_outer.A[1],
                    heatRes_outer.sat[1].eta_liq),
                  1,
                  10)},
              A_heat={Aheat_outer/heatRes_outer.n_channels[1]},
              numberOfTubeRows=integer(sqrt(N_tubes)),
              A={Afreeflow},
              Dhyd={d_outer},
              redeclare package Medium = Medium,
              m_flow={m_flow},
              Re=Re,
              eta=eta,
              sat={Modelon.Media.Interfaces.TwoPhaseMedium.PhaseBoundaryProps(
                  d_vap=rhov,
                  d_liq=rhol,
                  eta_vap=eta_vap,
                  eta_liq=eta_liq,
                  lam_vap=min(max(Medium.thermalConductivity_dTX(
                    heatRes_outer.sat[1].d_vap,
                    T[1],
                    drain.X_outflow), 1.0e-4), 2.0),
                  lam_liq=min(max(Medium.thermalConductivity_dTX(
                    heatRes_outer.sat[1].d_liq,
                    T[1],
                    drain.X_outflow), 1.0e-4), 2.0),
                  cp_vap=min(max(Medium.specificHeatCapacityCp_phX(
                    p,
                    hv,
                    drain.X_outflow), 500), 5e5),
                  cp_liq=min(max(Medium.specificHeatCapacityCp_phX(
                    p,
                    hl,
                    drain.X_outflow), 500), 5e5),
                  x=x[1])},
              p={p},
              lam={min(max(smooth(0, if p < pcrit then
                  Modelon.Math.Smoothing.spliceFunction(
                  (1.0 - x[1])*heatRes_outer.sat[1].lam_liq + x[1]*heatRes_outer.sat[1].lam_vap,
                  Medium.thermalConductivity(fluid),
                  min(x[1] + 0.02, 1.0 - x[1]),
                  0.02) else Medium.thermalConductivity(fluid)), 1e-4), 2.0)},
              cp={smooth(0, if noEvent(abs(x[1] - 0.5) >= 0.5) then
                  Medium.specificHeatCapacityCp(fluid) else x[1]*heatRes_outer.sat[1].cp_vap
                   + (1 - x[1])*heatRes_outer.sat[1].cp_liq)},
              twoPhaseFraction=twoPhaseFraction,
              redeclare model HeatTransfer = HeatTransferModel) annotation (Placement(
                  transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=90,
                  origin={-23,40})));

            Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature T_shell[1]
              annotation (Placement(transformation(extent={{-53,33},{-38,48}})));
            Modelica.Blocks.Sources.RealExpression T_condense[1](y=T)
              annotation (Placement(transformation(extent={{-87,19},{-67,39}})));
            ThermalPower.SubComponents.PropertySummation.TwoPhaseProperties twoPhaseProperties(
              m=M,
              V=V_tot,
              E=M*(u - u_offset_reference))
              annotation (Placement(transformation(extent={{-52,-41},{-32,-21}})));
            outer ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-80,-69},{-60,-49}})));
            input Real F_htc_cond = 1.0 "User defined enhancement factor for heat transfer" annotation (Dialog(tab="Advanced", group="Heat transfer"));

          protected
            Modelica.Units.SI.SpecificEnthalpy h_in[1];// Variable introduced due to Modelica compliance problem with summary(h_in={actualStream(feed.h_outflow)})
          equation
            h_in[1]=actualStream(feed.h_outflow);

            assert(p > 1000, "Condenser pressure is too low, check liquid level.");
            assert(y < 0.99*y_max, "Condenser is full of liquid, invalid condition.");
            der(M) = feed.m_flow + drain.m_flow "mass balance";
            der(E_tot) = feed.m_flow*actualStream(feed.h_outflow) + drain.m_flow*
              actualStream(drain.h_outflow) + heatRes_outer.heatTransfer.Q_s[1]
              "Energy balance";

            // Trace component balance
            dC*M+der(M)*C=feed.m_flow*actualStream(feed.C_outflow) + drain.m_flow*actualStream(drain.C_outflow);
            der(C)=dC;

            M = V_tot*d "Total mass";
            E_tot = M*u "Total internal energy";
            x_vol = noEvent(if p/pcrit < 1.0 then max(0.0, min(1.0, (h - hl)/max(hv - hl,
              1e-6))) else 1.0) "Steam quality (total)";
            //    Vl = y*A_surface;
            y = noEvent(if Vl < V_hotwell then (Vl - V_hotwell)/A_hotwell else if
              DrumOrientation == 0 then (Vl - V_hotwell - length*diameter^2/4*
              Modelica.Math.acos((diameter - 2*y)/diameter))/sqrt(diameter*y - y^2)/
              length + diameter/2 else (Vl - V_hotwell)/(pi*diameter^2/4));
            Vl = (1 - x_vol)*M/rhol "Liquid volume";
            x[1] = noEvent(if p/pcrit < 1.0 then max(0.0, min(1.0, (actualStream(feed.h_outflow)
               - hl)/max(hv - hl, 1e-6))) else 1.0) "Steam inflow quality";
            Re[1] = Modelon.Math.Smoothing.above(
              Modelon.ThermoFluid.Functions.CharacteristicNumbers.ReynoldsNumber(
                m_flow,
                d_outer,
                Afreeflow,
                eta[1]),
              1,
              10);
            eta[1] = 1/((1.0 - x[1])/eta_liq + x[1]/eta_vap);
            // Fluid properties
            fluid = Medium.setState_phX(
              p,
              h,
              Medium.fixedComposition);
            T[1] = Medium.temperature(fluid);
            u = Medium.specificEnthalpy(fluid);
            d = Medium.density(fluid);

           state_coolingwater = CoolMedium.setState_phX(
              drain_cool.p,
              actualStream(drain_cool.h_outflow),
              Medium.fixedComposition);
            bubble = Medium.setState_phX(
              p,
              Medium.bubbleEnthalpy_pX(p),
              Medium.fixedComposition);
            dew = Medium.setState_phX(
              p,
              Medium.dewEnthalpy_pX(p),
              Medium.fixedComposition);

            // Cooling flow boundary
            feed_cool.p = drain_cool.p;
            Tcool_in = CoolMedium.temperature(Medium.setState_phX(
              feed_cool.p,
              actualStream(feed_cool.h_outflow),
              Medium.fixedComposition));
            Tcool_out = CoolMedium.temperature(state_coolingwater);
            dT_lm = Modelon.ThermoFluid.HeatExchangers.Functions.logMean(tubeWall.T[1] -
              Tcool_in, tubeWall.T[1] - Tcool_out);
            Q_cool = heatRes_inner.heatTransfer.Q_s[1];
            drain_cool.h_outflow = inStream(feed_cool.h_outflow) + Q_cool/feed_cool.m_flow;
            feed_cool.h_outflow = inStream(drain_cool.h_outflow) - Q_cool/feed_cool.m_flow;
            feed_cool.m_flow + drain_cool.m_flow = 0;
            drain_cool.X_outflow = inStream(feed_cool.X_outflow);
            feed_cool.X_outflow = inStream(drain_cool.X_outflow);
            drain_cool.C_outflow = inStream(feed_cool.C_outflow);
            feed_cool.C_outflow = inStream(drain_cool.C_outflow);

            // Boundary conditions
            m_flow = feed.m_flow;
            feed.p = p;
            feed.h_outflow = h;
            feed.X_outflow = Medium.fixedComposition;
            feed.C_outflow = C;
            drain.p = p + rhol*system_TPL.g*(y + V_hotwell/A_hotwell);
            drain.h_outflow = Modelica.Media.Air.MoistAir.Utilities.spliceFunction(
              h,
              hl,
              x_vol - 0.75,
              0.25);
            drain.X_outflow = Medium.fixedComposition;
            drain.C_outflow = C;
            level = y;

          initial equation
            if initOpt == Modelon.ThermoFluid.Choices.InitOptions.initialValues then
              p = pstart;
              y = ystart;
              C= Cstart;
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.noInit then

            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyState then
              der(p) = 0;
              der(h) = 0;
              der(C)=zeros(Medium.nC);
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyStateNoP then
              p = pstart;
              der(h) = 0;
              der(C)=zeros(Medium.nC);
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyStateNoT then

              der(p) = 0;
              der(C)=zeros(Medium.nC);
            else
              assert(false, "Unsupported initialization option");
            end if;

          equation
            connect(heatRes_inner.q_wall, tubeWall.port_a)        annotation (Line(
                points={{12.2,40},{7.9,40}},
                color={191,0,0},
                smooth=Smooth.None));
            connect(T_cool_avg.y, T_cool.T) annotation (Line(
                points={{67,41},{63,41},{63,40.5},{57.5,40.5}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(heatRes_inner.q_fluid, T_cool.port) annotation (Line(
                points={{32.2,40},{37,40},{37,40.5},{41,40.5}},
                color={191,0,0},
                smooth=Smooth.None));
            connect(heatRes_outer.q_wall, tubeWall.port_b) annotation (Line(
                points={{-13.2,40},{-4,40}},
                color={191,0,0},
                smooth=Smooth.None));
            connect(T_shell.port, heatRes_outer.q_fluid) annotation (Line(
                points={{-38,40.5},{-35,40.5},{-35,40},{-33.2,40}},
                color={191,0,0},
                smooth=Smooth.None));
            connect(T_condense.y, T_shell.T) annotation (Line(
                points={{-66,29},{-54.5,29},{-54.5,40.5}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (
              Icon(coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}},
                  grid={1,1}), graphics={Text(extent={{-61,42},{100,60}},textString=
                    "%name"),Line(
                    points={{-107,-36},{-96,-36}},
                    color={0,0,0},
                    smooth=Smooth.None),Text(
                    extent={{-52,-44},{28,-16}},
                    lineColor={0,0,0},
                    textString=
                    DynamicSelect("0.0",
                        String(
                        summary.Q_flow/1e6,
                        format="1.1f"))),Text(
                    extent={{-84,-43},{-21,-16}},
                    lineColor={0,0,0},
                    textString="Q:"),Text(
                    extent={{7,-43},{70,-16}},
                    lineColor={0,0,0},
                    textString="MW"),              Line(points={{104,28},{-52,28},{-54,
                        27.5},{-55.5,26},{-56,24},{-55.5,22},{-54,20.5},{-52,20},{80,20},
                        {82,19.5},{83.5,18},{84,16},{83.5,14},{82,12.5},{80,12},{-52,12},
                        {-54,11.5},{-55.5,10},{-56,8},{-55.5,6},{-54,4.5},{-52,4},{80,4},
                        {82,3.5},{83.5,2},{84,0},{83.5,-2},{82,-3.5},{80,-4},{-52,-4},{
                        -54,-4.5},{-55.5,-6},{-56,-8},{-55.5,-10},{-54,-11.5},{-52,-12},{
                        104,-12}},                                             color={0,0,
                    0})}),
              Documentation(info="<html>
<h4>Description</h4>
<p>Model of a cylindrical condenser, assuming thermodynamic equilibrium between liquid and vapor phase. Cooling water and steam/condensate are separated by a dynamic wall model.</p>
<h4>Parametrization</h4>
<p>The codensate level <code>y</code> is relative to the cylinder bottom, below the cylinder bottom there is a hotwell with the liquid outlet at the bottom of the hotwell. <code>y_min</code> and <code>y_max </code>corresponds to an empty respective full condenser. Calculation of the level is different if the orientation is horizontal or vertical.</p>
<p>A port of the condensate level is available at the left side of the condenser. </p>
<h5>Heat transfer</h5>
<p>There are two heat transfer correlations, one on each side of the pipe wall model:</p>
<ul>
<li>The cooling liquid heat transfer uses a liquid correlation valid for both laminar and turbulent flow. It uses a logarithmic average of the cooling inlet and cooling outlet temperature as the driving temperature. The cooling heat flow is then solved implicit by a non-linear equation.</li>
<li>The heat transfer correlation on the steam side, HeatTransferModel, is replaceable and can be changed by the user. The default is a correlation for condensation over tube bundles.</li>
</ul>
<h5>Initialization</h5>
<p>Start values of pressure and liquid level can be specified by setting parameters <code>pstart</code> and <code>ystart</code>. The value hstart is used as a guess for steady-state initialization with the liquid enthalpy as default, otherwise initialization is done using ystart, initial liquid level. </p>
<h4>Assumptions </h4>
<ul>
<li>Thermodynamic equilibrium between liquid and vapor phase, i.e. no subcool.</li>
<li>Heat transfer model uses the inflow steam quality to calculate the vapor phase Reynolds number, no slip is assumed.</li>
<li>No reduction of heat transfer area when the liquid level rises over the cooling tubes. </li>
<li>No pressure loss on the cooling side.</li>
</ul>
<h4>Validity</h4>
<ul>
<li>As the liquid level goes to zero, the drain enthalpy will approach the mixed volume enthalpy. This will most often result in too low pressure, and is protected with an assert(p&gt;1000 Pa).</li>
<li>The drum liquid level should not be too large, an assert is triggered when the condenser gets full.</li>
</ul>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"),    Diagram(coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}},
                  grid={1,1})));
          end Condenser;

          model ValveSteam "Valve for steam flow"
            extends ThermalPower.SubComponents.Internal.Icons.SteamValve;
            extends ThermalPower.TwoPhase.FlowResistances.OrificeSteam(theta=command);
            Modelica.Blocks.Interfaces.RealInput command annotation (Placement(
                  transformation(
                  origin={0,100},
                  extent={{-20,-20},{20,20}},
                  rotation=270), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={0,56})));
          equation
            assert(command <= 1.0 and command >= 0.0,
              "Command signal for Valve has to be between 0.0 and 1.0!");
            annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                      {100,100}}), graphics={
                                        Polygon(
                    points={{80,40},{0,0},{80,-40},{80,40}},
                    lineColor={0,0,0},
                    visible=CheckValve,
                    smooth=Smooth.None,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                                        Text(
                    extent={{16,70},{94,50}},
                    textString=DynamicSelect("", String(command, format="1.2f")),
                    lineColor={0,0,0})}),             Documentation(info="<html>
<h4>Description</h4>
<p>Steam valve according to the IEC 534/ISA S.75 standards for valve sizing, compressible fluid with possible choked flow conditions. </p>
<h4>Parametrization</h4>
<p>The following options are available to specify the valve flow coefficient in fully open conditions: </p>
<ul>
<li><code>CvData = FlowCoefficients.Av</code>: the flow coefficient is given by the metric Av coefficient <code>Avnom</code> (m^2). </li>
<li><code>CvData = FlowCoefficients.Kv</code>: the flow coefficient is given by the metric Kv coefficient <code>Kvnom</code> (m^3/h of liquid water for dp=1 bar). </li>
<li><code>CvData = FlowCoefficients.Cv</code>: the flow coefficient is given by the US Cv coefficient <code>Cvnom</code> (USG/min of liquid water for dp=1 psi). </li>
<li><code>CvData = FlowCoefficients.OpPoint</code>: the flow coefficient is given implicit by the operating point (<code>wnom</code>,<code>dpnom</code>, <code>d_nom). </code></li>
</ul>
<p>Note that <code>d_nom </code>is only used for <code>CvData = OpPoint, </code>flow given by nominal operating point. The actual medium density is used for all flow calculations. </p>
<p>The default valve opening flow characteristic <code>FlowChar</code> is linear, this can be replaced by any user-defined function (e.g. equal percentage, quick opening, etc).</p>
<p>The product Fk*xt is given by the parameter <code>Fxtnom</code>, and is assumed constant by default. The relative change (per unit) of the xt coefficient with the valve opening can be specified by customising the <code>xtfun</code> function. </p>
<h5>Check valve</h5>
<p>The model optionally supports reverse flow conditions (assuming symmetrical behaviour) or check valve operation, and has been suitably modified to avoid numerical singularities at zero pressure drop. If <code>CheckValve</code> is true, the flow is stopped when the outlet pressure is higher than the inlet pressure; otherwise, reverse flow takes place. </p>
<h5>Numerical aspects</h5>
<p>The nominal pressure drop <code>dp_nom</code> must always be specified; to avoid numerical singularities, the flow characteristic is modified for pressure drops less than <code>b*dp_nom</code> (the default value is 1&percnt; of the nominal pressure drop). Increase this parameter if numerical instabilities occur in valves with very low pressure drops. </p>
<h4>Assumptions</h4>
<ul>
<li>Turbulent flow</li>
<li>Static mass and energy balances </li>
</ul>
<h4>Validity</h4>
<ul>
<li>Compressible fluid</li>
<li>The operating range includes choked flow operation</li>
</ul>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
          end ValveSteam;

          model Pump "Centrifugal pump with ideally controlled speed"
            import ThermalPower;
            extends
              ThermalPower.TwoPhase.TurboMachinery.Pumps.Templates.PumpBase;

            parameter Modelica.Units.NonSI.AngularVelocity_rpm n_const=n_nom "Constant rotational speed";
            Modelica.Blocks.Interfaces.RealInput in_n "RPM" annotation (Placement(
                  transformation(extent={{-90,54},{-50,94}}, rotation=0),
                  iconTransformation(extent={{-76,68},{-50,94}})));
            ThermalPower.TwoPhase.TurboMachinery.Pumps.Templates.Records.PumpSummary
              summary(
              m_flow=m_flow,
              eta=eta,
              N=n,
              dp=dp_char,
              head=head,
              power=P_total,
              V_flow=m_flow/d_inlet,
              NPSH=NPSHa)
              annotation (Placement(transformation(extent={{20,5},{40,25}})));
          equation
            if cardinality(in_n) == 0 then
              n = n_const;
              in_n = 0;
            else
              n = in_n;
            end if;

            annotation (
              Icon(coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}},
                  grid={1,1}),graphics={Line(
                    points={{-72,81},{-39,81},{-39,63}},
                    color={0,0,0},
                    thickness=0.5,
                    smooth=Smooth.None),Text(extent={{-87,65},{-57,43}}, textString="n")}),
              Diagram(coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}},
                  grid={1,1}), graphics),
              Documentation(info="<html>
<h4>Description</h4>
<p>A centrifugal pump (or a group of <code>Np</code> pumps in parallel) with controlled speed, either fixed or provided by an external signal. It is based on a quadratic flow characteristic.</p>
<p>If the <code>in_n</code> input connector is wired, it provides rotational speed of the pumps (rpm); otherwise, a constant rotational speed equal to <code>n_const</code> (which can be different from <code>n_nom</code>) is assumed.</p>
<h4>Parametrization</h4>
<p>If the flag <code>use_Np_in</code> is true, then the input connector in_Np provides the number of pumps in parallel; otherwise, <code>Np_nom</code> parallel pumps are assumed. </p>
<p>In order to avoid singularities in the computation of the outlet enthalpy at zero flowrate, the thermal capacity of the fluid inside the pump body is always taken into account. </p>
<p>The model can either support reverse flow conditions or include a built-in check valve to avoid flow reversal using the boolean <code>CheckValve</code> parameter. </p>
<h5>Pump characteristic - user input</h5>
<p>The characteristics are specified by providing vectors for given operating points (in terms of volume flow rate <code>q_nom</code>, <code>head</code> and power consumption <code>P_cons</code>) at nominal fluid density <code>d_nom </code>and nominal rotational speed <code>n_nom</code> for a single pump. The vectors have to be the same size and at least three points should be given. If the boolean parameter usePowerCharacteristics is false, the replaceable function efficiencyCharacteristics is used instead of P_const to calculate the efficiency.</p>
<h5>Pump characteristics</h5>
<p>The manufacturer&rsquo;s performance curves are the most reliable source of data for pump operating characteristics. When these curves are not available, the power requirement of a pump can be estimated using pump laws and pump power equation. </p>
<p>The pump performance is represented by curves based on flow capacity and total pump head. </p>
<p><img src=\"modelica://ThermalPower/Resources/Images/PumpMap.png\"/></p>
<p>For constant impeller diameter and a variation in pump speed, the following relationship apply </p>
<p>[1] Pump volume flow rate varies in proportion to the pump speed </p>
<p><img src=\"modelica://ThermalPower/Resources/Images/equations/equation-CGEgbkZf.png\"/></p>
<p>[2] The total pump head varies in proportion to the square of the pump speed </p>
<p><img src=\"modelica://ThermalPower/Resources/Images/equations/equation-NsKK2MJw.png\"/></p>
<p>[3] The pump power consumption varies in proportion to the cube of the pump speed </p>
<p><img src=\"modelica://ThermalPower/Resources/Images/equations/equation-q8cM0snp.png\"/></p>
<p>These pump laws are used to estimate pump characteristics from a known performance. </p>
<p>Pump power is the power required to pump a liquid and is a function of volume flow rate and the total system head. </p>
<p><img src=\"modelica://ThermalPower/Resources/Images/equations/equation-CFUEBXxH.png\"/></p>
<p><img src=\"modelica://ThermalPower/Resources/Images/equations/equation-PNzRgllJ.png\"/></p>
<p>[4] Net positive suction head (NPSH) defines how close the fluid at a given condition to boiling and thus cavitation. The reducton of the static pressure (p) to the vapor pressure (pv) of the liquid causes vaporization of the liquid. </p>
<p><img src=\"modelica://ThermalPower/Resources/Images/equations/equation-99uwyKVd.png\"/></p>
<h4>Assumptions</h4>
<ul>
<li>Pump characteristics are scaled according to the affinity laws described above at varying operating conditions</li>
<li>A simplified dynamic energy balance is used to avoid singularities in the computation of the outlet enthalpy at zero flowrate</li>
<li>No storage of mass</li>
</ul>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
          end Pump;

          model SimpleGenerator "Simple generator model"
            import Modelica.Units.SI;
            Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
              "Left flange of shaft" annotation (Placement(transformation(extent={{-90,-10},
                      {-70,10}}, rotation=0), iconTransformation(extent={{-90,-10},{-70,10}})));

            SI.Angle phi(start=0, fixed=true) "Absolute rotation angle of component";
            SI.AngularVelocity w "Absolute angular velocity of component (= der(phi))";
            SI.AngularAcceleration a
              "Absolute angular acceleration of component (= der(w))";

            parameter Real efficiency=0.99 "Constant generator efficiency";
            parameter SI.AngularVelocity w_nom=50*2*3.14
              "Fixed angular mechanical flange velocity";
            SI.Power power "Generated power";

          equation
            // Assumes that the rotational inertia rotates with a fixed speed, i.e. the acceleration is 0
            power = flange_a.tau*w*efficiency;
            phi = flange_a.phi;
            der(phi) = w;
            w = w_nom;
            a = 0;
            annotation (
              Documentation(info="<html>
<h4>Description</h4>
<p>Simple generator model that rotates with a fixed frequency.</p>
<h4>Assumptions</h4>
<ul>
<li>The power demand is equal to the power supply, i.e. it rotates with a fixed frequency.</li>
<li>Constant efficiency</li>
</ul>
</html>",           revisions="<html>
<hr><p><font class=\"copyright_bold\">Copyright &copy; 2004-2022, MODELON AB</font> <font class=\"copyright_base\">The use of this software component is regulated by the licensing conditions for the Modelon Library. This copyright notice must, unaltered, accompany all components that are derived from, copied from, or by other means have their origin from the Modelon Library. </font></p>
</html>"),    Icon(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-100,-100},{100,100}},
                  grid={1,1}), graphics={
                  Text(
                    extent={{-100,-80},{100,-100}},
                    textString="%name",
                    lineColor={0,0,0}),
                  Ellipse(
                    extent={{77,79},{-79,-77}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{24,19},{-26,-51}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid,
                    textString="G"),
                  Text(
                    extent={{-75,16},{75,26}},
                    lineColor={0,0,0},
                    textString="Power [MW]"),
                  Rectangle(
                    extent={{-49,59},{50,33}},
                    lineColor={175,175,175},
                    fillColor={215,215,215},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{-70,34},{70,55}},
                    lineColor={0,0,0},
                    textString=DynamicSelect("0.0", String(power/1e6, format="1.1f")))}),
              Diagram(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-100,-100},{100,100}},
                  grid={1,1})));
          end SimpleGenerator;

          model Separator "Steam separator, with condensed water outflow"
            extends ThermalPower.TwoPhase.Volumes.MixVolume(
              dMX={sum(MX_flow_feed[:, j]) + sum(MX_flow_drain[:, j]) for j in 1:Medium.nS}
                   + water.m_flow*actualStream(water.X_outflow),
              dE=sum(H_flow_feed) + sum(H_flow_drain) + water.m_flow*actualStream(water.h_outflow),
              dMC={sum(MC_flow_feed[:, j]) + sum(MC_flow_drain[:, j])
                for j in 1:Medium.nC}+water.m_flow*actualStream(water.C_outflow),
              h_out=max(h, h*(1 - eta_sep) + hv*eta_sep));

            parameter Modelica.Units.SI.Efficiency eta_sep(
              min=0,
              max=1)=0.99 "Separation efficiency";
            Modelica.Units.SI.MassFlowRate m_cond "Condensation mass flowrate";
            ThermalPower.TwoPhase.Interfaces.FlowPort water(p(start=pstart), redeclare
                package Medium = Medium) annotation (Placement(transformation(extent={{-10,
                      -90},{10,-70}}, rotation=0), iconTransformation(extent={{-10,-80},{
                      10,-60}})));
          equation
            assert(x > 0, "Steam separator is full with liquid.");
            m_cond = -max(0, 1 - x)*max({sum(feed.m_flow),sum(drain.m_flow),0})*eta_sep;

            // Forced outflow through water connector
            water.m_flow = m_cond;
            water.h_outflow = hl;
            water.X_outflow = fluid.X;
            water.C_outflow = fluid.C;
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                      -100},{100,100}}),
                                   graphics={Text(extent={{-100,-92},{8,-76}},
                    textString="water"),
                  Polygon(
                    points={{-74,-20},{-16,-78},{-76,-76},{-74,-20}},
                    fillPattern=FillPattern.Solid,
                    pattern=LinePattern.None,
                    lineColor={0,0,0},
                    fillColor={255,255,255}),
                  Polygon(
                    points={{74,-20},{16,-78},{76,-76},{74,-20}},
                    fillPattern=FillPattern.Solid,
                    pattern=LinePattern.None,
                    lineColor={0,0,0},
                    fillColor={255,255,255})}),
                                           Documentation(info="<html>
<h4>Description</h4>
<p>This is a model of an ideal steam separator with a steam trap outlet of liquid water. </p>
<h4>Parametrization</h4>
<ul>
<li>An efficiency parameter, eta_sep, determines how much liquid is removed, default is 99&percnt;.</li>
<li>The main outlet, <code>drain</code>, contains saturated steam and a (1-eta_sep) fraction of the inflowing liquid water. </li>
<li>The <code>water</code> outlet will have a continuous outflow of all condensated liquid from the feed stream, irrespective of back pressure.</li>
<li>The model inherits the basic mass- and energy balances from the <a href=\"modelica://ThermalPower.TwoPhase.Volumes.MixVolume\">ThermalPower.TwoPhase.Volumes.MixVolume</a> model and adds the water outflow connector. </li>
</ul>
<h4>Assumptions </h4>
<ul>
<li>Thermodynamic equilibrium between liquid and vapor</li>
<li>Lumped volume with a homogenous temperature and pressure</li>
<li>Uniform wall temperature</li>
</ul>
<h4>Validity</h4>
<ul>
<li>The model handles flow reversals smoothly, only steam will pass through the main connectors, <code>feed</code> and <code>drain</code>. </li>
<li>The separator may not become full with liquid, an assert will then stop the simulation. </li>
</ul>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"),    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                      100,100}}), graphics));
          end Separator;

          model Turbine_2stage "Two stage turbine with thermal mass"

            replaceable package Medium =
              Modelon.Media.PreDefined.TwoPhase.WaterIF97
              constrainedby Modelon.Media.Interfaces.TwoPhaseMedium
              "Water medium model" annotation(choicesAllMatching);
            parameter Modelica.Units.SI.Volume V_tot=5 "Total steam volume" annotation (Dialog(group="Geometry"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom[3]={280e5,85e5,55e5} "Nominal pressure values"
              annotation (Dialog(group="Nominal point"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom[2]={800,750} "Nominal HP steam flow rate"
              annotation (Dialog(group="Nominal point"));
            parameter Boolean use_T_nom=false "If true use T_nom else h_nom" annotation (
                Evaluate,Dialog(
                group="Nominal point"));
            parameter Modelica.Units.SI.Temperature T_nom[2]={630,430} "Nominal turbine inlet temperatures"
              annotation (Dialog(group="Nominal point", enable=use_T_nom));

            parameter Modelica.Units.SI.SpecificEnthalpy h_in_nom=Medium.specificEnthalpy_pTX(
                p_nom[1],
                T_nom[1] + 5,
                Medium.reference_X) "Nominal turbine inlet specific enthalpy"
              annotation (Dialog(group="Nominal point", enable=not use_T_nom));
            parameter Modelica.Units.SI.SpecificEnthalpy h_nom[2]={h_in_nom,h_nom_fromIsentropicEffCalc_stage1_out}
              "Nominal turbine inlet  specific enthalpy" annotation (Dialog(group="Nominal point", enable=not use_T_nom));

            parameter Modelica.Units.SI.HeatCapacity Cm=500*2000 "Metal Heat Capacity"
              annotation (Dialog(group="Heat Transfer"));
            parameter Modelica.Units.SI.Area S=5 "Internal total heat transfer surface"
              annotation (Dialog(group="Heat Transfer"));
            parameter Modelica.Units.SI.CoefficientOfHeatTransfer gamma=2000 "Heat Transfer Coefficient"
              annotation (Dialog(group="Heat Transfer"));

            parameter Modelica.Units.SI.AbsolutePressure p_start[3]={p_nom[1],p_nom[2],p_nom[3]} "Pressure start values"
              annotation (Dialog(tab="Initialization"));

            parameter Modelica.Units.SI.SpecificEnthalpy h_in_start=h_in_nom "Inlet specific enthalpy start values"
              annotation (Dialog(tab="Initialization"));
            parameter Modelica.Units.SI.SpecificEnthalpy h_start[3]={h_in_start,h_start_fromIsentropicEffCalc_stage1_out,
                h_start_fromIsentropicEffCalc_stage2_out} "Specific enthalpy start values"
              annotation (Dialog(tab="Initialization"));

            final parameter Modelica.Units.SI.SpecificEnthalpy h_start_fromIsentropicEffCalc_stage1_out(fixed=false)
              "Specific enthalpy start value calculated from nominal isentropic efficiency"
              annotation (Dialog(tab="Initialization"));
            final parameter Modelica.Units.SI.SpecificEnthalpy h_start_fromIsentropicEffCalc_stage2_out(fixed=false)
              "Specific enthalpy start value calculated from nominal isentropic efficiency"
              annotation (Dialog(tab="Initialization"));

            final parameter Modelica.Units.SI.SpecificEnthalpy h_nom_fromIsentropicEffCalc_stage1_out(fixed=false)
              "Specific enthalpy nominal value calculated from nominal isentropic efficiency"
              annotation (Dialog(tab="Initialization"));

            parameter Integer N_drain_stage1r=0 "Number of drain_stage1r ports" annotation(Dialog(connectorSizing=true));
            parameter Integer N_drain_stage2r=0 "Number of drain_stage2r ports" annotation(Dialog(connectorSizing=true));

            parameter Boolean use_Bauman = false "Efficiency degradation using Bauman's formula" annotation (Dialog(tab="Advanced"));
            parameter Real alpha_Bauman = 0.8  "Bauman coefficient"
              annotation (Dialog(enable=use_Bauman,tab="Advanced"));
            parameter Real eta_mech[2]={0.98, 0.98} "Mechanical efficiencies"
              annotation (Dialog(group="Efficiency"));
            parameter Real eta_is_nom[2]={0.92, 0.92} "Nominal isentropic efficiencies"
              annotation (Dialog(group="Efficiency"));

            ThermalPower.TwoPhase.TurboMachinery.Turbines.SteamTurbineStodola stage1(
              redeclare package Medium = Medium,
              p1_nom=p_nom[1],
              p2_nom=p_nom[2],
              pstartin=p_start[1],
              pstart=p_start[2],
              hstartout=h_start[2],
              hstartin=h_start[1],
              useNominalPoint=true,
              allowBackflow=allowBackflow,
              h1_nom=h_nom[1],
              eta_mech=eta_mech[1],
              eta_is_nom=eta_is_nom[1],
              use_Bauman=use_Bauman,
              alpha_Bauman=alpha_Bauman,
              m_flow_nom=m_flow_nom[1],
              use_T_nom=use_T_nom,
              T_nom=T_nom[1])
              annotation (Placement(transformation(extent={{13,-6},{27,8}}, rotation=0)));
            ThermalPower.TwoPhase.Volumes.Header vol1(
              N_drain=N_drain_stage1r + 1,
              N_feed=1,
              redeclare package Medium = Medium,
              pstart=p_start[2],
              hstart=h_start[2],
              gamma=gamma,
              Tmstart=Medium.temperature(Medium.setState_phX(
                  p_start[2],
                  h_start[2],
                  Medium.reference_X)),
              initOpt=Modelon.ThermoFluid.Choices.InitOptions.initialValues,
              V_tot=V,
              m_flow_nom=m_flow_nom[1],
              S=S/2,
              Cm=Cm/2)
              annotation (Placement(transformation(extent={{29,0},{41,12}}, rotation=0)));

            ThermalPower.TwoPhase.TurboMachinery.Turbines.SteamTurbineStodola stage2(
              redeclare package Medium = Medium,
              p1_nom=p_nom[2],
              p2_nom=p_nom[3],
              pstartin=p_start[2],
              pstart=p_start[3],
              hstartin=h_start[2],
              hstartout=h_start[3],
              useNominalPoint=true,
              allowBackflow=allowBackflow,
              use_T_nom=use_T_nom,
              T_nom=T_nom[2],
              h1_nom=h_nom[2],
              eta_mech=eta_mech[2],
              eta_is_nom=eta_is_nom[2],
              use_Bauman=use_Bauman,
              alpha_Bauman=alpha_Bauman,
              m_flow_nom=m_flow_nom[2])
              annotation (Placement(transformation(extent={{46,-6},{60,8}}, rotation=0)));
            ThermalPower.TwoPhase.Volumes.Header vol2(
              N_drain=N_drain_stage2r,
              N_feed=1,
              redeclare package Medium = Medium,
              pstart=p_start[3],
              hstart=h_start[3],
              gamma=gamma,
              Tmstart=Medium.temperature(Medium.setState_phX(
                  p_start[3],
                  h_start[3],
                  Medium.reference_X)),
              initOpt=Modelon.ThermoFluid.Choices.InitOptions.initialValues,
              V_tot=V,
              m_flow_nom=m_flow_nom[2],
              S=S/2,
              Cm=Cm/2)
              annotation (Placement(transformation(extent={{62,0},{74,12}}, rotation=0)));

            ThermalPower.TwoPhase.Interfaces.FlowPort feed(redeclare package
                Medium =
                  Medium) annotation (Placement(transformation(extent={{-73,41},{-53,61}}),
                  iconTransformation(extent={{-73,41},{-53,61}})));
            ThermalPower.TwoPhase.Interfaces.VolumePort[N_drain_stage1r] drain_stage1(
                redeclare package Medium = Medium) annotation (Placement(transformation(
                    extent={{-25,-76},{-5,-56}}), iconTransformation(extent={{-25,-76},{-5,
                      -56}})));
            ThermalPower.TwoPhase.Interfaces.VolumePort[N_drain_stage2r] drain_stage2(
                redeclare package Medium = Medium) annotation (Placement(transformation(
                    extent={{54,-101},{74,-81}}), iconTransformation(extent={{54,-101},{
                      74,-81}})));
            output Modelica.Units.SI.Mass M_tot=vol1.M + vol2.M "Total mass of Medium";

            Modelica.Mechanics.Rotational.Interfaces.Flange_b shaft_b annotation (
                Placement(transformation(extent={{110,-10},{130,10}}), iconTransformation(
                    extent={{110,-10},{130,10}})));
            parameter Boolean allowBackflow=true
              "If false, an assert is triggered at flow reversal"
                annotation(Dialog(tab="Advanced", group="Options"),Evaluate=true);
            ThermalPower.Visualizers.Display_phTmdot fourValueDisplay4(
              mdot=vol1.feed[1].m_flow,
              temp=vol1.T,
              enthalpy=vol1.h,
              pressure=vol1.p)
              annotation (Placement(transformation(extent={{19,12},{39,32}})));
            ThermalPower.Visualizers.Display_phTmdot fourValueDisplay5(
              mdot=vol2.feed[1].m_flow,
              temp=vol2.T,
              enthalpy=vol2.h,
              pressure=vol2.p)
              annotation (Placement(transformation(extent={{52,12},{72,32}})));
            ThermalPower.Visualizers.RealValue numericValue(number=stage1.P_mech*10^(-6),
                precision=1)
              annotation (Placement(transformation(extent={{10,-30},{30,-10}})));
            ThermalPower.Visualizers.RealValue numericValue1(precision=1, number=stage2.P_mech
                  *10^(-6))
              annotation (Placement(transformation(extent={{46,-30},{66,-10}})));
            ThermalPower.Visualizers.RealValue numericValue4(precision=1, number=(stage1.P_mech
                   + stage2.P_mech)*10^(-6))
              annotation (Placement(transformation(extent={{-89,-35},{-69,-15}})));

            Modelica.Mechanics.Rotational.Interfaces.Flange_a shaft_a
              annotation (Placement(transformation(extent={{-130,-10},{-110,10}})));
            ThermalPower.TwoPhase.TurboMachinery.Turbines.Records.TurbineSummary_multiStage
              summary(
              N_stages=2,
              shaftSpeed=stage1.omega,
              shaftTorque=shaft_a.tau,
              shaftPower=stage1.P_mech + stage2.P_mech,
              m_flow_out={-sum(drain_stage1.m_flow),-sum(drain_stage2.m_flow)},
              p_out={vol1.p,vol2.p},
              p_in=stage1.summary.p_in,
              m_flow_in=feed.m_flow,
              h_in=stage1.summary.h_in,
              h_out={vol1.h,vol2.h},
              x_out={vol1.x,vol2.x})
              annotation (Placement(transformation(extent={{-110,70},{-90,90}})));
          protected
            parameter Modelica.Units.SI.Volume V=V_tot/2 "Volume per stage";

          initial equation
            h_start_fromIsentropicEffCalc_stage1_out= h_in_start - eta_is_nom[1]*(h_in_start - Medium.isentropicEnthalpy(p_start[2], Medium.setState_phX(p_start[1],h_in_start,Medium.reference_X)));
            h_start_fromIsentropicEffCalc_stage2_out= h_start_fromIsentropicEffCalc_stage1_out - eta_is_nom[2]*(h_start_fromIsentropicEffCalc_stage1_out - Medium.isentropicEnthalpy(p_start[3], Medium.setState_phX(p_start[2],h_start_fromIsentropicEffCalc_stage1_out,Medium.reference_X)));
            h_nom_fromIsentropicEffCalc_stage1_out=h_in_nom - eta_is_nom[1]*(h_in_nom - Medium.isentropicEnthalpy(p_nom[2], Medium.setState_phX(p_nom[1],h_in_nom,Medium.reference_X)));

          equation
            connect(stage1.drain, vol1.feed[1]) annotation (Line(
                points={{25.6,-3.9},{30.2,-3.9},{30.2,6}},
                color={0,0,255},
                smooth=Smooth.None));
            connect(vol1.drain[N_drain_stage1r + 1], stage2.feed) annotation (Line(
                points={{39.8,6},{47.4,6},{47.4,5.2}},
                color={0,0,255},
                smooth=Smooth.None));
            connect(stage1.shaft_b, stage2.shaft_a) annotation (Line(
                points={{26.3,1},{46.7,1}},
                color={0,0,0},
                smooth=Smooth.None));
            connect(vol2.feed[1], stage2.drain) annotation (Line(
                points={{63.2,6},{63.2,-5},{58.6,-5},{58.6,-3.9}},
                color={0,0,255},
                smooth=Smooth.None));
            connect(vol2.drain, drain_stage2) annotation (Line(
                points={{72.8,6},{73,6},{73,-91},{64,-91}},
                color={0,0,255},
                smooth=Smooth.None));
            connect(stage2.shaft_b, shaft_b) annotation (Line(
                points={{59.3,1},{95,1},{95,0},{120,0}},
                color={0,0,0},
                smooth=Smooth.None));
            connect(drain_stage1[1:N_drain_stage1r], vol1.drain[1:N_drain_stage1r])
              annotation (Line(
                points={{-15,-66},{39.8,-66},{39.8,6}},
                color={0,0,255},
                smooth=Smooth.None));
            connect(stage1.shaft_a, shaft_a) annotation (Line(points={{13.7,1},{-88,1},{
                    -88,0},{-120,0}},
                                  color={0,0,0}));
            connect(stage1.feed, feed) annotation (Line(points={{14.4,5.2},{14.4,6},{-20,
                    6},{-20,51},{-63,51}}, color={0,0,255}));
            annotation (
              Documentation(info="<html>
<h4>Description</h4>
<p>Two stage turbine with tap-off modelled using
standard <a href=\"modelica://ThermalPower.TwoPhase.TurboMachinery.Turbines.SteamTurbineStodola\">steam turbine models</a> to represent each stage, and
<a href=\"modelica://ThermalPower.TwoPhase.Volumes.Header\">headers</a> to represent the
thermal mass and volume dynamics of the turbine.</p>
<h4>Parametrization</h4>
<p>The turbine stages are parametrized using nominal points, which are defined by the vectorized parameters <code>p_nom</code>, <code>T_nom</code> and <code>m_flow_nom</code>.
The efficencies of the turbines are defined by the vectorized parameters <code>eta_mech</code> and <code>eta_is_base</code>. The parameters <code>use_Bauman</code> and
<code>alpha_Bauman</code> can be used to handle efficiency degradation (common for both stages).</p>
<p>The heat transfer parameters can be used for modelling a thermal mass connected to the volumes of the turbine.
The parameter values represents the summed properties for all volumes in the model and
it is assumed that the thermal properties and internal volumes are identical for all volumes.</p>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"),    Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-120,-100},{120,
                      100}},
                  grid={1,1}), graphics={
                  Line(
                    points={{29,21},{29,10}},
                    color={0,0,0},
                    smooth=Smooth.None),
                  Line(
                    points={{62,20},{62,10}},
                    color={0,0,0},
                    smooth=Smooth.None),
                  Text(
                    extent={{11,-10},{29,-13}},
                    lineColor={0,0,255},
                    textString="P_mech [MW]"),
                  Text(
                    extent={{47,-10},{65,-13}},
                    lineColor={0,0,255},
                    textString="P_mech [MW]"),
                  Text(
                    extent={{-89,-14},{-66,-19}},
                    lineColor={0,0,255},
                    textString="P_mech total [MW]")}),
              Icon(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-120,-100},{120,100}},
                  grid={1,1}), graphics={          Rectangle(
                    extent={{-120,10},{-85,-10}},
                    lineColor={0,0,0},
                    fillPattern=FillPattern.HorizontalCylinder,
                    fillColor={160,160,164}),      Rectangle(
                    extent={{85,10},{120,-10}},
                    lineColor={0,0,0},
                    fillPattern=FillPattern.HorizontalCylinder,
                    fillColor={160,160,164}),
                  Polygon(
                    points={{-85,43},{-85,-43},{85,-97},{85,97},{85,97},{-85,43}},
                    lineColor={0,0,0},
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid,
                    lineThickness=0.5),
                  Polygon(
                    points={{-15,43},{-15,-43},{-63,-28},{-63,28},{-15,43}},
                    lineColor={0,0,0},
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid,
                    lineThickness=0.5),
                  Line(
                    points={{-15,-42},{-15,-58}},
                    color={0,0,0},
                    thickness=0.5),
                  Line(
                    points={{64,-68},{64,-81}},
                    color={0,0,0},
                    thickness=0.5),
                  Polygon(
                    points={{64,68},{64,-68},{12,-51},{12,52},{64,68}},
                    lineColor={0,0,0},
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid,
                    lineThickness=0.5),
                  Line(
                    points={{85,0},{-85,0}},
                    color={0,0,0}),
                  Line(
                    points={{-63,28},{-63,47}},
                    color={0,0,0},
                    thickness=0.5),
                  Line(
                    points={{-15,42},{-15,59},{12,59},{12,52}},
                    color={0,0,0},
                    thickness=0.5)}));
          end Turbine_2stage;

          model Generic
            "Generic heat exchanger with two-phase medium on primary and secondary side"
            import Modelica.Constants.pi;
            import ThermalPower;
             extends ThermalPower.TwoPhase.HeatExchangers.Interfaces.TwoPhase(s_wall=0.003);

            PipeModel_sec secondary(
              redeclare package Medium = SecondaryMedium,
              initOpt=initOpt_sec,
              p_start_in=p_start_in_sec,
              p_start_out=p_start_out_sec,
              p_start=p_start_sec,
              initFromEnthalpy=initFromEnthalpy_sec,
              h_start_in=h_start_in_sec,
              h_start_out=h_start_out_sec,
              h_start=h_start_sec,
              T_start_in=T_start_in_sec,
              T_start_out=T_start_out_sec,
              T_start=T_start_sec,
              X_start=X_start_sec,
              m_flow_start=m_flow_start_sec,
              positiveFlow=positiveFlow_sec,
              from_dp=from_dp_sec,
              dp_smooth=dp_smooth,
              mflow_smooth=mflow_smooth,
              CF_PressureLoss=CF_SecondarySidePressureLoss,
              CF_HeatTransfer=CF_SecondarySideHeatTransfer,
              use_fluidHeatTransfer=true,
              redeclare model Friction = Friction_sec,
              redeclare model HeatTransfer = HeatTransfer_sec,
              n_channels=n_channels_sec,
              L=L_sec,
              D=Dhyd_sec,
              Dhyd=Dhyd_sec,
              A=A_sec,
              V=V_sec,
              n=n,
              A_heat_tot=A_heat_sec_tot,
              C_start=C_start_sec,
              useMeanTempDrivenQ=useMeanTempDrivenQ)
                                   "Fluid side pipe model"
                                      annotation (
              Placement(transformation(extent={{-20,-80},{20,-40}}, rotation=0)));

            PipeModel_prim  primary(
              redeclare package Medium = PrimaryMedium,
              initOpt=initOpt_prim,
              p_start_in=p_start_in_prim,
              p_start_out=p_start_out_prim,
              p_start=p_start_prim,
              initFromEnthalpy=initFromEnthalpy_prim,
              h_start_in=h_start_in_prim,
              h_start_out=h_start_out_prim,
              h_start=h_start_prim,
              T_start_in=T_start_in_prim,
              T_start_out=T_start_out_prim,
              T_start=T_start_prim,
              X_start=X_start_prim,
              m_flow_start=m_flow_start_prim,
              positiveFlow=positiveFlow_prim,
              from_dp=from_dp_prim,
              dp_smooth=dp_smooth,
              mflow_smooth=mflow_smooth,
              CF_PressureLoss=CF_PrimarySidePressureLoss,
              CF_HeatTransfer=CF_PrimarySideHeatTransfer,
              use_fluidHeatTransfer=true,
              redeclare model Friction = Friction_prim,
              redeclare model HeatTransfer = HeatTransfer_prim,
              n_channels=n_channels_prim,
              L=L_prim,
              D=Dhyd_prim,
              Dhyd=Dhyd_prim,
              A=A_prim,
              V=V_prim,
              n=n,
              A_heat_tot=A_heat_prim_tot,
              C_start=C_start_prim,
              useMeanTempDrivenQ=useMeanTempDrivenQ) "Gas side pipe model"
                                                   annotation (
              Placement(transformation(extent={{20,80},{-20,40}}, rotation=0)));

            ThermalPower.TwoPhase.Interfaces.VolumePort
                                                     portA_primary(redeclare
                package Medium =
                         PrimaryMedium) annotation (Placement(transformation(extent={{90,50},{
                      110,70}}, rotation=0), iconTransformation(extent={{80,50},{100,70}})));
            ThermalPower.TwoPhase.Interfaces.FlowPort
                                        portB_primary(redeclare package Medium =
                  PrimaryMedium) annotation (Placement(transformation(extent={{-108,50},{-88,70}},
                    rotation=0), iconTransformation(extent={{-100,50},{-80,70}})));
            ThermalPower.TwoPhase.Interfaces.VolumePort portA_secondary(redeclare
                package Medium =
                         SecondaryMedium) annotation (Placement(transformation(extent={{-110,
                      -70},{-90,-50}}, rotation=0), iconTransformation(extent={{-100,-70},
                      {-80,-50}})));
            ThermalPower.TwoPhase.Interfaces.FlowPort portB_secondary(redeclare
                package Medium =
                         SecondaryMedium) annotation (Placement(transformation(extent={{
                      90,-70},{110,-50}}, rotation=0), iconTransformation(extent={{80,-70},
                      {100,-50}})));

            Modelon.ThermoFluid.HeatExchangers.Records.Summary.Base_pinchlmtd.BaseSummary
              summary(
              T_in=primary.summary.T_in,
              T_out=primary.summary.T_out,
              dp=primary.summary.dp,
              T_sec_in=secondary.summary.T_in,
              T_sec_out=secondary.summary.T_out,
              dp_sec=secondary.summary.dp,
              m_flow_sec=secondary.summary.m_flow,
              m_flow=primary.summary.m_flow,
              h_in=primary.summary.h_in,
              h_out=primary.summary.h_out,
              h_sec_in=secondary.summary.h_in,
              h_sec_out=secondary.summary.h_out,
              Q_flow=sum(primary.q.Q_flow),
              p_in=portA_primary.p,
              p_out=portB_primary.p,
              p_sec_in=portA_secondary.p,
              p_sec_out=portB_secondary.p,
              Q_flow_sec=sum(secondary.q.Q_flow))
              annotation (Placement(transformation(extent={{-80,20},{-60,40}})));

            ThermalPower.Thermal.Walls.Wall wall(
              n=n,
              n_ext=n,
              steadyStateInit=wallSteadyStateInit,
              redeclare model WallMaterial = WallMaterial,
              s=s_wall,
              A_heat=A_wall,
              CounterTemps=if flowConfiguration == Modelon.ThermoFluid.Choices.FlowConfiguration.CounterFlow
                   then true else false,
              includeThermalResistance=wallThermalResistance,
              Tstart=T_start_wall,
              Tstart1=Tstart_sec[2],
              TstartN=Tstart_sec[n + 1])
              annotation (Placement(transformation(extent={{-20,-22},{20,18}})));

            ThermalPower.Thermal.Interfaces.HeatPort_b heatPort_ext[size(wall.port_b, 1)]
              if enable_extHeatPort "External heat connector to primary side" annotation (
               Placement(transformation(extent={{-94,-8},{-74,12}}), iconTransformation(
                    extent={{-90,-8},{-74,8}})));
            parameter Boolean useMeanTempDrivenQ=false
              "If true, heat flow in each control volume is driven by the average temperature";
          equation
            connect(secondary.portA, portA_secondary) annotation (Line(
                points={{-20,-60},{-100,-60}},
                color={0,0,255},
                smooth=Smooth.None));
            connect(secondary.portB, portB_secondary) annotation (Line(
                points={{20,-60},{100,-60}},
                color={0,0,255},
                smooth=Smooth.None));
            connect(secondary.q, wall.port_a) annotation (Line(
                points={{0,-50},{0,-14},{3.33067e-016,-14}},
                color={191,0,0},
                thickness=0.5,
                smooth=Smooth.None));
            connect(wall.port_b, primary.q) annotation (Line(
                points={{0,10},{0,50}},
                color={191,0,0},
                thickness=0.5,
                smooth=Smooth.None));
            connect(wall.port_b, heatPort_ext) annotation (Line(
                points={{0,10},{0,14},{-28,14},{-28,2},{-84,2}},
                color={191,0,0},
                thickness=0.5,
                smooth=Smooth.None));
            connect(primary.portB, portB_primary) annotation (Line(
                points={{-20,60},{-98,60}},
                color={0,0,255},
                smooth=Smooth.None));
            connect(primary.portA, portA_primary) annotation (Line(
                points={{20,60},{100,60}},
                color={0,0,255},
                smooth=Smooth.None));
            annotation (defaultComponentName="hex",
              Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,
                      100}}), graphics),
              Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
                              graphics={Rectangle(
                    extent={{-80,80},{80,-80}},
                    lineColor={255,0,0},
                    lineThickness=0.5,
                    fillColor={255,128,0},
                    fillPattern=FillPattern.Solid),Rectangle(
                    extent={{50,90},{-50,60}},
                    lineColor={0,0,255},
                    pattern=LinePattern.None,
                    fillColor={235,235,235},
                    fillPattern=FillPattern.Solid),Text(
                    extent={{-100,90},{100,106}},
                    lineColor={0,0,0},
                    textString="Power [MW]"),Text(
                    extent={{-40,60},{40,88}},
                    lineColor={0,0,0},
                    textString=DynamicSelect("0.0",
                        String(
                        summary.Q_flow/1e6,
                        format="1.1f"))),Line(
                    points={{-60,60},{60,-60}},
                    color={255,0,0},
                    thickness=0.5),Line(
                    points={{60,60},{-60,-60}},
                    color={255,0,0},
                    thickness=0.5),Text(extent={{-100,-104},{100,-84}},
                                                                     textString="%name")}),
              Documentation(info="<html>
<h4>Description</h4>
<p>Model of a generic heat exchanger with a two-phase medium on primary and secondary side. </p>
<h4>Parametrization</h4>
<p>This model can be separated into three components:</p>
<ul>
<li>wall - discretized dynamic model</li>
<li>pipe primary side (two-phase)</li>
<li>pipe secondary side (two-phase)</li>
</ul>
<p>The pipes are replaceable and can be changed by modifying <code>PipeModel_prim </code>and <code>PrimModel_sec</code>. The dynamics on the flow side depends therefore on which pipe model that has been selected.</p>
<p>The <code>flowConfiguration </code>parameter controls how the primary flow channel is connected to the wall. The default setting is counter flow, and the first segment of the primary channel is then connected to the last segment of the wall. For co-flow each segment of the primary channel is connected to the same segment of the wall. Note that the parameter setting do not affect the port icon positions, which always indicate counter flow.</p>
<h5>Discretization</h5>
<p>The wall and pipe models are divided into n segments, where n is a parameter. </p>
<p>Higher discretizations gives more accurate results but also larger systems to solve for which takes more time and are usually more numerically challenging for the solver.</p>
<h5>Heat transfer</h5>
<p>Heat transfer correlations can be specified on both primary and secondary side. The calculated heat transfer coeffecient can be adjusted by changing the value of the calibration factor under Correlations tab .</p>
<h5>Pressure drop</h5>
<p>Pressure drop correlations can be changed by modifying parameters <code>Friction_prim</code> respective <code>Friction_sec</code>. The calculated pressure drop can be adjusted by modyfing calibration factor parameters <code>CF_PrimarySidePressureLoss</code> and <code>CF_SecondarySidePrimaryLoss</code>
<h5>Initialization</h5>
<p>Initialization options are specified under the initialization tab. </p>
<p>Its possible to initialize in steady-state. To have a successful steady-state initialization its important with good start-values.</p>
<h4>Assumptions</h4>
<p>These assumptions corresponds to the default pipe models. If a different pipe model is used, see documentation for the corresponding model.</p>
<ul>
<li>The longitudinal heat diffusion term is neglected. </li>
<li>The energy balance equation is written by assuming a uniform pressure distribution; the pressure drop is lumped at the outlet. </li>
<li>Momentum balance equations are static</li>
</ul>
<h4>Validity</h4>
<h5>Primary side (two-phase)</h5>
<p>The primary side is valid for both single phase and two-phase operating region.</p>
<h5>Secondary side (two-phase)</h5>
<p>The secondary side is valid for both single phase and two-phase operating region. </p>
<h4>Output</h4>
<p>The most common variables of interest are found in the summary record. </p>
<p>When looking into the channel models, the segments are numbered from inlet to outlet at the nominal flow direction (<code>portA</code> to <code>portB</code>). The wall segments are numbered from inlet to outlet of the secondary channel for nominal flow.</p>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
          end Generic;

          connector FlowPort "Two-phase flow port"
            extends ThermalPower.Interfaces.FluidPort(redeclare replaceable
                package Medium =
                         Modelon.Media.PreDefined.TwoPhase.WaterIF97
                                                               constrainedby
                Modelon.Media.Interfaces.TwoPhaseMedium);

            annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                      -100},{100,100}}), graphics={Ellipse(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,255},
                    fillColor={0,127,255},
                    fillPattern=FillPattern.Solid),Text(extent={{-88,192},{112,98}},
                    textString="%name")}), Icon(coordinateSystem(preserveAspectRatio=
                      false, extent={{-100,-100},{100,100}}), graphics={Ellipse(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,255},
                    fillColor={0,127,255},
                    fillPattern=FillPattern.Solid),Text(
                    extent={{-126,160},{130,104}},
                    lineColor={0,0,0},
                    fillColor={0,127,255},
                    fillPattern=FillPattern.Solid,
                    textString="%name")}),
              Documentation(revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>",           info="<html>
<h4>Description</h4>
<p>This is a flow port of a two-phase connector. It indicates that it&apos;s attached to a a model that determines the flow. For further information about connector principles, see <a href=\"modelica://ThermalPower.Information.UsersGuide.GeneralInstructions.ConnectingPrinciples\">ThermalPower.Information.UsersGuide.GeneralInstructions.ConnectingPrinciples</a>.</p>
</html>"));
          end FlowPort;

          model MixVolume "Mixing volume, one- or two-phase"
            extends ThermalPower.SubComponents.Internal.Icons.Water.Volume;
            replaceable package Medium =
              Modelon.Media.PreDefined.TwoPhase.WaterIF97                            constrainedby
              Modelon.Media.Interfaces.TwoPhaseMedium "Medium model"
                             annotation (choicesAllMatching);

            Modelon.Media.Units.AbsolutePressure p_sat(start=pstart)
              "Saturation pressure";
            Medium.VolumeDynamics fluid(
              quasiStatic=QuasiStatic,
              V_tot=V_tot,
              initOpt=initOpt,
              p_start=pstart,
              T_start=Tstart,
              h_start=if not useTstart then hstart else Medium.specificEnthalpy(
                  Medium.setState_pTX(
                  pstart,
                  Tstart,
                  fluid.X_start)),
              X_start=Medium.fixedComposition,
              C_start=Cstart,
              dE=dE,
              dMX=dMX,
              dMC=dMC);

            constant Modelica.Units.SI.AbsolutePressure pcrit=Medium.criticalPressure;
            parameter Modelon.ThermoFluid.Choices.InitOptions initOpt=
                Modelon.ThermoFluid.Choices.InitOptions.initialValues
              "Initialization option"
              annotation (Dialog(tab="Initialization"), Evaluate=true);
            parameter Boolean useTstart=false "Use Tstart if true, otherwise hstart"
              annotation (Dialog(tab="Initialization"), Evaluate=true);
            parameter Modelon.Media.Units.AbsolutePressure pstart=50e5
              "Pressure start value" annotation (Dialog(tab="Initialization"));
            parameter Modelon.Media.Units.Temperature Tstart=
                Modelica.Units.Conversions.from_degC(  120) "Temperature start value"
              annotation (Dialog(enable=useTstart, tab="Initialization"));
            parameter Modelon.Media.Units.SpecificEnthalpy hstart=1.5e6
              "Enthalpy start value"
              annotation (Dialog(enable=not useTstart, tab="Initialization"));
            parameter Real[:] Cstart=fill(0,Medium.nC)
              "Trace component concentration start value"                                          annotation(Dialog(tab="Initialization"));

            parameter Modelica.Units.SI.Volume V_tot=0.1 "Total volume"
              annotation (Dialog(group="Geometry"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom=1.0
              "Nominal mass flowrate (total)"
              annotation (Dialog(tab="Initialization", group="Nominal parameters"));
            parameter Boolean QuasiStatic=false
              "Quasi-static model (mass, energy and momentum static balances"
              annotation (Evaluate=true, Dialog(group="Options"));
            parameter Integer N_feed=0 "Number of feed ports"
              annotation (Dialog(connectorSizing=true));
            parameter Integer N_drain=0 "Number of drain ports"
              annotation (Dialog(connectorSizing=true));
              Modelica.Units.SI.AbsolutePressure p(start=pstart, stateSelect=StateSelect.prefer)
              "fluid pressure";
              Modelica.Units.SI.SpecificEnthalpy h(stateSelect=StateSelect.prefer, start=
                  hstart) "Fluid specific enthalpy";

            Modelica.Units.SI.Temperature T(start=Tstart) "Fluid temperature";
            Modelica.Units.SI.Mass M "Total mass";
            Modelica.Units.SI.Mass[Medium.nS] MXi "Total component mass";
            Modelica.Units.SI.SpecificEnthalpy hl=Medium.bubbleEnthalpy_pX(p_sat)
              "Liquid specific enthalpy";
            Modelica.Units.SI.SpecificEnthalpy hv=Medium.dewEnthalpy_pX(p_sat)
              "Vapor specific enthalpy";
            Real x "Mass fraction of vapor in the fluid volume";
            ThermalPower.TwoPhase.Interfaces.VolumePort feed[N_feed](
              each p(start=pstart),
              each m_flow(start=m_flow_nom),
              each h_outflow(start=hstart),
              redeclare package Medium = Medium) annotation (Placement(transformation(
                    extent={{-110,-10},{-90,10}}, rotation=0), iconTransformation(extent=
                      {{-90,-10},{-70,10}})));
            ThermalPower.TwoPhase.Interfaces.VolumePort drain[N_drain](
              each p(start=pstart),
              each m_flow(start=-m_flow_nom),
              each h_outflow(start=hstart),
              redeclare package Medium = Medium) annotation (Placement(transformation(
                    extent={{90,-10},{110,10}}, rotation=0), iconTransformation(extent={{
                      70,-10},{90,10}})));

            Modelica.Units.SI.EnthalpyFlowRate[N_feed] H_flow_feed
              "Enthalpy flowrate at feed port";
            Modelica.Units.SI.EnthalpyFlowRate[N_drain] H_flow_drain
              "Enthalpy flowrate at drain port";
            Modelica.Units.SI.MassFlowRate[N_feed,Medium.nS] MX_flow_feed
              "Component massflow rates at port feed";
            Modelica.Units.SI.MassFlowRate[N_drain,Medium.nS] MX_flow_drain
              "Component massflow rates at port drain";
            Modelica.Units.SI.MassFlowRate[N_feed,Medium.nC] MC_flow_feed
              "Trace component massflow rates at port feed";
            Modelica.Units.SI.MassFlowRate[N_drain,Medium.nC] MC_flow_drain
              "Trace component massflow rates at port drain";

            Modelica.Units.SI.EnergyFlowRate dE=sum(H_flow_feed) + sum(H_flow_drain)
              "Energy residual for balance";
            Modelica.Units.SI.SpecificEnthalpy h_out=h "Steam outflow specific enthalpy";
            Modelica.Units.SI.MassFlowRate[Medium.nS] dMX={sum(MX_flow_feed[:, j]) + sum(
                MX_flow_drain[:, j]) for j in 1:Medium.nS} "Mass fraction residual";
            Real[Medium.nC] dMC={sum(MC_flow_feed[:, j]) + sum(MC_flow_drain[:, j])
                for j in 1:Medium.nC} "Trace component derivatives";

          protected
            Modelica.Units.SI.MassFlowRate dM=sum(dMX) "Mass residual for balance";
               final parameter Modelica.Units.SI.SpecificInternalEnergy u_offset_reference=
                Medium.specificInternalEnergy(Medium.setState_pTX(system_TPL.p_reference,
                system_TPL.T_reference));

          public
            ThermalPower.TwoPhase.Volumes.Records.VolumeSummary summary(
              V=V_tot,
              p=p,
              T=T,
              X={1},
              h=h,
              x=x,
              C=fluid.C)
              annotation (Placement(transformation(extent={{-80,-76},{-60,-56}})));
            ThermalPower.SubComponents.PropertySummation.TwoPhaseProperties twoPhaseProperties(
              m=M,
              V=V_tot,
              E=fluid.M*(fluid.u - u_offset_reference))
              annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
            outer ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
          equation
            M = fluid.M "Total steam mass";
            MXi = M*fluid.X "Total component masses";

            p_sat = p;
            x = noEvent(if p/pcrit < 1.0 then max(0.0, min(1.0, (h - hl)/max(hv - hl,
              1e-6))) else 1.0) "Steam quality";

            // Fluid properties
            p = fluid.p;
            h = fluid.h;
            T = fluid.T;

            // Boundary conditions
            feed.p = fill(p, N_feed);
            feed.h_outflow = fill(h_out, N_feed);
            drain.p = fill(p, N_drain);
            drain.h_outflow = fill(h_out, N_drain);
            feed.X_outflow = fill(fluid.X, N_feed);
            drain.X_outflow = fill(fluid.X, N_drain);
            feed.C_outflow = fill(fluid.C, N_feed);
            drain.C_outflow = fill(fluid.C, N_drain);
            //Mass and energy balances
            for i in 1:N_feed loop
              H_flow_feed[i] = feed[i].m_flow*actualStream(feed[i].h_outflow);
              MX_flow_feed[i, :] = feed[i].m_flow*actualStream(feed[i].X_outflow);
              MC_flow_feed[i, :] = feed[i].m_flow*actualStream(feed[i].C_outflow);
            end for;

            for i in 1:N_drain loop
              H_flow_drain[i] = drain[i].m_flow*actualStream(drain[i].h_outflow);
              MX_flow_drain[i, :] = drain[i].m_flow*actualStream(drain[i].X_outflow);
              MC_flow_drain[i, :] = drain[i].m_flow*actualStream(drain[i].C_outflow);
            end for;
            annotation (
              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                      100}}), graphics={Text(
                    extent={{-100,-10},{100,10}},
                    lineColor={255,255,255},
                    textString="%name")}),
              Documentation(info="<html>
<h4>Description</h4>
<p>This is a model of a volume with complete mixing. The model handles one- and two-phase conditions and has two flow connectors, feed and drain. </p>
<h4>Parametrization</h4>
<p>MixVolume can also be used as a base volume for creating lumped volume components, e.g. adding heat transfer or other connectors. Additional terms can then be added to the balance equations by modifying the variables <code>dM</code> and <code>dE</code>. See for example the <a href=\"modelica://ThermalPower.TwoPhase.Volumes.Header\">ThermalPower.TwoPhase.Volumes.Header</a> model. </p>
<p>The following options are available: </p>
<ul>
<li><code>QuasiStatic = true</code>: This turns on static mass- and energy balances. The default setting (false) uses dynamic balances. </li>
</ul>
<h4>Assumptions</h4>
<ul>
<li>Only the fluid side is modeled, no metal wall is included. </li>
<li>Ideal mixing. It&apos;s assumed that the volume can be represented by one lumped pressure and temperature.</li>
<li>The volume is fixed and do not change with a varying pressure.</li>
</ul>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"),    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                      100}})));
          end MixVolume;

          connector VolumePort "TwoPhase volume port connector"

            extends ThermalPower.Interfaces.FluidPort(redeclare replaceable
                package Medium =
                         Modelon.Media.PreDefined.TwoPhase.WaterIF97 constrainedby
                Modelon.Media.Interfaces.TwoPhaseMedium);

            annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                      -100},{100,100}}), graphics={Ellipse(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,255},
                    fillColor={0,127,255},
                    fillPattern=FillPattern.Solid),Ellipse(
                    extent={{-80,80},{80,-80}},
                    lineColor={0,127,255},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),Text(extent={{-88,206},{112,112}},
                    textString="%name")}), Icon(coordinateSystem(preserveAspectRatio=
                      false, extent={{-100,-100},{100,100}}), graphics={Ellipse(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,255},
                    fillColor={0,127,255},
                    fillPattern=FillPattern.Solid),Ellipse(
                    extent={{-80,80},{80,-80}},
                    lineColor={0,127,255},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),Text(
                    extent={{-126,160},{130,104}},
                    lineColor={0,0,0},
                    fillColor={0,127,255},
                    fillPattern=FillPattern.Solid,
                    textString="%name")}),
              Documentation(revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>",           info="<html>
<h4>Description</h4>
<p>This is a volume port of a two-phase connector. It indicates that it&apos;s attached to a dynamic volume or a pressure boundary. For further information about connector principles, see <a href=\"modelica://ThermalPower.Information.UsersGuide.GeneralInstructions.ConnectingPrinciples\">ThermalPower.Information.UsersGuide.GeneralInstructions.ConnectingPrinciples</a>.</p>
</html>"));
          end VolumePort;

          model Drum "Drum for circulation boilers"
            extends
              ThermalPower.SubComponents.Internal.Icons.Water.DrumHorizontal(
                viz_level=y, viz_level_max=y_max);
            import Modelica.Constants.pi;
            replaceable package Medium =
              Modelon.Media.PreDefined.TwoPhase.WaterIF97                            constrainedby
              Modelon.Media.Interfaces.TwoPhaseMedium "Medium model"
                             annotation (choicesAllMatching);

            Medium.ThermodynamicState liquid;
            Medium.ThermodynamicState vapor;
            parameter Modelica.Units.SI.Length portPosition_downcomer(max=0) = if DrumOrientation == 0 then -rint else -L/
              2 "Position of downcomer port relative to centerline"
              annotation (Dialog(group="Port position", tab="Advanced"));
            parameter Modelica.Units.SI.Length portPosition_riser=0 "Position of riser port relative to centerline"
              annotation (Dialog(group="Port position", tab="Advanced"));

            parameter Boolean enable_heatConnectorToVapor=false
              "Enable heat connector to vapor" annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(tab="Advanced",group="Options"));
            parameter Boolean enable_heatConnectorToLiquid=false
              "Enable heat connector to liquid" annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(tab="Advanced",group="Options"));

            constant Modelica.Units.SI.AbsolutePressure pcrit=Medium.criticalPressure;
            parameter Modelica.Units.SI.Length rint=0 "Internal radius"
              annotation (Dialog(group="Geometry"));
            parameter Modelica.Units.SI.Length rext=0 "External radius"
              annotation (Dialog(group="Geometry"));
            parameter Modelica.Units.SI.Length L=0 "Length"
              annotation (Dialog(group="Geometry"));
            parameter Modelica.Units.SI.HeatCapacity Cm=0
              "Total Heat Capacity of the metal wall" annotation (Evaluate=true);
            input Modelica.Units.SI.Temperature Text=system_TPL.summary.T_ambient
              "External atmospheric temperature" annotation (Dialog(group="Inputs"));

            parameter Modelica.Units.SI.Time tauev=15 "Time constant of bulk evaporation"
              annotation (Dialog(group="Heat transfer, condensation and evaporation"));
            parameter Modelica.Units.SI.Time tauc=15 "Time constant of bulk condensation"
              annotation (Dialog(group="Heat transfer, condensation and evaporation"));
            parameter Real Kcs=0
              "Steam/liquid surface condensation coefficient [kg/(s.m^2.K)]"
              annotation (Dialog(group="Heat transfer, condensation and evaporation"));
            parameter Real Ks=0
              "Steam/liquid surface heat transfer coefficient [W/(m^2.K)]"
              annotation (Dialog(group="Heat transfer, condensation and evaporation"));
            parameter Modelica.Units.SI.CoefficientOfHeatTransfer gext=0
              "Heat transfer coefficient between metal wall and external atmosphere"
              annotation (Dialog(group="Heat transfer, condensation and evaporation"));
            parameter Modelica.Units.SI.CoefficientOfHeatTransfer gl=200
              "Heat transfer coefficient between metal wall and liquid phase" annotation (
               Evaluate=true, Dialog(group="Heat transfer, condensation and evaporation"));
            parameter Modelica.Units.SI.CoefficientOfHeatTransfer gv=200
              "Heat transfer coefficient between metal wall and vapor phase" annotation (
                Evaluate=true, Dialog(group="Heat transfer, condensation and evaporation"));
            parameter Modelica.Units.SI.ThermalConductivity lm=20
              "Metal wall thermal conductivity"
              annotation (Dialog(group="Heat transfer, condensation and evaporation"));

            parameter Real avr=1.2 "Phase separation efficiency coefficient";
            parameter Integer DrumOrientation=0 "0: Horizontal; 1: Vertical"
              annotation (Dialog(group="Geometry"));
            parameter Modelica.Units.SI.AbsolutePressure pstart=1e5
              "Pressure start value" annotation (Dialog(tab="Initialization"));
            parameter Modelica.Units.SI.SpecificEnthalpy hlstart=1e5
              "Liquid enthalpy start value" annotation (Dialog(tab="Initialization"));
            parameter Modelica.Units.SI.SpecificEnthalpy hvstart=2.78e6
              "Vapor enthalpy start value" annotation (Dialog(tab="Initialization"));
            parameter Modelica.Units.SI.Temperature Tmstart=300
              "Metal wall temperature start value"
              annotation (Dialog(tab="Initialization"));
            parameter Modelica.Units.SI.Length ystart=0.0 "Level start value"
              annotation (Dialog(tab="Initialization"));
            parameter Real[Medium.nC] Clstart=fill(0,Medium.nC)
              "Liquid trace component concentration start value" annotation (Dialog(tab="Initialization"));
            parameter Real[Medium.nC] Cvstart=Clstart
              "Vapor trace component concentration start value" annotation (Dialog(tab="Initialization"));
            parameter Modelon.ThermoFluid.Choices.InitOptions initOpt=
                Modelon.ThermoFluid.Choices.InitOptions.initialValues
              "Initialization option" annotation (Dialog(tab="Initialization"));

            Modelica.Units.SI.AbsolutePressure p(start=pstart, stateSelect=StateSelect.prefer)
              "Surface pressure";
            Modelica.Units.SI.SpecificEnthalpy hl(start=hlstart, stateSelect=StateSelect.prefer)
              "Liquid specific enthalpy";
            Modelica.Units.SI.SpecificEnthalpy hv(start=hvstart, stateSelect=StateSelect.prefer)
              "Vapor specific enthalpy";
            Modelica.Units.SI.Length y(start=ystart) "Level (referred to the centreline)";
            final parameter Modelica.Units.SI.Length y_max=if DrumOrientation == 0 then
                rint else L/2 "Maximum possible level (relative to the centerline)";
            final parameter Modelica.Units.SI.Length y_min=if DrumOrientation == 0 then -
                rint else -L/2 "Minimum possible level (relative to the centerline)";
            Modelica.Units.SI.Temperature Tm(start=Tmstart) "Wall temperature";
            Modelica.Units.SI.Temperature Ts "Saturated water temperature";
            Modelica.Units.SI.Volume Vv(start=pi*rint^2*L/2)
              "Volume occupied by the vapor";
            Modelica.Units.SI.Volume Vl(start=pi*rint^2*L/2)
              "Volume occupied by the liquid";
            Real xl "Mass fraction of vapor in the liquid volume";
            Real xv "Steam quality in the vapor volume";
            Real xr "Steam quality of the fluid from the risers";
            Modelica.Units.SI.SpecificEnthalpy hr
              "Specific enthalpy of fluid from the risers";
            Modelica.Units.SI.MassFlowRate wr "Mass flowrate from the risers";
            Modelon.Media.Units.Temperature T_liq "Liquid temperature";
            Modelon.Media.Units.Temperature T_vap "Vapor temperature";
            Modelica.Units.SI.SpecificInternalEnergy u_liq "Liquid temperature";
            Modelica.Units.SI.SpecificInternalEnergy u_vap "Vapor temperature";
            Modelica.Units.SI.Mass Ml "Liquid mass";
            Modelica.Units.SI.Mass Mv "Vapor mass";
            Modelica.Units.SI.SpecificEnthalpy hrv
              "Specific enthalpy of vapor from the risers after separation";
            Modelica.Units.SI.SpecificEnthalpy hrl
              "Specific enthalpy of liquid from the risers after separation";
            Modelica.Units.SI.SpecificEnthalpy hls
              "Specific enthalpy of saturated liquid";
            Modelica.Units.SI.SpecificEnthalpy hvs "Specific enthalpy of saturated vapor";
            Modelica.Units.SI.MassFlowRate wrl "Mass flowrate of liquid from the risers";
            Modelica.Units.SI.MassFlowRate wrv "Mass flowrate of vapor from the risers";
            Modelica.Units.SI.MassFlowRate wc "Mass flowrate of bulk condensation";
            Modelica.Units.SI.MassFlowRate wcs "Mass flowrate of surface condensation";
            Modelica.Units.SI.MassFlowRate wev "Mass flowrate of bulk evaporation";
            Modelica.Units.SI.HeatFlowRate Qmv "Heat flow from the wall to the vapor";
            Modelica.Units.SI.HeatFlowRate Qvl "Heat flow from the vapor to the liquid";
            Modelica.Units.SI.HeatFlowRate Qml "Heat flow from the wall to the liquid";
            Modelica.Units.SI.HeatFlowRate Qme
              "Heat flow from the wall to the atmosphere";
            Modelica.Units.SI.HeatFlowRate Q_external_vapor
              "Heat flow from the external vapor heat port";
            Modelica.Units.SI.HeatFlowRate Q_external_liquid
              "Heat flow from the external liquid heat port";
            Modelica.Units.SI.Energy El "Liquid internal energy";
            Modelica.Units.SI.Energy Ev "Vapor internal energy";
            ThermalPower.Units.LiquidDensity rhol "Liquid density";
            ThermalPower.Units.GasDensity rhov "Vapor density";
            Real xrv "Steam quality of the separated steam from the risers";
            Real gml "Total heat transfer coefficient (wall-liquid)";
            Real gmv "Total heat transfer coefficient (wall-vapor)";
            Real a;
            Modelica.Units.SI.Area Aml "Surface of the wall-liquid interface";
            Modelica.Units.SI.Area Amv "Surface of the wall-vapor interface";
            Modelica.Units.SI.Area Asup "Surface of the liquid-vapor interface";
            Modelica.Units.SI.Area Aext "External drum surface";
            Real[Medium.nC] Cv(start=Cvstart) "Trace component concentrations (vapor)";
            Real[Medium.nC] dCv "Trace concentration derivative (vapor)";
            Real[Medium.nC] Cl(start=Clstart) "Trace component concentrations (liquid)";
            Real[Medium.nC] dCl "Trace concentration derivative (liquid)";

          public
            ThermalPower.TwoPhase.Interfaces.VolumePort feed(
              p(start=pstart),
              h_outflow(start=hlstart),
              redeclare package Medium = Medium) annotation (Placement(transformation(
                    extent={{-110,-30},{-90,-10}}, rotation=0), iconTransformation(extent=
                     {{-100,-12},{-80,8}})));
            ThermalPower.TwoPhase.Interfaces.VolumePort drain(
              p(start=pstart),
              h_outflow(start=hvstart),
              redeclare package Medium = Medium) annotation (Placement(transformation(
                    extent={{52,56},{72,76}}, rotation=0), iconTransformation(extent={{50,
                      48},{70,68}})));
            ThermalPower.TwoPhase.Interfaces.VolumePort riser(
              p(start=pstart),
              h_outflow(start=hlstart),
              redeclare package Medium = Medium) annotation (Placement(transformation(
                  origin={80,-60},
                  extent={{-10,-10},{10,10}},
                  rotation=270), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={70,-50})));
            ThermalPower.TwoPhase.Interfaces.VolumePort downcomer(
              p(start=pstart),
              h_outflow(start=hlstart),
              redeclare package Medium = Medium) annotation (Placement(transformation(
                  origin={-60,-60},
                  extent={{-10,-10},{10,10}},
                  rotation=90), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-70,-50})));
            ThermalPower.TwoPhase.Interfaces.VolumePort blowdown(
              p(start=pstart),
              h_outflow(start=hlstart),
              redeclare package Medium = Medium) annotation (Placement(transformation(
                  origin={0,-100},
                  extent={{-10,-10},{10,10}},
                  rotation=270), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={0,-80})));
            final parameter Boolean dynamicWallModel=if Cm > 0 and (gl > 0 or gv > 0)
                 then true else false "If true a dynamic wall model is used"
              annotation (Evaluate);
             final parameter Modelica.Units.SI.SpecificInternalEnergy u_offset_reference=
                Medium.specificInternalEnergy(Medium.setState_pTX(system_TPL.p_reference,
                system_TPL.T_reference));
            ThermalPower.TwoPhase.Records.DrumSummary summary(
              T_vap=T_vap,
              T_liquid=T_liq,
              T_wall=Tm,
              p=p,
              m_flow_in_feed=feed.m_flow,
              level=y,
              level_max=y_max,
              level_min=y_min,
              x_liq=xl,
              x_vap=xv,
              x_risers=xr,
              Q_loss=Qme,
              m_flow_in_risers=riser.m_flow,
              h_in_feed=inStream(feed.h_outflow),
              h_out_steam=drain.h_outflow,
              h_out_condensate=downcomer.h_outflow,
              h_in_riser=inStream(riser.h_outflow),
              m_flow_out_drain=-drain.m_flow,
              m_flow_out_downcomer=-downcomer.m_flow,
              m_flow_out_blowdown=-blowdown.m_flow,
              T_sat=Ts,
              h_sat_liq=hls,
              h_sat_vap=hvs)
              annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
            Modelica.Blocks.Interfaces.RealOutput level annotation (Placement(
                  transformation(extent={{94,-14},{114,6}}), iconTransformation(extent={{
                      90,-6},{104,8}})));
            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b heat_liquid(T=T_liq,Q_flow=Q_external_liquid) if enable_heatConnectorToLiquid annotation (
                Placement(transformation(extent={{-10,-42},{10,-22}}), iconTransformation(
                    extent={{-8,-52},{6,-38}})));
            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b heat_vapor(T=T_vap, Q_flow=
                  Q_external_vapor)  if enable_heatConnectorToVapor
              annotation (Placement(transformation(extent={{-10,58},{10,78}}),
                  iconTransformation(extent={{-8,54},{6,68}})));
            ThermalPower.SubComponents.PropertySummation.TwoPhaseProperties twoPhaseProperties(
              m=Mv + Ml,
              V=Vv + Vl,
              E=Mv*(u_vap - u_offset_reference) + Ml*(u_liq - u_offset_reference))
              annotation (Placement(transformation(extent={{-56,20},{-36,40}})));
            ThermalPower.SubComponents.PropertySummation.WallProperties wallProperties(m=if
                  dynamicWallModel then Cm/500 else 0, E=if dynamicWallModel then Cm*(Tm
                   - system_TPL.T_reference) else 0)
              annotation (Placement(transformation(extent={{-80,21},{-60,41}})));
            outer ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
          equation
            assert(DrumOrientation == 0 and y > -rint or DrumOrientation == 1 and y > -L/
              2, "Empty boiler drum: liquid level is too low.");
            assert(Vv > 0, "Full boiler drum:liquid level is too high");
            der(Mv) = wrv + wev + drain.m_flow - wc - wcs "Vapor volume mass balance";
            der(Ml) = feed.m_flow + wrl + wc + wcs + downcomer.m_flow + blowdown.m_flow
               - wev "Liquid volume mass balance";
            der(Ev) = wrv*hrv + (wev - wcs)*hvs - wc*hls + drain.m_flow*actualStream(
              drain.h_outflow) + Qmv - Qvl+Q_external_vapor - p*der(Vv)
              "Vapor volume energy balance";
            der(El) = feed.m_flow*actualStream(feed.h_outflow) + wrl*hrl + wc*hls + (wcs
               - wev)*hvs + downcomer.m_flow*actualStream(downcomer.h_outflow) + blowdown.m_flow
              *actualStream(blowdown.h_outflow) + Qml + Qvl+Q_external_liquid - p*der(Vl)
              "Liquid volume energy balance";

             // Trace component balance - vapor volume
            dCv*Mv+der(Mv)*Cv=wrv*actualStream(riser.C_outflow) + wev*Cl + drain.m_flow*actualStream(drain.C_outflow) - (wc - wcs)*Cv;
            der(Cv)=dCv;

             // Trace component balance - liquid volume
            dCl*Ml+der(Ml)*Cl=feed.m_flow*actualStream(feed.C_outflow) + wrl*actualStream(riser.C_outflow) + (wc + wcs)*Cv + downcomer.m_flow*actualStream(downcomer.C_outflow) + blowdown.m_flow*actualStream(blowdown.C_outflow)
               - wev*Cl;
            der(Cl)=dCl;

            //Metal wall energy balance with singular cases
            if dynamicWallModel then
              Cm*der(Tm) = -Qml - Qmv - Qme "Metal wall dynamic energy balance";
            elseif (gl > 0 or gv > 0) then
              0 = -Qml - Qmv - Qme "Metal wall static energy balance";
            else
              Tm = 300 "Wall temperature doesn't matter";
            end if;
            Mv = Vv*rhov "Vapor volume mass";
            Ml = Vl*rhol "Liquid volume mass";
            Ev = Mv*u_vap "Vapor volume energy";
            El = Ml*u_liq "Liquid volume energy";
            wev = xl*rhol*Vl/tauev "Bulk evaporation flow rate in the liquid volume";
            wc = (1 - xv)*rhov*Vv/tauc "Bulk condensation flow rate in the vapor volume";
            wcs = Kcs*Asup*(Ts - T_liq) "Surface condensation flow rate";
            Qme = gext*Aext*(Tm - Text)
              "Heat flow from metal wall to external environment";
            Qml = gml*Aml*(Tm - T_liq) "Heat flow from metal wall to liquid volume";
            Qmv = gmv*Amv*(Tm - T_vap) "Heat flow from metal wall to vapor volume";
            Qvl = Ks*Asup*(T_vap - Ts) "Heat flow from vapor to liquid volume";
            xv = noEvent(if p/pcrit < 1.0 then max(0.0, min(1.0, (hv - hls)/max(hvs - hls,
              1e-6))) else 1.0) "Steam quality in the vapor volume";
            xl = noEvent(if p/pcrit < 1.0 then max(0.0, min(1.0, (hl - hls)/max(hvs - hls,
              1e-6))) else 1.0) "Steam quality in the liquid volume";
            gml = if abs(gl) <= (0.0+Modelica.Constants.eps) then 0 else 1/(1/gl + a*rint/lm)
              "Total Heat conductance metal-liquid";
            gmv = if abs(gv) <= (0.0+Modelica.Constants.eps) then 0 else 1/(1/gv + a*rint/lm)
              "Total Heat conductance metal-vapor";
            a = rext^2/(rext^2 - rint^2)*Modelica.Math.log(rext/rint) - 0.5;

            if not enable_heatConnectorToVapor then
              Q_external_vapor=0;
            end if;
            if not enable_heatConnectorToLiquid then
              Q_external_liquid=0;
            end if;

            if DrumOrientation == 0 then
              Vl = L*(rint^2*Modelica.Math.acos(-y/rint) + y*sqrt(rint^2 - y^2))
                "Liquid volume";
              Aml = 2*Vl/L + 2*rint*Modelica.Math.acos(-y/rint)*L
                "Metal-liquid interface area";
              Asup = 2*sqrt(rint^2 - y^2)*L "Liquid-vapor interface area";
            else
              Vl = pi*rint^2*(y + L/2) "Liquid volume";
              Aml = pi*rint^2 + 2*pi*rint*(y + L/2) "Metal-liquid interface area";
              Asup = pi*rint^2 "Liquid-vapor interface area";
            end if;
            Vv = pi*rint^2*L - Vl "vapor volume";
            Amv = 2*pi*rint*L + 2*pi*rint^2 - Aml "Metal-vapor interface area";
            Aext = 2*pi*rext^2 + 2*pi*rext*L "External metal surface area";

            // Fluid properties
            liquid = Medium.setState_phX(
              p,
              hl,
              Medium.fixedComposition);
            rhol = Medium.density(liquid);
            T_liq = Medium.temperature(liquid);
            u_liq = Medium.specificInternalEnergy(liquid);

            vapor = Medium.setState_phX(
              p,
              hv,
              Medium.fixedComposition);
            rhov = Medium.density(vapor);
            T_vap = Medium.temperature(vapor);
            u_vap = Medium.specificInternalEnergy(vapor);

            hls = Medium.bubbleEnthalpy_pX(p);
            hvs = Medium.dewEnthalpy_pX(p);
            Ts = Medium.saturationTemperature_pX(p);
            feed.p = p;

            // Boundary conditions
            feed.h_outflow = hl;
            feed.X_outflow = liquid.X;
            feed.C_outflow = Cl;
            downcomer.p = p + rhol*system_TPL.g*max(0,(y - portPosition_downcomer));
            downcomer.h_outflow = hl;
            downcomer.X_outflow = liquid.X;
            downcomer.C_outflow = Cl;
            blowdown.p = p;
            blowdown.h_outflow = hl;
            blowdown.X_outflow = liquid.X;
            blowdown.C_outflow = Cl;
            riser.p = p + rhol*system_TPL.g*max(0,(y - portPosition_riser));
            riser.h_outflow = hl;
            riser.X_outflow = liquid.X;
            riser.C_outflow = Cl;
            hrv = hls + xrv*(hvs - hls);
            xrv = 1 - (rhov/rhol)^avr;
            hr = actualStream(riser.h_outflow);
            xr = smooth(0, if wr >= 0 then (if hr > hls then (hr - hls)/(hvs - hls) else
              0) else xl);
            hrl = smooth(0, if wr >= 0 then (if hr > hls then hls else hr) else hl);
            wr = riser.m_flow;
            wrv = smooth(0, if wr >= 0 then xr*wr/xrv else 0);
            wrl = wr - wrv;
            drain.p = p;
            drain.h_outflow = hv;
            drain.X_outflow = Medium.fixedComposition;
            drain.C_outflow = Cv;
            level = y;

          initial equation
            if initOpt == Modelon.ThermoFluid.Choices.InitOptions.initialValues then
              hl = hlstart;
              hv = hvstart;
              p = pstart;
              y = ystart;
              Cl= Clstart;
              Cv= Cvstart;
              if dynamicWallModel then
                Tm = Tmstart;
              end if;
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.noInit then

            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyState then
              der(p) = 0;
              der(hl) = 0;
              der(hv) = 0;
              der(y) = 0;
              der(Cv)=zeros(Medium.nC);
              der(Cl)=zeros(Medium.nC);
              if dynamicWallModel then
                der(Tm) = 0;
              end if;
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyStateNoP then
              p = pstart;
              der(hl) = 0;
              der(hv) = 0;
              der(y) = 0;
              der(Cv)=zeros(Medium.nC);
              der(Cl)=zeros(Medium.nC);
              if dynamicWallModel then
                der(Tm) = 0;
              end if;
            else
              assert(false, "Unsupported initialization option");
            end if;
            annotation (
              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
                              graphics={Text(extent={{-100,84},{100,104}}, textString=
                    "%name"),Line(
                    points={{80,0},{92,0}},
                    color={0,0,0},
                    smooth=Smooth.None),Text(
                    extent={{-65,5},{15,33}},
                    lineColor={0,0,0},
                    textString=DynamicSelect("0.0",
                        String(
                        summary.p/1e5,
                        format="1.1f"))),Text(
                    extent={{3,6},{66,33}},
                    lineColor={0,0,0},
                    textString="bar")}),
              Documentation(info="<html>
<h4>Description</h4>
<p>This model describes the cylindrical drum of a drum boiler, without assuming thermodynamic equilibrium between the liquid and vapor holdups. </p>
<p>The model is based on dynamic mass and energy balance equations of the liquid volume and vapor volume inside the drum. Mass and energy transfer between the two phases is provided by bulk condensation and surface condensation of the vapor phase, and by bulk boiling of the liquid phase. Additional energy transfer can take place at the surface if the steam is superheated. </p>
<p>The riser flowrate is separated before entering the drum, at the vapor pressure. The (saturated) liquid fraction goes into the liquid volume; the (wet) vapor fraction goes into the vapor volume, with a steam quality depending on the liquid/vapor density ratio and on the <code>avr</code> parameter. </p>
<p>The pressure at the downcomer connector is equal to the vapor pressure plus the liquid head. </p>
<p><img src=\"modelica://ThermalPower/Resources/Images/drum.png\"/> </p>
<h4>Parametrization</h4>
<p>The condensate level <code>y</code> is relative to the cylinder centerline <code>y_min</code> and <code>y_max</code> corresponds to an empty respective full drum. Calculation of the level is different if the orientation is horizontal or vertical.</p>
<p>A port of the condensate level is available at the right side of the drum. </p>
<p>Metal wall dynamics can be taken into account by setting a positive value of <code>Cm</code> , <code>g_l</code> and <code>g_v</code>, the wall assumes a uniform temperature. Heat transfer takes place between the metal wall and the liquid phase, vapor phase, and external atmosphere, the corresponding heat transfer coefficients being <code>gl</code>, <code>gv</code>, and <code>gext,</code>see image.</p>
<p>If<code> Cm</code> is 0 or negative and <code>g_l</code> and <code>g_v</code> are positive a static heat loss model is used. </p>
<p>Following options are available to specify the orientation of the cylindrical drum: </p>
<ul>
<li><code>DrumOrientation = 0</code>: horizontal axis. </li>
<li><code>DrumOrientation = 1</code>: vertical axis. </li>
</ul>
<h5>Initialization</h5>
<p>Start values of drum pressure, liquid specific enthalpy, vapor specific enthalpy, and metal wall temperature can be specified by setting parameters <code>pstart</code>, <code>hlstart</code>, <code>hvstart</code>, <code>Tmstart</code>. Initial liquid level is specified using <code>ystart</code>. </p>
<h4>Assumptions </h4>
<ul>
<li>Uniform temperature (three temperatures: steam, liquid, wall)</li>
</ul>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"),    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                      100,100}}), graphics));
          end Drum;

          model Turbine_3stageNoEndVolume "Three stage turbine with no end volume"
            extends
              ThermalPower.TwoPhase.TurboMachinery.Turbines.Templates.Turbine_3stageBase(
              final nbrOfVolumes=2,
              M_tot=vol1.M + vol2.M,
              summary(                     p_out={vol1.p,vol2.p,stage3.drain.p},
                x_out={vol1.x,vol2.x,stage3.x},
                h_in=stage1.summary.h_in,
                h_out={vol1.h,vol2.h,stage3.summary.h_out},
                m_flow_out={-sum(drain_stage1.m_flow),-sum(drain_stage2.m_flow),-
                    drain_stage3.m_flow}));

            ThermalPower.TwoPhase.Interfaces.FlowPort drain_stage3(redeclare
                package Medium =
                         Medium) annotation (Placement(transformation(extent={{70,-100},{
                      90,-80}}), iconTransformation(extent={{70,-100},{90,-80}})));

            ThermalPower.TwoPhase.Sensors.MultiData multiData_stage3_out(redeclare
                package Medium = Medium) annotation (Placement(transformation(
                  extent={{10,10},{-10,-10}},
                  rotation=180,
                  origin={106,-6})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot7
              annotation (Placement(transformation(extent={{94,10},{118,34}})));
          equation

            connect(multiData_stage3_out.port_a, stage3.drain) annotation (Line(points={{100,
                    -6},{94.4,-6},{94.4,-5.6}}, color={0,0,255}));
            connect(multiData_stage3_out.port_b, drain_stage3) annotation (Line(points={{112,
                    -6},{114,-6},{114,-91},{80,-91},{80,-90}}, color={0,0,255}));
            connect(multiData_stage3_out.u, multiDisplayVis_phTmdot7.y)
              annotation (Line(points={{106,-6},{106,22}}, color={0,0,0}));
            connect(stage3.shaft_b, shaft_b)
              annotation (Line(points={{95.2,0},{150,0},{150,0}}, color={0,0,0}));
            annotation (
              Documentation(info="<html>
<h4>Description</h4>
<p>Three stage turbine with tap-off modelled using standard <a href=\"modelica://ThermalPower.TwoPhase.TurboMachinery.Turbines.SteamTurbineStodola\">steam turbine models</a> to represent each stage, and <a href=\"modelica://ThermalPower.TwoPhase.Volumes.Header\">headers</a> to represent the thermal mass and volume dynamics of the turbine. Suitable for modelling both symmetric and nonsymmetric turbines. This model is identical to <a href=\"modelica://ThermalPower.TwoPhase.TurboMachinery.Turbines.MultiStage.Turbine_3stage\">Turbine_3stage</a> but with the difference that the it does not contain an end volume.</p>
<h4>Parametrization</h4>
<p>The turbine stages are parametrized using nominal points, which are defined by the vectorized parameters <code>p_nom</code>, <code>T_nom</code> and <code>m_flow_nom</code>. The efficencies of the turbines are defined by the vectorized parameters <code>eta_mech</code> and <code>eta_is_base</code>. The parameters <code>use_Bauman</code> and <code>alpha_Bauman</code> can be used to handle efficiency degradation (common for both stages).</p>
<p>The heat transfer parameters can be used for modelling a thermal mass connected to the volumes of the turbine. The parameter values represents the summed properties for all volumes in the model and it is assumed that the thermal properties and internal volumes are identical for all volumes.</p>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"),    Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-150,-100},
                      {150,100}},
                  grid={1,1})),
              Icon(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-150,-100},{150,100}},
                  grid={1,1}), graphics={          Rectangle(
                    extent={{120,10},{150,-10}},
                    lineColor={0,0,0},
                    fillPattern=FillPattern.HorizontalCylinder,
                    fillColor={160,160,164}),      Rectangle(
                    extent={{-150,10},{-120,-10}},
                    lineColor={0,0,0},
                    fillPattern=FillPattern.HorizontalCylinder,
                    fillColor={160,160,164}),
                  Polygon(
                    points={{-120,86},{-120,-86},{0,-40},{120,-86},{120,86},{0,40},{-120,
                        86}},
                    lineColor={0,0,0},
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid,
                    lineThickness=0.5),
                  Polygon(
                    points={{-95,61},{-95,-60},{-75,-53},{-75,53},{-95,61}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-62,48},{-62,-48},{-44,-41},{-44,41},{-62,48}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-31,36},{-31,-36},{-13,-29},{-13,29},{-31,36}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-31,36},{-31,47},{-44,47},{-44,41}},
                    color={0,0,0},
                    thickness=0.5,
                    smooth=Smooth.None),
                  Polygon(
                    points={{61,47},{61,-47},{43,-40},{43,41},{61,47}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{31,36},{31,-36},{13,-29},{13,29},{31,36}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{31,36},{31,47},{43,47},{43,41}},
                    color={0,0,0},
                    thickness=0.5,
                    smooth=Smooth.None),
                  Line(
                    points={{-62,48},{-62,59},{-75,59},{-75,53}},
                    color={0,0,0},
                    thickness=0.5,
                    smooth=Smooth.None),
                  Line(
                    points={{61,47},{61,58},{74,58},{74,52}},
                    color={0,0,0},
                    thickness=0.5,
                    smooth=Smooth.None),
                  Polygon(
                    points={{94,60},{94,-60},{74,-52},{74,52},{94,60}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-120,0},{120,0}},
                    color={0,0,0},
                    smooth=Smooth.None),
                  Line(points={{-62,-48},{-62,-77},{61,-77},{61,-47}}, color={0,0,0}),
                  Line(points={{-95,-60},{-95,-90},{94,-90},{94,-60}}, color={0,0,0}),
                  Line(points={{-31,-36},{-31,-62},{31,-62},{31,-36}}, color={0,0,0})}));
          end Turbine_3stageNoEndVolume;

          model TubeAndShell_gas2ph "Tube and shell heat exchanger (two-phase and gas)"
             extends ThermalPower.FlueGas.HeatExchangers.TubeAndShell_gas2ph;
          annotation(defaultComponentName="hex", Documentation(info="<html>
<h4>Description</h4>
<p>See <a href=\"modelica://ThermalPower.FlueGas.HeatExchangers.TubeAndShell_gas2ph\">ThermalPower.FlueGas.HeatExchangers.TubeAndShell_gas2ph </a></p>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
          end TubeAndShell_gas2ph;

          model Pipe_lumpedP "Dynamic discretized 2-phase pipe (lumped pressure)"

            extends ThermalPower.TwoPhase.FlowChannels.Templates.Pipe( summary(
              dp=portA.p - portB.p,
              m_flow=portA.m_flow,
              T_out=T_out,
              T_in=Medium.temperature(Medium.setState_phX(
                  portA.p,
                  summary.h_in,
                  X_in_portA)),
              h_in=h_b[1],
              d_in=d_b[1],
              h_out=h_b[n+1],
                M=twoPhaseProperties.m,
                V=twoPhaseProperties.V));

            import ThermalPower.SubComponents.Internal.Choices.*;
            import Modelica.Constants.pi;

            parameter Boolean DynamicMomentum=false "Inertial phenomena accounted for"
              annotation (Evaluate=true, Dialog(group="Options"));
            parameter Boolean disableMeanDensityInFirstVolume=true
              "Disable mean density approach in first volume - removes inlet enthalpy derivative dependency" annotation(Evaluate,Dialog(group="Numerics",tab="Advanced"));

            parameter Real F0(unit = "1/s") = 1.0
              "Nominal frequency for time derivative accuracy";

            input Real CF_length = 1.0 "Calibration factor for pipe length" annotation(Dialog(tab="Advanced",group="Calibration factors"));
            Modelica.Units.SI.Length L_internal=L*CF_length "Modified pipe length for design calculation";
            Modelica.Units.SI.Volume V_internal=V*CF_length "Modified pipe volume for design calculation";
            Modelica.Units.SI.Area A_heat_tot_internal=A_heat_tot*CF_length
              "Modified heat transfer area for design calculation";

            Modelica.Units.SI.MassFlowRate m_flow(start=m_flow_start) "Mass flowrate";
            Modelon.Media.Units.AbsolutePressure p(start=p_start_in,stateSelect=StateSelect.prefer)
              "Fluid pressure for property calculations";

            Real p_rate(nominal = 1e5*F0, unit = "Pa")
              "Non-dimensional time derivative of fluid pressure";

            Modelon.Media.Units.Temperature T[n] "Fluid temperature";
            Modelon.Media.Units.Temperature T_out "Fluid exit temperature";
            Modelon.Media.Units.Temperature T_in "Fluid inlet temperature";

            Modelon.Media.Units.Density d_portB "Fluid port b density";

            Modelon.Media.Units.DynamicViscosity eta_portB
              "Fluid port b dynamic viscosity";

            Medium.PhaseBoundaryProps sat_portB "Fluid port b saturation properties";

            Modelica.Units.SI.ReynoldsNumber Re[n] "Fluid Reynolds number";
            Modelica.Units.SI.DynamicViscosity eta[n] "Dynamic viscosity (interpolated)";
            Real[n] twoPhaseFraction
              "Fraction of each control volume with two-phase conditions";
            Real[n] x "Vapor quality";
            Real[n] p_red "reduced pressure: 1 at critical point";

            Modelica.Units.SI.SpecificHeatCapacity[n] cp "Heat capacity at constant pressure";
            Modelica.Units.SI.SpecificInternalEnergy[n] u "Specific internal energy";

            Modelica.Units.SI.FroudeNumber Fr[n] "Froude number";
            Modelica.Units.SI.ReynoldsNumber Re_liq[n] "Reynolds number, boiling curve";
            Medium.PhaseBoundaryProps[n] sat "Saturation properties";
            Modelica.Units.SI.Density[n] d;
            Modelica.Units.SI.ThermalConductivity lam[n] "thermal conductivity";
            Modelica.Units.SI.ThermalConductivity lam_validIn2ph[n] "thermal conductivity - valid in twophase";

            Modelica.Units.SI.Temperature T_vap "Dew line temperature";
            Modelica.Units.SI.Temperature T_liq "Bubble line temperature";
            Modelica.Units.SI.SurfaceTension sigma "Surface tension in two phase region";

              HeatTransfer htcoeff(
              final n=n,
              redeclare package Medium = Medium,
              final F_user=CF_HeatTransfer,
              final A=fill(A,n),
              final A_heat=fill(A_heat_tot/(n*n_channels),n),
              final Dhyd=Dhyd*ones(n),
              pcrit=Medium.criticalPressure,
              final L=L,
              final m_flow=fill(m_flow/n_channels,n),
              final T=T,
              final T_wall=q.T,
              final p=fill(p,n),
              final cp=cp,
              final Re=Re,
              final eta=eta,
              final lam=lam_validIn2ph,
              final Fr=Fr,
              final Re_liq=Re_liq,
              final sat=sat,
              final twoPhaseFraction=twoPhaseFraction,
              final Q_s = q.Q_flow,
              final CF_length=CF_length);

            Friction friction(
              redeclare package Medium = Medium,
              final n=n,
              final F_user=CF_PressureLoss,
              final A=fill(A,n),
              final L=fill(L_internal/n, n),
              final Dhyd=fill(Dhyd, n),
              final n_channels=fill(n_channels,n),
              final m_flow = fill(m_flow/n_channels,n),
              final d=cat(1, rhobar, {d_portB}),
              final eta=cat(1, eta, {eta_portB}),
              final twoPhaseFraction=twoPhaseFraction,
              final sigma=sigma*ones(n+1),
              final sat=cat(1,sat,{sat_portB}),
              final from_dp = true,
              final positiveFlow = positiveFlow,
              final dp_smooth = dp_smooth,
              final mflow_smooth = mflow_smooth);

            Modelica.Units.SI.Power Q
              "Total heat flow through the lateral boundary (all Nt tubes)";
            Modelica.Units.SI.Time Tr "Residence time";

          /////////////////////////////////

            Modelica.Units.SI.Pressure Dpfric "Pressure drop due to friction";
            Modelica.Units.SI.Pressure Dpstat "Pressure drop due to static head";

            Real dwdt "Dynamic momentum term";
            Modelica.Units.SI.MassFlowRate wbar[n](each start=m_flow_start);
            Modelica.Units.SI.Velocity u_b[n + 1]
              "Fluid velocity at volume segment boundary";
            Modelon.Media.Units.Temperature Ts "Saturated water temperature";
            Modelon.Media.Units.SpecificEnthalpy h_b[n+1](start=linspace(
                  h_start_in,
                  h_start_out,
                  n+1)) "Fluid specific enthalpy at volume boundaries";
            Modelon.Media.Units.SpecificEnthalpy htilde[n](start=h_start[2:n+1],each stateSelect=StateSelect.prefer)
              "Enthalpy state variables";
            Real htilde_rate[n](each nominal = 1e6*F0)
              "Non-dimensional time derivatives of enthalpy state";

            Modelon.Media.Units.SpecificEnthalpy hl=Medium.bubbleEnthalpy_pX(p_sat)
              "Liquid specific enthalpy";
            Modelon.Media.Units.SpecificEnthalpy hv=Medium.dewEnthalpy_pX(p_sat)
              "Vapor specific enthalpy";
            Modelon.Media.Units.Density d_b[n+1](start=Medium.density(Medium.setState_phX(p_start,linspace(
                  h_start_in,
                  h_start_out,
                  n+1)))) "Fluid density at volume boundary";
            ThermalPower.Units.LiquidDensity rhol=Medium.bubbleDensity_pX(p_sat)
              "Saturated liquid density";
            ThermalPower.Units.GasDensity rhov=Medium.dewDensity_pX(p_sat)
              "Saturated vapor density";

            Modelica.Units.SI.Mass M_tot "Total fluid mass";
            Modelica.Units.SI.InternalEnergy U_tot "Total fluid internal energy";
            constant Modelica.Units.SI.AbsolutePressure pcrit=Medium.criticalPressure;
            Modelon.Media.Units.AbsolutePressure p_sat(start=p_start_in) = p
              "Saturation pressure";
            Medium.ThermodynamicState state_b[n+1]
              "State record at volume segment boundary";

            constant Modelica.Units.SI.SpecificEnthalpy hcrit=Medium.criticalSpecificEnthalpy;
            parameter Modelica.Units.SI.SpecificEnthalpy hzero=100
              "When delta h between volumes < hzero, rho is assumed linear";

            Modelica.Units.SI.DerEnthalpyByPressure dhldp
              "Derivative of saturated liquid enthalpy by pressure";
            Modelica.Units.SI.DerEnthalpyByPressure dhvdp
              "Derivative of saturated vapor enthalpy by pressure";
            ThermalPower.Units.Density rhobar[n] "Fluid average density";
            Modelica.Units.SI.DerDensityByPressure ddph_b[n + 1]
              "Derivative of density by pressure at constant h on volume segment boundary";
            Modelica.Units.SI.DerDensityByPressure drbdp[n]
              "Derivative of average density by pressure";
            Modelica.Units.SI.DerDensityByPressure drldp
              "Derivative of saturated liquid density by pressure";
            Modelica.Units.SI.DerDensityByPressure drvdp
              "Derivative of saturated vapor density by pressure";

            Modelica.Units.SI.SpecificVolume vbar[n] "Average specific volume";
            Modelica.Units.SI.DerDensityByEnthalpy ddhp_b[n + 1]
              "Derivative of density by enthalpy at constant pressure at voluem segment boundary";
            Modelica.Units.SI.DerDensityByEnthalpy drbdh_left_b[n]
              "Derivative of density by enthalpy at volume segments left node";
            Modelica.Units.SI.DerDensityByEnthalpy drbdh_right_b[n]
              "Derivative of density by enthalpy at volume segments right node";

            Real AA;
            Real CC;
            Real dMdt[n] "Derivative of fluid mass in each volume";
            Medium.ThermodynamicState state[n];
            Medium.ThermodynamicState state_dew;
            Medium.ThermodynamicState state_bubble;
            Medium.ThermodynamicState state_dew_portB;
            Medium.ThermodynamicState state_bubble_portB;

            Real[n+1, Medium.nC] C_trace_b
              "Trace concentration at volume segment boundary";
            Real[n, Medium.nC] C_trace(start=fill(C_start, n))
              "Trace component concentration in each element";

            Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature T_fluidBlock[n]
              annotation (Placement(transformation(extent={{-36,-36},{-20,-20}})));
            Modelica.Blocks.Sources.RealExpression T_fluid[n](y=T_smooth)
              annotation (Placement(transformation(extent={{-64,-38},{-44,-18}})));
            ThermalPower.SubComponents.PropertySummation.TwoPhaseProperties twoPhaseProperties(
              m=M_tot,
              V=V_internal,
              E=U_tot - M_tot*u_offset_reference)
              annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
          protected
            Modelica.Units.SI.Temperature T_smooth[n]=if useMeanTempDrivenQ then (if n > 1 then cat(
                1,
                {Modelon.Math.Smoothing.spliceFunction(
                  (T_in + T[1])/2,
                  (T[1] + T[2])/2,
                  dMdt[1],
                  mflow_smooth)},
                {Modelon.Math.Smoothing.spliceFunction(
                  (T[i - 1] + T[i])/2,
                  (T[i] + T[i + 1])/2,
                  dMdt[i],
                  mflow_smooth) for i in 2:n - 1},
                {Modelon.Math.Smoothing.spliceFunction(
                  (T[n - 1] + T[n])/2,
                  (T[n] + T_out)/2,
                  dMdt[n],
                  mflow_smooth)}) else fill(Modelon.Math.Smoothing.spliceFunction(
                (T_in + T[1])/2,
                (T[1] + T_out)/2,
                dMdt[1],
                mflow_smooth), 1)) else T;
              final parameter Modelica.Units.SI.SpecificInternalEnergy u_offset_reference=
                Medium.specificInternalEnergy(Medium.setState_pTX(system_TPL.p_reference,
                system_TPL.T_reference));
            Modelica.Units.SI.MassFraction X_in_portA[Medium.nS]=inStream(portA.X_outflow);

          equation
            T_in = Medium.temperature(Medium.setState_phX(
                   portA.p,
                   h_b[1],
                   portA.X_outflow));
            T_out= Medium.temperature(Medium.setState_phX(
                  portB.p,
                  h_b[n+1],
                  portB.X_outflow));
            d_portB= Medium.density(Medium.setState_phX(
                  portB.p,
                  h_b[n+1],
                  portB.X_outflow));

            eta_portB= Medium.dynamicViscosity(Medium.setState_phX(
                  portB.p,
                  h_b[n+1],
                  portB.X_outflow));

            state_dew_portB=Medium.setState_phX(portB.p,Medium.dewEnthalpy_pX(portB.p));
            state_bubble_portB=Medium.setState_phX(portB.p,Medium.bubbleEnthalpy_pX(portB.p));

            sat_portB.d_vap = Medium.dewDensity_pX(portB.p);
            sat_portB.d_liq = Medium.bubbleDensity_pX(portB.p);
            sat_portB.eta_vap = Medium.dynamicViscosity(state_dew_portB);
            sat_portB.eta_liq = Medium.dynamicViscosity(state_bubble_portB);
            // cp and lambda go haywire at the critical point: safeguards needed
            sat_portB.cp_vap = min(max(Medium.specificHeatCapacityCp(state_dew_portB), 500),5e5);
            sat_portB.cp_liq = min(max(Medium.specificHeatCapacityCp(state_bubble_portB), 500),5e5);
            sat_portB.lam_vap = min(max(Medium.thermalConductivity(state_dew_portB), 1.0e-4),2.0);
            sat_portB.lam_liq = min(max(Medium.thermalConductivity(state_bubble_portB), 1.0e-4),2.0);
            sat_portB.x = noEvent(if portB.p/pcrit < 1.0 then (h_b[n+1] - Medium.bubbleEnthalpy_pX(portB.p))/max(Medium.dewEnthalpy_pX(portB.p) - Medium.bubbleEnthalpy_pX(portB.p), 1)
                   else h_b[n+1] - hcrit);

            state_dew=Medium.setState_phX(p_sat,hv);
            state_bubble=Medium.setState_phX(p_sat,hl);

            for i in 1:(n) loop
              u[i]=htilde[i]-p/rhobar[i];
              state[i]=Medium.setState_phX(p,htilde[i],Medium.fixedComposition);
              cp[i] = Medium.specificHeatCapacityCp(state[i]);
              d[i]=Medium.density(state[i]);
              T[i]= Medium.temperature(state[i]);
              lam[i]=Medium.thermalConductivity(state[i]);

              if useMeanTempDrivenQ and i > 1 then
                if i > 1 then
                  q[i].Q_flow = htcoeff.alpha[i] * A_heat_tot_internal/n * (q[i].T - (T[i-1] + T[i]) / 2);
                else
                  q[i].Q_flow = htcoeff.alpha[i] * A_heat_tot_internal/n * (q[i].T - (T_in + T[i]) / 2);
                end if;
              else
                q[i].Q_flow = htcoeff.alpha[i] * A_heat_tot_internal/n * (q[i].T - T[i]);
              end if;

              lam_validIn2ph[i] = min(max(smooth(0, noEvent(if p_red[i] < 1.0 then
                     Modelon.Math.Smoothing.spliceFunction((1.0 - sat[i].x)*sat[i].lam_liq + sat[i].x*sat[i].lam_vap,
                                                       lam[i],
                                                       min(sat[i].x+0.02,1.0-sat[i].x),0.02) else
                                      lam[i])),1e-4),2.0);
              eta[i] = smooth(0, noEvent(if x[i] > 0.0 and x[i] < 1.0 and p < pcrit then
                1/((1.0 - x[i])/sat[i].eta_liq + x[i]/sat[i].eta_vap) else Medium.dynamicViscosity(
                state[i])));

              sat[i].d_vap = rhov;
              sat[i].d_liq = rhol;
              sat[i].eta_vap = Medium.dynamicViscosity(state_dew);
              sat[i].eta_liq = Medium.dynamicViscosity(state_bubble);
              // cp and lambda go haywire at the critical point: safeguards needed
              sat[i].cp_vap = min(max(Medium.specificHeatCapacityCp(state_dew), 500),5e5);
              sat[i].cp_liq = min(max(Medium.specificHeatCapacityCp(state_bubble), 500),5e5);
              sat[i].lam_vap = min(max(Medium.thermalConductivity(state_dew), 1.0e-4),2.0);
              sat[i].lam_liq = min(max(Medium.thermalConductivity(state_bubble), 1.0e-4),2.0);
              sat[i].x = x[i];

              /* Flow regime */
              Re_liq[i] = Modelon.Math.Smoothing.above(
                  Modelon.ThermoFluid.Functions.CharacteristicNumbers.ReynoldsNumber(
                  htcoeff.m_flow[i], htcoeff.Dhyd[i], htcoeff.A[i], sat[i].eta_liq), 1, 10);
              Fr[i] = Modelon.Math.Smoothing.above(
                  Modelon.ThermoFluid.Functions.CharacteristicNumbers.FroudeNumber(
                  htcoeff.m_flow[i], htcoeff.Dhyd[i], htcoeff.A[i], sat[i].d_liq), 1, 5);
              p_red[i] = p/Medium.criticalPressure;
            end for;

            // Dynamic momentum term
            if DynamicMomentum then
              dwdt = der(m_flow);
            else
              dwdt = 0;
            end if;

            sum(dMdt) = (portA.m_flow + portB.m_flow) "Mass balance";

            sum(friction.dp) = Dpfric "Total pressure drop due to friction";

            Dpstat = if abs(height/L_internal) < 1e-6 then 0 else Modelica.Constants.g_n/n*height*sum(rhobar)
              "Pressure drop due to static head";

            L_internal/(A*n_channels)*dwdt + (portB.p - portA.p) + Dpstat + Dpfric = 0
              "Momentum balance";

            der(p) = F0*p_rate;
            der(htilde)=F0*htilde_rate;

            for j in 1:(n) loop
              V_internal/n*rhobar[j]*F0*htilde_rate[j] + wbar[j]*(h_b[j + 1] - h_b[j]) - V_internal/n*F0*p_rate = q[j].Q_flow +T_fluidBlock[j].port.Q_flow
                "Energy balance";
              der(C_trace[j, :])*rhobar[j]*V_internal/n + C_trace[j, :]*dMdt[j] = {wbar[j]*(C_trace_b[j, k]-C_trace_b[j+1, k]) for k in 1:Medium.nC}
                "Trace component balance";

              if (j==1) then
                  //  dMdt[j] = V/n*der(rhobar[j]) "Mass balance for each volume";
                  dMdt[j] = V_internal/n*(drbdh_left_b[j]*der(inStream(portA.h_outflow))+drbdh_right_b[j]*F0*htilde_rate[j] + drbdp[j]*F0*p_rate)
                  "Mass balance for each volume";
              else
                  //    dMdt[j] = V/n*der(rhobar[j]) "Mass balance for each volume";
                  dMdt[j] = V_internal/n*(drbdh_left_b[j]*F0*htilde_rate[j-1]+drbdh_right_b[j]*F0*htilde_rate[j] + drbdp[j]*F0*p_rate)
                  "Mass balance for each volume";

              end if;

              Re[j] = Modelon.ThermoFluid.Functions.CharacteristicNumbers.ReynoldsNumber(
                wbar[j]/n_channels,
                Dhyd,
                A,
                eta[j]);

              // Average volume quantities

                x[j] = noEvent(if p/pcrit < 1.0 then (h_b[j + 1] - hl)/max(hv - hl, 1)
                   else h_b[j + 1] - hcrit);

              twoPhaseFraction[j] =
                ThermalPower.SubComponents.Internal.Functions.phaseFractionMeanDensity(
                {h_b[j],h_b[j + 1]},
                hl,
                hv,
                p/pcrit);
              vbar[j] = 1/rhobar[j] "Average specific volume";
              wbar[j] = portA.m_flow - sum(dMdt[1:j - 1]) - dMdt[j]/2;

              if
                (j == 1 and disableMeanDensityInFirstVolume) then
                 // first volume  disables mean density, -> uses outlet outlet properties
                rhobar[j] = d_b[j + 1];
                drbdp[j] = ddph_b[j + 1];
                drbdh_left_b[j] = 0;
                drbdh_right_b[j] = ddhp_b[j+1];
              elseif noEvent((h_b[j] < hl and h_b[j + 1] < hl) or (h_b[j] > hv and h_b[j + 1] > hv)
                   or p >= pcrit or abs(h_b[j + 1] - h_b[j]) < hzero) then
                // 1-phase or overcritical regions, rho assumes linear distribution
                rhobar[j] = (d_b[j] + d_b[j + 1])/2;
                drbdp[j] = (ddph_b[j] + ddph_b[j + 1])/2;
                drbdh_left_b[j] =ddhp_b[j]/2;
                drbdh_right_b[j] =ddhp_b[j+1]/2;

              elseif noEvent(h_b[j] >= hl and h_b[j] <= hv and h_b[j + 1] >= hl and h_b[j + 1]
                   <= hv) then
                // 2-phase/2-phase
                rhobar[j] = CC*Modelica.Math.log(d_b[j]/d_b[j + 1])/(h_b[j + 1] - h_b[j]);
                drbdp[j] = (AA*Modelica.Math.log(d_b[j]/d_b[j + 1]) + CC*(1/d_b[j]*ddph_b[
                  j] - 1/d_b[j + 1]*ddph_b[j + 1]))/(h_b[j + 1] - h_b[j]);
                drbdh_left_b[j] = (rhobar[j] - d_b[j])/(h_b[j + 1] - h_b[j]);
                drbdh_right_b[j] = (d_b[j + 1] - rhobar[j])/(h_b[j+1] - h_b[j]);
              //   drbdh_left_b[j] = (rhobar[j] - CC*ddhp_b[j]/d_b[j])/(h_b[j + 1] - h_b[j]);
              //   drbdh_right_b[j] =-(rhobar[j] - CC*ddhp_b[j+1]/d_b[j+1])/(h_b[j + 1] - h_b[j]);

              elseif noEvent(h_b[j] < hl and h_b[j + 1] >= hl and h_b[j + 1] <= hv) then

                // liquid/2-phase
                rhobar[j] = ((d_b[j] + rhol)*(hl - h_b[j])/2 + CC*Modelica.Math.log(rhol/
                  d_b[j + 1]))/(h_b[j + 1] - h_b[j]);
                drbdp[j] = ((ddph_b[j] + drldp)*(hl - h_b[j])/2 + (d_b[j] + rhol)/2*dhldp
                   + AA*Modelica.Math.log(rhol/d_b[j + 1]) + CC*(1/rhol*drldp - 1/d_b[j
                   + 1]*ddph_b[j + 1]))/(h_b[j + 1] - h_b[j]);

                drbdh_left_b[j] = (rhobar[j] - (d_b[j] + rhol)/2 + ddhp_b[j]*(hl - h_b[j])/2)/(h_b[
                   j + 1] - h_b[j]);
                drbdh_right_b[j] = (d_b[j + 1] - rhobar[j])/(h_b[j+1] - h_b[j]);

              elseif noEvent(h_b[j] >= hl and h_b[j] <= hv and h_b[j + 1] > hv) then
                // 2-phase/vapor
                rhobar[j] = (CC*Modelica.Math.log(d_b[j]/rhov) + (rhov + d_b[j + 1])*(h_b[
                  j + 1] - hv)/2)/(h_b[j + 1] - h_b[j]);
                drbdp[j] = (AA*Modelica.Math.log(d_b[j]/rhov) + CC*(1/d_b[j]*ddph_b[j] -
                  1/rhov*drvdp) + (drvdp + ddph_b[j + 1])*(h_b[j + 1] - hv)/2 - (rhov +
                  d_b[j + 1])/2*dhvdp)/(h_b[j + 1] - h_b[j]);
                drbdh_left_b[j] = (rhobar[j] - d_b[j])/(h_b[j+1] - h_b[j]);
                drbdh_right_b[j] = ((rhov + d_b[j+1])/2 - rhobar[j] + ddhp_b[j+1]*(h_b[j + 1]
                   - hv)/2)/(h_b[j +1] - h_b[j]);

              elseif noEvent(h_b[j] < hl and h_b[j + 1] > hv) then
                // liquid/2-phase/vapor
                rhobar[j] = ((d_b[j] + rhol)*(hl - h_b[j])/2 + CC*Modelica.Math.log(rhol/
                  rhov) + (rhov + d_b[j + 1])*(h_b[j + 1] - hv)/2)/(h_b[j + 1] - h_b[j]);
                drbdp[j] = ((ddph_b[j] + drldp)*(hl - h_b[j])/2 + (d_b[j] + rhol)/2*dhldp
                   + AA*Modelica.Math.log(rhol/rhov) + CC*(1/rhol*drldp - 1/rhov*drvdp)
                   + (drvdp + ddph_b[j + 1])*(h_b[j + 1] - hv)/2 - (rhov + d_b[j + 1])/2*
                  dhvdp)/(h_b[j + 1] - h_b[j]);
                drbdh_left_b[j] = (rhobar[j] - (d_b[j] + rhol)/2 + ddhp_b[j]*(hl - h_b[j])/2)/(h_b[
                  j+1] - h_b[j]);
                drbdh_right_b[j] = ((rhov + d_b[j+1])/2 - rhobar[j] + ddhp_b[j+1]*(h_b[j+1]
                   - hv)/2)/(h_b[j+1] - h_b[j]);

              elseif noEvent(h_b[j] >= hl and h_b[j] <= hv and h_b[j + 1] < hl) then
                // 2-phase/liquid
                rhobar[j] = (CC*Modelica.Math.log(d_b[j]/rhol) + (rhol + d_b[j + 1])*(h_b[
                  j + 1] - hl)/2)/(h_b[j + 1] - h_b[j]);
                drbdp[j] = (AA*Modelica.Math.log(d_b[j]/rhol) + CC*(1/d_b[j]*ddph_b[j] -
                  1/rhol*drldp) + (drldp + ddph_b[j + 1])*(h_b[j + 1] - hl)/2 - (rhol +
                  d_b[j + 1])/2*dhldp)/(h_b[j + 1] - h_b[j]);
                drbdh_left_b[j] = (rhobar[j] - d_b[j])/(h_b[j+1] - h_b[j]);
                drbdh_right_b[j] = ((rhol + d_b[j + 1])/2 - rhobar[j] + ddhp_b[j+1]*(h_b[j+1]
                   - hl)/2)/(h_b[j+1] - h_b[j]);

              elseif noEvent(h_b[j] > hv and h_b[j + 1] < hl) then
                // vapor/2-phase/liquid
                rhobar[j] = ((d_b[j] + rhov)*(hv - h_b[j])/2 + CC*Modelica.Math.log(rhov/
                  rhol) + (rhol + d_b[j + 1])*(h_b[j + 1] - hl)/2)/(h_b[j + 1] - h_b[j]);
                drbdp[j] = ((ddph_b[j] + drvdp)*(hv - h_b[j])/2 + (d_b[j] + rhov)/2*dhvdp
                   + AA*Modelica.Math.log(rhov/rhol) + CC*(1/rhov*drvdp - 1/rhol*drldp)
                   + (drldp + ddph_b[j + 1])*(h_b[j + 1] - hl)/2 - (rhol + d_b[j + 1])/2*
                  dhldp)/(h_b[j + 1] - h_b[j]);
                drbdh_left_b[j] = (rhobar[j] - (d_b[j] + rhov)/2 + ddhp_b[j]*(hv - h_b[j])/2)/(h_b[
                  j+1] - h_b[j]);
                drbdh_right_b[j] = ((rhol + d_b[j + 1])/2 - rhobar[j] + ddhp_b[j+1]*(h_b[j+1]
                   - hl)/2)/(h_b[j+1] - h_b[j]);

              else
                // vapor/2-phase
                rhobar[j] = ((d_b[j] + rhov)*(hv - h_b[j])/2 + CC*Modelica.Math.log(rhov/
                  d_b[j + 1]))/(h_b[j + 1] - h_b[j]);
                drbdp[j] = ((ddph_b[j] + drvdp)*(hv - h_b[j])/2 + (d_b[j] + rhov)/2*dhvdp
                   + AA*Modelica.Math.log(rhov/d_b[j + 1]) + CC*(1/rhov*drvdp - 1/d_b[j
                   + 1]*ddph_b[j + 1]))/(h_b[j + 1] - h_b[j]);
                drbdh_left_b[j] = (rhobar[j] - (d_b[j] + rhov)/2 + ddhp_b[j]*(hv - h_b[j])/2)/(h_b[
                  j+1] - h_b[j]);
                drbdh_right_b[j] = (d_b[j+1] - rhobar[j])/(h_b[j+1] - h_b[j]);
              end if;
            end for;

            // Saturated fluid property calculations
            Ts = Medium.saturationTemperature_pX(p_sat);
            drldp = Medium.dBubbleDensity_dPressure_pX(p_sat);
            drvdp = Medium.dDewDensity_dPressure_pX(p_sat);
            dhldp = Medium.dBubbleEnthalpy_dPressure_pX(p_sat);
            dhvdp = Medium.dDewEnthalpy_dPressure_pX(p_sat);
            sigma = Medium.surfaceTension_pX(p_sat);
            T_vap = Medium.dewTemperature_pX(p_sat);
            T_liq = Medium.bubbleTemperature_pX(p_sat);

            AA = ((dhvdp - dhldp)*(rhol - rhov)*rhol*rhov - (hv - hl)*(rhov^2*drldp -
              rhol^2*drvdp))/max(1e-6, (rhol - rhov)^2);
            CC = (hv - hl)/max(1e-6, (1/rhov - 1/rhol));

            // Fluid property calculations
            for j in 1:n+1 loop
              state_b[j] = Medium.setState_phX(
                p,
                h_b[j],
                Medium.reference_X);
              d_b[j] = Medium.density(state_b[j]);
              ddph_b[j] = Medium.density_derp_h(state_b[j]);
              ddhp_b[j] = Medium.density_derh_p(state_b[j]);
              u_b[j] = m_flow/(d_b[j]*A*n_channels);
            end for;

            // Boundary conditions and propagation
            p = portA.p;
            m_flow = -portB.m_flow;
            portA.h_outflow = htilde[1];
            portB.h_outflow = htilde[n];
            portA.X_outflow = Medium.reference_X;
            portB.X_outflow = Medium.reference_X;
            portA.C_outflow = C_trace[1, :];
            portB.C_outflow = C_trace[n, :];
           h_b[1] =Modelon.Math.Smoothing.spliceFunction(inStream(portA.h_outflow), htilde[1],m_flow,1e-3);//if positiveFlow then inStream(portA.h_outflow) elseif m_flow >= 0 then inStream(portA.h_outflow) else htilde[1];//
           h_b[2:n] = {Modelon.Math.Smoothing.spliceFunction(htilde[i], htilde[i+1],m_flow,1e-3) for i in 1:n-1};//if positiveFlow then htilde[1:(n+1) - 2] elseif m_flow >= 0 then htilde[1:(n+1) - 2] else htilde[2:n];
           h_b[n+1] = Modelon.Math.Smoothing.spliceFunction(htilde[n], inStream(portB.h_outflow),m_flow,1e-3);//if positiveFlow then htilde[n] elseif m_flow >= 0 then htilde[n] else inStream(portB.h_outflow);
          //   h_b[1] =if positiveFlow then inStream(portA.h_outflow) elseif m_flow >= 0 then inStream(portA.h_outflow) else htilde[1];//
          //   h_b[2:n] = if positiveFlow then htilde[1:(n+1) - 2] elseif m_flow >= 0 then htilde[1:(n+1) - 2] else htilde[2:n];
          //   h_b[n+1] = if positiveFlow then htilde[n] elseif m_flow >= 0 then htilde[n] else inStream(portB.h_outflow);
            C_trace_b[1,:] = if positiveFlow then inStream(portA.C_outflow) elseif m_flow >= 0 then inStream(portA.C_outflow) else C_trace[1,:];
            C_trace_b[2:n,:] = if positiveFlow then C_trace[1:n-1,:] elseif m_flow >= 0 then C_trace[1:n-1,:] else C_trace[2:n,:];
            C_trace_b[n+1,:] = if positiveFlow then C_trace[n,:] elseif m_flow >= 0 then C_trace[n,:] else inStream(portB.C_outflow);

            Q = sum(q.Q_flow) "Total heat flow through lateral boundary";
            M_tot = sum(rhobar)*V_internal/n "Fluid mass";
            U_tot=rhobar*u*V_internal/n "Total fluid energy";
            Tr = noEvent(M_tot/max(portA.m_flow, Modelica.Constants.eps))
              "Residence time";

          initial equation

            if initOpt == Modelon.ThermoFluid.Choices.InitOptions.initialValues then
              if DynamicMomentum then
                m_flow = m_flow_start;
              else
                p = p_start[1];
              end if;
              htilde = if initFromEnthalpy then h_start[2:n+1] else Medium.specificEnthalpy_pTX(p_start[1:n],T_start[2:n+1],Medium.reference_X);
              C_trace=fill(C_start, n);
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.noInit then

            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyState then
              htilde_rate = zeros(n);
              p_rate = 0;
              der(C_trace)=zeros(n, Medium.nC);
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyStateNoP then
              p = p_start_in;
              htilde_rate = zeros(n);
              der(C_trace)=zeros(n, Medium.nC);
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyStateNoT then
              p_rate = 0;
              htilde = if initFromEnthalpy then h_start[2:n+1] else Medium.specificEnthalpy_pTX(p_start[1:n],T_start[2:n+1],Medium.reference_X);
              der(C_trace)=zeros(n, Medium.nC);
            else
              assert(false, "Unsupported initialization option");
            end if;

          equation
            connect(T_fluidBlock.T, T_fluid.y) annotation (Line(
                points={{-37.6,-28},{-43,-28}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(T_fluidBlock.port, q_fluid) annotation (Line(
                points={{-20,-28},{0,-28},{0,0}},
                color={191,0,0},
                smooth=Smooth.None));
            annotation (
              Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                      100}})),
              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
                              graphics={Text(extent={{-100,-50},{100,-70}}, textString=
                    "%name"),                Rectangle(
                    extent={{-100,40},{100,-40}},
                    lineColor={0,0,0},
                    fillColor={0,0,255},
                    fillPattern=FillPattern.HorizontalCylinder),
                  Line(
                    points={{-34,40},{-34,-40}},
                    color={0,0,0},
                    smooth=Smooth.None,
                    pattern=LinePattern.Dash),
                  Line(
                    points={{34,40},{34,-40}},
                    color={0,0,0},
                    smooth=Smooth.None,
                    pattern=LinePattern.Dash)}),
              Documentation(info="<html>
<h4>Description</h4>
<p>Model of a discretized dynamic pipe for a two-phase medium. It uses an integrated mean density and lumped pressure approach. This model should only be used for positive flow.</p>
<p>The mass, momentum, and energy balance equation are discretised with the finite volume method. The state variables are one lumped pressure, one flowrate (if parameter DynamicMomentum=true) and n specific enthalpies. </p>
<h4>Parametrization</h4>
<h5>Number of volume segments and nodes</h5>
<p>The parameter <code>n</code> defines the number of control volume segments. </p>
<p><img src=\"modelica://ThermalPower/Resources/Images/pipeOverview_new.png\"/></p>
<h5>Pressure loss</h5>
<p>The friction correlation can be changed by choosing a model in the Friction parameter drop-down menu. The momentum balance (pressure loss) is by default false (static). It can be changed to a dynamic momentum balance by setting parameter DynamicMomentum to true, but this may create very fast pressure transients and thereby increasing the simulation time.</p>
<h5>Heat transfer</h5>
<p>The heat-transfer correlation can be changed by choosing a model in the HeatTransfer parameter drop-down menu. </p>
<p>Under the Advanced tab there is a parameter named use_fluidHeatTransfer. By enabling this parameter an extra heat connector is added to the model that can be used to add/extract heat directly to the fluid volumes.</p>
<p>If <code>useMeanTempDrivenQ </code> is set to true, the mean temperature in each control volume will be used in the heat flow calculation </p>
<h5>Initialization</h5>
<p>Start values for pressure and flowrate are specified by <code>p_start and</code> m_flow_start. m_flow_start is normally not a state (DynamicMomentum= default false) and m_flow_start is used then as a guess value.</p>
<p>This model uses a lumped pressure, which means there is only one pressure state. The first element in p_start[1] is used to specify the pressure start value. Either specific entalpy or temperature can be used to describe the initial condition. If parameter <code>initFromEnthalpy</code> is true, <code>h_start</code> is used for initialization else <code>T_start</code>. h_start and T_start are by default lineary distributed from h_start_in to h_start_out respective T_start_in to T_start_out.</p>
<h5>Geometry</h5>
<p>A bank of <code>n_channels</code> identical tubes working in parallel can be modelled by setting <code>n_channels &gt; 1</code>. The geometric parameters refer to a <i>single</i> tube. </p>
<h5>Advanced</h5>
<p>The mean density approach can be disabled and enabled in the first volume by modifying parameter <i>disableMeanDensityInFirstVolume</i>. The advantage of disabling it is that the dependency of the inlet enthalpy is removed, which may improve equation structure and don&apos;t require that the inlet specific enthalpy is continuous. </p>
<h4>Assumptions</h4>
<ul>
<li>The fluid state is either one-phase, or a two-phase mixture. </li>
<li>In case of two-phase flow, the same velocity is assumed for both phases (homogeneous model). </li>
<li>Uniform velocity is assumed on the cross section, leading to a 1-D distributed parameter model. </li>
<li>Turbulent friction is always assumed; a small linear term is added to avoid numerical singularities at zero flowrate. The friction effects are not accurately computed in the laminar and transitional flow regimes, which however should not be an issue in most applications using water or steam as a working fluid. </li>
<li>The model is based on dynamic mass, momentum, and energy balances. The dynamic momentum term can be switched off, to avoid the fast oscillations that can arise from its coupling with the mass balance (sound wave dynamics). </li>
<li>The longitudinal heat diffusion term is neglected. </li>
<li>The energy balance equation is written by assuming a uniform pressure distribution; the pressure drop is lumped either at the inlet or at the outlet. </li>
<li>The fluid flow can exchange thermal power through the lateral surface, which is represented by the <code>q</code> connector. The actual heat flux must be computed by a connected component (heat transfer computation module). </li>
</ul>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
          end Pipe_lumpedP;

          model Header "Lumped header volume with metal walls"
            extends ThermalPower.TwoPhase.Volumes.MixVolume(dE=sum(H_flow_feed) + sum(
                  H_flow_drain) + gamma*S*(Tm - T) + wall.Q_flow);
            parameter Modelica.Units.SI.Area S=0 "Internal surface"
              annotation (Dialog(group="Heat transfer"));
            parameter Modelica.Units.SI.CoefficientOfHeatTransfer gamma=0
              "Heat Transfer Coefficient"
              annotation (Evaluate=true, Dialog(group="Heat transfer"));
            parameter Modelica.Units.SI.HeatCapacity Cm=0 "Metal Heat Capacity"
              annotation (Evaluate=true);
            parameter Modelica.Units.SI.Temperature Tmstart=300
              "Metal wall start temperature" annotation (Dialog(tab="Initialization"));
            ThermalPower.Thermal.Interfaces.HeatPort_a wall annotation (Placement(
                  transformation(extent={{-10,70},{10,90}}, rotation=0),
                  iconTransformation(extent={{-10,80},{10,100}})));
            Modelica.Units.SI.Temperature Tm(start=Tmstart) "Wall temperature";
            Modelica.Units.SI.Time Tr "Residence time";
            ThermalPower.SubComponents.PropertySummation.WallProperties wallProperties(m=(if Cm
                   > 0 and gamma > 0 then Cm/500 else 0), E=(if Cm > 0 and gamma > 0
                   then Cm*(Tm - system_TPL.T_reference) else 0))
              annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
          equation
            if Cm > 0 and gamma > 0 then
              Cm*der(Tm) = gamma*S*(T - Tm) "Energy balance of the built-in wall model";
            else
              Tm = T "Trivial equation for metal temperature";
            end if;
            // Boundary conditions and propagation
            wall.T = Tm;
            Tr = noEvent(M/max(sum(feed.m_flow), Modelica.Constants.eps))
              "Residence time";
          initial equation
            // Initial conditions
            if initOpt == Modelon.ThermoFluid.Choices.InitOptions.initialValues then
              if (Cm > 0 and gamma > 0) then
                Tm = Tmstart;
              end if;
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyState then
              if (Cm > 0 and gamma > 0) then
                der(Tm) = 0;
              end if;
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.noInit then
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyStateNoT then
              if (Cm > 0 and gamma > 0) then
                der(Tm) = 0;
              end if;
            elseif initOpt == Modelon.ThermoFluid.Choices.InitOptions.steadyStateNoP then
              if (Cm > 0 and gamma > 0) then
                der(Tm) = 0;
              end if;
            else
              assert(false, "Unsupported initialization option");
            end if;
            annotation (
              Documentation(info="<html>
<h4>Description</h4>
<p>A constant volume with metal walls. The fluid can be water, steam, or a two-phase mixture. It can be used for examples as a model of the header for a tube bank in a heat exchanger. </p>
<p>The model inherits the basic mass- and energy balances from the <a href=\"modelica://ThermalPower.TwoPhase.Volumes.MixVolume\">ThermalPower.TwoPhase.Volumes.MixVolume</a> model and adds the wall heat transfer connector and thermal equations. </p>
<h4>Parametrization</h4>
<p>It is possible to take into account the heat storage and transfer in the metal wall in two ways: </p>
<ul>
<li>Leave <code>wall</code> connector unconnected, and set the appropriate values for the total wall heat capacity <code>Cm</code>, surface <code>S</code> and heat transfer coefficient <code>gamma</code>. In this case, the metal wall temperature is considered as uniform, and the wall is thermally insulated from the outside. </li>
<li>Set <code>Cm = 0</code>, and connect a suitable thermal model of the wall to the connector instead. This can be useful in case a more detailed thermal model is needed. </li>
</ul>
<h4>Assumptions</h4>
<ul>
<li>Ideal mixing. It&apos;s assumed that the volume can be represented by one lumped pressure and temperature.</li>
<li>The volume is fixed and do not expand with an increasing pressure.</li>
</ul>
</html>",           revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"),    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                      100}}), graphics={Rectangle(
                    extent={{-70,90},{70,70}},
                    lineColor={0,0,255},
                    pattern=LinePattern.None,
                    fillColor={191,191,0},
                    fillPattern=FillPattern.Backward)}),
              Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                      100,100}})));
          end Header;

          model SteamGenerator
            ThermalPower.Thermal.Sources.HeatFlowSource Power(N=1) annotation (Placement(
                  transformation(
                  extent={{-9,8},{9,-8}},
                  rotation=90,
                  origin={-48,-13})));
            Header            header(
              pstart(displayUnit="MPa") = 3500000,
              hstart=2999e3,
              V_tot=1,
              Cm=0,
              N_feed=2,
              N_drain=1) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-18,-14})));
            Drum            SG(
              rint=1.5,
              rext=1.6,
              L=2,
              Cm=(SG.L*3.14*2*SG.rext + 2*3.14*SG.rext^2)*(SG.rext - SG.rint)*7000*500,
              DrumOrientation=1,
              pstart(displayUnit="MPa") = 3500000,
              hlstart=590e3,
              hvstart=2999e3,
              Tmstart=581.15,
              ystart=0.0)
              annotation (Placement(transformation(extent={{44,-18},{-4,30}})));
            ThermalPower.TwoPhase.Valves.ValveLiquid valveLiquid3(dp_nom(displayUnit=
                    "bar") = 1000, CheckValve=true)
              annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={40,-36})));
            Modelon.Blocks.Sources.RealExpression realExpression7(x=1)  annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={17,-35})));
            ThermalPower.TwoPhase.TurboMachinery.Pumps.PumpPosDispl pumpPosDispl(
              V=0.3,
              pin_start(displayUnit="MPa") = 3500000,
              pout_start(displayUnit="MPa") = 3500000,
              n_nom=CirculatingPumpRPM,
              q_nom=10*67/1000)
              annotation (Placement(transformation(extent={{12,-62},{-8,-42}})));
            ValveSteam            SteamControlValve13(
              dp_nom(displayUnit="Pa") = 10,
              m_flow_nom=68,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-26,34})));
            Modelon.Blocks.Sources.RealExpression realExpression14(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={-39,31})));
            ThermalPower.Thermal.Sources.HeatFlowSource Power1(N=1)
                                                                   annotation (Placement(
                  transformation(
                  extent={{-8,9},{8,-9}},
                  rotation=90,
                  origin={-59,48})));
            Header            header1(
              pstart(displayUnit="MPa") = DataP.p_nom_turbine_HP_stage1_feed,
              hstart=DataP.h_turbine_inlet_s1,
              V_tot=1,
              m_flow_nom=DataP.m_flow_nom_steam,
              Cm=0,
              N_feed=1,
              N_drain=2) annotation (Placement(transformation(
                  extent={{-8,-8},{8,8}},
                  rotation=90,
                  origin={-26,54})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot11(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=1,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-16,26},{6,48}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData11
              annotation (Placement(transformation(extent={{2,10},{-18,30}})));
            FlowPort SteamOutlet annotation (Placement(transformation(extent={{-12,86},{
                      14,112}}), iconTransformation(extent={{-12,86},{14,112}})));
            FlowPort FeedWaterInlet annotation (Placement(transformation(extent={{50,28},
                      {74,52}}), iconTransformation(extent={{50,28},{74,52}})));
            Modelica.Blocks.Interfaces.RealInput PowertoSG
              annotation (Placement(transformation(extent={{-118,-40},{-78,0}})));
            Modelica.Blocks.Interfaces.RealInput PowerSuperHeat
              annotation (Placement(transformation(extent={{-118,8},{-78,48}})));
            ThermalPower.TwoPhase.Valves.ValveLiquid FeedWaterControlValve(
              dp_nom(displayUnit="bar") = 500,
              m_flow_nom=67,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={16,-70})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData3
              annotation (Placement(transformation(extent={{-50,-78},{-70,-58}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot3(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-68,-66},{-44,-42}})));
            ThermalPower.ControllersAndSensors.UniversalSensor level1(outValue=SG.y)
              annotation (Placement(transformation(extent={{-12,-98},{0,-88}},
                    rotation=0)));
            ThermalPower.ControllersAndSensors.LimPI
                                        pPI(
              k=1,
              steadyStateInit=false,
              yInit=0.1,
              Ti=20,
              yMin=0.01) annotation (Placement(transformation(extent={{-2,-87},{10,-76}},
                    rotation=0)));
            Modelica.Blocks.Interfaces.RealInput SGLevelSetpoint annotation (Placement(
                  transformation(extent={{-118,-94},{-78,-54}}), iconTransformation(
                    extent={{-118,-94},{-78,-54}})));
            Data.NominalData DataP(
              p_nom_turbine_HP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_HP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage2_drain(displayUnit="MPa"),
              p_nom_condenser(displayUnit="MPa"),
              p_nom_CondensatePump_drain(displayUnit="MPa"),
              p_nom_feedWaterPump_drain(displayUnit="MPa"),
              p_nom_preheater_LP(displayUnit="MPa"))
              annotation (Placement(transformation(extent={{34,78},{50,96}})));
            parameter Modelica.Units.NonSI.AngularVelocity_rpm CirculatingPumpRPM=1500
              "Nominal rotational speed";
            ValveSteam            TurbineStopValves(
              dp_nom=100,
              m_flow_nom=67.1,
              CheckValve=true)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-20,80})));
            ThermalPower.ControllersAndSensors.LimPI
                                        pPI1(
              k=-1e-6,
              steadyStateInit=false,
              yInit=0.75,
              Ti=5,
              yMin=0.05) annotation (Placement(transformation(extent={{-4.25,-4.75},{4.25,
                      4.75}},
                    rotation=0,
                  origin={-34.75,84.25})));
            ThermalPower.TwoPhase.Sensors.Pressure
                                      pSteam(useSIunit=true)
                       annotation (Placement(transformation(extent={{-54,66},{-40,78}},
                    rotation=0)));
            Modelica.Blocks.Interfaces.RealInput SGPressurelSetpoint
              annotation (Placement(transformation(extent={{-120,60},{-80,100}})));
          equation
            connect(Power.port[1],header. wall) annotation (Line(points={{-40,-13},{-40,
                    -14},{-27,-14}},                      color={191,0,0}));
            connect(SG.downcomer,valveLiquid3. feed) annotation (Line(points={{36.8,-6},{
                    40,-6},{40,-26}},       color={0,0,255}));
            connect(realExpression7.y,valveLiquid3. command)
              annotation (Line(points={{22.5,-35},{30,-35},{30,-36},{34.4,-36}},
                                                                 color={0,0,127}));
            connect(pumpPosDispl.drain,header. feed[1]) annotation (Line(points={{-6,-46},
                    {-17.5,-46},{-17.5,-22}},          color={0,0,255}));
            connect(pumpPosDispl.feed,valveLiquid3. drain) annotation (Line(points={{10,-52},
                    {10,-46},{40,-46}},          color={0,0,255}));
            connect(realExpression14.y,SteamControlValve13. command) annotation (Line(
                  points={{-33.5,31},{-34,31},{-34,34},{-31.6,34}},   color={0,0,127}));
            connect(Power1.port[1],header1. wall) annotation (Line(points={{-50,48},{-42,
                    48},{-42,54},{-33.2,54}},      color={191,0,0}));
            connect(SteamControlValve13.drain,header1. feed[1]) annotation (Line(points={{-26,44},
                    {-26,47.6}},                              color={0,0,255}));
            connect(SteamControlValve13.feed,multiData11. port_b)
              annotation (Line(points={{-26,24},{-26,20},{-14,20}}, color={0,0,255}));
            connect(multiData11.u,multiDisplayVis_phTmdot11. y) annotation (Line(points={{-8,20},
                    {-8,26.5},{-5,26.5},{-5,37}},                color={0,0,0}));
            connect(PowertoSG, Power.power) annotation (Line(points={{-98,-20},{-82,-20},
                    {-82,-18},{-52.8,-18},{-52.8,-21.1}}, color={0,0,127}));
            connect(level1.y,pPI. u_m) annotation (Line(points={{-4.44089e-16,-93},{4,-93},
                    {4,-88.1}},    color={0,0,127}));
            connect(FeedWaterInlet, FeedWaterControlValve.feed) annotation (Line(points={
                    {62,40},{44,40},{44,34},{46,34},{46,24},{56,24},{56,-70},{26,-70}},
                  color={0,0,255}));
            connect(FeedWaterControlValve.drain, multiData3.port_a) annotation (Line(
                  points={{6,-70},{-46,-70},{-46,-68},{-54,-68}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot3.y, multiData3.u) annotation (Line(points={{
                    -56,-54},{-56,-62},{-60,-62},{-60,-68}}, color={0,0,0}));
            connect(pPI.y, FeedWaterControlValve.command) annotation (Line(points={{10.6,
                    -81.5},{16,-81.5},{16,-75.6}}, color={0,0,127}));
            connect(PowerSuperHeat, Power1.power) annotation (Line(points={{-98,28},{
                    -64.4,28},{-64.4,40.8}}, color={0,0,127}));
            connect(pSteam.p, pPI1.u_m) annotation (Line(points={{-40.7,72},{-42,72},{-42,
                    78.55},{-34.75,78.55}}, color={0,0,127}));
            connect(TurbineStopValves.feed, header1.drain[1]) annotation (Line(points={{-20,70},
                    {-25.6,70},{-25.6,60.4}},         color={0,0,255}));
            connect(pSteam.port, header1.drain[2]) annotation (Line(points={{-47,66},{-48,
                    66},{-48,64},{-26.4,64},{-26.4,60.4}}, color={0,0,255}));
            connect(pPI1.y, TurbineStopValves.command) annotation (Line(points={{-30.075,
                    84.25},{-30.075,80},{-25.6,80}}, color={0,0,127}));
            connect(SGPressurelSetpoint, pPI1.u_s) annotation (Line(points={{-100,80},{
                    -66,80},{-66,84.25},{-39.85,84.25}}, color={0,0,127}));
            connect(SG.drain, multiData11.port_a) annotation (Line(points={{5.6,19.92},{
                    1.8,19.92},{1.8,20},{-2,20}}, color={0,0,255}));
            connect(SG.riser, header.drain[1]) annotation (Line(points={{3.2,-6},{2,-6},{
                    2,-22},{-6,-22},{-6,0},{-18,0},{-18,-6}}, color={0,0,255}));
            connect(multiData3.port_b, header.feed[2]) annotation (Line(points={{-66,-68},
                    {-72,-68},{-72,-34},{-18.5,-34},{-18.5,-22}},   color={0,0,255}));
            connect(SGLevelSetpoint, pPI.u_s) annotation (Line(points={{-98,-74},{-3.2,
                    -74},{-3.2,-81.5}}, color={0,0,127}));
            connect(TurbineStopValves.drain, SteamOutlet)
              annotation (Line(points={{-20,90},{-20,99},{1,99}}, color={0,0,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-80,
                      -100},{60,100}}), graphics={
                  Ellipse(
                    extent={{-50,84},{52,-18}},
                    lineColor={28,108,200},
                    fillColor={95,180,245},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-12,100},{14,80}},
                    lineColor={28,108,200},
                    fillColor={34,250,253},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-20,-10},{22,-86}},
                    lineColor={28,108,200},
                    fillColor={27,27,244},
                    fillPattern=FillPattern.Solid),
                  Ellipse(
                    extent={{-20,-72},{22,-100}},
                    lineColor={28,108,200},
                    fillColor={36,51,247},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-78,28},{-12,98},{-20,92},{-28,92},{-60,52},{-78,28}},
                    lineColor={28,108,200},
                    fillColor={212,68,20},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-80,-20},{-6,-26},{-6,-46},{-8,-28},{-80,-20}},
                    lineColor={28,108,200},
                    fillColor={238,46,47},
                    fillPattern=FillPattern.Solid),
                  Ellipse(extent={{-48,48},{50,30}}, lineColor={28,108,200}),
                  Polygon(
                    points={{-80,-72},{-20,-56},{-20,-10},{-22,-58},{-80,-72}},
                    lineColor={28,108,200},
                    fillColor={225,114,40},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-80,80},{-4,100},{-16,94},{-20,92},{-62,82},{-80,80}},
                    lineColor={28,108,200},
                    fillColor={212,68,20},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-14,-12},{-12,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-10,-12},{-8,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-6,-12},{-4,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-2,-12},{0,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{2,-12},{4,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{6,-12},{8,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{10,-12},{12,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{14,-12},{16,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid)}), Diagram(coordinateSystem(
                    preserveAspectRatio=false, extent={{-80,-100},{60,100}})));
          end SteamGenerator;

          model BalanceOfPlant_Component "Remove the boundary source"
            package Medium_BOP = Modelica.Media.Water.StandardWater "BOP working fluid";
            Components.SteamTurbineStodola HPTurbine(
              pstartin=DataP.p_nom_turbine_HP_stage1_feed,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstartin=DataP.h_turbine_inlet_s1,
              hstartout=2500e3,
              useNominalPoint=true,
              m_flow_nom=DataP.m_flow_nom_turbine_HP_stage1,
              T_nom=DataP.T_nom_turbine_HP_stage1_feed,
              h1_nom=DataP.h_turbine_inlet_s1,
              p1_nom=DataP.p_nom_turbine_HP_stage1_feed,
              p2_nom=DataP.p_nom_turbine_HP_stage1_drain)
              annotation (Placement(transformation(extent={{-64,10},{-26,48}})));
            Components.MixVolume SteamHeader1(
              pstart(displayUnit="MPa") = DataP.p_nom_turbine_HP_stage1_feed,
              hstart=DataP.h_turbine_inlet_s1,
              V_tot=1,
              m_flow_nom=DataP.m_flow_nom_steam,
              N_drain=1,
              N_feed=1)
              annotation (Placement(transformation(extent={{-146,34},{-114,46}})));
            Components.Condenser condenser(
              diameter=3,
              length=7,
              N_tubes=5000,
              V_hotwell=0,
              states=ThermalPower.SubComponents.Internal.Choices.ThermoStates.ph,
              pstart(displayUnit="MPa") = DataP.p_nom_condenser,
              Tmstart=314.15,
              ystart=1.1)
              annotation (Placement(transformation(extent={{282,-46},{338,-2}})));
            ThermalPower.TwoPhase.SourcesAndSinks.PressureBoundary_T pressureBoundary_T(
              p0(displayUnit="MPa"),
              T0=309.15,
              N_ports=1)
              annotation (Placement(transformation(extent={{368,-58},{348,-38}})));
            ThermalPower.TwoPhase.SourcesAndSinks.FlowBoundary_T flowBoundary_T(m_flow0=
                  5000, T0=300.15)
              annotation (Placement(transformation(extent={{372,-4},{352,16}})));
            Components.Pump CondensatePump(
              usePowerCharacteristic=false,
              V=0.5,
              m_flow_nom=DataP.m_flow_nom_feedWaterPump,
              pin_start(displayUnit="MPa") = DataP.p_nom_condenser,
              pout_start(displayUnit="MPa") = 800000,
              d_nom(displayUnit="kg/m3")=
                ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleDensity_pX(
                CondensatePump.pin_start),
              n_nom=1200,
              q_nom=(DataP.m_flow_nom_feedWaterPump/CondensatePump.d_nom)*{0,1,2},
              head_nom=(1/10*1/CondensatePump.d_nom)*(0.89e6 - DataP.p_nom_condenser)*{2,1,
                  0},
              P_cons={1,1,1},
              forceNPSH=false)
              annotation (Placement(transformation(extent={{370,-152},{334,-118}})));
            ThermalPower.TwoPhase.FlowResistances.HeightDiff heightDiff(
              p_nom=810,
              height=-1.0,
              m_flow_nom=67.1,
              useLoss=false) annotation (Placement(transformation(
                  extent={{13,-10},{-13,10}},
                  rotation=90,
                  origin={310,-61})));
            ThermalPower.TwoPhase.Volumes.MixVolume vol_turbine_LPT_1_feed(
              useTstart=true,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstart=DataP.h_turbine_outlet_s1,
              V_tot=3,
              m_flow_nom=-DataP.m_flow_nom_turbine_HP_stage1/2,
              N_feed=1,
              N_drain=1)                                           annotation (Placement(
                  transformation(
                  extent={{-12.5,-12},{12.5,12}},
                  rotation=90,
                  origin={32,61.5})));
            Components.Turbine_3stageNoEndVolume turbine_3stageNoEndVolume(
              p_nom(displayUnit="MPa") = {DataP.p_nom_turbine_LP_stage1_feed,DataP.p_nom_turbine_LP_stage1_drain,
                DataP.p_nom_turbine_LP_stage2_drain,DataP.p_nom_condenser},
              m_flow_nom={DataP.m_flow_nom_turbine_LP_stage1,DataP.m_flow_nom_turbine_LP_stage2,
                  DataP.m_flow_nom_turbine_LP_stage3},
              h_nom={DataP.h_turbine_outlet_s1,DataP.h_turbine_outlet_s2,DataP.h_turbine_outlet_s3},
              N_drain_stage1=1,
              N_drain_stage2=1)
              annotation (Placement(transformation(extent={{10,14},{58,46}})));

            Components.Turbine_3stageNoEndVolume turbine_3stageNoEndVolume1(
              p_nom(displayUnit="MPa") = {DataP.p_nom_turbine_LP_stage1_feed,DataP.p_nom_turbine_LP_stage1_drain,
                DataP.p_nom_turbine_LP_stage2_drain,DataP.p_nom_condenser},
              m_flow_nom={DataP.m_flow_nom_turbine_LP_stage1,DataP.m_flow_nom_turbine_LP_stage2,
                  DataP.m_flow_nom_turbine_LP_stage3},
              h_nom={DataP.h_turbine_outlet_s1,DataP.h_turbine_outlet_s2,DataP.h_turbine_outlet_s3},
              N_drain_stage1=1,
              N_drain_stage2=1)
              annotation (Placement(transformation(extent={{78,14},{126,46}})));

            ThermalPower.TwoPhase.Volumes.MixVolume vol_turbine_LPT_1_feed1(
              useTstart=true,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstart=DataP.h_turbine_outlet_s1,
              V_tot=3,
              m_flow_nom=-DataP.m_flow_nom_turbine_HP_stage1/2,
              N_feed=1,
              N_drain=1)                                           annotation (Placement(
                  transformation(
                  extent={{-12.5,-12},{12.5,12}},
                  rotation=90,
                  origin={102,61.5})));
            ThermalPower.TwoPhase.Deaerator deaerator(
              rint=5,
              rext=5.2,
              L=25,
              Cm=0,
              Text=303.15,
              pstart(displayUnit="MPa") = DataP.p_nom_dearator,
              hstart=ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleEnthalpy_pX(
                  deaerator.pstart),
              Tmstart=ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleTemperature_pX(
                  deaerator.pstart),
              ystart=1)
              annotation (Placement(transformation(extent={{56,-176},{16,-138}})));
            Components.Pump FeedWaterPump(
              V=0.5,
              m_flow_nom=67,
              pin_start=DataP.p_nom_dearator,
              pout_start(displayUnit="MPa") = 3500000,
              d_nom(displayUnit="kg/m3"),
              q_nom=(DataP.m_flow_nom_feedWaterPump/FeedWaterPump.d_nom)*{0,1,2},
              head_nom=(1 + (1/10*1/FeedWaterPump.d_nom)*(4.0e6))*{2,1,0},
              forceNPSH=false)
              annotation (Placement(transformation(extent={{20,-212},{-16,-178}})));
            ThermalPower.TwoPhase.FlowResistances.HeightDiff heightDiff1(height=-0.95)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={36,-184})));
            Components.ValveSteam SteamControlValve1(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={30,-24})));
            Modelon.Blocks.Sources.RealExpression realExpression1(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={0,-10})));
            Components.ValveSteam SteamControlValve2(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={102,-24})));
            Components.ValveSteam SteamControlValve3(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=2.8,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={60,-24})));
            Components.ValveSteam SteamControlValve4(
              dp_nom(displayUnit="Pa") = 1,
              m_flow_nom=2.8,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={124,-24})));
            Components.ValveSteam SteamControlValve5(
              dp_nom(displayUnit="Pa") = 280,
              m_flow_nom=30,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={32,90})));
            Modelon.Blocks.Sources.RealExpression realExpression5(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={8,90})));
            Components.ValveSteam SteamControlValve6(
              dp_nom(displayUnit="Pa") = 280,
              m_flow_nom=30,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={102,90})));
            Modelon.Blocks.Sources.RealExpression realExpression6(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={76,90})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedwaterLPHeater2(
              diameter=1.04,
              length=2.51,
              N_tubes=66,
              tubelength=200,
              A_hotwell=1.0,
              pstart(displayUnit="MPa") = 51400,
              ystart=-1,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel,
              F_htc_cond=1.0)
              annotation (Placement(transformation(extent={{184,-128},{244,-84}})));
            Components.ValveSteam SteamControlValve7(
              dp_nom(displayUnit="Pa") = 10,
              m_flow_nom=23,
              CheckValve=true,
              p_nom(displayUnit="MPa") = 51000,
              T_nom=353.15) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={252,-142})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedwaterLPHeater(
              diameter=1.04,
              length=2.5168,
              N_tubes=66,
              tubelength=200,
              pstart(displayUnit="MPa") = 250000,
              ystart=-1,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel)
              annotation (Placement(transformation(extent={{86,-144},{146,-100}})));
            Components.ValveSteam SteamControlValve11(
              dp_nom(displayUnit="Pa") = 1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={-150,-70})));
            Components.ValveSteam SteamControlValve12(
              dp_nom(displayUnit="Pa") = 130,
              m_flow_nom=15,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={136,-158})));
            Modelon.Blocks.Sources.RealExpression realExpression13(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={162,-204})));
            ThermalPower.TwoPhase.Valves.ValveLiquid valveLiquid1(dp_nom(displayUnit=
                    "bar") = 150,                                 CheckValve=true)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={136,-184})));
            Modelon.Blocks.Sources.RealExpression realExpression11(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={136,-204})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedWaterHeater(
              diameter=1.04,
              length=2.5168,
              N_tubes=66,
              tubelength=300,
              d_inner=0.014122,
              pstart(displayUnit="MPa") = 480000,
              ystart=-0.99,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel)
              annotation (Placement(transformation(extent={{-154,-138},{-94,-94}})));
            Components.ValveSteam SteamControlValve8(
              dp_nom(displayUnit="Pa") = 400,
              m_flow_nom=3.6,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={58,-106})));
            Modelon.Blocks.Sources.RealExpression realExpression9(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-174,-70})));
            Modelon.Blocks.Sources.RealExpression realExpression10(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={58,-126})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=4,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{276,-2},{338,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData
              annotation (Placement(transformation(extent={{260,-16},{280,4}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData1
              annotation (Placement(transformation(extent={{308,-134},{288,-114}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot1(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{278,-198},{340,-136}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=1,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-56,94}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData4 annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={-118,-60})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot4(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-148,-64},{-86,-2}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData5
              annotation (Placement(transformation(extent={{174,-56},{194,-36}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot5(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=3,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{154,-60},{216,2}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-96,30},{-76,50}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData6 annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={80,-84})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot6(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{16,-114},{78,-52}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData7 annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=180,
                  origin={-60,-106})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot7(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-92,-110},{-30,-48}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{-34,-194},{-54,-174}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-80,-234},{-18,-172}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot9(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{164,-200},{226,-138}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData9
              annotation (Placement(transformation(extent={{200,-134},{180,-114}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData10
              annotation (Placement(transformation(extent={{96,-194},{76,-174}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot10(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{54,-236},{116,-174}})));
            Components.ValveSteam SteamControlValve9(
              dp_nom(displayUnit="Pa") = 140,
              m_flow_nom=0.05,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={22,-124})));
            Modelon.Blocks.Sources.RealExpression realExpression12(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-4,-124})));
            Modelon.Blocks.Sources.RealExpression realExpression3(x=1)  annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={256,-184})));
            Data.NominalData DataP(
              p_nom_turbine_HP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_HP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage2_drain(displayUnit="MPa"),
              p_nom_condenser(displayUnit="MPa"),
              p_nom_CondensatePump_drain(displayUnit="MPa"),
              p_nom_feedWaterPump_drain(displayUnit="MPa"),
              p_nom_preheater_LP(displayUnit="MPa"))
              annotation (Placement(transformation(extent={{340,76},{386,116}})));
            Components.ValveSteam SteamControlValve10(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=43,
              CheckValve=true,
              p_nom(displayUnit="MPa") = 51000,
              T_nom=353.15) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={228,12})));
            Modelon.Blocks.Sources.RealExpression realExpression4(x=1)  annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={242,-18})));
            FlowPort FeedWaterOutlet annotation (Placement(transformation(extent={{-332,
                      -294},{-276,-238}}), iconTransformation(extent={{-332,-294},{-276,
                      -238}})));
            FlowPort SteamInlet annotation (Placement(transformation(extent={{-330,96},{
                      -272,154}}), iconTransformation(extent={{-330,96},{-272,154}})));
            Modelica.Mechanics.Rotational.Interfaces.Flange_a ToGenerator annotation (
                Placement(transformation(extent={{362,-136},{474,-24}}),
                  iconTransformation(extent={{362,-136},{474,-24}})));
          equation
            connect(condenser.drain_cool, pressureBoundary_T.port[1]) annotation (Line(
                  points={{341.36,-26.64},{376,-26.64},{376,-64},{349,-64},{349,-48}},
                  color={0,0,255}));
            connect(flowBoundary_T.port, condenser.feed_cool) annotation (Line(points={{353,6},
                    {344,6},{344,-10},{348,-10},{348,-17.84},{341.36,-17.84}},
                  color={0,0,255}));
            connect(heightDiff.feed, condenser.drain)
              annotation (Line(points={{310,-48},{310,-37.2}}, color={0,0,255}));
            connect(heightDiff.drain, CondensatePump.feed) annotation (Line(points={{310,-74},
                    {310,-110},{376,-110},{376,-135},{366.76,-135}},    color={0,0,255}));
            connect(HPTurbine.shaft_b, turbine_3stageNoEndVolume.shaft_a) annotation (
                Line(points={{-27.9,29},{-8.95,29},{-8.95,30},{10,30}}, color={0,0,0}));
            connect(turbine_3stageNoEndVolume.feed, vol_turbine_LPT_1_feed.feed[1])
              annotation (Line(points={{34,37.2},{32,37.2},{32,51.5}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume.shaft_b, turbine_3stageNoEndVolume1.shaft_a)
              annotation (Line(points={{58,30},{78,30}}, color={0,0,0}));
            connect(vol_turbine_LPT_1_feed1.feed[1], turbine_3stageNoEndVolume1.feed)
              annotation (Line(points={{102,51.5},{102,37.2}}, color={0,0,255}));
            connect(deaerator.drain, heightDiff1.drain)
              annotation (Line(points={{36,-165.36},{36,-174}}, color={0,0,255}));
            connect(FeedWaterPump.feed, heightDiff1.feed) annotation (Line(points={{16.76,
                    -195},{36,-195},{36,-194}},        color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage1[1], SteamControlValve1.feed)
              annotation (Line(points={{34,20.08},{34,-8},{30,-8},{30,-14}},   color={0,0,
                    255}));
            connect(turbine_3stageNoEndVolume1.drain_stage1[1], SteamControlValve2.feed)
              annotation (Line(points={{102,20.08},{102,-14}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume1.drain_stage2[1], SteamControlValve4.feed)
              annotation (Line(points={{108.4,17.68},{108.4,-8},{124,-8},{124,-14}},
                  color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage2[1], SteamControlValve3.feed)
              annotation (Line(points={{40.4,17.68},{40.4,-8},{60,-8},{60,-14}},   color=
                    {0,0,255}));
            connect(realExpression5.y, SteamControlValve5.command)
              annotation (Line(points={{19,90},{26.4,90}}, color={0,0,127}));
            connect(realExpression6.y, SteamControlValve6.command)
              annotation (Line(points={{87,90},{96.4,90}}, color={0,0,127}));
            connect(SteamControlValve6.drain, vol_turbine_LPT_1_feed1.drain[1])
              annotation (Line(points={{102,80},{102,71.5}}, color={0,0,255}));
            connect(SteamControlValve5.drain, vol_turbine_LPT_1_feed.drain[1])
              annotation (Line(points={{32,80},{32,71.5}}, color={0,0,255}));
            connect(SteamControlValve5.feed, HPTurbine.drain) annotation (Line(points={{
                    32,100},{32,106},{-8,106},{-8,15.7},{-29.8,15.7}}, color={0,0,255}));
            connect(SteamControlValve6.feed, HPTurbine.drain) annotation (Line(points={{
                    102,100},{102,106},{-8,106},{-8,15.7},{-29.8,15.7}}, color={0,0,255}));
            connect(SteamControlValve12.feed, FeedwaterLPHeater.drain) annotation (Line(
                  points={{126,-158},{116,-158},{116,-135.2}}, color={0,0,255}));
            connect(realExpression11.y, valveLiquid1.command)
              annotation (Line(points={{136,-193},{136,-189.6}}, color={0,0,127}));
            connect(FeedwaterLPHeater.drain_cool, valveLiquid1.feed) annotation (Line(
                  points={{149.6,-124.64},{154,-124.64},{154,-184},{146,-184}}, color={0,
                    0,255}));
            connect(SteamControlValve7.drain, condenser.feed) annotation (Line(points={{262,
                    -142},{264,-142},{264,-12},{274,-12},{274,-12.12},{289.56,-12.12}},
                  color={0,0,255}));
            connect(realExpression13.y, SteamControlValve12.command) annotation (Line(
                  points={{162,-193},{162,-163.6},{136,-163.6}},          color={0,0,127}));
            connect(FeedWaterHeater.feed, SteamControlValve11.drain) annotation (Line(
                  points={{-145.9,-104.12},{-148,-104.12},{-148,-80},{-150,-80}}, color={
                    0,0,255}));
            connect(realExpression9.y, SteamControlValve11.command)
              annotation (Line(points={{-163,-70},{-155.6,-70}}, color={0,0,127}));
            connect(realExpression10.y, SteamControlValve8.command)
              annotation (Line(points={{58,-115},{58,-111.6}}, color={0,0,127}));
            connect(multiData.u, multiDisplayVis_phTmdot.y)
              annotation (Line(points={{270,-6},{270,29},{307,29}}, color={0,0,0}));
            connect(multiData1.port_a, CondensatePump.drain) annotation (Line(points={{
                    304,-124},{320.8,-124},{320.8,-124.8},{337.6,-124.8}}, color={0,0,255}));
            connect(multiData1.port_b, FeedwaterLPHeater2.feed_cool) annotation (Line(
                  points={{292,-124},{270,-124},{270,-99.84},{247.6,-99.84}}, color={0,0,
                    255}));
            connect(multiData1.u, multiDisplayVis_phTmdot1.y) annotation (Line(points={{
                    298,-124},{298,-112},{286,-112},{286,-130},{272,-130},{272,-167},{309,
                    -167}}, color={0,0,0}));
            connect(SteamControlValve2.command, realExpression1.y) annotation (Line(
                  points={{96.4,-24},{80,-24},{80,-10},{11,-10}}, color={0,0,127}));
            connect(SteamControlValve1.command, realExpression1.y) annotation (Line(
                  points={{24.4,-24},{11,-24},{11,-10}},            color={0,0,127}));
            connect(SteamControlValve12.drain, FeedwaterLPHeater2.feed) annotation (Line(
                  points={{146,-158},{162,-158},{162,-94.12},{192.1,-94.12}}, color={0,0,
                    255}));
            connect(SteamControlValve11.feed, multiData4.port_b) annotation (Line(points=
                    {{-150,-60},{-150,-54},{-134,-54},{-134,-60},{-124,-60}}, color={0,0,
                    255}));
            connect(multiData4.port_a, HPTurbine.drain) annotation (Line(points={{-112,
                    -60},{-29.8,-60},{-29.8,15.7}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot4.y, multiData4.u) annotation (Line(points={{
                    -117,-33},{-117,-60},{-118,-60}}, color={0,0,0}));
            connect(SteamControlValve3.drain, multiData5.port_a)
              annotation (Line(points={{60,-34},{60,-46},{178,-46}}, color={0,0,255}));
            connect(SteamControlValve4.drain, multiData5.port_a)
              annotation (Line(points={{124,-34},{124,-46},{178,-46}}, color={0,0,255}));
            connect(multiData5.port_b, FeedwaterLPHeater2.feed) annotation (Line(points={
                    {190,-46},{192.1,-46},{192.1,-94.12}}, color={0,0,255}));
            connect(multiData5.u, multiDisplayVis_phTmdot5.y) annotation (Line(points={{
                    184,-46},{186,-46},{186,-29},{185,-29}}, color={0,0,0}));
            connect(multiData2.port_b, HPTurbine.feed) annotation (Line(points={{-80,40},
                    {-70.1,40},{-70.1,40.4},{-60.2,40.4}}, color={0,0,255}));
            connect(multiData2.port_a, SteamHeader1.drain[1])
              annotation (Line(points={{-92,40},{-117.2,40}}, color={0,0,255}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y) annotation (Line(points={{
                    -86,40},{-86,51.5},{-87,51.5},{-87,63}}, color={0,0,0}));
            connect(SteamControlValve1.drain, multiData6.port_a) annotation (Line(points=
                    {{30,-34},{30,-52},{80,-52},{80,-78}}, color={0,0,255}));
            connect(SteamControlValve2.drain, multiData6.port_a) annotation (Line(points=
                    {{102,-34},{102,-52},{80,-52},{80,-78}}, color={0,0,255}));
            connect(multiData6.port_b, FeedwaterLPHeater.feed) annotation (Line(points={{
                    80,-90},{80,-110.12},{94.1,-110.12}}, color={0,0,255}));
            connect(multiData6.u, multiDisplayVis_phTmdot6.y) annotation (Line(points={{
                    80,-84},{66,-84},{66,-83},{47,-83}}, color={0,0,0}));
            connect(multiDisplayVis_phTmdot7.y, multiData7.u)
              annotation (Line(points={{-61,-79},{-61,-106},{-60,-106}}, color={0,0,0}));
            connect(FeedWaterPump.drain, multiData8.port_a) annotation (Line(points={{
                    -12.4,-184.8},{-24,-184.8},{-24,-184},{-38,-184}}, color={0,0,255}));
            connect(multiData8.u, multiDisplayVis_phTmdot8.y) annotation (Line(points={{
                    -44,-184},{-44,-203},{-49,-203}}, color={0,0,0}));
            connect(FeedWaterHeater.drain, multiData7.port_a) annotation (Line(points={{
                    -124,-129.2},{-124,-134},{-66,-134},{-66,-106}}, color={0,0,255}));
            connect(FeedWaterHeater.feed_cool, multiData8.port_b) annotation (Line(points=
                   {{-90.4,-109.84},{-78,-109.84},{-78,-184},{-50,-184}}, color={0,0,255}));
            connect(FeedwaterLPHeater2.drain_cool, multiData9.port_a) annotation (Line(
                  points={{247.6,-108.64},{247.6,-124},{196,-124}}, color={0,0,255}));
            connect(multiData9.port_b, FeedwaterLPHeater.feed_cool) annotation (Line(
                  points={{184,-124},{156,-124},{156,-115.84},{149.6,-115.84}}, color={0,
                    0,255}));
            connect(multiData9.u, multiDisplayVis_phTmdot9.y) annotation (Line(points={{
                    190,-124},{190,-169},{195,-169}}, color={0,0,0}));
            connect(multiData7.port_b, SteamControlValve8.feed)
              annotation (Line(points={{-54,-106},{48,-106}}, color={0,0,255}));
            connect(SteamControlValve8.drain, FeedwaterLPHeater.feed) annotation (Line(
                  points={{68,-106},{80,-106},{80,-110.12},{94.1,-110.12}}, color={0,0,
                    255}));
            connect(multiData.port_b, condenser.feed) annotation (Line(points={{276,-6},{
                    289.56,-6},{289.56,-12.12}}, color={0,0,255}));
            connect(multiData10.port_b, deaerator.feed) annotation (Line(points={{80,-184},
                    {62,-184},{62,-149.02},{50.4,-149.02}}, color={0,0,255}));
            connect(multiData10.port_a, valveLiquid1.drain)
              annotation (Line(points={{92,-184},{126,-184}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot10.y, multiData10.u) annotation (Line(points={
                    {85,-205},{85,-194.5},{86,-194.5},{86,-184}}, color={0,0,0}));
            connect(SteamControlValve9.drain, deaerator.steam) annotation (Line(points={{
                    22,-134},{22,-137.37},{22.4,-137.37},{22.4,-146.74}}, color={0,0,255}));
            connect(realExpression12.y, SteamControlValve9.command)
              annotation (Line(points={{7,-124},{16.4,-124}}, color={0,0,127}));
            connect(SteamControlValve9.feed, SteamControlValve8.feed)
              annotation (Line(points={{22,-114},{22,-106},{48,-106}}, color={0,0,255}));
            connect(FeedwaterLPHeater2.drain, SteamControlValve7.feed) annotation (Line(
                  points={{214,-119.2},{214,-118},{246,-118},{246,-130},{242,-130},{242,
                    -142}}, color={0,0,255}));
            connect(realExpression3.y, SteamControlValve7.command) annotation (Line(
                  points={{256,-173},{256,-158},{252,-158},{252,-147.6}}, color={0,0,127}));
            connect(turbine_3stageNoEndVolume1.drain_stage3, SteamControlValve10.feed)
              annotation (Line(points={{114.8,15.6},{114.8,12},{218,12}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage3, SteamControlValve10.feed)
              annotation (Line(points={{46.8,15.6},{46.8,12},{218,12}}, color={0,0,255}));
            connect(SteamControlValve10.drain, multiData.port_a)
              annotation (Line(points={{238,12},{264,12},{264,-6}}, color={0,0,255}));
            connect(realExpression4.y, SteamControlValve10.command) annotation (Line(
                  points={{242,-7},{236,-7},{236,6.4},{228,6.4}}, color={0,0,127}));
            connect(SteamControlValve3.command, realExpression1.y) annotation (Line(
                  points={{54.4,-24},{50,-24},{50,-10},{11,-10}}, color={0,0,127}));
            connect(SteamControlValve4.command, realExpression1.y) annotation (Line(
                  points={{118.4,-24},{116,-24},{116,-10},{11,-10}}, color={0,0,127}));
            connect(turbine_3stageNoEndVolume1.shaft_b, ToGenerator) annotation (Line(
                  points={{126,30},{126,-4},{148,-4},{148,-64},{288,-64},{288,-80},{418,
                    -80}}, color={0,0,0}));
            connect(FeedWaterHeater.drain_cool, FeedWaterOutlet) annotation (Line(points=
                    {{-90.4,-118.64},{-88,-118.64},{-88,-266},{-304,-266}}, color={0,0,
                    255}));
            connect(ToGenerator, ToGenerator) annotation (Line(points={{418,-80},{424,-80},
                    {424,-84},{422,-84},{422,-80},{418,-80}}, color={0,0,0}));
            connect(SteamHeader1.feed[1], SteamInlet) annotation (Line(points={{-142.8,40},
                    {-320,40},{-320,125},{-301,125}}, color={0,0,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-360,
                      -260},{400,120}}),
                                   graphics={
                  Rectangle(extent={{294,120},{376,-260}},
                                                         lineColor={28,108,200},
                    fillColor={176,176,176},
                    fillPattern=FillPattern.Forward),
                  Polygon(
                    points={{-358,118},{-356,-262},{-160,-142},{-160,0},{-358,118}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(
                    extent={{294,-30},{-358,-118}},
                    lineColor={28,108,200},
                    fillColor={0,140,72},
                    fillPattern=FillPattern.CrossDiag),
                  Polygon(
                    points={{-240,118},{-238,-262},{-42,-142},{-42,0},{-240,118}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(
                    extent={{380,-28},{-210,-116}},
                    lineColor={28,108,200},
                    fillColor={0,140,72},
                    fillPattern=FillPattern.CrossDiag),
                  Polygon(
                    points={{-112,120},{-110,-260},{86,-140},{86,2},{-112,120}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(extent={{234,120},{316,-260}},
                                                         lineColor={28,108,200},
                    fillColor={176,176,176},
                    fillPattern=FillPattern.Forward),
                  Text(
                    extent={{-312,-42},{286,-94}},
                    textColor={28,108,200},
                    textString="BOP"),
                  Rectangle(
                    extent={{-280,120},{-322,38}},
                    lineColor={28,108,200},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-282,-178},{-324,-260}},
                    lineColor={28,108,200},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid)}),                      Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-360,-260},{400,
                      120}})),
              experiment(
                StartTime=3000,
                StopTime=15000,
                __Dymola_NumberOfIntervals=5000,
                __Dymola_Algorithm="Dassl"));
          end BalanceOfPlant_Component;

          model SteamGenerator_orignal_backup
            ThermalPower.Thermal.Sources.HeatFlowSource Power(N=1) annotation (Placement(
                  transformation(
                  extent={{-9,8},{9,-8}},
                  rotation=90,
                  origin={-48,-13})));
            Header            header(
              pstart(displayUnit="MPa") = 3500000,
              hstart=2999e3,
              V_tot=1,
              Cm=0,
              N_feed=2,
              N_drain=1) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-18,-14})));
            Drum            SG(
              rint=1,
              rext=1.1,
              L=2,
              Cm=(SG.L*3.14*2*SG.rext + 2*3.14*SG.rext^2)*(SG.rext - SG.rint)*7000*500,
              DrumOrientation=1,
              pstart(displayUnit="MPa") = 3500000,
              hlstart=590e3,
              hvstart=2999e3,
              Tmstart=583.15)
              annotation (Placement(transformation(extent={{44,-18},{-4,30}})));
            ThermalPower.TwoPhase.Valves.ValveLiquid valveLiquid3(dp_nom(displayUnit=
                    "bar") = 1000, CheckValve=true)
              annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={40,-36})));
            Modelon.Blocks.Sources.RealExpression realExpression7(x=1)  annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={17,-35})));
            ThermalPower.TwoPhase.TurboMachinery.Pumps.PumpPosDispl pumpPosDispl(
              V=0.3,
              pin_start(displayUnit="MPa") = 3500000,
              pout_start(displayUnit="MPa") = 3500000,
              n_nom=CirculatingPumpRPM,
              q_nom=10*67/1000)
              annotation (Placement(transformation(extent={{12,-62},{-8,-42}})));
            ValveSteam            SteamControlValve13(
              dp_nom(displayUnit="Pa") = 10,
              m_flow_nom=68,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-26,34})));
            Modelon.Blocks.Sources.RealExpression realExpression14(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={-39,31})));
            ThermalPower.Thermal.Sources.HeatFlowSource Power1(N=1)
                                                                   annotation (Placement(
                  transformation(
                  extent={{-8,9},{8,-9}},
                  rotation=90,
                  origin={-59,48})));
            Header            header1(
              pstart(displayUnit="MPa") = DataP.p_nom_turbine_HP_stage1_feed,
              hstart=DataP.h_turbine_inlet_s1,
              V_tot=1,
              m_flow_nom=DataP.m_flow_nom_steam,
              Cm=0,
              N_feed=1,
              N_drain=2) annotation (Placement(transformation(
                  extent={{-8,-8},{8,8}},
                  rotation=90,
                  origin={-26,54})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot11(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=1,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-16,26},{6,48}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData11
              annotation (Placement(transformation(extent={{2,10},{-18,30}})));
            FlowPort SteamOutlet annotation (Placement(transformation(extent={{-12,86},{
                      14,112}}), iconTransformation(extent={{-12,86},{14,112}})));
            FlowPort FeedWaterInlet annotation (Placement(transformation(extent={{50,28},
                      {74,52}}), iconTransformation(extent={{50,28},{74,52}})));
            Modelica.Blocks.Interfaces.RealInput PowertoSG
              annotation (Placement(transformation(extent={{-118,-40},{-78,0}})));
            Modelica.Blocks.Interfaces.RealInput PowerSuperHeat
              annotation (Placement(transformation(extent={{-118,8},{-78,48}})));
            ThermalPower.TwoPhase.Valves.ValveLiquid FeedWaterControlValve(
              dp_nom(displayUnit="bar") = 500,
              m_flow_nom=67,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={16,-70})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData3
              annotation (Placement(transformation(extent={{-50,-78},{-70,-58}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot3(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-68,-66},{-44,-42}})));
            ThermalPower.ControllersAndSensors.UniversalSensor level1(outValue=SG.y)
              annotation (Placement(transformation(extent={{-12,-98},{0,-88}},
                    rotation=0)));
            ThermalPower.ControllersAndSensors.LimPI
                                        pPI(
              k=0.1,
              steadyStateInit=false,
              yInit=0.1,
              Ti=1,
              yMin=0.01) annotation (Placement(transformation(extent={{-2,-87},{10,-76}},
                    rotation=0)));
            Modelica.Blocks.Interfaces.RealInput SGLevelSetpoint annotation (Placement(
                  transformation(extent={{-118,-94},{-78,-54}}), iconTransformation(
                    extent={{-118,-94},{-78,-54}})));
            Data.NominalData DataP(
              p_nom_turbine_HP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_HP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage2_drain(displayUnit="MPa"),
              p_nom_condenser(displayUnit="MPa"),
              p_nom_CondensatePump_drain(displayUnit="MPa"),
              p_nom_feedWaterPump_drain(displayUnit="MPa"),
              p_nom_preheater_LP(displayUnit="MPa"))
              annotation (Placement(transformation(extent={{34,78},{50,96}})));
            parameter Modelica.Units.NonSI.AngularVelocity_rpm CirculatingPumpRPM=1500
              "Nominal rotational speed";
            ValveSteam            TurbineStopValves(
              dp_nom=100,
              m_flow_nom=67.1,
              CheckValve=true)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-20,80})));
            ThermalPower.ControllersAndSensors.LimPI
                                        pPI1(
              k=-0.01,
              steadyStateInit=false,
              yInit=1,
              Ti=2,
              yMin=0.01) annotation (Placement(transformation(extent={{-4.25,-4.75},{4.25,
                      4.75}},
                    rotation=0,
                  origin={-34.75,84.25})));
            ThermalPower.TwoPhase.Sensors.Pressure
                                      pSteam(useSIunit=true)
                       annotation (Placement(transformation(extent={{-54,66},{-40,78}},
                    rotation=0)));
            Modelica.Blocks.Interfaces.RealInput SGPressurelSetpoint
              annotation (Placement(transformation(extent={{-120,60},{-80,100}})));
          equation
            connect(Power.port[1],header. wall) annotation (Line(points={{-40,-13},{-40,
                    -14},{-27,-14}},                      color={191,0,0}));
            connect(SG.downcomer,valveLiquid3. feed) annotation (Line(points={{36.8,-6},{
                    40,-6},{40,-26}},       color={0,0,255}));
            connect(realExpression7.y,valveLiquid3. command)
              annotation (Line(points={{22.5,-35},{30,-35},{30,-36},{34.4,-36}},
                                                                 color={0,0,127}));
            connect(pumpPosDispl.drain,header. feed[1]) annotation (Line(points={{-6,-46},
                    {-17.5,-46},{-17.5,-22}},          color={0,0,255}));
            connect(pumpPosDispl.feed,valveLiquid3. drain) annotation (Line(points={{10,-52},
                    {10,-46},{40,-46}},          color={0,0,255}));
            connect(realExpression14.y,SteamControlValve13. command) annotation (Line(
                  points={{-33.5,31},{-34,31},{-34,34},{-31.6,34}},   color={0,0,127}));
            connect(Power1.port[1],header1. wall) annotation (Line(points={{-50,48},{-42,
                    48},{-42,54},{-33.2,54}},      color={191,0,0}));
            connect(SteamControlValve13.drain,header1. feed[1]) annotation (Line(points={{-26,44},
                    {-26,47.6}},                              color={0,0,255}));
            connect(SteamControlValve13.feed,multiData11. port_b)
              annotation (Line(points={{-26,24},{-26,20},{-14,20}}, color={0,0,255}));
            connect(multiData11.u,multiDisplayVis_phTmdot11. y) annotation (Line(points={{-8,20},
                    {-8,26.5},{-5,26.5},{-5,37}},                color={0,0,0}));
            connect(PowertoSG, Power.power) annotation (Line(points={{-98,-20},{-82,-20},
                    {-82,-18},{-52.8,-18},{-52.8,-21.1}}, color={0,0,127}));
            connect(level1.y,pPI. u_m) annotation (Line(points={{-4.44089e-16,-93},{4,-93},
                    {4,-88.1}},    color={0,0,127}));
            connect(FeedWaterInlet, FeedWaterControlValve.feed) annotation (Line(points={
                    {62,40},{44,40},{44,34},{46,34},{46,24},{56,24},{56,-70},{26,-70}},
                  color={0,0,255}));
            connect(FeedWaterControlValve.drain, multiData3.port_a) annotation (Line(
                  points={{6,-70},{-46,-70},{-46,-68},{-54,-68}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot3.y, multiData3.u) annotation (Line(points={{
                    -56,-54},{-56,-62},{-60,-62},{-60,-68}}, color={0,0,0}));
            connect(pPI.y, FeedWaterControlValve.command) annotation (Line(points={{10.6,
                    -81.5},{16,-81.5},{16,-75.6}}, color={0,0,127}));
            connect(PowerSuperHeat, Power1.power) annotation (Line(points={{-98,28},{
                    -64.4,28},{-64.4,40.8}}, color={0,0,127}));
            connect(pSteam.p, pPI1.u_m) annotation (Line(points={{-40.7,72},{-42,72},{-42,
                    78.55},{-34.75,78.55}}, color={0,0,127}));
            connect(TurbineStopValves.feed, header1.drain[1]) annotation (Line(points={{-20,70},
                    {-25.6,70},{-25.6,60.4}},         color={0,0,255}));
            connect(pSteam.port, header1.drain[2]) annotation (Line(points={{-47,66},{-48,
                    66},{-48,64},{-26.4,64},{-26.4,60.4}}, color={0,0,255}));
            connect(pPI1.y, TurbineStopValves.command) annotation (Line(points={{-30.075,
                    84.25},{-30.075,80},{-25.6,80}}, color={0,0,127}));
            connect(SGPressurelSetpoint, pPI1.u_s) annotation (Line(points={{-100,80},{
                    -66,80},{-66,84.25},{-39.85,84.25}}, color={0,0,127}));
            connect(SG.drain, multiData11.port_a) annotation (Line(points={{5.6,19.92},{
                    1.8,19.92},{1.8,20},{-2,20}}, color={0,0,255}));
            connect(SG.riser, header.drain[1]) annotation (Line(points={{3.2,-6},{2,-6},{
                    2,-22},{-6,-22},{-6,0},{-18,0},{-18,-6}}, color={0,0,255}));
            connect(multiData3.port_b, header.feed[2]) annotation (Line(points={{-66,-68},
                    {-72,-68},{-72,-34},{-18.5,-34},{-18.5,-22}},   color={0,0,255}));
            connect(SGLevelSetpoint, pPI.u_s) annotation (Line(points={{-98,-74},{-3.2,
                    -74},{-3.2,-81.5}}, color={0,0,127}));
            connect(TurbineStopValves.drain, SteamOutlet)
              annotation (Line(points={{-20,90},{-20,99},{1,99}}, color={0,0,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-80,
                      -100},{60,100}}), graphics={
                  Ellipse(
                    extent={{-50,84},{52,-18}},
                    lineColor={28,108,200},
                    fillColor={95,180,245},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-12,100},{14,80}},
                    lineColor={28,108,200},
                    fillColor={34,250,253},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-20,-10},{22,-86}},
                    lineColor={28,108,200},
                    fillColor={27,27,244},
                    fillPattern=FillPattern.Solid),
                  Ellipse(
                    extent={{-20,-72},{22,-100}},
                    lineColor={28,108,200},
                    fillColor={36,51,247},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-78,28},{-12,98},{-20,92},{-28,92},{-60,52},{-78,28}},
                    lineColor={28,108,200},
                    fillColor={212,68,20},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-80,-20},{-6,-26},{-6,-46},{-8,-28},{-80,-20}},
                    lineColor={28,108,200},
                    fillColor={238,46,47},
                    fillPattern=FillPattern.Solid),
                  Ellipse(extent={{-48,48},{50,30}}, lineColor={28,108,200}),
                  Polygon(
                    points={{-80,-72},{-20,-56},{-20,-10},{-22,-58},{-80,-72}},
                    lineColor={28,108,200},
                    fillColor={225,114,40},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-80,80},{-4,100},{-16,94},{-20,92},{-62,82},{-80,80}},
                    lineColor={28,108,200},
                    fillColor={212,68,20},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-14,-12},{-12,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-10,-12},{-8,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-6,-12},{-4,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-2,-12},{0,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{2,-12},{4,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{6,-12},{8,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{10,-12},{12,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{14,-12},{16,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid)}), Diagram(coordinateSystem(
                    preserveAspectRatio=false, extent={{-80,-100},{60,100}})));
          end SteamGenerator_orignal_backup;

          model BalanceOfPlant_Component_backup "Remove the boundary source"
            package Medium_BOP = Modelica.Media.Water.StandardWater "BOP working fluid";
            Components.SteamTurbineStodola HPTurbine(
              pstartin=DataP.p_nom_turbine_HP_stage1_feed,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstartin=DataP.h_turbine_inlet_s1,
              hstartout=2500e3,
              useNominalPoint=true,
              m_flow_nom=DataP.m_flow_nom_turbine_HP_stage1,
              T_nom=DataP.T_nom_turbine_HP_stage1_feed,
              h1_nom=DataP.h_turbine_inlet_s1,
              p1_nom=DataP.p_nom_turbine_HP_stage1_feed,
              p2_nom=DataP.p_nom_turbine_HP_stage1_drain)
              annotation (Placement(transformation(extent={{-64,10},{-26,48}})));
            Components.MixVolume SteamHeader1(
              pstart(displayUnit="MPa") = DataP.p_nom_turbine_HP_stage1_feed,
              hstart=DataP.h_turbine_inlet_s1,
              V_tot=1,
              m_flow_nom=DataP.m_flow_nom_steam,
              N_drain=1,
              N_feed=1)
              annotation (Placement(transformation(extent={{-146,34},{-114,46}})));
            Components.Condenser condenser(
              diameter=3,
              length=7,
              N_tubes=5000,
              V_hotwell=0,
              states=ThermalPower.SubComponents.Internal.Choices.ThermoStates.ph,
              pstart(displayUnit="MPa") = DataP.p_nom_condenser,
              Tmstart=314.15,
              ystart=1.1)
              annotation (Placement(transformation(extent={{282,-46},{338,-2}})));
            ThermalPower.TwoPhase.SourcesAndSinks.PressureBoundary_T pressureBoundary_T(
              p0(displayUnit="MPa"),
              T0=309.15,
              N_ports=1)
              annotation (Placement(transformation(extent={{368,-58},{348,-38}})));
            ThermalPower.TwoPhase.SourcesAndSinks.FlowBoundary_T flowBoundary_T(m_flow0=
                  5000, T0=300.15)
              annotation (Placement(transformation(extent={{372,-4},{352,16}})));
            Components.Pump CondensatePump(
              usePowerCharacteristic=false,
              V=0.5,
              m_flow_nom=DataP.m_flow_nom_feedWaterPump,
              pin_start(displayUnit="MPa") = DataP.p_nom_condenser,
              pout_start(displayUnit="MPa") = 800000,
              d_nom(displayUnit="kg/m3")=
                ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleDensity_pX(
                CondensatePump.pin_start),
              n_nom=1200,
              q_nom=(DataP.m_flow_nom_feedWaterPump/CondensatePump.d_nom)*{0,1,2},
              head_nom=(1/10*1/CondensatePump.d_nom)*(0.89e6 - DataP.p_nom_condenser)*{2,1,
                  0},
              P_cons={1,1,1},
              forceNPSH=false)
              annotation (Placement(transformation(extent={{370,-152},{334,-118}})));
            ThermalPower.TwoPhase.FlowResistances.HeightDiff heightDiff(
              p_nom=810,
              height=-1.0,
              m_flow_nom=67.1,
              useLoss=false) annotation (Placement(transformation(
                  extent={{13,-10},{-13,10}},
                  rotation=90,
                  origin={310,-61})));
            ThermalPower.TwoPhase.Volumes.MixVolume vol_turbine_LPT_1_feed(
              useTstart=true,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstart=DataP.h_turbine_outlet_s1,
              V_tot=3,
              m_flow_nom=DataP.m_flow_nom_turbine_HP_stage1,
              N_feed=1,
              N_drain=1)                                           annotation (Placement(
                  transformation(
                  extent={{-12.5,-12},{12.5,12}},
                  rotation=90,
                  origin={32,61.5})));
            Components.Turbine_3stageNoEndVolume turbine_3stageNoEndVolume(
              p_nom(displayUnit="MPa") = {DataP.p_nom_turbine_LP_stage1_feed,DataP.p_nom_turbine_LP_stage1_drain,
                DataP.p_nom_turbine_LP_stage2_drain,DataP.p_nom_condenser},
              m_flow_nom={DataP.m_flow_nom_turbine_LP_stage1,DataP.m_flow_nom_turbine_LP_stage2,
                  DataP.m_flow_nom_turbine_LP_stage3},
              h_nom={DataP.h_turbine_outlet_s1,DataP.h_turbine_outlet_s2,DataP.h_turbine_outlet_s3},
              N_drain_stage1=1,
              N_drain_stage2=1)
              annotation (Placement(transformation(extent={{10,14},{58,46}})));

            Components.Turbine_3stageNoEndVolume turbine_3stageNoEndVolume1(
              p_nom(displayUnit="MPa") = {DataP.p_nom_turbine_LP_stage1_feed,DataP.p_nom_turbine_LP_stage1_drain,
                DataP.p_nom_turbine_LP_stage2_drain,DataP.p_nom_condenser},
              m_flow_nom={DataP.m_flow_nom_turbine_LP_stage1,DataP.m_flow_nom_turbine_LP_stage2,
                  DataP.m_flow_nom_turbine_LP_stage3},
              h_nom={DataP.h_turbine_outlet_s1,DataP.h_turbine_outlet_s2,DataP.h_turbine_outlet_s3},
              N_drain_stage1=1,
              N_drain_stage2=1)
              annotation (Placement(transformation(extent={{78,14},{126,46}})));

            ThermalPower.TwoPhase.Volumes.MixVolume vol_turbine_LPT_1_feed1(
              useTstart=true,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstart=DataP.h_turbine_outlet_s1,
              V_tot=3,
              m_flow_nom=DataP.m_flow_nom_turbine_HP_stage1,
              N_feed=1,
              N_drain=1)                                           annotation (Placement(
                  transformation(
                  extent={{-12.5,-12},{12.5,12}},
                  rotation=90,
                  origin={102,61.5})));
            ThermalPower.TwoPhase.Deaerator deaerator(
              rint=5,
              rext=5.2,
              L=25,
              Cm=0,
              Text=303.15,
              pstart(displayUnit="MPa") = DataP.p_nom_dearator,
              hstart=ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleEnthalpy_pX(
                  deaerator.pstart),
              Tmstart=ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleTemperature_pX(
                  deaerator.pstart),
              ystart=1)
              annotation (Placement(transformation(extent={{56,-176},{16,-138}})));
            Components.Pump FeedWaterPump(
              V=0.5,
              m_flow_nom=67,
              pin_start=DataP.p_nom_dearator,
              pout_start(displayUnit="MPa") = 3500000,
              d_nom(displayUnit="kg/m3"),
              q_nom=(DataP.m_flow_nom_feedWaterPump/FeedWaterPump.d_nom)*{0,1,2},
              head_nom=(1 + (1/10*1/FeedWaterPump.d_nom)*(4.0e6))*{2,1,0},
              forceNPSH=false)
              annotation (Placement(transformation(extent={{20,-212},{-16,-178}})));
            ThermalPower.TwoPhase.FlowResistances.HeightDiff heightDiff1(height=-0.95)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={36,-184})));
            Components.ValveSteam SteamControlValve1(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={30,-24})));
            Modelon.Blocks.Sources.RealExpression realExpression1(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={0,-10})));
            Components.ValveSteam SteamControlValve2(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={102,-24})));
            Components.ValveSteam SteamControlValve3(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=2.8,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={60,-24})));
            Components.ValveSteam SteamControlValve4(
              dp_nom(displayUnit="Pa") = 1,
              m_flow_nom=2.8,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={124,-24})));
            Components.ValveSteam SteamControlValve5(
              dp_nom(displayUnit="Pa") = 280,
              m_flow_nom=30,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={32,90})));
            Modelon.Blocks.Sources.RealExpression realExpression5(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={8,90})));
            Components.ValveSteam SteamControlValve6(
              dp_nom(displayUnit="Pa") = 280,
              m_flow_nom=30,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={102,90})));
            Modelon.Blocks.Sources.RealExpression realExpression6(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={76,90})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedwaterLPHeater2(
              diameter=1.04,
              length=2.51,
              N_tubes=66,
              tubelength=200,
              A_hotwell=1.0,
              pstart(displayUnit="MPa") = 51400,
              ystart=-1,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel,
              F_htc_cond=1.0)
              annotation (Placement(transformation(extent={{184,-128},{244,-84}})));
            Components.ValveSteam SteamControlValve7(
              dp_nom(displayUnit="Pa") = 10,
              m_flow_nom=23,
              CheckValve=true,
              p_nom(displayUnit="MPa") = 51000,
              T_nom=353.15) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={252,-142})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedwaterLPHeater(
              diameter=1.04,
              length=2.5168,
              N_tubes=66,
              tubelength=200,
              pstart(displayUnit="MPa") = 250000,
              ystart=-1,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel)
              annotation (Placement(transformation(extent={{86,-144},{146,-100}})));
            Components.ValveSteam SteamControlValve11(
              dp_nom(displayUnit="Pa") = 1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={-150,-70})));
            Components.ValveSteam SteamControlValve12(
              dp_nom(displayUnit="Pa") = 130,
              m_flow_nom=15,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={136,-158})));
            Modelon.Blocks.Sources.RealExpression realExpression13(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={162,-204})));
            ThermalPower.TwoPhase.Valves.ValveLiquid valveLiquid1(dp_nom(displayUnit=
                    "bar") = 150,                                 CheckValve=true)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={136,-184})));
            Modelon.Blocks.Sources.RealExpression realExpression11(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={136,-204})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedWaterHeater(
              diameter=1.04,
              length=2.5168,
              N_tubes=66,
              tubelength=300,
              d_inner=0.014122,
              pstart(displayUnit="MPa") = 480000,
              ystart=-0.99,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel)
              annotation (Placement(transformation(extent={{-154,-138},{-94,-94}})));
            Components.ValveSteam SteamControlValve8(
              dp_nom(displayUnit="Pa") = 400,
              m_flow_nom=3.6,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={58,-106})));
            Modelon.Blocks.Sources.RealExpression realExpression9(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-174,-70})));
            Modelon.Blocks.Sources.RealExpression realExpression10(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={58,-126})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=4,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{276,-2},{338,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData
              annotation (Placement(transformation(extent={{260,-16},{280,4}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData1
              annotation (Placement(transformation(extent={{308,-134},{288,-114}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot1(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{278,-198},{340,-136}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=1,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-56,94}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData4 annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={-118,-60})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot4(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-148,-64},{-86,-2}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData5
              annotation (Placement(transformation(extent={{174,-56},{194,-36}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot5(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=3,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{154,-60},{216,2}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-96,30},{-76,50}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData6 annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={80,-84})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot6(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{16,-114},{78,-52}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData7 annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=180,
                  origin={-60,-106})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot7(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-92,-110},{-30,-48}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{-34,-194},{-54,-174}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-80,-234},{-18,-172}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot9(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{164,-200},{226,-138}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData9
              annotation (Placement(transformation(extent={{200,-134},{180,-114}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData10
              annotation (Placement(transformation(extent={{96,-194},{76,-174}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot10(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{54,-236},{116,-174}})));
            Components.ValveSteam SteamControlValve9(
              dp_nom(displayUnit="Pa") = 140,
              m_flow_nom=0.05,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={22,-124})));
            Modelon.Blocks.Sources.RealExpression realExpression12(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-4,-124})));
            Modelon.Blocks.Sources.RealExpression realExpression3(x=1)  annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={256,-184})));
            Data.NominalData DataP(
              p_nom_turbine_HP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_HP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage2_drain(displayUnit="MPa"),
              p_nom_condenser(displayUnit="MPa"),
              p_nom_CondensatePump_drain(displayUnit="MPa"),
              p_nom_feedWaterPump_drain(displayUnit="MPa"),
              p_nom_preheater_LP(displayUnit="MPa"))
              annotation (Placement(transformation(extent={{340,76},{386,116}})));
            Components.ValveSteam SteamControlValve10(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=43,
              CheckValve=true,
              p_nom(displayUnit="MPa") = 51000,
              T_nom=353.15) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={228,12})));
            Modelon.Blocks.Sources.RealExpression realExpression4(x=1)  annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={242,-18})));
            FlowPort FeedWaterOutlet annotation (Placement(transformation(extent={{-332,
                      -294},{-276,-238}}), iconTransformation(extent={{-332,-294},{-276,
                      -238}})));
            FlowPort SteamInlet annotation (Placement(transformation(extent={{-330,96},{
                      -272,154}}), iconTransformation(extent={{-330,96},{-272,154}})));
            Modelica.Mechanics.Rotational.Interfaces.Flange_a ToGenerator annotation (
                Placement(transformation(extent={{354,-136},{466,-24}}),
                  iconTransformation(extent={{354,-136},{466,-24}})));
          equation
            connect(condenser.drain_cool, pressureBoundary_T.port[1]) annotation (Line(
                  points={{341.36,-26.64},{376,-26.64},{376,-64},{349,-64},{349,-48}},
                  color={0,0,255}));
            connect(flowBoundary_T.port, condenser.feed_cool) annotation (Line(points={{353,6},
                    {344,6},{344,-10},{348,-10},{348,-17.84},{341.36,-17.84}},
                  color={0,0,255}));
            connect(heightDiff.feed, condenser.drain)
              annotation (Line(points={{310,-48},{310,-37.2}}, color={0,0,255}));
            connect(heightDiff.drain, CondensatePump.feed) annotation (Line(points={{310,-74},
                    {310,-110},{376,-110},{376,-135},{366.76,-135}},    color={0,0,255}));
            connect(HPTurbine.shaft_b, turbine_3stageNoEndVolume.shaft_a) annotation (
                Line(points={{-27.9,29},{-8.95,29},{-8.95,30},{10,30}}, color={0,0,0}));
            connect(turbine_3stageNoEndVolume.feed, vol_turbine_LPT_1_feed.feed[1])
              annotation (Line(points={{34,37.2},{32,37.2},{32,51.5}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume.shaft_b, turbine_3stageNoEndVolume1.shaft_a)
              annotation (Line(points={{58,30},{78,30}}, color={0,0,0}));
            connect(vol_turbine_LPT_1_feed1.feed[1], turbine_3stageNoEndVolume1.feed)
              annotation (Line(points={{102,51.5},{102,37.2}}, color={0,0,255}));
            connect(deaerator.drain, heightDiff1.drain)
              annotation (Line(points={{36,-165.36},{36,-174}}, color={0,0,255}));
            connect(FeedWaterPump.feed, heightDiff1.feed) annotation (Line(points={{16.76,
                    -195},{36,-195},{36,-194}},        color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage1[1], SteamControlValve1.feed)
              annotation (Line(points={{34,20.08},{34,-8},{30,-8},{30,-14}},   color={0,0,
                    255}));
            connect(turbine_3stageNoEndVolume1.drain_stage1[1], SteamControlValve2.feed)
              annotation (Line(points={{102,20.08},{102,-14}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume1.drain_stage2[1], SteamControlValve4.feed)
              annotation (Line(points={{108.4,17.68},{108.4,-8},{124,-8},{124,-14}},
                  color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage2[1], SteamControlValve3.feed)
              annotation (Line(points={{40.4,17.68},{40.4,-8},{60,-8},{60,-14}},   color=
                    {0,0,255}));
            connect(realExpression5.y, SteamControlValve5.command)
              annotation (Line(points={{19,90},{26.4,90}}, color={0,0,127}));
            connect(realExpression6.y, SteamControlValve6.command)
              annotation (Line(points={{87,90},{96.4,90}}, color={0,0,127}));
            connect(SteamControlValve6.drain, vol_turbine_LPT_1_feed1.drain[1])
              annotation (Line(points={{102,80},{102,71.5}}, color={0,0,255}));
            connect(SteamControlValve5.drain, vol_turbine_LPT_1_feed.drain[1])
              annotation (Line(points={{32,80},{32,71.5}}, color={0,0,255}));
            connect(SteamControlValve5.feed, HPTurbine.drain) annotation (Line(points={{
                    32,100},{32,106},{-8,106},{-8,15.7},{-29.8,15.7}}, color={0,0,255}));
            connect(SteamControlValve6.feed, HPTurbine.drain) annotation (Line(points={{
                    102,100},{102,106},{-8,106},{-8,15.7},{-29.8,15.7}}, color={0,0,255}));
            connect(SteamControlValve12.feed, FeedwaterLPHeater.drain) annotation (Line(
                  points={{126,-158},{116,-158},{116,-135.2}}, color={0,0,255}));
            connect(realExpression11.y, valveLiquid1.command)
              annotation (Line(points={{136,-193},{136,-189.6}}, color={0,0,127}));
            connect(FeedwaterLPHeater.drain_cool, valveLiquid1.feed) annotation (Line(
                  points={{149.6,-124.64},{154,-124.64},{154,-184},{146,-184}}, color={0,
                    0,255}));
            connect(SteamControlValve7.drain, condenser.feed) annotation (Line(points={{262,
                    -142},{264,-142},{264,-12},{274,-12},{274,-12.12},{289.56,-12.12}},
                  color={0,0,255}));
            connect(realExpression13.y, SteamControlValve12.command) annotation (Line(
                  points={{162,-193},{162,-163.6},{136,-163.6}},          color={0,0,127}));
            connect(FeedWaterHeater.feed, SteamControlValve11.drain) annotation (Line(
                  points={{-145.9,-104.12},{-148,-104.12},{-148,-80},{-150,-80}}, color={
                    0,0,255}));
            connect(realExpression9.y, SteamControlValve11.command)
              annotation (Line(points={{-163,-70},{-155.6,-70}}, color={0,0,127}));
            connect(realExpression10.y, SteamControlValve8.command)
              annotation (Line(points={{58,-115},{58,-111.6}}, color={0,0,127}));
            connect(multiData.u, multiDisplayVis_phTmdot.y)
              annotation (Line(points={{270,-6},{270,29},{307,29}}, color={0,0,0}));
            connect(multiData1.port_a, CondensatePump.drain) annotation (Line(points={{
                    304,-124},{320.8,-124},{320.8,-124.8},{337.6,-124.8}}, color={0,0,255}));
            connect(multiData1.port_b, FeedwaterLPHeater2.feed_cool) annotation (Line(
                  points={{292,-124},{270,-124},{270,-99.84},{247.6,-99.84}}, color={0,0,
                    255}));
            connect(multiData1.u, multiDisplayVis_phTmdot1.y) annotation (Line(points={{
                    298,-124},{298,-112},{286,-112},{286,-130},{272,-130},{272,-167},{309,
                    -167}}, color={0,0,0}));
            connect(SteamControlValve2.command, realExpression1.y) annotation (Line(
                  points={{96.4,-24},{80,-24},{80,-10},{11,-10}}, color={0,0,127}));
            connect(SteamControlValve1.command, realExpression1.y) annotation (Line(
                  points={{24.4,-24},{11,-24},{11,-10}},            color={0,0,127}));
            connect(SteamControlValve12.drain, FeedwaterLPHeater2.feed) annotation (Line(
                  points={{146,-158},{162,-158},{162,-94.12},{192.1,-94.12}}, color={0,0,
                    255}));
            connect(SteamControlValve11.feed, multiData4.port_b) annotation (Line(points=
                    {{-150,-60},{-150,-54},{-134,-54},{-134,-60},{-124,-60}}, color={0,0,
                    255}));
            connect(multiData4.port_a, HPTurbine.drain) annotation (Line(points={{-112,
                    -60},{-29.8,-60},{-29.8,15.7}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot4.y, multiData4.u) annotation (Line(points={{
                    -117,-33},{-117,-60},{-118,-60}}, color={0,0,0}));
            connect(SteamControlValve3.drain, multiData5.port_a)
              annotation (Line(points={{60,-34},{60,-46},{178,-46}}, color={0,0,255}));
            connect(SteamControlValve4.drain, multiData5.port_a)
              annotation (Line(points={{124,-34},{124,-46},{178,-46}}, color={0,0,255}));
            connect(multiData5.port_b, FeedwaterLPHeater2.feed) annotation (Line(points={
                    {190,-46},{192.1,-46},{192.1,-94.12}}, color={0,0,255}));
            connect(multiData5.u, multiDisplayVis_phTmdot5.y) annotation (Line(points={{
                    184,-46},{186,-46},{186,-29},{185,-29}}, color={0,0,0}));
            connect(multiData2.port_b, HPTurbine.feed) annotation (Line(points={{-80,40},
                    {-70.1,40},{-70.1,40.4},{-60.2,40.4}}, color={0,0,255}));
            connect(multiData2.port_a, SteamHeader1.drain[1])
              annotation (Line(points={{-92,40},{-117.2,40}}, color={0,0,255}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y) annotation (Line(points={{
                    -86,40},{-86,51.5},{-87,51.5},{-87,63}}, color={0,0,0}));
            connect(SteamControlValve1.drain, multiData6.port_a) annotation (Line(points=
                    {{30,-34},{30,-52},{80,-52},{80,-78}}, color={0,0,255}));
            connect(SteamControlValve2.drain, multiData6.port_a) annotation (Line(points=
                    {{102,-34},{102,-52},{80,-52},{80,-78}}, color={0,0,255}));
            connect(multiData6.port_b, FeedwaterLPHeater.feed) annotation (Line(points={{
                    80,-90},{80,-110.12},{94.1,-110.12}}, color={0,0,255}));
            connect(multiData6.u, multiDisplayVis_phTmdot6.y) annotation (Line(points={{
                    80,-84},{66,-84},{66,-83},{47,-83}}, color={0,0,0}));
            connect(multiDisplayVis_phTmdot7.y, multiData7.u)
              annotation (Line(points={{-61,-79},{-61,-106},{-60,-106}}, color={0,0,0}));
            connect(FeedWaterPump.drain, multiData8.port_a) annotation (Line(points={{
                    -12.4,-184.8},{-24,-184.8},{-24,-184},{-38,-184}}, color={0,0,255}));
            connect(multiData8.u, multiDisplayVis_phTmdot8.y) annotation (Line(points={{
                    -44,-184},{-44,-203},{-49,-203}}, color={0,0,0}));
            connect(FeedWaterHeater.drain, multiData7.port_a) annotation (Line(points={{
                    -124,-129.2},{-124,-134},{-66,-134},{-66,-106}}, color={0,0,255}));
            connect(FeedWaterHeater.feed_cool, multiData8.port_b) annotation (Line(points=
                   {{-90.4,-109.84},{-78,-109.84},{-78,-184},{-50,-184}}, color={0,0,255}));
            connect(FeedwaterLPHeater2.drain_cool, multiData9.port_a) annotation (Line(
                  points={{247.6,-108.64},{247.6,-124},{196,-124}}, color={0,0,255}));
            connect(multiData9.port_b, FeedwaterLPHeater.feed_cool) annotation (Line(
                  points={{184,-124},{156,-124},{156,-115.84},{149.6,-115.84}}, color={0,
                    0,255}));
            connect(multiData9.u, multiDisplayVis_phTmdot9.y) annotation (Line(points={{
                    190,-124},{190,-169},{195,-169}}, color={0,0,0}));
            connect(multiData7.port_b, SteamControlValve8.feed)
              annotation (Line(points={{-54,-106},{48,-106}}, color={0,0,255}));
            connect(SteamControlValve8.drain, FeedwaterLPHeater.feed) annotation (Line(
                  points={{68,-106},{80,-106},{80,-110.12},{94.1,-110.12}}, color={0,0,
                    255}));
            connect(multiData.port_b, condenser.feed) annotation (Line(points={{276,-6},{
                    289.56,-6},{289.56,-12.12}}, color={0,0,255}));
            connect(multiData10.port_b, deaerator.feed) annotation (Line(points={{80,-184},
                    {62,-184},{62,-149.02},{50.4,-149.02}}, color={0,0,255}));
            connect(multiData10.port_a, valveLiquid1.drain)
              annotation (Line(points={{92,-184},{126,-184}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot10.y, multiData10.u) annotation (Line(points={
                    {85,-205},{85,-194.5},{86,-194.5},{86,-184}}, color={0,0,0}));
            connect(SteamControlValve9.drain, deaerator.steam) annotation (Line(points={{
                    22,-134},{22,-137.37},{22.4,-137.37},{22.4,-146.74}}, color={0,0,255}));
            connect(realExpression12.y, SteamControlValve9.command)
              annotation (Line(points={{7,-124},{16.4,-124}}, color={0,0,127}));
            connect(SteamControlValve9.feed, SteamControlValve8.feed)
              annotation (Line(points={{22,-114},{22,-106},{48,-106}}, color={0,0,255}));
            connect(FeedwaterLPHeater2.drain, SteamControlValve7.feed) annotation (Line(
                  points={{214,-119.2},{214,-118},{246,-118},{246,-130},{242,-130},{242,
                    -142}}, color={0,0,255}));
            connect(realExpression3.y, SteamControlValve7.command) annotation (Line(
                  points={{256,-173},{256,-158},{252,-158},{252,-147.6}}, color={0,0,127}));
            connect(turbine_3stageNoEndVolume1.drain_stage3, SteamControlValve10.feed)
              annotation (Line(points={{114.8,15.6},{114.8,12},{218,12}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage3, SteamControlValve10.feed)
              annotation (Line(points={{46.8,15.6},{46.8,12},{218,12}}, color={0,0,255}));
            connect(SteamControlValve10.drain, multiData.port_a)
              annotation (Line(points={{238,12},{264,12},{264,-6}}, color={0,0,255}));
            connect(realExpression4.y, SteamControlValve10.command) annotation (Line(
                  points={{242,-7},{236,-7},{236,6.4},{228,6.4}}, color={0,0,127}));
            connect(SteamControlValve3.command, realExpression1.y) annotation (Line(
                  points={{54.4,-24},{50,-24},{50,-10},{11,-10}}, color={0,0,127}));
            connect(SteamControlValve4.command, realExpression1.y) annotation (Line(
                  points={{118.4,-24},{116,-24},{116,-10},{11,-10}}, color={0,0,127}));
            connect(turbine_3stageNoEndVolume1.shaft_b, ToGenerator) annotation (Line(
                  points={{126,30},{126,-4},{148,-4},{148,-64},{288,-64},{288,-80},{410,
                    -80}}, color={0,0,0}));
            connect(FeedWaterHeater.drain_cool, FeedWaterOutlet) annotation (Line(points=
                    {{-90.4,-118.64},{-88,-118.64},{-88,-266},{-304,-266}}, color={0,0,
                    255}));
            connect(ToGenerator, ToGenerator)
              annotation (Line(points={{410,-80},{410,-80}}, color={0,0,0}));
            connect(SteamHeader1.feed[1], SteamInlet) annotation (Line(points={{-142.8,40},
                    {-320,40},{-320,125},{-301,125}}, color={0,0,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-360,
                      -260},{400,120}}),
                                   graphics={
                  Rectangle(extent={{294,120},{376,-260}},
                                                         lineColor={28,108,200},
                    fillColor={176,176,176},
                    fillPattern=FillPattern.Forward),
                  Polygon(
                    points={{-358,118},{-356,-262},{-160,-142},{-160,0},{-358,118}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(
                    extent={{294,-30},{-358,-118}},
                    lineColor={28,108,200},
                    fillColor={0,140,72},
                    fillPattern=FillPattern.CrossDiag),
                  Polygon(
                    points={{-240,118},{-238,-262},{-42,-142},{-42,0},{-240,118}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(
                    extent={{380,-28},{-210,-116}},
                    lineColor={28,108,200},
                    fillColor={0,140,72},
                    fillPattern=FillPattern.CrossDiag),
                  Polygon(
                    points={{-112,120},{-110,-260},{86,-140},{86,2},{-112,120}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(extent={{234,120},{316,-260}},
                                                         lineColor={28,108,200},
                    fillColor={176,176,176},
                    fillPattern=FillPattern.Forward),
                  Text(
                    extent={{-312,-42},{286,-94}},
                    textColor={28,108,200},
                    textString="BOP"),
                  Rectangle(
                    extent={{-280,120},{-322,38}},
                    lineColor={28,108,200},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-282,-178},{-324,-260}},
                    lineColor={28,108,200},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid)}),                      Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-360,-260},{400,
                      120}})),
              experiment(
                StartTime=3000,
                StopTime=15000,
                __Dymola_NumberOfIntervals=5000,
                __Dymola_Algorithm="Dassl"));
          end BalanceOfPlant_Component_backup;

          model Generator_04
            import FinalProject;
            extends OpenIPSL.Interfaces.Generator;
            OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
              v_0=v_0,
              angle_0=angle_0,
              P_0=P_0,
              Q_0=Q_0,
              M_b=M_b,
              V_b=V_b,
              Tpd0=machinePars.Tpd0,
              Tppd0=machinePars.Tppd0,
              Tppq0=machinePars.Tppq0,
              H=machinePars.H,
              D=machinePars.D,
              Xd=machinePars.Xd,
              Xq=machinePars.Xq,
              Xpd=machinePars.Xpd,
              Xppd=machinePars.Xppd,
              Xppq=machinePars.Xppq,
              Xl=machinePars.Xl,
              S10=machinePars.S10,
              S12=machinePars.S12,
              Xpq=machinePars.Xpq,
              Tpq0=machinePars.Tpq0,
              Xpp=machinePars.Xpp,
              R_a=machinePars.R_a)
              annotation (Placement(transformation(extent={{30,-20},{70,20}})));
            parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
            FinalProject.BaseModels.GeneratingUnits.Records.MachinePars1 machinePars
              annotation (Placement(transformation(extent={{64,68},{84,88}})));
            FinalProject.BaseModels.Interfaces.TM2EPConverter tM2EPConverter(M_b=M_b)
              annotation (Placement(transformation(extent={{-24,-16},{8,16}})));
            FinalProject.Controls.ThermoPower.PID pU_PID(
              M_b=55000000,
              Kp=0.01,
              CSmin=50,
              CSmax=70)                                           annotation (Placement(
                  transformation(extent={{-66,-56},{-84,-36}}, rotation=0)));
            Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
               Placement(transformation(extent={{-50,-10},{-30,10}},rotation=0)));
            Modelica.Blocks.Continuous.FirstOrder powerSensor1(
              k=1,
              T=1,
              y_start=44e6,
              initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                  transformation(extent={{6,-6},{-6,6}},         rotation=0,
                  origin={-46,-34})));
            Modelica.Blocks.Interfaces.RealInput DeltaPM
              "Change in reference power (in pu)" annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=90,
                  origin={0,-100})));
            Modelica.Blocks.Interfaces.RealOutput CS1
                                                     "Control signal" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={-110,-46})));
            Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a1
                              "Left flange of shaft"
              annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
          equation
            connect(machine.EFD, machine.EFD0) annotation (Line(points={{26,-10},{18,-10},
                    {18,-28},{78,-28},{78,-10},{72,-10}},         color={0,0,127}));
            connect(machine.p, pwPin)
              annotation (Line(points={{70,0},{110,0}}, color={0,0,255}));
            connect(tM2EPConverter.PMECH, machine.PMECH) annotation (Line(points={{9.6,8},
                    {18,8},{18,10},{26,10}},        color={0,0,127}));
            connect(machine.SPEED, tM2EPConverter.SPEED) annotation (Line(points={{
                    72,14},{82,14},{82,-32},{12,-32},{12,-8},{6.4,-8}}, color={0,0,
                    127}));
            connect(powerSensor.flange_b, tM2EPConverter.shaft)
              annotation (Line(points={{-30,0},{-24,0}}, color={0,0,0}));
            connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-48,-11},
                    {-48,-22},{-32,-22},{-32,-34},{-38.8,-34}},       color={0,0,
                    127}));
            connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-52.6,-34},
                    {-56,-34},{-56,-40},{-66,-40}}, color={0,0,127}));
            connect(pU_PID.DeltaPM, DeltaPM) annotation (Line(points={{-66,-52},{0,
                    -52},{0,-100}}, color={0,0,127}));
            connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-66,-46},
                    {88,-46},{88,10},{72,10}}, color={0,0,127}));
            connect(pU_PID.CS, CS1)
              annotation (Line(points={{-84.36,-46},{-110,-46}}, color={0,0,127}));
            connect(powerSensor.flange_a, flange_a1)
              annotation (Line(points={{-50,0},{-100,0}}, color={0,0,0}));
          end Generator_04;

          model Generator_Test
            import FinalProject;
            extends OpenIPSL.Interfaces.Generator;
            OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
              v_0=v_0,
              angle_0=angle_0,
              P_0=P_0,
              Q_0=Q_0,
              M_b=M_b,
              V_b=V_b,
              Tpd0=machinePars.Tpd0,
              Tppd0=machinePars.Tppd0,
              Tppq0=machinePars.Tppq0,
              H=machinePars.H,
              D=machinePars.D,
              Xd=machinePars.Xd,
              Xq=machinePars.Xq,
              Xpd=machinePars.Xpd,
              Xppd=machinePars.Xppd,
              Xppq=machinePars.Xppq,
              Xl=machinePars.Xl,
              S10=machinePars.S10,
              S12=machinePars.S12,
              Xpq=machinePars.Xpq,
              Tpq0=machinePars.Tpq0,
              Xpp=machinePars.Xpp,
              R_a=machinePars.R_a)
              annotation (Placement(transformation(extent={{30,-20},{70,20}})));
            parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
            FinalProject.BaseModels.GeneratingUnits.Records.MachinePars1 machinePars
              annotation (Placement(transformation(extent={{64,68},{84,88}})));
            FinalProject.BaseModels.Interfaces.TM2EPConverter tM2EPConverter(M_b=M_b)
              annotation (Placement(transformation(extent={{-24,-16},{8,16}})));
            FinalProject.PrimeMovers.Gas.PlantA.GasTurbine gasTurbine(gasFlowActuator(
                k=100,
                T=1,
                y_start=100))
              annotation (Placement(transformation(extent={{-88,-16},{-56,16}})));
            FinalProject.Controls.ThermoPower.PID pU_PID(M_b=2000000) annotation (
                Placement(transformation(extent={{-66,-56},{-84,-36}}, rotation=0)));
            Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
               Placement(transformation(extent={{-50,-10},{-30,10}},rotation=0)));
            Modelica.Blocks.Continuous.FirstOrder powerSensor1(
              k=1,
              T=1,
              y_start=20000,
              initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                  transformation(extent={{6,-6},{-6,6}},         rotation=0,
                  origin={-46,-34})));
            Modelica.Blocks.Sources.Step step(height=2000, startTime=1000)
              annotation (Placement(transformation(extent={{-24,-84},{-44,-64}})));
          equation
            connect(machine.EFD, machine.EFD0) annotation (Line(points={{26,-10},{
                    18,-10},{18,-28},{78,-28},{78,-10},{72,-10}}, color={0,0,127}));
            connect(machine.p, pwPin)
              annotation (Line(points={{70,0},{110,0}}, color={0,0,255}));
            connect(tM2EPConverter.PMECH, machine.PMECH) annotation (Line(points={{
                    9.6,8},{18,8},{18,10},{26,10}}, color={0,0,127}));
            connect(machine.SPEED, tM2EPConverter.SPEED) annotation (Line(points={{
                    72,14},{82,14},{82,-32},{12,-32},{12,-8},{6.4,-8}}, color={0,0,
                    127}));
            connect(powerSensor.flange_a, gasTurbine.shaft_b)
              annotation (Line(points={{-50,0},{-55.68,0}},
                                                         color={0,0,0}));
            connect(powerSensor.flange_b, tM2EPConverter.shaft)
              annotation (Line(points={{-30,0},{-24,0}}, color={0,0,0}));
            connect(pU_PID.CS, gasTurbine.fuelFlowRate) annotation (Line(points={{-84.36,
                    -46},{-94,-46},{-94,0},{-88,0}},                color={0,0,127}));
            connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-48,-11},
                    {-48,-22},{-32,-22},{-32,-34},{-38.8,-34}},       color={0,0,
                    127}));
            connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-52.6,-34},
                    {-56,-34},{-56,-40},{-66,-40}}, color={0,0,127}));
            connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-66,-46},
                    {88,-46},{88,10},{72,10}}, color={0,0,127}));
            connect(step.y, pU_PID.DeltaPM) annotation (Line(points={{-45,-74},{-60,
                    -74},{-60,-52},{-66,-52}}, color={0,0,127}));
          end Generator_Test;

          model Generator
            import FinalProject;
            extends OpenIPSL.Interfaces.Generator;
            OpenIPSL.Electrical.Machines.PSSE.GENROU machine(
              v_0=v_0,
              angle_0=angle_0,
              P_0=P_0,
              Q_0=Q_0,
              M_b=M_b,
              V_b=V_b,
              Tpd0=machinePars.Tpd0,
              Tppd0=machinePars.Tppd0,
              Tppq0=machinePars.Tppq0,
              H=machinePars.H,
              D=machinePars.D,
              Xd=machinePars.Xd,
              Xq=machinePars.Xq,
              Xpd=machinePars.Xpd,
              Xppd=machinePars.Xppd,
              Xppq=machinePars.Xppq,
              Xl=machinePars.Xl,
              S10=machinePars.S10,
              S12=machinePars.S12,
              Xpq=machinePars.Xpq,
              Tpq0=machinePars.Tpq0,
              Xpp=machinePars.Xpp,
              R_a=machinePars.R_a)
              annotation (Placement(transformation(extent={{30,-20},{70,20}})));
            parameter OpenIPSL.Types.ApparentPower M_b=100000000 "Machine base power";
            FinalProject.BaseModels.GeneratingUnits.Records.MachinePars1 machinePars
              annotation (Placement(transformation(extent={{64,68},{84,88}})));
            FinalProject.BaseModels.Interfaces.TM2EPConverter tM2EPConverter(M_b=M_b)
              annotation (Placement(transformation(extent={{-24,-16},{8,16}})));
            FinalProject.Controls.ThermoPower.PID pU_PID(M_b=M_b) annotation (Placement(
                  transformation(extent={{-66,-56},{-84,-36}}, rotation=0)));
            Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
               Placement(transformation(extent={{-50,-10},{-30,10}},rotation=0)));
            Modelica.Blocks.Continuous.FirstOrder powerSensor1(
              k=1,
              T=1,
              y_start=26e6,
              initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                  transformation(extent={{6,-6},{-6,6}},         rotation=0,
                  origin={-46,-34})));
            Modelica.Blocks.Interfaces.RealInput DeltaPM
              "Change in reference power (in pu)" annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=90,
                  origin={0,-100})));
            Modelica.Blocks.Interfaces.RealOutput CS1
                                                     "Control signal" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={-110,-46})));
            Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a1
                              "Left flange of shaft"
              annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
          equation
            connect(machine.EFD, machine.EFD0) annotation (Line(points={{26,-12},
                    {18,-12},{18,-28},{78,-28},{78,-10},{72,-10}},color={0,0,127}));
            connect(machine.p, pwPin)
              annotation (Line(points={{70,0},{110,0}}, color={0,0,255}));
            connect(tM2EPConverter.PMECH, machine.PMECH) annotation (Line(points={{9.6,8},
                    {18,8},{18,12},{26,12}},        color={0,0,127}));
            connect(machine.SPEED, tM2EPConverter.SPEED) annotation (Line(points={{
                    72,14},{82,14},{82,-32},{12,-32},{12,-8},{6.4,-8}}, color={0,0,
                    127}));
            connect(powerSensor.flange_b, tM2EPConverter.shaft)
              annotation (Line(points={{-30,0},{-24,0}}, color={0,0,0}));
            connect(powerSensor.power, powerSensor1.u) annotation (Line(points={{-48,-11},
                    {-48,-22},{-32,-22},{-32,-34},{-38.8,-34}},       color={0,0,
                    127}));
            connect(powerSensor1.y, pU_PID.PV) annotation (Line(points={{-52.6,-34},
                    {-56,-34},{-56,-40},{-66,-40}}, color={0,0,127}));
            connect(pU_PID.DeltaPM, DeltaPM) annotation (Line(points={{-66,-52},{0,
                    -52},{0,-100}}, color={0,0,127}));
            connect(pU_PID.GenPM, machine.PMECH0) annotation (Line(points={{-66,-46},
                    {88,-46},{88,10},{72,10}}, color={0,0,127}));
            connect(pU_PID.CS, CS1)
              annotation (Line(points={{-84.36,-46},{-110,-46}}, color={0,0,127}));
            connect(powerSensor.flange_a, flange_a1)
              annotation (Line(points={{-50,0},{-100,0}}, color={0,0,0}));
          end Generator;

          model SteamGeneratorWithControl
            ThermalPower.Thermal.Sources.HeatFlowSource Power(N=1) annotation (Placement(
                  transformation(
                  extent={{-9,8},{9,-8}},
                  rotation=90,
                  origin={-48,-13})));
            Header            header(
              pstart(displayUnit="MPa") = 3500000,
              hstart=2999e3,
              V_tot=1,
              Cm=0,
              N_feed=2,
              N_drain=1) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-18,-14})));
            Drum            SG(
              rint=1.5,
              rext=1.6,
              L=2,
              Cm=(SG.L*3.14*2*SG.rext + 2*3.14*SG.rext^2)*(SG.rext - SG.rint)*7000*500,
              DrumOrientation=1,
              pstart(displayUnit="MPa") = 3500000,
              hlstart=590e3,
              hvstart=2999e3,
              Tmstart=581.15,
              ystart=0.0)
              annotation (Placement(transformation(extent={{44,-18},{-4,30}})));
            ThermalPower.TwoPhase.Valves.ValveLiquid valveLiquid3(dp_nom(displayUnit=
                    "bar") = 1000, CheckValve=true)
              annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={40,-36})));
            Modelon.Blocks.Sources.RealExpression realExpression7(x=1)  annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={17,-35})));
            ThermalPower.TwoPhase.TurboMachinery.Pumps.PumpPosDispl pumpPosDispl(
              V=0.3,
              pin_start(displayUnit="MPa") = 3500000,
              pout_start(displayUnit="MPa") = 3500000,
              n_nom=CirculatingPumpRPM,
              q_nom=10*67/1000)
              annotation (Placement(transformation(extent={{12,-62},{-8,-42}})));
            ValveSteam            SteamControlValve13(
              dp_nom(displayUnit="Pa") = 10,
              m_flow_nom=68,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-26,34})));
            Modelon.Blocks.Sources.RealExpression realExpression14(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={-39,31})));
            ThermalPower.Thermal.Sources.HeatFlowSource Power1(N=1)
                                                                   annotation (Placement(
                  transformation(
                  extent={{-8,9},{8,-9}},
                  rotation=90,
                  origin={-59,48})));
            Header            header1(
              pstart(displayUnit="MPa") = DataP.p_nom_turbine_HP_stage1_feed,
              hstart=DataP.h_turbine_inlet_s1,
              V_tot=1,
              m_flow_nom=DataP.m_flow_nom_steam,
              Cm=0,
              N_feed=1,
              N_drain=1) annotation (Placement(transformation(
                  extent={{-8,-8},{8,8}},
                  rotation=90,
                  origin={-26,54})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot11(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=1,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-16,26},{6,48}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData11
              annotation (Placement(transformation(extent={{2,10},{-18,30}})));
            FlowPort SteamOutlet annotation (Placement(transformation(extent={{-12,86},{
                      14,112}}), iconTransformation(extent={{-12,86},{14,112}})));
            FlowPort FeedWaterInlet annotation (Placement(transformation(extent={{50,28},
                      {74,52}}), iconTransformation(extent={{50,28},{74,52}})));
            Modelica.Blocks.Interfaces.RealInput PowertoSG
              annotation (Placement(transformation(extent={{-118,-40},{-78,0}})));
            Modelica.Blocks.Interfaces.RealInput PowerSuperHeat
              annotation (Placement(transformation(extent={{-118,8},{-78,48}})));
            ThermalPower.TwoPhase.Valves.ValveLiquid FeedWaterControlValve(
              dp_nom(displayUnit="bar") = 500,
              m_flow_nom=67,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={16,-70})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData3
              annotation (Placement(transformation(extent={{-50,-78},{-70,-58}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot3(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-68,-66},{-44,-42}})));
            ThermalPower.ControllersAndSensors.UniversalSensor level1(outValue=SG.y)
              annotation (Placement(transformation(extent={{-12,-98},{0,-88}},
                    rotation=0)));
            ThermalPower.ControllersAndSensors.LimPI
                                        pPI(
              k=1,
              steadyStateInit=false,
              yInit=0.1,
              Ti=20,
              yMin=0.01) annotation (Placement(transformation(extent={{-2,-87},{10,-76}},
                    rotation=0)));
            Modelica.Blocks.Interfaces.RealInput SGLevelSetpoint annotation (Placement(
                  transformation(extent={{-118,-94},{-78,-54}}), iconTransformation(
                    extent={{-118,-94},{-78,-54}})));
            Data.NominalData DataP(
              p_nom_turbine_HP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_HP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage2_drain(displayUnit="MPa"),
              p_nom_condenser(displayUnit="MPa"),
              p_nom_CondensatePump_drain(displayUnit="MPa"),
              p_nom_feedWaterPump_drain(displayUnit="MPa"),
              p_nom_preheater_LP(displayUnit="MPa"))
              annotation (Placement(transformation(extent={{14,60},{30,78}})));
            parameter Modelica.Units.NonSI.AngularVelocity_rpm CirculatingPumpRPM=1500
              "Nominal rotational speed";
            ValveSteam            TurbineStopValves(
              dp_nom=100,
              m_flow_nom=67.1,
              CheckValve=true)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-20,80})));
            Modelica.Blocks.Interfaces.RealInput GovernorValveArea
              annotation (Placement(transformation(extent={{-120,60},{-80,100}})));
          equation
            connect(Power.port[1],header. wall) annotation (Line(points={{-40,-13},{-40,
                    -14},{-27,-14}},                      color={191,0,0}));
            connect(SG.downcomer,valveLiquid3. feed) annotation (Line(points={{36.8,-6},{
                    40,-6},{40,-26}},       color={0,0,255}));
            connect(realExpression7.y,valveLiquid3. command)
              annotation (Line(points={{22.5,-35},{30,-35},{30,-36},{34.4,-36}},
                                                                 color={0,0,127}));
            connect(pumpPosDispl.drain,header. feed[1]) annotation (Line(points={{-6,-46},
                    {-17.5,-46},{-17.5,-22}},          color={0,0,255}));
            connect(pumpPosDispl.feed,valveLiquid3. drain) annotation (Line(points={{10,-52},
                    {10,-46},{40,-46}},          color={0,0,255}));
            connect(realExpression14.y,SteamControlValve13. command) annotation (Line(
                  points={{-33.5,31},{-34,31},{-34,34},{-31.6,34}},   color={0,0,127}));
            connect(Power1.port[1],header1. wall) annotation (Line(points={{-50,48},{-42,
                    48},{-42,54},{-33.2,54}},      color={191,0,0}));
            connect(SteamControlValve13.drain,header1. feed[1]) annotation (Line(points={{-26,44},
                    {-26,47.6}},                              color={0,0,255}));
            connect(SteamControlValve13.feed,multiData11. port_b)
              annotation (Line(points={{-26,24},{-26,20},{-14,20}}, color={0,0,255}));
            connect(multiData11.u,multiDisplayVis_phTmdot11. y) annotation (Line(points={{-8,20},
                    {-8,26.5},{-5,26.5},{-5,37}},                color={0,0,0}));
            connect(PowertoSG, Power.power) annotation (Line(points={{-98,-20},{-82,-20},
                    {-82,-18},{-52.8,-18},{-52.8,-21.1}}, color={0,0,127}));
            connect(level1.y,pPI. u_m) annotation (Line(points={{-4.44089e-16,-93},{4,-93},
                    {4,-88.1}},    color={0,0,127}));
            connect(FeedWaterInlet, FeedWaterControlValve.feed) annotation (Line(points={
                    {62,40},{44,40},{44,34},{46,34},{46,24},{56,24},{56,-70},{26,-70}},
                  color={0,0,255}));
            connect(FeedWaterControlValve.drain, multiData3.port_a) annotation (Line(
                  points={{6,-70},{-46,-70},{-46,-68},{-54,-68}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot3.y, multiData3.u) annotation (Line(points={{
                    -56,-54},{-56,-62},{-60,-62},{-60,-68}}, color={0,0,0}));
            connect(pPI.y, FeedWaterControlValve.command) annotation (Line(points={{10.6,
                    -81.5},{16,-81.5},{16,-75.6}}, color={0,0,127}));
            connect(PowerSuperHeat, Power1.power) annotation (Line(points={{-98,28},{
                    -64.4,28},{-64.4,40.8}}, color={0,0,127}));
            connect(TurbineStopValves.feed, header1.drain[1]) annotation (Line(points={{-20,70},
                    {-26,70},{-26,60.4}},             color={0,0,255}));
            connect(SG.drain, multiData11.port_a) annotation (Line(points={{5.6,19.92},{
                    1.8,19.92},{1.8,20},{-2,20}}, color={0,0,255}));
            connect(SG.riser, header.drain[1]) annotation (Line(points={{3.2,-6},{2,-6},{
                    2,-22},{-6,-22},{-6,0},{-18,0},{-18,-6}}, color={0,0,255}));
            connect(multiData3.port_b, header.feed[2]) annotation (Line(points={{-66,-68},
                    {-72,-68},{-72,-34},{-18.5,-34},{-18.5,-22}},   color={0,0,255}));
            connect(SGLevelSetpoint, pPI.u_s) annotation (Line(points={{-98,-74},{-3.2,
                    -74},{-3.2,-81.5}}, color={0,0,127}));
            connect(TurbineStopValves.drain, SteamOutlet)
              annotation (Line(points={{-20,90},{-20,99},{1,99}}, color={0,0,255}));
            connect(TurbineStopValves.command, GovernorValveArea)
              annotation (Line(points={{-25.6,80},{-100,80}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-80,
                      -100},{60,100}}), graphics={
                  Ellipse(
                    extent={{-50,84},{52,-18}},
                    lineColor={28,108,200},
                    fillColor={95,180,245},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-12,100},{14,80}},
                    lineColor={28,108,200},
                    fillColor={34,250,253},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-20,-10},{22,-86}},
                    lineColor={28,108,200},
                    fillColor={27,27,244},
                    fillPattern=FillPattern.Solid),
                  Ellipse(
                    extent={{-20,-72},{22,-100}},
                    lineColor={28,108,200},
                    fillColor={36,51,247},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-78,28},{-12,98},{-20,92},{-28,92},{-60,52},{-78,28}},
                    lineColor={28,108,200},
                    fillColor={212,68,20},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-80,-20},{-6,-26},{-6,-46},{-8,-28},{-80,-20}},
                    lineColor={28,108,200},
                    fillColor={238,46,47},
                    fillPattern=FillPattern.Solid),
                  Ellipse(extent={{-48,48},{50,30}}, lineColor={28,108,200}),
                  Polygon(
                    points={{-80,-72},{-20,-56},{-20,-10},{-22,-58},{-80,-72}},
                    lineColor={28,108,200},
                    fillColor={225,114,40},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-80,80},{-4,100},{-16,94},{-20,92},{-62,82},{-80,80}},
                    lineColor={28,108,200},
                    fillColor={212,68,20},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-14,-12},{-12,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-10,-12},{-8,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-6,-12},{-4,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-2,-12},{0,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{2,-12},{4,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{6,-12},{8,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{10,-12},{12,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{14,-12},{16,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid)}), Diagram(coordinateSystem(
                    preserveAspectRatio=false, extent={{-80,-100},{60,100}})));
          end SteamGeneratorWithControl;

          model SteamGeneratorwithSteamFeedControl
            ThermalPower.Thermal.Sources.HeatFlowSource Power(N=1) annotation (Placement(
                  transformation(
                  extent={{-9,8},{9,-8}},
                  rotation=90,
                  origin={-48,-13})));
            Header            header(
              pstart(displayUnit="MPa") = 3500000,
              hstart=2999e3,
              V_tot=1,
              Cm=0,
              N_feed=2,
              N_drain=1) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-18,-14})));
            Drum            SG(
              rint=1.5,
              rext=1.6,
              L=2,
              Cm=(SG.L*3.14*2*SG.rext + 2*3.14*SG.rext^2)*(SG.rext - SG.rint)*7000*500,
              DrumOrientation=1,
              pstart(displayUnit="MPa") = 3500000,
              hlstart=590e3,
              hvstart=2999e3,
              Tmstart=581.15,
              ystart=0.0)
              annotation (Placement(transformation(extent={{44,-18},{-4,30}})));
            ThermalPower.TwoPhase.Valves.ValveLiquid valveLiquid3(dp_nom(displayUnit=
                    "bar") = 1000, CheckValve=true)
              annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={40,-36})));
            Modelon.Blocks.Sources.RealExpression realExpression7(x=1)  annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={17,-35})));
            ThermalPower.TwoPhase.TurboMachinery.Pumps.PumpPosDispl pumpPosDispl(
              V=0.3,
              pin_start(displayUnit="MPa") = 3500000,
              pout_start(displayUnit="MPa") = 3500000,
              n_nom=CirculatingPumpRPM,
              q_nom=10*67/1000)
              annotation (Placement(transformation(extent={{12,-62},{-8,-42}})));
            ValveSteam            SteamControlValve13(
              dp_nom(displayUnit="Pa") = 10,
              m_flow_nom=68,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-26,34})));
            Modelon.Blocks.Sources.RealExpression realExpression14(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={-39,31})));
            ThermalPower.Thermal.Sources.HeatFlowSource Power1(N=1)
                                                                   annotation (Placement(
                  transformation(
                  extent={{-8,9},{8,-9}},
                  rotation=90,
                  origin={-59,48})));
            Header            header1(
              pstart(displayUnit="MPa") = DataP.p_nom_turbine_HP_stage1_feed,
              hstart=DataP.h_turbine_inlet_s1,
              V_tot=1,
              m_flow_nom=DataP.m_flow_nom_steam,
              Cm=0,
              N_feed=1,
              N_drain=2) annotation (Placement(transformation(
                  extent={{-8,-8},{8,8}},
                  rotation=90,
                  origin={-26,54})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot11(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=1,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-16,26},{6,48}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData11
              annotation (Placement(transformation(extent={{2,10},{-18,30}})));
            FlowPort SteamOutlet annotation (Placement(transformation(extent={{-12,90},
                      {14,116}}),iconTransformation(extent={{-12,90},{14,116}})));
            FlowPort FeedWaterInlet annotation (Placement(transformation(extent={{50,28},
                      {74,52}}), iconTransformation(extent={{50,28},{74,52}})));
            Modelica.Blocks.Interfaces.RealInput PowertoSG
              annotation (Placement(transformation(extent={{-118,-40},{-78,0}})));
            Modelica.Blocks.Interfaces.RealInput PowerSuperHeat
              annotation (Placement(transformation(extent={{-118,8},{-78,48}})));
            ThermalPower.TwoPhase.Valves.ValveLiquid FeedWaterControlValve(
              dp_nom(displayUnit="bar") = 500,
              m_flow_nom=67,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={16,-70})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData3
              annotation (Placement(transformation(extent={{-50,-78},{-70,-58}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot3(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-68,-66},{-44,-42}})));
            ThermalPower.ControllersAndSensors.UniversalSensor level1(outValue=SG.y)
              annotation (Placement(transformation(extent={{-12,-98},{0,-88}},
                    rotation=0)));
            ThermalPower.ControllersAndSensors.LimPI
                                        pPI(
              k=1,
              steadyStateInit=false,
              yInit=0.1,
              Ti=20,
              yMin=0.01) annotation (Placement(transformation(extent={{-2,-87},{10,-76}},
                    rotation=0)));
            Modelica.Blocks.Interfaces.RealInput SGLevelSetpoint annotation (Placement(
                  transformation(extent={{-118,-94},{-78,-54}}), iconTransformation(
                    extent={{-118,-94},{-78,-54}})));
            Data.NominalData DataP(
              p_nom_turbine_HP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_HP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage2_drain(displayUnit="MPa"),
              p_nom_condenser(displayUnit="MPa"),
              p_nom_CondensatePump_drain(displayUnit="MPa"),
              p_nom_feedWaterPump_drain(displayUnit="MPa"),
              p_nom_preheater_LP(displayUnit="MPa"))
              annotation (Placement(transformation(extent={{38,-96},{54,-78}})));
            parameter Modelica.Units.NonSI.AngularVelocity_rpm CirculatingPumpRPM=1500
              "Nominal rotational speed";
            ValveSteam            TurbineStopValves(
              dp_nom=1000,
              m_flow_nom=5,
              CheckValve=true)
              annotation (Placement(transformation(extent={{2,50},{22,70}})));
            ThermalPower.ControllersAndSensors.LimPI
                                        pPI1(
              k=-1e-6,
              steadyStateInit=false,
              yInit=0.05,
              Ti=2,
              yMin=0.01) annotation (Placement(transformation(extent={{-5,-5.5},{5,
                      5.5}},
                    rotation=270,
                  origin={13,76.5})));
            ThermalPower.TwoPhase.Sensors.Pressure
                                      pSteam(useSIunit=true)
                       annotation (Placement(transformation(extent={{-16,64},{-6,76}},
                    rotation=0)));
            Modelon.Blocks.Sources.RealExpression realExpression1(x=3.5e6)
                                                                         annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={-43,85})));
            ThermalPower.TwoPhase.Interfaces.FlowPort SteamDumpToCondenser
              annotation (Placement(transformation(extent={{52,80},{72,100}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData1
              annotation (Placement(transformation(extent={{28,58},{48,78}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot1(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=1,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{26,66},{48,88}})));
          equation
            connect(Power.port[1],header. wall) annotation (Line(points={{-40,-13},{-40,
                    -14},{-27,-14}},                      color={191,0,0}));
            connect(SG.downcomer,valveLiquid3. feed) annotation (Line(points={{36.8,-6},{
                    40,-6},{40,-26}},       color={0,0,255}));
            connect(realExpression7.y,valveLiquid3. command)
              annotation (Line(points={{22.5,-35},{30,-35},{30,-36},{34.4,-36}},
                                                                 color={0,0,127}));
            connect(pumpPosDispl.drain,header. feed[1]) annotation (Line(points={{-6,-46},
                    {-17.5,-46},{-17.5,-22}},          color={0,0,255}));
            connect(pumpPosDispl.feed,valveLiquid3. drain) annotation (Line(points={{10,-52},
                    {10,-46},{40,-46}},          color={0,0,255}));
            connect(realExpression14.y,SteamControlValve13. command) annotation (Line(
                  points={{-33.5,31},{-34,31},{-34,34},{-31.6,34}},   color={0,0,127}));
            connect(Power1.port[1],header1. wall) annotation (Line(points={{-50,48},{-42,
                    48},{-42,54},{-33.2,54}},      color={191,0,0}));
            connect(SteamControlValve13.drain,header1. feed[1]) annotation (Line(points={{-26,44},
                    {-26,47.6}},                              color={0,0,255}));
            connect(SteamControlValve13.feed,multiData11. port_b)
              annotation (Line(points={{-26,24},{-26,20},{-14,20}}, color={0,0,255}));
            connect(multiData11.u,multiDisplayVis_phTmdot11. y) annotation (Line(points={{-8,20},
                    {-8,26.5},{-5,26.5},{-5,37}},                color={0,0,0}));
            connect(PowertoSG, Power.power) annotation (Line(points={{-98,-20},{-82,-20},
                    {-82,-18},{-52.8,-18},{-52.8,-21.1}}, color={0,0,127}));
            connect(level1.y,pPI. u_m) annotation (Line(points={{-4.44089e-16,-93},{4,-93},
                    {4,-88.1}},    color={0,0,127}));
            connect(FeedWaterInlet, FeedWaterControlValve.feed) annotation (Line(points={
                    {62,40},{44,40},{44,34},{46,34},{46,24},{56,24},{56,-70},{26,-70}},
                  color={0,0,255}));
            connect(FeedWaterControlValve.drain, multiData3.port_a) annotation (Line(
                  points={{6,-70},{-46,-70},{-46,-68},{-54,-68}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot3.y, multiData3.u) annotation (Line(points={{
                    -56,-54},{-56,-62},{-60,-62},{-60,-68}}, color={0,0,0}));
            connect(pPI.y, FeedWaterControlValve.command) annotation (Line(points={{10.6,
                    -81.5},{16,-81.5},{16,-75.6}}, color={0,0,127}));
            connect(PowerSuperHeat, Power1.power) annotation (Line(points={{-98,28},{
                    -64.4,28},{-64.4,40.8}}, color={0,0,127}));
            connect(SG.drain, multiData11.port_a) annotation (Line(points={{5.6,19.92},{
                    1.8,19.92},{1.8,20},{-2,20}}, color={0,0,255}));
            connect(SG.riser, header.drain[1]) annotation (Line(points={{3.2,-6},{2,-6},{
                    2,-22},{-6,-22},{-6,0},{-18,0},{-18,-6}}, color={0,0,255}));
            connect(multiData3.port_b, header.feed[2]) annotation (Line(points={{-66,-68},
                    {-72,-68},{-72,-34},{-18.5,-34},{-18.5,-22}},   color={0,0,255}));
            connect(SGLevelSetpoint, pPI.u_s) annotation (Line(points={{-98,-74},{-3.2,
                    -74},{-3.2,-81.5}}, color={0,0,127}));
            connect(SteamOutlet, SteamOutlet)
              annotation (Line(points={{1,103},{1,103}}, color={0,0,255}));
            connect(SteamOutlet, header1.drain[1]) annotation (Line(points={{1,103},{1,80},
                    {-20,80},{-20,60.4},{-25.6,60.4}},       color={0,0,255}));
            connect(pPI1.y,TurbineStopValves. command) annotation (Line(points={{13,71},
                    {13,72},{12,72},{12,65.6}},         color={0,0,127}));
            connect(TurbineStopValves.feed, header1.drain[2]) annotation (Line(points={{2,60},{
                    -10,60},{-10,62},{-20,62},{-20,60.4},{-26.4,60.4}},         color=
                   {0,0,255}));
            connect(TurbineStopValves.feed, pSteam.port) annotation (Line(points={{2,
                    60},{-6,60},{-6,64},{-11,64}}, color={0,0,255}));
            connect(pSteam.p, pPI1.u_m) annotation (Line(points={{-6.5,70},{0,70},{0,
                    76.5},{6.4,76.5}}, color={0,0,127}));
            connect(realExpression1.y, pPI1.u_s) annotation (Line(points={{-37.5,85},
                    {6,85},{6,82.5},{13,82.5}}, color={0,0,127}));
            connect(multiData1.port_a, TurbineStopValves.drain)
              annotation (Line(points={{32,68},{32,60},{22,60}}, color={0,0,255}));
            connect(multiData1.port_b, SteamDumpToCondenser)
              annotation (Line(points={{44,68},{62,68},{62,90}}, color={0,0,255}));
            connect(multiData1.u, multiDisplayVis_phTmdot1.y) annotation (Line(points=
                   {{38,68},{38,72.5},{37,72.5},{37,77}}, color={0,0,0}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-80,
                      -100},{60,100}}), graphics={
                  Ellipse(
                    extent={{-50,84},{52,-18}},
                    lineColor={28,108,200},
                    fillColor={95,180,245},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-12,100},{14,80}},
                    lineColor={28,108,200},
                    fillColor={34,250,253},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-20,-10},{22,-86}},
                    lineColor={28,108,200},
                    fillColor={27,27,244},
                    fillPattern=FillPattern.Solid),
                  Ellipse(
                    extent={{-20,-72},{22,-100}},
                    lineColor={28,108,200},
                    fillColor={36,51,247},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-78,28},{-12,98},{-20,92},{-28,92},{-60,52},{-78,28}},
                    lineColor={28,108,200},
                    fillColor={212,68,20},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-80,-20},{-6,-26},{-6,-46},{-8,-28},{-80,-20}},
                    lineColor={28,108,200},
                    fillColor={238,46,47},
                    fillPattern=FillPattern.Solid),
                  Ellipse(extent={{-48,48},{50,30}}, lineColor={28,108,200}),
                  Polygon(
                    points={{-80,-72},{-20,-56},{-20,-10},{-22,-58},{-80,-72}},
                    lineColor={28,108,200},
                    fillColor={225,114,40},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-14,-12},{-12,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-10,-12},{-8,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-6,-12},{-4,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-2,-12},{0,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{2,-12},{4,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{6,-12},{8,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{10,-12},{12,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{14,-12},{16,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid)}), Diagram(coordinateSystem(
                    preserveAspectRatio=false, extent={{-80,-100},{60,100}})));
          end SteamGeneratorwithSteamFeedControl;

          model BalanceOfPlant_Component_with_steamFlowControl
            "Remove the boundary source"
            package Medium_BOP = Modelica.Media.Water.StandardWater "BOP working fluid";
            Components.SteamTurbineStodola HPTurbine(
              pstartin=DataP.p_nom_turbine_HP_stage1_feed,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstartin=DataP.h_turbine_inlet_s1,
              hstartout=2500e3,
              useNominalPoint=true,
              m_flow_nom=DataP.m_flow_nom_turbine_HP_stage1,
              T_nom=DataP.T_nom_turbine_HP_stage1_feed,
              h1_nom=DataP.h_turbine_inlet_s1,
              p1_nom=DataP.p_nom_turbine_HP_stage1_feed,
              p2_nom=DataP.p_nom_turbine_HP_stage1_drain)
              annotation (Placement(transformation(extent={{-64,10},{-26,48}})));
            Components.MixVolume SteamHeader1(
              pstart(displayUnit="MPa") = DataP.p_nom_turbine_HP_stage1_feed,
              hstart=DataP.h_turbine_inlet_s1,
              V_tot=1,
              m_flow_nom=DataP.m_flow_nom_steam,
              N_drain=1,
              N_feed=1)
              annotation (Placement(transformation(extent={{-146,34},{-114,46}})));
            Components.Condenser condenser(
              diameter=3,
              length=7,
              N_tubes=5000,
              V_hotwell=0,
              states=ThermalPower.SubComponents.Internal.Choices.ThermoStates.ph,
              pstart(displayUnit="MPa") = DataP.p_nom_condenser,
              Tmstart=314.15,
              ystart=1.1)
              annotation (Placement(transformation(extent={{282,-46},{338,-2}})));
            ThermalPower.TwoPhase.SourcesAndSinks.PressureBoundary_T pressureBoundary_T(
              p0(displayUnit="MPa"),
              T0=309.15,
              N_ports=1)
              annotation (Placement(transformation(extent={{368,-58},{348,-38}})));
            ThermalPower.TwoPhase.SourcesAndSinks.FlowBoundary_T flowBoundary_T(m_flow0=
                  5000, T0=300.15)
              annotation (Placement(transformation(extent={{372,-4},{352,16}})));
            Components.Pump CondensatePump(
              usePowerCharacteristic=false,
              V=0.5,
              m_flow_nom=DataP.m_flow_nom_feedWaterPump,
              pin_start(displayUnit="MPa") = DataP.p_nom_condenser,
              pout_start(displayUnit="MPa") = 800000,
              d_nom(displayUnit="kg/m3")=
                ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleDensity_pX(
                CondensatePump.pin_start),
              n_nom=1200,
              q_nom=(DataP.m_flow_nom_feedWaterPump/CondensatePump.d_nom)*{0,1,2},
              head_nom=(1/10*1/CondensatePump.d_nom)*(0.89e6 - DataP.p_nom_condenser)*{2,1,
                  0},
              P_cons={1,1,1},
              forceNPSH=false)
              annotation (Placement(transformation(extent={{370,-152},{334,-118}})));
            ThermalPower.TwoPhase.FlowResistances.HeightDiff heightDiff(
              p_nom=810,
              height=-1.0,
              m_flow_nom=67.1,
              useLoss=false) annotation (Placement(transformation(
                  extent={{13,-10},{-13,10}},
                  rotation=90,
                  origin={310,-61})));
            ThermalPower.TwoPhase.Volumes.MixVolume vol_turbine_LPT_1_feed(
              useTstart=true,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstart=DataP.h_turbine_outlet_s1,
              V_tot=3,
              m_flow_nom=-DataP.m_flow_nom_turbine_HP_stage1/2,
              N_feed=1,
              N_drain=1)                                           annotation (Placement(
                  transformation(
                  extent={{-12.5,-12},{12.5,12}},
                  rotation=90,
                  origin={32,61.5})));
            Components.Turbine_3stageNoEndVolume turbine_3stageNoEndVolume(
              p_nom(displayUnit="MPa") = {DataP.p_nom_turbine_LP_stage1_feed,DataP.p_nom_turbine_LP_stage1_drain,
                DataP.p_nom_turbine_LP_stage2_drain,DataP.p_nom_condenser},
              m_flow_nom={DataP.m_flow_nom_turbine_LP_stage1,DataP.m_flow_nom_turbine_LP_stage2,
                  DataP.m_flow_nom_turbine_LP_stage3},
              h_nom={DataP.h_turbine_outlet_s1,DataP.h_turbine_outlet_s2,DataP.h_turbine_outlet_s3},
              N_drain_stage1=1,
              N_drain_stage2=1)
              annotation (Placement(transformation(extent={{10,14},{58,46}})));

            Components.Turbine_3stageNoEndVolume turbine_3stageNoEndVolume1(
              p_nom(displayUnit="MPa") = {DataP.p_nom_turbine_LP_stage1_feed,DataP.p_nom_turbine_LP_stage1_drain,
                DataP.p_nom_turbine_LP_stage2_drain,DataP.p_nom_condenser},
              m_flow_nom={DataP.m_flow_nom_turbine_LP_stage1,DataP.m_flow_nom_turbine_LP_stage2,
                  DataP.m_flow_nom_turbine_LP_stage3},
              h_nom={DataP.h_turbine_outlet_s1,DataP.h_turbine_outlet_s2,DataP.h_turbine_outlet_s3},
              N_drain_stage1=1,
              N_drain_stage2=1)
              annotation (Placement(transformation(extent={{78,14},{126,46}})));

            ThermalPower.TwoPhase.Volumes.MixVolume vol_turbine_LPT_1_feed1(
              useTstart=true,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstart=DataP.h_turbine_outlet_s1,
              V_tot=3,
              m_flow_nom=-DataP.m_flow_nom_turbine_HP_stage1/2,
              N_feed=1,
              N_drain=1)                                           annotation (Placement(
                  transformation(
                  extent={{-12.5,-12},{12.5,12}},
                  rotation=90,
                  origin={102,61.5})));
            ThermalPower.TwoPhase.Deaerator deaerator(
              rint=5,
              rext=5.2,
              L=25,
              Cm=0,
              Text=303.15,
              pstart(displayUnit="MPa") = DataP.p_nom_dearator,
              hstart=ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleEnthalpy_pX(
                  deaerator.pstart),
              Tmstart=ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleTemperature_pX(
                  deaerator.pstart),
              ystart=1)
              annotation (Placement(transformation(extent={{56,-176},{16,-138}})));
            Components.Pump FeedWaterPump(
              V=0.5,
              m_flow_nom=67,
              pin_start=DataP.p_nom_dearator,
              pout_start(displayUnit="MPa") = 3500000,
              d_nom(displayUnit="kg/m3"),
              q_nom=(DataP.m_flow_nom_feedWaterPump/FeedWaterPump.d_nom)*{0,1,2},
              head_nom=(1 + (1/10*1/FeedWaterPump.d_nom)*(4.0e6))*{2,1,0},
              forceNPSH=false)
              annotation (Placement(transformation(extent={{20,-212},{-16,-178}})));
            ThermalPower.TwoPhase.FlowResistances.HeightDiff heightDiff1(height=-0.95)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={36,-184})));
            Components.ValveSteam SteamControlValve1(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={30,-24})));
            Modelon.Blocks.Sources.RealExpression realExpression1(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={0,-10})));
            Components.ValveSteam SteamControlValve2(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={102,-24})));
            Components.ValveSteam SteamControlValve3(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=2.8,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={60,-24})));
            Components.ValveSteam SteamControlValve4(
              dp_nom(displayUnit="Pa") = 1,
              m_flow_nom=2.8,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={124,-24})));
            Components.ValveSteam SteamControlValve5(
              dp_nom(displayUnit="Pa") = 280,
              m_flow_nom=30,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={32,90})));
            Modelon.Blocks.Sources.RealExpression realExpression5(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={8,90})));
            Components.ValveSteam SteamControlValve6(
              dp_nom(displayUnit="Pa") = 280,
              m_flow_nom=30,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={102,90})));
            Modelon.Blocks.Sources.RealExpression realExpression6(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={76,90})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedwaterLPHeater2(
              diameter=1.04,
              length=2.51,
              N_tubes=66,
              tubelength=200,
              A_hotwell=1.0,
              pstart(displayUnit="MPa") = 51400,
              ystart=-1,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel,
              F_htc_cond=1.0)
              annotation (Placement(transformation(extent={{184,-128},{244,-84}})));
            Components.ValveSteam SteamControlValve7(
              dp_nom(displayUnit="Pa") = 10,
              m_flow_nom=23,
              CheckValve=true,
              p_nom(displayUnit="MPa") = 51000,
              T_nom=353.15) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={252,-142})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedwaterLPHeater(
              diameter=1.04,
              length=2.5168,
              N_tubes=66,
              tubelength=200,
              pstart(displayUnit="MPa") = 250000,
              ystart=-1,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel)
              annotation (Placement(transformation(extent={{86,-144},{146,-100}})));
            Components.ValveSteam SteamControlValve11(
              dp_nom(displayUnit="Pa") = 1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={-150,-70})));
            Components.ValveSteam SteamControlValve12(
              dp_nom(displayUnit="Pa") = 130,
              m_flow_nom=15,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={136,-158})));
            Modelon.Blocks.Sources.RealExpression realExpression13(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={162,-204})));
            ThermalPower.TwoPhase.Valves.ValveLiquid valveLiquid1(dp_nom(displayUnit=
                    "bar") = 150,                                 CheckValve=true)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={136,-184})));
            Modelon.Blocks.Sources.RealExpression realExpression11(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={136,-204})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedWaterHeater(
              diameter=1.04,
              length=2.5168,
              N_tubes=66,
              tubelength=300,
              d_inner=0.014122,
              pstart(displayUnit="MPa") = 480000,
              ystart=-0.99,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel)
              annotation (Placement(transformation(extent={{-154,-138},{-94,-94}})));
            Components.ValveSteam SteamControlValve8(
              dp_nom(displayUnit="Pa") = 400,
              m_flow_nom=3.6,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={58,-106})));
            Modelon.Blocks.Sources.RealExpression realExpression9(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-174,-70})));
            Modelon.Blocks.Sources.RealExpression realExpression10(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={58,-126})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=4,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{276,-2},{338,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData
              annotation (Placement(transformation(extent={{260,-16},{280,4}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData1
              annotation (Placement(transformation(extent={{308,-134},{288,-114}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot1(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{278,-198},{340,-136}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=1,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-56,94}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData4 annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={-118,-60})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot4(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-148,-64},{-86,-2}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData5
              annotation (Placement(transformation(extent={{174,-56},{194,-36}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot5(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=3,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{154,-60},{216,2}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-96,30},{-76,50}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData6 annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={80,-84})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot6(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{16,-114},{78,-52}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData7 annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=180,
                  origin={-60,-106})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot7(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-92,-110},{-30,-48}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{-34,-194},{-54,-174}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-80,-234},{-18,-172}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot9(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{164,-200},{226,-138}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData9
              annotation (Placement(transformation(extent={{200,-134},{180,-114}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData10
              annotation (Placement(transformation(extent={{96,-194},{76,-174}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot10(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{54,-236},{116,-174}})));
            Components.ValveSteam SteamControlValve9(
              dp_nom(displayUnit="Pa") = 140,
              m_flow_nom=0.05,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={22,-124})));
            Modelon.Blocks.Sources.RealExpression realExpression12(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-4,-124})));
            Modelon.Blocks.Sources.RealExpression realExpression3(x=1)  annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={256,-184})));
            Data.NominalData DataP(
              p_nom_turbine_HP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_HP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage2_drain(displayUnit="MPa"),
              p_nom_condenser(displayUnit="MPa"),
              p_nom_CondensatePump_drain(displayUnit="MPa"),
              p_nom_feedWaterPump_drain(displayUnit="MPa"),
              p_nom_preheater_LP(displayUnit="MPa"))
              annotation (Placement(transformation(extent={{340,76},{386,116}})));
            Components.ValveSteam SteamControlValve10(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=43,
              CheckValve=true,
              p_nom(displayUnit="MPa") = 51000,
              T_nom=353.15) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={228,12})));
            Modelon.Blocks.Sources.RealExpression realExpression4(x=1)  annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={242,-18})));
            FlowPort FeedWaterOutlet annotation (Placement(transformation(extent={{-332,
                      -294},{-276,-238}}), iconTransformation(extent={{-332,-294},{-276,
                      -238}})));
            FlowPort SteamInlet annotation (Placement(transformation(extent={{-330,96},{
                      -272,154}}), iconTransformation(extent={{-330,96},{-272,154}})));
            Modelica.Mechanics.Rotational.Interfaces.Flange_b ToGenerator annotation (
                Placement(transformation(extent={{344,-136},{456,-24}}),
                  iconTransformation(extent={{344,-136},{456,-24}})));
            ValveSteam TurbineGovernorValves(
              dp_nom=100,
              m_flow_nom=67.1,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-15,-15},{15,15}},
                  rotation=0,
                  origin={-233,39})));
            ThermalPower.ControllersAndSensors.LimPI
                                        pPI(
              k=0.1,
              steadyStateInit=false,
              yInit=0.1,
              Ti=20,
              yMin=0.01) annotation (Placement(transformation(extent={{-13,-13.5},{13,
                      13.5}},
                    rotation=270,
                  origin={-233,78.5})));
            ThermalPower.TwoPhase.Sensors.MassFlowRate massFlowRate
              annotation (Placement(transformation(extent={{-192,30},{-172,50}})));
            Modelica.Blocks.Continuous.FirstOrder RequiredMassFlowRate(
              k=1,
              T=4,
              y_start=13,
              initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                  transformation(extent={{-196,98},{-212,114}}, rotation=0)));
            Modelica.Blocks.Interfaces.RealInput u1
              "Connector of Real input signal"           annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=270,
                  origin={-162,138})));
          equation
            connect(condenser.drain_cool, pressureBoundary_T.port[1]) annotation (Line(
                  points={{341.36,-26.64},{376,-26.64},{376,-64},{349,-64},{349,-48}},
                  color={0,0,255}));
            connect(flowBoundary_T.port, condenser.feed_cool) annotation (Line(points={{353,6},
                    {344,6},{344,-10},{348,-10},{348,-17.84},{341.36,-17.84}},
                  color={0,0,255}));
            connect(heightDiff.feed, condenser.drain)
              annotation (Line(points={{310,-48},{310,-37.2}}, color={0,0,255}));
            connect(heightDiff.drain, CondensatePump.feed) annotation (Line(points={{310,-74},
                    {310,-110},{376,-110},{376,-135},{366.76,-135}},    color={0,0,255}));
            connect(HPTurbine.shaft_b, turbine_3stageNoEndVolume.shaft_a) annotation (
                Line(points={{-27.9,29},{-8.95,29},{-8.95,30},{10,30}}, color={0,0,0}));
            connect(turbine_3stageNoEndVolume.feed, vol_turbine_LPT_1_feed.feed[1])
              annotation (Line(points={{34,37.2},{32,37.2},{32,51.5}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume.shaft_b, turbine_3stageNoEndVolume1.shaft_a)
              annotation (Line(points={{58,30},{78,30}}, color={0,0,0}));
            connect(vol_turbine_LPT_1_feed1.feed[1], turbine_3stageNoEndVolume1.feed)
              annotation (Line(points={{102,51.5},{102,37.2}}, color={0,0,255}));
            connect(deaerator.drain, heightDiff1.drain)
              annotation (Line(points={{36,-165.36},{36,-174}}, color={0,0,255}));
            connect(FeedWaterPump.feed, heightDiff1.feed) annotation (Line(points={{16.76,
                    -195},{36,-195},{36,-194}},        color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage1[1], SteamControlValve1.feed)
              annotation (Line(points={{34,20.08},{34,-8},{30,-8},{30,-14}},   color={0,0,
                    255}));
            connect(turbine_3stageNoEndVolume1.drain_stage1[1], SteamControlValve2.feed)
              annotation (Line(points={{102,20.08},{102,-14}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume1.drain_stage2[1], SteamControlValve4.feed)
              annotation (Line(points={{108.4,17.68},{108.4,-8},{124,-8},{124,-14}},
                  color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage2[1], SteamControlValve3.feed)
              annotation (Line(points={{40.4,17.68},{40.4,-8},{60,-8},{60,-14}},   color=
                    {0,0,255}));
            connect(realExpression5.y, SteamControlValve5.command)
              annotation (Line(points={{19,90},{26.4,90}}, color={0,0,127}));
            connect(realExpression6.y, SteamControlValve6.command)
              annotation (Line(points={{87,90},{96.4,90}}, color={0,0,127}));
            connect(SteamControlValve6.drain, vol_turbine_LPT_1_feed1.drain[1])
              annotation (Line(points={{102,80},{102,71.5}}, color={0,0,255}));
            connect(SteamControlValve5.drain, vol_turbine_LPT_1_feed.drain[1])
              annotation (Line(points={{32,80},{32,71.5}}, color={0,0,255}));
            connect(SteamControlValve5.feed, HPTurbine.drain) annotation (Line(points={{
                    32,100},{32,106},{-8,106},{-8,15.7},{-29.8,15.7}}, color={0,0,255}));
            connect(SteamControlValve6.feed, HPTurbine.drain) annotation (Line(points={{
                    102,100},{102,106},{-8,106},{-8,15.7},{-29.8,15.7}}, color={0,0,255}));
            connect(SteamControlValve12.feed, FeedwaterLPHeater.drain) annotation (Line(
                  points={{126,-158},{116,-158},{116,-135.2}}, color={0,0,255}));
            connect(realExpression11.y, valveLiquid1.command)
              annotation (Line(points={{136,-193},{136,-189.6}}, color={0,0,127}));
            connect(FeedwaterLPHeater.drain_cool, valveLiquid1.feed) annotation (Line(
                  points={{149.6,-124.64},{154,-124.64},{154,-184},{146,-184}}, color={0,
                    0,255}));
            connect(SteamControlValve7.drain, condenser.feed) annotation (Line(points={{262,
                    -142},{264,-142},{264,-12},{274,-12},{274,-12.12},{289.56,-12.12}},
                  color={0,0,255}));
            connect(realExpression13.y, SteamControlValve12.command) annotation (Line(
                  points={{162,-193},{162,-163.6},{136,-163.6}},          color={0,0,127}));
            connect(FeedWaterHeater.feed, SteamControlValve11.drain) annotation (Line(
                  points={{-145.9,-104.12},{-148,-104.12},{-148,-80},{-150,-80}}, color={
                    0,0,255}));
            connect(realExpression9.y, SteamControlValve11.command)
              annotation (Line(points={{-163,-70},{-155.6,-70}}, color={0,0,127}));
            connect(realExpression10.y, SteamControlValve8.command)
              annotation (Line(points={{58,-115},{58,-111.6}}, color={0,0,127}));
            connect(multiData.u, multiDisplayVis_phTmdot.y)
              annotation (Line(points={{270,-6},{270,29},{307,29}}, color={0,0,0}));
            connect(multiData1.port_a, CondensatePump.drain) annotation (Line(points={{
                    304,-124},{320.8,-124},{320.8,-124.8},{337.6,-124.8}}, color={0,0,255}));
            connect(multiData1.port_b, FeedwaterLPHeater2.feed_cool) annotation (Line(
                  points={{292,-124},{270,-124},{270,-99.84},{247.6,-99.84}}, color={0,0,
                    255}));
            connect(multiData1.u, multiDisplayVis_phTmdot1.y) annotation (Line(points={{
                    298,-124},{298,-112},{286,-112},{286,-130},{272,-130},{272,-167},{309,
                    -167}}, color={0,0,0}));
            connect(SteamControlValve2.command, realExpression1.y) annotation (Line(
                  points={{96.4,-24},{80,-24},{80,-10},{11,-10}}, color={0,0,127}));
            connect(SteamControlValve1.command, realExpression1.y) annotation (Line(
                  points={{24.4,-24},{11,-24},{11,-10}},            color={0,0,127}));
            connect(SteamControlValve12.drain, FeedwaterLPHeater2.feed) annotation (Line(
                  points={{146,-158},{162,-158},{162,-94.12},{192.1,-94.12}}, color={0,0,
                    255}));
            connect(SteamControlValve11.feed, multiData4.port_b) annotation (Line(points=
                    {{-150,-60},{-150,-54},{-134,-54},{-134,-60},{-124,-60}}, color={0,0,
                    255}));
            connect(multiData4.port_a, HPTurbine.drain) annotation (Line(points={{-112,
                    -60},{-29.8,-60},{-29.8,15.7}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot4.y, multiData4.u) annotation (Line(points={{
                    -117,-33},{-117,-60},{-118,-60}}, color={0,0,0}));
            connect(SteamControlValve3.drain, multiData5.port_a)
              annotation (Line(points={{60,-34},{60,-46},{178,-46}}, color={0,0,255}));
            connect(SteamControlValve4.drain, multiData5.port_a)
              annotation (Line(points={{124,-34},{124,-46},{178,-46}}, color={0,0,255}));
            connect(multiData5.port_b, FeedwaterLPHeater2.feed) annotation (Line(points={
                    {190,-46},{192.1,-46},{192.1,-94.12}}, color={0,0,255}));
            connect(multiData5.u, multiDisplayVis_phTmdot5.y) annotation (Line(points={{
                    184,-46},{186,-46},{186,-29},{185,-29}}, color={0,0,0}));
            connect(multiData2.port_b, HPTurbine.feed) annotation (Line(points={{-80,40},
                    {-70.1,40},{-70.1,40.4},{-60.2,40.4}}, color={0,0,255}));
            connect(multiData2.port_a, SteamHeader1.drain[1])
              annotation (Line(points={{-92,40},{-117.2,40}}, color={0,0,255}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y) annotation (Line(points={{
                    -86,40},{-86,51.5},{-87,51.5},{-87,63}}, color={0,0,0}));
            connect(SteamControlValve1.drain, multiData6.port_a) annotation (Line(points=
                    {{30,-34},{30,-52},{80,-52},{80,-78}}, color={0,0,255}));
            connect(SteamControlValve2.drain, multiData6.port_a) annotation (Line(points=
                    {{102,-34},{102,-52},{80,-52},{80,-78}}, color={0,0,255}));
            connect(multiData6.port_b, FeedwaterLPHeater.feed) annotation (Line(points={{
                    80,-90},{80,-110.12},{94.1,-110.12}}, color={0,0,255}));
            connect(multiData6.u, multiDisplayVis_phTmdot6.y) annotation (Line(points={{
                    80,-84},{66,-84},{66,-83},{47,-83}}, color={0,0,0}));
            connect(multiDisplayVis_phTmdot7.y, multiData7.u)
              annotation (Line(points={{-61,-79},{-61,-106},{-60,-106}}, color={0,0,0}));
            connect(FeedWaterPump.drain, multiData8.port_a) annotation (Line(points={{
                    -12.4,-184.8},{-24,-184.8},{-24,-184},{-38,-184}}, color={0,0,255}));
            connect(multiData8.u, multiDisplayVis_phTmdot8.y) annotation (Line(points={{
                    -44,-184},{-44,-203},{-49,-203}}, color={0,0,0}));
            connect(FeedWaterHeater.drain, multiData7.port_a) annotation (Line(points={{
                    -124,-129.2},{-124,-134},{-66,-134},{-66,-106}}, color={0,0,255}));
            connect(FeedWaterHeater.feed_cool, multiData8.port_b) annotation (Line(points=
                   {{-90.4,-109.84},{-78,-109.84},{-78,-184},{-50,-184}}, color={0,0,255}));
            connect(FeedwaterLPHeater2.drain_cool, multiData9.port_a) annotation (Line(
                  points={{247.6,-108.64},{247.6,-124},{196,-124}}, color={0,0,255}));
            connect(multiData9.port_b, FeedwaterLPHeater.feed_cool) annotation (Line(
                  points={{184,-124},{156,-124},{156,-115.84},{149.6,-115.84}}, color={0,
                    0,255}));
            connect(multiData9.u, multiDisplayVis_phTmdot9.y) annotation (Line(points={{
                    190,-124},{190,-169},{195,-169}}, color={0,0,0}));
            connect(multiData7.port_b, SteamControlValve8.feed)
              annotation (Line(points={{-54,-106},{48,-106}}, color={0,0,255}));
            connect(SteamControlValve8.drain, FeedwaterLPHeater.feed) annotation (Line(
                  points={{68,-106},{80,-106},{80,-110.12},{94.1,-110.12}}, color={0,0,
                    255}));
            connect(multiData.port_b, condenser.feed) annotation (Line(points={{276,-6},{
                    289.56,-6},{289.56,-12.12}}, color={0,0,255}));
            connect(multiData10.port_b, deaerator.feed) annotation (Line(points={{80,-184},
                    {62,-184},{62,-149.02},{50.4,-149.02}}, color={0,0,255}));
            connect(multiData10.port_a, valveLiquid1.drain)
              annotation (Line(points={{92,-184},{126,-184}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot10.y, multiData10.u) annotation (Line(points={
                    {85,-205},{85,-194.5},{86,-194.5},{86,-184}}, color={0,0,0}));
            connect(SteamControlValve9.drain, deaerator.steam) annotation (Line(points={{
                    22,-134},{22,-137.37},{22.4,-137.37},{22.4,-146.74}}, color={0,0,255}));
            connect(realExpression12.y, SteamControlValve9.command)
              annotation (Line(points={{7,-124},{16.4,-124}}, color={0,0,127}));
            connect(SteamControlValve9.feed, SteamControlValve8.feed)
              annotation (Line(points={{22,-114},{22,-106},{48,-106}}, color={0,0,255}));
            connect(FeedwaterLPHeater2.drain, SteamControlValve7.feed) annotation (Line(
                  points={{214,-119.2},{214,-118},{246,-118},{246,-130},{242,-130},{242,
                    -142}}, color={0,0,255}));
            connect(realExpression3.y, SteamControlValve7.command) annotation (Line(
                  points={{256,-173},{256,-158},{252,-158},{252,-147.6}}, color={0,0,127}));
            connect(turbine_3stageNoEndVolume1.drain_stage3, SteamControlValve10.feed)
              annotation (Line(points={{114.8,15.6},{114.8,12},{218,12}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage3, SteamControlValve10.feed)
              annotation (Line(points={{46.8,15.6},{46.8,12},{218,12}}, color={0,0,255}));
            connect(SteamControlValve10.drain, multiData.port_a)
              annotation (Line(points={{238,12},{264,12},{264,-6}}, color={0,0,255}));
            connect(realExpression4.y, SteamControlValve10.command) annotation (Line(
                  points={{242,-7},{236,-7},{236,6.4},{228,6.4}}, color={0,0,127}));
            connect(SteamControlValve3.command, realExpression1.y) annotation (Line(
                  points={{54.4,-24},{50,-24},{50,-10},{11,-10}}, color={0,0,127}));
            connect(SteamControlValve4.command, realExpression1.y) annotation (Line(
                  points={{118.4,-24},{116,-24},{116,-10},{11,-10}}, color={0,0,127}));
            connect(turbine_3stageNoEndVolume1.shaft_b, ToGenerator) annotation (Line(
                  points={{126,30},{204,30},{204,24},{240,24},{240,0},{248,0},{
                    248,-4},{256,-4},{256,-48},{296,-48},{296,-76},{332,-76},{
                    332,-80},{400,-80}},
                           color={0,0,0}));
            connect(FeedWaterHeater.drain_cool, FeedWaterOutlet) annotation (Line(points=
                    {{-90.4,-118.64},{-88,-118.64},{-88,-266},{-304,-266}}, color={0,0,
                    255}));
            connect(ToGenerator, ToGenerator) annotation (Line(points={{400,-80},
                    {400,-80}},                               color={0,0,0}));
            connect(TurbineGovernorValves.feed, SteamInlet) annotation (Line(points={
                    {-248,39},{-248,36},{-301,36},{-301,125}}, color={0,0,255}));
            connect(TurbineGovernorValves.command, pPI.y)
              annotation (Line(points={{-233,47.4},{-233,64.2}}, color={0,0,127}));
            connect(massFlowRate.port_b, SteamHeader1.feed[1])
              annotation (Line(points={{-172,40},{-142.8,40}}, color={0,0,255}));
            connect(massFlowRate.port_a, TurbineGovernorValves.drain) annotation (
                Line(points={{-192,40},{-205,40},{-205,39},{-218,39}}, color={0,0,255}));
            connect(massFlowRate.m_flow, pPI.u_m) annotation (Line(points={{-182,49},
                    {-182,58},{-264,58},{-264,78.5},{-249.2,78.5}}, color={0,0,127}));
            connect(RequiredMassFlowRate.u, u1) annotation (Line(points={{-194.4,106},
                    {-162,106},{-162,138}}, color={0,0,127}));
            connect(RequiredMassFlowRate.y, pPI.u_s) annotation (Line(points={{-212.8,
                    106},{-220,106},{-220,94.1},{-233,94.1}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-360,
                      -260},{400,120}}),
                                   graphics={
                  Rectangle(extent={{294,120},{376,-260}},
                                                         lineColor={28,108,200},
                    fillColor={176,176,176},
                    fillPattern=FillPattern.Forward),
                  Polygon(
                    points={{-358,118},{-356,-262},{-160,-142},{-160,0},{-358,118}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(
                    extent={{294,-30},{-358,-118}},
                    lineColor={28,108,200},
                    fillColor={0,140,72},
                    fillPattern=FillPattern.CrossDiag),
                  Polygon(
                    points={{-240,118},{-238,-262},{-42,-142},{-42,0},{-240,118}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(
                    extent={{380,-28},{-210,-116}},
                    lineColor={28,108,200},
                    fillColor={0,140,72},
                    fillPattern=FillPattern.CrossDiag),
                  Polygon(
                    points={{-112,120},{-110,-260},{86,-140},{86,2},{-112,120}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(extent={{234,120},{316,-260}},
                                                         lineColor={28,108,200},
                    fillColor={176,176,176},
                    fillPattern=FillPattern.Forward),
                  Text(
                    extent={{-312,-42},{286,-94}},
                    textColor={28,108,200},
                    textString="BOP"),
                  Rectangle(
                    extent={{-280,120},{-322,38}},
                    lineColor={28,108,200},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-282,-178},{-324,-260}},
                    lineColor={28,108,200},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid)}),                      Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-360,-260},{400,
                      120}})),
              experiment(
                StartTime=3000,
                StopTime=15000,
                __Dymola_NumberOfIntervals=5000,
                __Dymola_Algorithm="Dassl"));
          end BalanceOfPlant_Component_with_steamFlowControl;

          model BalanceOfPlant_Component_with_SteamDump "Remove the boundary source"
            package Medium_BOP = Modelica.Media.Water.StandardWater "BOP working fluid";
            Components.SteamTurbineStodola HPTurbine(
              pstartin=DataP.p_nom_turbine_HP_stage1_feed,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstartin=DataP.h_turbine_inlet_s1,
              hstartout=2500e3,
              useNominalPoint=true,
              m_flow_nom=DataP.m_flow_nom_turbine_HP_stage1,
              T_nom=DataP.T_nom_turbine_HP_stage1_feed,
              h1_nom=DataP.h_turbine_inlet_s1,
              p1_nom=DataP.p_nom_turbine_HP_stage1_feed,
              p2_nom=DataP.p_nom_turbine_HP_stage1_drain)
              annotation (Placement(transformation(extent={{-64,10},{-26,48}})));
            Components.MixVolume SteamHeader1(
              pstart(displayUnit="MPa") = DataP.p_nom_turbine_HP_stage1_feed,
              hstart=DataP.h_turbine_inlet_s1,
              V_tot=1,
              m_flow_nom=DataP.m_flow_nom_steam,
              N_drain=1,
              N_feed=1)
              annotation (Placement(transformation(extent={{-146,34},{-114,46}})));
            Components.Condenser condenser(
              diameter=3,
              length=7,
              N_tubes=5000,
              V_hotwell=0,
              states=ThermalPower.SubComponents.Internal.Choices.ThermoStates.ph,
              pstart(displayUnit="MPa") = DataP.p_nom_condenser,
              Tmstart=314.15,
              ystart=1.1)
              annotation (Placement(transformation(extent={{282,-46},{338,-2}})));
            ThermalPower.TwoPhase.SourcesAndSinks.PressureBoundary_T pressureBoundary_T(
              p0(displayUnit="MPa"),
              T0=309.15,
              N_ports=1)
              annotation (Placement(transformation(extent={{368,-58},{348,-38}})));
            ThermalPower.TwoPhase.SourcesAndSinks.FlowBoundary_T flowBoundary_T(m_flow0=
                  5000, T0=300.15)
              annotation (Placement(transformation(extent={{372,-4},{352,16}})));
            Components.Pump CondensatePump(
              usePowerCharacteristic=false,
              V=0.5,
              m_flow_nom=DataP.m_flow_nom_feedWaterPump,
              pin_start(displayUnit="MPa") = DataP.p_nom_condenser,
              pout_start(displayUnit="MPa") = 800000,
              d_nom(displayUnit="kg/m3")=
                ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleDensity_pX(
                CondensatePump.pin_start),
              n_nom=1200,
              q_nom=(DataP.m_flow_nom_feedWaterPump/CondensatePump.d_nom)*{0,1,2},
              head_nom=(1/10*1/CondensatePump.d_nom)*(0.89e6 - DataP.p_nom_condenser)*{2,1,
                  0},
              P_cons={1,1,1},
              forceNPSH=false)
              annotation (Placement(transformation(extent={{370,-152},{334,-118}})));
            ThermalPower.TwoPhase.FlowResistances.HeightDiff heightDiff(
              p_nom=810,
              height=-1.0,
              m_flow_nom=67.1,
              useLoss=false) annotation (Placement(transformation(
                  extent={{13,-10},{-13,10}},
                  rotation=90,
                  origin={310,-61})));
            ThermalPower.TwoPhase.Volumes.MixVolume vol_turbine_LPT_1_feed(
              useTstart=true,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstart=DataP.h_turbine_outlet_s1,
              V_tot=3,
              m_flow_nom=-DataP.m_flow_nom_turbine_HP_stage1/2,
              N_feed=1,
              N_drain=1)                                           annotation (Placement(
                  transformation(
                  extent={{-12.5,-12},{12.5,12}},
                  rotation=90,
                  origin={32,61.5})));
            Components.Turbine_3stageNoEndVolume turbine_3stageNoEndVolume(
              p_nom(displayUnit="MPa") = {DataP.p_nom_turbine_LP_stage1_feed,DataP.p_nom_turbine_LP_stage1_drain,
                DataP.p_nom_turbine_LP_stage2_drain,DataP.p_nom_condenser},
              m_flow_nom={DataP.m_flow_nom_turbine_LP_stage1,DataP.m_flow_nom_turbine_LP_stage2,
                  DataP.m_flow_nom_turbine_LP_stage3},
              h_nom={DataP.h_turbine_outlet_s1,DataP.h_turbine_outlet_s2,DataP.h_turbine_outlet_s3},
              N_drain_stage1=1,
              N_drain_stage2=1)
              annotation (Placement(transformation(extent={{10,14},{58,46}})));

            Components.Turbine_3stageNoEndVolume turbine_3stageNoEndVolume1(
              p_nom(displayUnit="MPa") = {DataP.p_nom_turbine_LP_stage1_feed,DataP.p_nom_turbine_LP_stage1_drain,
                DataP.p_nom_turbine_LP_stage2_drain,DataP.p_nom_condenser},
              m_flow_nom={DataP.m_flow_nom_turbine_LP_stage1,DataP.m_flow_nom_turbine_LP_stage2,
                  DataP.m_flow_nom_turbine_LP_stage3},
              h_nom={DataP.h_turbine_outlet_s1,DataP.h_turbine_outlet_s2,DataP.h_turbine_outlet_s3},
              N_drain_stage1=1,
              N_drain_stage2=1)
              annotation (Placement(transformation(extent={{78,14},{126,46}})));

            ThermalPower.TwoPhase.Volumes.MixVolume vol_turbine_LPT_1_feed1(
              useTstart=true,
              pstart=DataP.p_nom_turbine_HP_stage1_drain,
              hstart=DataP.h_turbine_outlet_s1,
              V_tot=3,
              m_flow_nom=-DataP.m_flow_nom_turbine_HP_stage1/2,
              N_feed=1,
              N_drain=1)                                           annotation (Placement(
                  transformation(
                  extent={{-12.5,-12},{12.5,12}},
                  rotation=90,
                  origin={102,61.5})));
            ThermalPower.TwoPhase.Deaerator deaerator(
              rint=5,
              rext=5.2,
              L=25,
              Cm=0,
              Text=303.15,
              pstart(displayUnit="MPa") = DataP.p_nom_dearator,
              hstart=ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleEnthalpy_pX(
                  deaerator.pstart),
              Tmstart=ThermalPower.Media.TwoPhase.WaterPolynomial.bubbleTemperature_pX(
                  deaerator.pstart),
              ystart=1)
              annotation (Placement(transformation(extent={{56,-176},{16,-138}})));
            Components.Pump FeedWaterPump(
              V=0.5,
              m_flow_nom=67,
              pin_start=DataP.p_nom_dearator,
              pout_start(displayUnit="MPa") = 3500000,
              d_nom(displayUnit="kg/m3"),
              q_nom=(DataP.m_flow_nom_feedWaterPump/FeedWaterPump.d_nom)*{0,1,2},
              head_nom=(1 + (1/10*1/FeedWaterPump.d_nom)*(4.0e6))*{2,1,0},
              forceNPSH=false)
              annotation (Placement(transformation(extent={{20,-212},{-16,-178}})));
            ThermalPower.TwoPhase.FlowResistances.HeightDiff heightDiff1(height=-0.95)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={36,-184})));
            Components.ValveSteam SteamControlValve1(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={30,-24})));
            Modelon.Blocks.Sources.RealExpression realExpression1(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={0,-10})));
            Components.ValveSteam SteamControlValve2(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={102,-24})));
            Components.ValveSteam SteamControlValve3(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=2.8,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={60,-24})));
            Components.ValveSteam SteamControlValve4(
              dp_nom(displayUnit="Pa") = 1,
              m_flow_nom=2.8,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={124,-24})));
            Components.ValveSteam SteamControlValve5(
              dp_nom(displayUnit="Pa") = 280,
              m_flow_nom=30,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={32,90})));
            Modelon.Blocks.Sources.RealExpression realExpression5(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={8,90})));
            Components.ValveSteam SteamControlValve6(
              dp_nom(displayUnit="Pa") = 280,
              m_flow_nom=30,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={102,90})));
            Modelon.Blocks.Sources.RealExpression realExpression6(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={76,90})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedwaterLPHeater2(
              diameter=1.04,
              length=2.51,
              N_tubes=66,
              tubelength=200,
              A_hotwell=1.0,
              pstart(displayUnit="MPa") = 51400,
              ystart=-1,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel,
              F_htc_cond=1.0)
              annotation (Placement(transformation(extent={{184,-128},{244,-84}})));
            Components.ValveSteam SteamControlValve7(
              dp_nom(displayUnit="Pa") = 10,
              m_flow_nom=23,
              CheckValve=true,
              p_nom(displayUnit="MPa") = 51000,
              T_nom=353.15) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={252,-142})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedwaterLPHeater(
              diameter=1.04,
              length=2.5168,
              N_tubes=66,
              tubelength=200,
              pstart(displayUnit="MPa") = 250000,
              ystart=-1,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel)
              annotation (Placement(transformation(extent={{86,-144},{146,-100}})));
            Components.ValveSteam SteamControlValve11(
              dp_nom(displayUnit="Pa") = 1,
              m_flow_nom=5,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={-150,-70})));
            Components.ValveSteam SteamControlValve12(
              dp_nom(displayUnit="Pa") = 130,
              m_flow_nom=15,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={136,-158})));
            Modelon.Blocks.Sources.RealExpression realExpression13(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={162,-204})));
            ThermalPower.TwoPhase.Valves.ValveLiquid valveLiquid1(dp_nom(displayUnit=
                    "bar") = 150,                                 CheckValve=true)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={136,-184})));
            Modelon.Blocks.Sources.RealExpression realExpression11(x=1) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={136,-204})));
            ThermalPower.TwoPhase.Condensers.Condenser FeedWaterHeater(
              diameter=1.04,
              length=2.5168,
              N_tubes=66,
              tubelength=300,
              d_inner=0.014122,
              pstart(displayUnit="MPa") = 480000,
              ystart=-0.99,
              redeclare model WallMaterial =
                  ThermalPower.Thermal.MetalProperties.StandardSteel)
              annotation (Placement(transformation(extent={{-154,-138},{-94,-94}})));
            Components.ValveSteam SteamControlValve8(
              dp_nom(displayUnit="Pa") = 400,
              m_flow_nom=3.6,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={58,-106})));
            Modelon.Blocks.Sources.RealExpression realExpression9(x=1.0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-174,-70})));
            Modelon.Blocks.Sources.RealExpression realExpression10(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={58,-126})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=4,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{276,-2},{338,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData
              annotation (Placement(transformation(extent={{260,-16},{280,4}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData1
              annotation (Placement(transformation(extent={{308,-134},{288,-114}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot1(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{278,-198},{340,-136}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=1,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-56,94}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData4 annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={-118,-60})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot4(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-148,-64},{-86,-2}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData5
              annotation (Placement(transformation(extent={{174,-56},{194,-36}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot5(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=3,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{154,-60},{216,2}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-96,30},{-76,50}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData6 annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={80,-84})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot6(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{16,-114},{78,-52}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData7 annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=180,
                  origin={-60,-106})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot7(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-92,-110},{-30,-48}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{-34,-194},{-54,-174}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-80,-234},{-18,-172}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot9(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{164,-200},{226,-138}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData9
              annotation (Placement(transformation(extent={{200,-134},{180,-114}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData10
              annotation (Placement(transformation(extent={{96,-194},{76,-174}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot10(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{54,-236},{116,-174}})));
            Components.ValveSteam SteamControlValve9(
              dp_nom(displayUnit="Pa") = 140,
              m_flow_nom=0.05,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={22,-124})));
            Modelon.Blocks.Sources.RealExpression realExpression12(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-4,-124})));
            Modelon.Blocks.Sources.RealExpression realExpression3(x=1)  annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={256,-184})));
            Data.NominalData DataP(
              p_nom_turbine_HP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_HP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage2_drain(displayUnit="MPa"),
              p_nom_condenser(displayUnit="MPa"),
              p_nom_CondensatePump_drain(displayUnit="MPa"),
              p_nom_feedWaterPump_drain(displayUnit="MPa"),
              p_nom_preheater_LP(displayUnit="MPa"))
              annotation (Placement(transformation(extent={{340,76},{386,116}})));
            Components.ValveSteam SteamControlValve10(
              dp_nom(displayUnit="Pa") = 0.1,
              m_flow_nom=43,
              CheckValve=true,
              p_nom(displayUnit="MPa") = 51000,
              T_nom=353.15) annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={228,12})));
            Modelon.Blocks.Sources.RealExpression realExpression4(x=1)  annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={242,-18})));
            FlowPort FeedWaterOutlet annotation (Placement(transformation(extent={{-332,
                      -294},{-276,-238}}), iconTransformation(extent={{-332,-294},{-276,
                      -238}})));
            FlowPort SteamInlet annotation (Placement(transformation(extent={{-330,96},{
                      -272,154}}), iconTransformation(extent={{-330,96},{-272,154}})));
            Modelica.Mechanics.Rotational.Interfaces.Flange_a ToGenerator annotation (
                Placement(transformation(extent={{362,-136},{474,-24}}),
                  iconTransformation(extent={{362,-136},{474,-24}})));
            ValveSteam TurbineGovernorValves(
              dp_nom=100,
              m_flow_nom=67.1,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-15,-15},{15,15}},
                  rotation=0,
                  origin={-233,39})));
            ThermalPower.ControllersAndSensors.LimPI
                                        pPI(
              k=0.1,
              steadyStateInit=false,
              yInit=0.1,
              Ti=20,
              yMin=0.01) annotation (Placement(transformation(extent={{-13,-13.5},{13,
                      13.5}},
                    rotation=270,
                  origin={-233,78.5})));
            ThermalPower.TwoPhase.Sensors.MassFlowRate massFlowRate
              annotation (Placement(transformation(extent={{-192,30},{-172,50}})));
            Modelica.Blocks.Continuous.FirstOrder RequiredMassFlowRate(
              k=1,
              T=4,
              y_start=13,
              initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                  transformation(extent={{-196,98},{-212,114}}, rotation=0)));
            Modelica.Blocks.Interfaces.RealInput u1
                        "Connector of Real input signal" annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=270,
                  origin={-162,138})));
            ThermalPower.TwoPhase.Interfaces.FlowPort ToCondenser
              annotation (Placement(transformation(extent={{228,110},{248,130}})));
          equation
            connect(condenser.drain_cool, pressureBoundary_T.port[1]) annotation (Line(
                  points={{341.36,-26.64},{376,-26.64},{376,-64},{349,-64},{349,-48}},
                  color={0,0,255}));
            connect(flowBoundary_T.port, condenser.feed_cool) annotation (Line(points={{353,6},
                    {344,6},{344,-10},{348,-10},{348,-17.84},{341.36,-17.84}},
                  color={0,0,255}));
            connect(heightDiff.feed, condenser.drain)
              annotation (Line(points={{310,-48},{310,-37.2}}, color={0,0,255}));
            connect(heightDiff.drain, CondensatePump.feed) annotation (Line(points={{310,-74},
                    {310,-110},{376,-110},{376,-135},{366.76,-135}},    color={0,0,255}));
            connect(HPTurbine.shaft_b, turbine_3stageNoEndVolume.shaft_a) annotation (
                Line(points={{-27.9,29},{-8.95,29},{-8.95,30},{10,30}}, color={0,0,0}));
            connect(turbine_3stageNoEndVolume.feed, vol_turbine_LPT_1_feed.feed[1])
              annotation (Line(points={{34,37.2},{32,37.2},{32,51.5}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume.shaft_b, turbine_3stageNoEndVolume1.shaft_a)
              annotation (Line(points={{58,30},{78,30}}, color={0,0,0}));
            connect(vol_turbine_LPT_1_feed1.feed[1], turbine_3stageNoEndVolume1.feed)
              annotation (Line(points={{102,51.5},{102,37.2}}, color={0,0,255}));
            connect(deaerator.drain, heightDiff1.drain)
              annotation (Line(points={{36,-165.36},{36,-174}}, color={0,0,255}));
            connect(FeedWaterPump.feed, heightDiff1.feed) annotation (Line(points={{16.76,
                    -195},{36,-195},{36,-194}},        color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage1[1], SteamControlValve1.feed)
              annotation (Line(points={{34,20.08},{34,-8},{30,-8},{30,-14}},   color={0,0,
                    255}));
            connect(turbine_3stageNoEndVolume1.drain_stage1[1], SteamControlValve2.feed)
              annotation (Line(points={{102,20.08},{102,-14}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume1.drain_stage2[1], SteamControlValve4.feed)
              annotation (Line(points={{108.4,17.68},{108.4,-8},{124,-8},{124,-14}},
                  color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage2[1], SteamControlValve3.feed)
              annotation (Line(points={{40.4,17.68},{40.4,-8},{60,-8},{60,-14}},   color=
                    {0,0,255}));
            connect(realExpression5.y, SteamControlValve5.command)
              annotation (Line(points={{19,90},{26.4,90}}, color={0,0,127}));
            connect(realExpression6.y, SteamControlValve6.command)
              annotation (Line(points={{87,90},{96.4,90}}, color={0,0,127}));
            connect(SteamControlValve6.drain, vol_turbine_LPT_1_feed1.drain[1])
              annotation (Line(points={{102,80},{102,71.5}}, color={0,0,255}));
            connect(SteamControlValve5.drain, vol_turbine_LPT_1_feed.drain[1])
              annotation (Line(points={{32,80},{32,71.5}}, color={0,0,255}));
            connect(SteamControlValve5.feed, HPTurbine.drain) annotation (Line(points={{
                    32,100},{32,106},{-8,106},{-8,15.7},{-29.8,15.7}}, color={0,0,255}));
            connect(SteamControlValve6.feed, HPTurbine.drain) annotation (Line(points={{
                    102,100},{102,106},{-8,106},{-8,15.7},{-29.8,15.7}}, color={0,0,255}));
            connect(SteamControlValve12.feed, FeedwaterLPHeater.drain) annotation (Line(
                  points={{126,-158},{116,-158},{116,-135.2}}, color={0,0,255}));
            connect(realExpression11.y, valveLiquid1.command)
              annotation (Line(points={{136,-193},{136,-189.6}}, color={0,0,127}));
            connect(FeedwaterLPHeater.drain_cool, valveLiquid1.feed) annotation (Line(
                  points={{149.6,-124.64},{154,-124.64},{154,-184},{146,-184}}, color={0,
                    0,255}));
            connect(SteamControlValve7.drain, condenser.feed) annotation (Line(points={{262,
                    -142},{264,-142},{264,-12},{274,-12},{274,-12.12},{289.56,-12.12}},
                  color={0,0,255}));
            connect(realExpression13.y, SteamControlValve12.command) annotation (Line(
                  points={{162,-193},{162,-163.6},{136,-163.6}},          color={0,0,127}));
            connect(FeedWaterHeater.feed, SteamControlValve11.drain) annotation (Line(
                  points={{-145.9,-104.12},{-148,-104.12},{-148,-80},{-150,-80}}, color={
                    0,0,255}));
            connect(realExpression9.y, SteamControlValve11.command)
              annotation (Line(points={{-163,-70},{-155.6,-70}}, color={0,0,127}));
            connect(realExpression10.y, SteamControlValve8.command)
              annotation (Line(points={{58,-115},{58,-111.6}}, color={0,0,127}));
            connect(multiData.u, multiDisplayVis_phTmdot.y)
              annotation (Line(points={{270,-6},{270,29},{307,29}}, color={0,0,0}));
            connect(multiData1.port_a, CondensatePump.drain) annotation (Line(points={{
                    304,-124},{320.8,-124},{320.8,-124.8},{337.6,-124.8}}, color={0,0,255}));
            connect(multiData1.port_b, FeedwaterLPHeater2.feed_cool) annotation (Line(
                  points={{292,-124},{270,-124},{270,-99.84},{247.6,-99.84}}, color={0,0,
                    255}));
            connect(multiData1.u, multiDisplayVis_phTmdot1.y) annotation (Line(points={{
                    298,-124},{298,-112},{286,-112},{286,-130},{272,-130},{272,-167},{309,
                    -167}}, color={0,0,0}));
            connect(SteamControlValve2.command, realExpression1.y) annotation (Line(
                  points={{96.4,-24},{80,-24},{80,-10},{11,-10}}, color={0,0,127}));
            connect(SteamControlValve1.command, realExpression1.y) annotation (Line(
                  points={{24.4,-24},{11,-24},{11,-10}},            color={0,0,127}));
            connect(SteamControlValve12.drain, FeedwaterLPHeater2.feed) annotation (Line(
                  points={{146,-158},{162,-158},{162,-94.12},{192.1,-94.12}}, color={0,0,
                    255}));
            connect(SteamControlValve11.feed, multiData4.port_b) annotation (Line(points=
                    {{-150,-60},{-150,-54},{-134,-54},{-134,-60},{-124,-60}}, color={0,0,
                    255}));
            connect(multiData4.port_a, HPTurbine.drain) annotation (Line(points={{-112,
                    -60},{-29.8,-60},{-29.8,15.7}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot4.y, multiData4.u) annotation (Line(points={{
                    -117,-33},{-117,-60},{-118,-60}}, color={0,0,0}));
            connect(SteamControlValve3.drain, multiData5.port_a)
              annotation (Line(points={{60,-34},{60,-46},{178,-46}}, color={0,0,255}));
            connect(SteamControlValve4.drain, multiData5.port_a)
              annotation (Line(points={{124,-34},{124,-46},{178,-46}}, color={0,0,255}));
            connect(multiData5.port_b, FeedwaterLPHeater2.feed) annotation (Line(points={
                    {190,-46},{192.1,-46},{192.1,-94.12}}, color={0,0,255}));
            connect(multiData5.u, multiDisplayVis_phTmdot5.y) annotation (Line(points={{
                    184,-46},{186,-46},{186,-29},{185,-29}}, color={0,0,0}));
            connect(multiData2.port_b, HPTurbine.feed) annotation (Line(points={{-80,40},
                    {-70.1,40},{-70.1,40.4},{-60.2,40.4}}, color={0,0,255}));
            connect(multiData2.port_a, SteamHeader1.drain[1])
              annotation (Line(points={{-92,40},{-117.2,40}}, color={0,0,255}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y) annotation (Line(points={{
                    -86,40},{-86,51.5},{-87,51.5},{-87,63}}, color={0,0,0}));
            connect(SteamControlValve1.drain, multiData6.port_a) annotation (Line(points=
                    {{30,-34},{30,-52},{80,-52},{80,-78}}, color={0,0,255}));
            connect(SteamControlValve2.drain, multiData6.port_a) annotation (Line(points=
                    {{102,-34},{102,-52},{80,-52},{80,-78}}, color={0,0,255}));
            connect(multiData6.port_b, FeedwaterLPHeater.feed) annotation (Line(points={{
                    80,-90},{80,-110.12},{94.1,-110.12}}, color={0,0,255}));
            connect(multiData6.u, multiDisplayVis_phTmdot6.y) annotation (Line(points={{
                    80,-84},{66,-84},{66,-83},{47,-83}}, color={0,0,0}));
            connect(multiDisplayVis_phTmdot7.y, multiData7.u)
              annotation (Line(points={{-61,-79},{-61,-106},{-60,-106}}, color={0,0,0}));
            connect(FeedWaterPump.drain, multiData8.port_a) annotation (Line(points={{
                    -12.4,-184.8},{-24,-184.8},{-24,-184},{-38,-184}}, color={0,0,255}));
            connect(multiData8.u, multiDisplayVis_phTmdot8.y) annotation (Line(points={{
                    -44,-184},{-44,-203},{-49,-203}}, color={0,0,0}));
            connect(FeedWaterHeater.drain, multiData7.port_a) annotation (Line(points={{
                    -124,-129.2},{-124,-134},{-66,-134},{-66,-106}}, color={0,0,255}));
            connect(FeedWaterHeater.feed_cool, multiData8.port_b) annotation (Line(points=
                   {{-90.4,-109.84},{-78,-109.84},{-78,-184},{-50,-184}}, color={0,0,255}));
            connect(FeedwaterLPHeater2.drain_cool, multiData9.port_a) annotation (Line(
                  points={{247.6,-108.64},{247.6,-124},{196,-124}}, color={0,0,255}));
            connect(multiData9.port_b, FeedwaterLPHeater.feed_cool) annotation (Line(
                  points={{184,-124},{156,-124},{156,-115.84},{149.6,-115.84}}, color={0,
                    0,255}));
            connect(multiData9.u, multiDisplayVis_phTmdot9.y) annotation (Line(points={{
                    190,-124},{190,-169},{195,-169}}, color={0,0,0}));
            connect(multiData7.port_b, SteamControlValve8.feed)
              annotation (Line(points={{-54,-106},{48,-106}}, color={0,0,255}));
            connect(SteamControlValve8.drain, FeedwaterLPHeater.feed) annotation (Line(
                  points={{68,-106},{80,-106},{80,-110.12},{94.1,-110.12}}, color={0,0,
                    255}));
            connect(multiData.port_b, condenser.feed) annotation (Line(points={{276,-6},{
                    289.56,-6},{289.56,-12.12}}, color={0,0,255}));
            connect(multiData10.port_b, deaerator.feed) annotation (Line(points={{80,-184},
                    {62,-184},{62,-149.02},{50.4,-149.02}}, color={0,0,255}));
            connect(multiData10.port_a, valveLiquid1.drain)
              annotation (Line(points={{92,-184},{126,-184}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot10.y, multiData10.u) annotation (Line(points={
                    {85,-205},{85,-194.5},{86,-194.5},{86,-184}}, color={0,0,0}));
            connect(SteamControlValve9.drain, deaerator.steam) annotation (Line(points={{
                    22,-134},{22,-137.37},{22.4,-137.37},{22.4,-146.74}}, color={0,0,255}));
            connect(realExpression12.y, SteamControlValve9.command)
              annotation (Line(points={{7,-124},{16.4,-124}}, color={0,0,127}));
            connect(SteamControlValve9.feed, SteamControlValve8.feed)
              annotation (Line(points={{22,-114},{22,-106},{48,-106}}, color={0,0,255}));
            connect(FeedwaterLPHeater2.drain, SteamControlValve7.feed) annotation (Line(
                  points={{214,-119.2},{214,-118},{246,-118},{246,-130},{242,-130},{242,
                    -142}}, color={0,0,255}));
            connect(realExpression3.y, SteamControlValve7.command) annotation (Line(
                  points={{256,-173},{256,-158},{252,-158},{252,-147.6}}, color={0,0,127}));
            connect(turbine_3stageNoEndVolume1.drain_stage3, SteamControlValve10.feed)
              annotation (Line(points={{114.8,15.6},{114.8,12},{218,12}}, color={0,0,255}));
            connect(turbine_3stageNoEndVolume.drain_stage3, SteamControlValve10.feed)
              annotation (Line(points={{46.8,15.6},{46.8,12},{218,12}}, color={0,0,255}));
            connect(SteamControlValve10.drain, multiData.port_a)
              annotation (Line(points={{238,12},{264,12},{264,-6}}, color={0,0,255}));
            connect(realExpression4.y, SteamControlValve10.command) annotation (Line(
                  points={{242,-7},{236,-7},{236,6.4},{228,6.4}}, color={0,0,127}));
            connect(SteamControlValve3.command, realExpression1.y) annotation (Line(
                  points={{54.4,-24},{50,-24},{50,-10},{11,-10}}, color={0,0,127}));
            connect(SteamControlValve4.command, realExpression1.y) annotation (Line(
                  points={{118.4,-24},{116,-24},{116,-10},{11,-10}}, color={0,0,127}));
            connect(turbine_3stageNoEndVolume1.shaft_b, ToGenerator) annotation (Line(
                  points={{126,30},{126,-4},{148,-4},{148,-64},{288,-64},{288,-80},{418,
                    -80}}, color={0,0,0}));
            connect(FeedWaterHeater.drain_cool, FeedWaterOutlet) annotation (Line(points=
                    {{-90.4,-118.64},{-88,-118.64},{-88,-266},{-304,-266}}, color={0,0,
                    255}));
            connect(ToGenerator, ToGenerator) annotation (Line(points={{418,-80},{424,-80},
                    {424,-84},{422,-84},{422,-80},{418,-80}}, color={0,0,0}));
            connect(TurbineGovernorValves.feed, SteamInlet) annotation (Line(points={
                    {-248,39},{-248,36},{-301,36},{-301,125}}, color={0,0,255}));
            connect(TurbineGovernorValves.command, pPI.y)
              annotation (Line(points={{-233,47.4},{-233,64.2}}, color={0,0,127}));
            connect(massFlowRate.port_b, SteamHeader1.feed[1])
              annotation (Line(points={{-172,40},{-142.8,40}}, color={0,0,255}));
            connect(massFlowRate.port_a, TurbineGovernorValves.drain) annotation (
                Line(points={{-192,40},{-205,40},{-205,39},{-218,39}}, color={0,0,255}));
            connect(massFlowRate.m_flow, pPI.u_m) annotation (Line(points={{-182,49},
                    {-182,58},{-264,58},{-264,78.5},{-249.2,78.5}}, color={0,0,127}));
            connect(RequiredMassFlowRate.u, u1) annotation (Line(points={{-194.4,106},
                    {-162,106},{-162,138}}, color={0,0,127}));
            connect(RequiredMassFlowRate.y, pPI.u_s) annotation (Line(points={{-212.8,
                    106},{-220,106},{-220,94.1},{-233,94.1}}, color={0,0,127}));
            connect(SteamControlValve10.drain, ToCondenser)
              annotation (Line(points={{238,12},{238,120}}, color={0,0,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-360,
                      -260},{400,120}}),
                                   graphics={
                  Rectangle(extent={{294,120},{376,-260}},
                                                         lineColor={28,108,200},
                    fillColor={176,176,176},
                    fillPattern=FillPattern.Forward),
                  Polygon(
                    points={{-358,118},{-356,-262},{-160,-142},{-160,0},{-358,118}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(
                    extent={{294,-30},{-358,-118}},
                    lineColor={28,108,200},
                    fillColor={0,140,72},
                    fillPattern=FillPattern.CrossDiag),
                  Polygon(
                    points={{-240,118},{-238,-262},{-42,-142},{-42,0},{-240,118}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(
                    extent={{380,-28},{-210,-116}},
                    lineColor={28,108,200},
                    fillColor={0,140,72},
                    fillPattern=FillPattern.CrossDiag),
                  Polygon(
                    points={{-112,120},{-110,-260},{86,-140},{86,2},{-112,120}},
                    lineColor={28,108,200},
                    fillColor={103,142,176},
                    fillPattern=FillPattern.Backward),
                  Rectangle(extent={{234,120},{316,-260}},
                                                         lineColor={28,108,200},
                    fillColor={176,176,176},
                    fillPattern=FillPattern.Forward),
                  Text(
                    extent={{-312,-42},{286,-94}},
                    textColor={28,108,200},
                    textString="BOP"),
                  Rectangle(
                    extent={{-280,120},{-322,38}},
                    lineColor={28,108,200},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-282,-178},{-324,-260}},
                    lineColor={28,108,200},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid)}),                      Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-360,-260},{400,
                      120}})),
              experiment(
                StartTime=3000,
                StopTime=15000,
                __Dymola_NumberOfIntervals=5000,
                __Dymola_Algorithm="Dassl"));
          end BalanceOfPlant_Component_with_SteamDump;

          model SteamGeneratorwithSteamControl
            ThermalPower.Thermal.Sources.HeatFlowSource Power(N=1) annotation (Placement(
                  transformation(
                  extent={{-9,8},{9,-8}},
                  rotation=90,
                  origin={-48,-13})));
            Header            header(
              pstart(displayUnit="MPa") = 3500000,
              hstart=2999e3,
              V_tot=1,
              Cm=0,
              N_feed=2,
              N_drain=1) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-18,-14})));
            Drum            SG(
              rint=1.5,
              rext=1.6,
              L=2,
              Cm=(SG.L*3.14*2*SG.rext + 2*3.14*SG.rext^2)*(SG.rext - SG.rint)*7000*500,
              DrumOrientation=1,
              pstart(displayUnit="MPa") = 3500000,
              hlstart=590e3,
              hvstart=2999e3,
              Tmstart=581.15,
              ystart=0.0)
              annotation (Placement(transformation(extent={{44,-18},{-4,30}})));
            ThermalPower.TwoPhase.Valves.ValveLiquid valveLiquid3(dp_nom(displayUnit=
                    "bar") = 1000, CheckValve=true)
              annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=270,
                  origin={40,-36})));
            Modelon.Blocks.Sources.RealExpression realExpression7(x=1)  annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={17,-35})));
            ThermalPower.TwoPhase.TurboMachinery.Pumps.PumpPosDispl pumpPosDispl(
              V=0.3,
              pin_start(displayUnit="MPa") = 3500000,
              pout_start(displayUnit="MPa") = 3500000,
              n_nom=CirculatingPumpRPM,
              q_nom=10*67/1000)
              annotation (Placement(transformation(extent={{12,-62},{-8,-42}})));
            ValveSteam            SteamControlValve13(
              dp_nom(displayUnit="Pa") = 10,
              m_flow_nom=68,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-26,34})));
            Modelon.Blocks.Sources.RealExpression realExpression14(x=1.0)
                                                                         annotation (
                Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={-39,31})));
            ThermalPower.Thermal.Sources.HeatFlowSource Power1(N=1)
                                                                   annotation (Placement(
                  transformation(
                  extent={{-8,9},{8,-9}},
                  rotation=90,
                  origin={-59,48})));
            Header            header1(
              pstart(displayUnit="MPa") = DataP.p_nom_turbine_HP_stage1_feed,
              hstart=DataP.h_turbine_inlet_s1,
              V_tot=1,
              m_flow_nom=DataP.m_flow_nom_steam,
              Cm=0,
              N_feed=1,
              N_drain=1) annotation (Placement(transformation(
                  extent={{-8,-8},{8,8}},
                  rotation=90,
                  origin={-26,54})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot11(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=1,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-16,26},{6,48}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData11
              annotation (Placement(transformation(extent={{2,10},{-18,30}})));
            FlowPort SteamOutlet annotation (Placement(transformation(extent={{-12,90},
                      {14,116}}),iconTransformation(extent={{-12,90},{14,116}})));
            FlowPort FeedWaterInlet annotation (Placement(transformation(extent={{50,28},
                      {74,52}}), iconTransformation(extent={{50,28},{74,52}})));
            Modelica.Blocks.Interfaces.RealInput PowertoSG
              annotation (Placement(transformation(extent={{-118,-40},{-78,0}})));
            Modelica.Blocks.Interfaces.RealInput PowerSuperHeat
              annotation (Placement(transformation(extent={{-118,8},{-78,48}})));
            ThermalPower.TwoPhase.Valves.ValveLiquid FeedWaterControlValve(
              dp_nom(displayUnit="bar") = 500,
              m_flow_nom=67,
              CheckValve=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={16,-70})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData3
              annotation (Placement(transformation(extent={{-50,-78},{-70,-58}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot3(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-68,-66},{-44,-42}})));
            ThermalPower.ControllersAndSensors.UniversalSensor level1(outValue=SG.y)
              annotation (Placement(transformation(extent={{-12,-98},{0,-88}},
                    rotation=0)));
            ThermalPower.ControllersAndSensors.LimPI
                                        pPI(
              k=1,
              steadyStateInit=false,
              yInit=0.1,
              Ti=20,
              yMin=0.01) annotation (Placement(transformation(extent={{-2,-87},{10,-76}},
                    rotation=0)));
            Modelica.Blocks.Interfaces.RealInput SGLevelSetpoint annotation (Placement(
                  transformation(extent={{-118,-94},{-78,-54}}), iconTransformation(
                    extent={{-118,-94},{-78,-54}})));
            Data.NominalData DataP(
              p_nom_turbine_HP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_HP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_feed(displayUnit="MPa"),
              p_nom_turbine_LP_stage1_drain(displayUnit="MPa"),
              p_nom_turbine_LP_stage2_drain(displayUnit="MPa"),
              p_nom_condenser(displayUnit="MPa"),
              p_nom_CondensatePump_drain(displayUnit="MPa"),
              p_nom_feedWaterPump_drain(displayUnit="MPa"),
              p_nom_preheater_LP(displayUnit="MPa"))
              annotation (Placement(transformation(extent={{38,-96},{54,-78}})));
            parameter Modelica.Units.NonSI.AngularVelocity_rpm CirculatingPumpRPM=1500
              "Nominal rotational speed";
          equation
            connect(Power.port[1],header. wall) annotation (Line(points={{-40,-13},{-40,
                    -14},{-27,-14}},                      color={191,0,0}));
            connect(SG.downcomer,valveLiquid3. feed) annotation (Line(points={{36.8,-6},{
                    40,-6},{40,-26}},       color={0,0,255}));
            connect(realExpression7.y,valveLiquid3. command)
              annotation (Line(points={{22.5,-35},{30,-35},{30,-36},{34.4,-36}},
                                                                 color={0,0,127}));
            connect(pumpPosDispl.drain,header. feed[1]) annotation (Line(points={{-6,-46},
                    {-17.5,-46},{-17.5,-22}},          color={0,0,255}));
            connect(pumpPosDispl.feed,valveLiquid3. drain) annotation (Line(points={{10,-52},
                    {10,-46},{40,-46}},          color={0,0,255}));
            connect(realExpression14.y,SteamControlValve13. command) annotation (Line(
                  points={{-33.5,31},{-34,31},{-34,34},{-31.6,34}},   color={0,0,127}));
            connect(Power1.port[1],header1. wall) annotation (Line(points={{-50,48},{-42,
                    48},{-42,54},{-33.2,54}},      color={191,0,0}));
            connect(SteamControlValve13.drain,header1. feed[1]) annotation (Line(points={{-26,44},
                    {-26,47.6}},                              color={0,0,255}));
            connect(SteamControlValve13.feed,multiData11. port_b)
              annotation (Line(points={{-26,24},{-26,20},{-14,20}}, color={0,0,255}));
            connect(multiData11.u,multiDisplayVis_phTmdot11. y) annotation (Line(points={{-8,20},
                    {-8,26.5},{-5,26.5},{-5,37}},                color={0,0,0}));
            connect(PowertoSG, Power.power) annotation (Line(points={{-98,-20},{-82,-20},
                    {-82,-18},{-52.8,-18},{-52.8,-21.1}}, color={0,0,127}));
            connect(level1.y,pPI. u_m) annotation (Line(points={{-4.44089e-16,-93},{4,-93},
                    {4,-88.1}},    color={0,0,127}));
            connect(FeedWaterInlet, FeedWaterControlValve.feed) annotation (Line(points={
                    {62,40},{44,40},{44,34},{46,34},{46,24},{56,24},{56,-70},{26,-70}},
                  color={0,0,255}));
            connect(FeedWaterControlValve.drain, multiData3.port_a) annotation (Line(
                  points={{6,-70},{-46,-70},{-46,-68},{-54,-68}}, color={0,0,255}));
            connect(multiDisplayVis_phTmdot3.y, multiData3.u) annotation (Line(points={{
                    -56,-54},{-56,-62},{-60,-62},{-60,-68}}, color={0,0,0}));
            connect(pPI.y, FeedWaterControlValve.command) annotation (Line(points={{10.6,
                    -81.5},{16,-81.5},{16,-75.6}}, color={0,0,127}));
            connect(PowerSuperHeat, Power1.power) annotation (Line(points={{-98,28},{
                    -64.4,28},{-64.4,40.8}}, color={0,0,127}));
            connect(SG.drain, multiData11.port_a) annotation (Line(points={{5.6,19.92},{
                    1.8,19.92},{1.8,20},{-2,20}}, color={0,0,255}));
            connect(SG.riser, header.drain[1]) annotation (Line(points={{3.2,-6},{2,-6},{
                    2,-22},{-6,-22},{-6,0},{-18,0},{-18,-6}}, color={0,0,255}));
            connect(multiData3.port_b, header.feed[2]) annotation (Line(points={{-66,-68},
                    {-72,-68},{-72,-34},{-18.5,-34},{-18.5,-22}},   color={0,0,255}));
            connect(SGLevelSetpoint, pPI.u_s) annotation (Line(points={{-98,-74},{-3.2,
                    -74},{-3.2,-81.5}}, color={0,0,127}));
            connect(SteamOutlet, SteamOutlet)
              annotation (Line(points={{1,103},{1,103}}, color={0,0,255}));
            connect(SteamOutlet, header1.drain[1]) annotation (Line(points={{1,103},{
                    1,80},{-20,80},{-20,60.4},{-26,60.4}}, color={0,0,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-80,
                      -100},{60,100}}), graphics={
                  Ellipse(
                    extent={{-50,84},{52,-18}},
                    lineColor={28,108,200},
                    fillColor={95,180,245},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-12,100},{14,80}},
                    lineColor={28,108,200},
                    fillColor={34,250,253},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-20,-10},{22,-86}},
                    lineColor={28,108,200},
                    fillColor={27,27,244},
                    fillPattern=FillPattern.Solid),
                  Ellipse(
                    extent={{-20,-72},{22,-100}},
                    lineColor={28,108,200},
                    fillColor={36,51,247},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-78,28},{-12,98},{-20,92},{-28,92},{-60,52},{-78,28}},
                    lineColor={28,108,200},
                    fillColor={212,68,20},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-80,-20},{-6,-26},{-6,-46},{-8,-28},{-80,-20}},
                    lineColor={28,108,200},
                    fillColor={238,46,47},
                    fillPattern=FillPattern.Solid),
                  Ellipse(extent={{-48,48},{50,30}}, lineColor={28,108,200}),
                  Polygon(
                    points={{-80,-72},{-20,-56},{-20,-10},{-22,-58},{-80,-72}},
                    lineColor={28,108,200},
                    fillColor={225,114,40},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-14,-12},{-12,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-10,-12},{-8,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-6,-12},{-4,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-2,-12},{0,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{2,-12},{4,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{6,-12},{8,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{10,-12},{12,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{14,-12},{16,-90}},
                    lineColor={28,108,200},
                    fillColor={200,8,59},
                    fillPattern=FillPattern.Solid)}), Diagram(coordinateSystem(
                    preserveAspectRatio=false, extent={{-80,-100},{60,100}})));
          end SteamGeneratorwithSteamControl;
        end Components;

        package Data
          record NuclearSteamCycleNominalValues "Nominal Rankine values"
            extends Modelon.Icons.Record;
            replaceable package Medium =
                Modelon.Media.PreDefined.TwoPhase.WaterIF97
              annotation (choicesAllMatching=true);

            // Pressure
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_HP_stage1_feed=70e5
              "Nominal turbine HP feed pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_HP_stage1_drain=25e5
              "Nominal turbine HP drain pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_HP_stage2_feed=70e5
              "Nominal turbine HP feed pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_HP_stage2_drain=25e5
              "Nominal turbine HP drain pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_LP_stage1_feed=12e5
              "Nominal turbine LP feed pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_LP_stage1_drain=7e5
              "Nominal turbine LP drain pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_LP_stage2_drain=2e5
              "Nominal turbine LP drain pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_condenser=0.033e5 "Nominal condenser pressure"
              annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_feedWaterPump_drain=82e5
              "Nominal feed water pump pressure (at drain)" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_preheater_LP=1.95e5 "Nominal LP preheater pressure"
              annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_dearator=6.9e5 "Nominal LP preheater pressure"
              annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_preheater_HP=24.5e5 "Nominal HP preheater pressure"
              annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_preheater_HP_cooling_in=77e5
              "Nominal HP preheater cooling inlet pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_preheater_HP_cooling_out=73e5
              "Nominal HP preheater cooling outlet pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_to_SG_drain=72e5
              "Nominal drain to steam generator pressure" annotation (Evaluate=true, Dialog(group="Pressure"));

            // Temperature
            parameter Modelica.Units.SI.Temperature T_nom_turbine_HP_stage1_feed=580 + 273.15
              "Nominal turbine HP feed temperature" annotation (Evaluate=true, Dialog(group="Temperature"));
            parameter Modelica.Units.SI.Temperature T_nom_turbine_HP_stage1_drain=Medium.saturationTemperature_pX(
                p_nom_turbine_HP_stage1_drain, Medium.reference_X) + 5 "Nominal turbine HP drain temperature"
              annotation (Evaluate=true, Dialog(group="Temperature"));
            parameter Modelica.Units.SI.Temperature T_nom_turbine_LP_stage1_feed=Medium.saturationTemperature_pX(
                p_nom_turbine_LP_stage1_feed, Medium.reference_X) + 5 "Nominal turbine LP feed temperature"
              annotation (Evaluate=true, Dialog(group="Temperature"));
            parameter Modelica.Units.SI.Temperature T_nom_turbine_LP_stage1_drain=Medium.saturationTemperature_pX(
                p_nom_turbine_LP_stage1_drain, Medium.reference_X) + 5 "Nominal turbine LP drain temperature"
              annotation (Evaluate=true, Dialog(group="Temperature"));
            parameter Modelica.Units.SI.Temperature T_nom_turbine_LP_stage2_drain=Medium.saturationTemperature_pX(
                p_nom_turbine_LP_stage2_drain, Medium.reference_X) + 5 "Nominal turbine LP drain temperature"
              annotation (Evaluate=true, Dialog(group="Temperature"));
            parameter Modelica.Units.SI.Temperature T_nom_preheater_HP_cooling_out=256 + 273.15
              "Nominal HP preheater cooling temperrature" annotation (Evaluate=true, Dialog(group="Temperature"));

            // Mass-flow
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_turbine_HP_stage1=290*0.78*3
              "Nominal turbine HP mass flow rate" annotation (Evaluate=true, Dialog(group="Flow"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_turbine_HP_stage2=245*0.78*3
              "Nominal turbine HP mass flow rate" annotation (Evaluate=true, Dialog(group="Flow"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_turbine_LP_stage1=245*0.78*3
              "Nominal turbine IP1 mass flow rate" annotation (Evaluate=true, Dialog(group="Flow"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_turbine_LP_stage2=230*0.78*3
              "Nominal turbine LP mass flow rate" annotation (Evaluate=true, Dialog(group="Flow"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_turbine_LP_stage3=200*0.78*3
              "Nominal turbine LP2 mass flow rate" annotation (Evaluate=true, Dialog(group="Flow"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_feedWaterPump=300*0.78*3
              "Nominal feed water pump mass flow rate" annotation (Dialog(group="Flow"));
            parameter Modelica.Units.SI.SpecificEnthalpy h_turbine_inlet_s1=2999.39e3 "HP Turbine Stage 1 Inlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_turbine_outlet_s1=2673.75e3 "HP Turbine Stage 1 Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_turbine_outlet_s2=2563.03e3 "HP Turbine Stage 2 Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_turbine_outlet_s3=2401.84e3 "LP Turbine Stage 2 Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_turbine_outlet_s4=2260.18e3 "LP Turbine Stage 3 Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_condenser_outlet=138.1e3 "Condenser Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_LP_FWH2_shell_outlet=302.38e3 "LP FWH2 Shell Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_LP_FWH1_shell_outlet=368.21e3 "LP FWH1 Shell Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_HP_FWH_shell_outlet=544.52e3 "HP FWH Shell Outlet Enthalpy";
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false)),
              Documentation(revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
          end NuclearSteamCycleNominalValues;

          record NominalData "Nominal Rankine values"
            extends Modelon.Icons.Record;
            replaceable package Medium =
                Modelon.Media.PreDefined.TwoPhase.WaterIF97
              annotation (choicesAllMatching=true);

            // Pressure
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_HP_stage1_feed=3.5e6
              "Nominal turbine HP feed pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_HP_stage1_drain=0.52e6
              "Nominal turbine HP drain pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_LP_stage1_feed=0.52e6
              "Nominal turbine LP feed pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_LP_stage1_drain=0.25e6
              "Nominal turbine LP drain pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_turbine_LP_stage2_drain=0.062e6
              "Nominal turbine LP drain pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_condenser=0.0081e6 "Nominal condenser pressure"
              annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_CondensatePump_drain=89e5
              "Nominal feed water pump pressure (at drain)" annotation (Evaluate=true, Dialog(group="Pressure"));

            parameter Modelica.Units.SI.AbsolutePressure p_nom_feedWaterPump_drain=82e5
              "Nominal feed water pump pressure (at drain)" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_preheater_LP=1.95e5 "Nominal LP preheater pressure"
              annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_dearator=0.14e6 "Nominal LP preheater pressure"
              annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_preheater_HP=24.5e5 "Nominal HP preheater pressure"
              annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_preheater_HP_cooling_in=77e5
              "Nominal HP preheater cooling inlet pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_preheater_HP_cooling_out=73e5
              "Nominal HP preheater cooling outlet pressure" annotation (Evaluate=true, Dialog(group="Pressure"));
            parameter Modelica.Units.SI.AbsolutePressure p_nom_to_SG_drain=3.5e6
              "Nominal drain to steam generator pressure" annotation (Evaluate=true, Dialog(group="Pressure"));

            // Temperature
            parameter Modelica.Units.SI.Temperature T_nom_turbine_HP_stage1_feed=303+273.15
              "Nominal turbine HP feed temperature" annotation (Evaluate=true, Dialog(group="Temperature"));
            parameter Modelica.Units.SI.Temperature T_nom_turbine_HP_stage1_drain=Medium.saturationTemperature_pX(
                p_nom_turbine_HP_stage1_drain, Medium.reference_X) + 5 "Nominal turbine HP drain temperature"
              annotation (Evaluate=true, Dialog(group="Temperature"));
            parameter Modelica.Units.SI.Temperature T_nom_turbine_LP_stage1_feed=Medium.saturationTemperature_pX(
                p_nom_turbine_LP_stage1_feed, Medium.reference_X) + 5 "Nominal turbine LP feed temperature"
              annotation (Evaluate=true, Dialog(group="Temperature"));
            parameter Modelica.Units.SI.Temperature T_nom_turbine_LP_stage1_drain=Medium.saturationTemperature_pX(
                p_nom_turbine_LP_stage1_drain, Medium.reference_X) + 5 "Nominal turbine LP drain temperature"
              annotation (Evaluate=true, Dialog(group="Temperature"));
            parameter Modelica.Units.SI.Temperature T_nom_turbine_LP_stage2_drain=Medium.saturationTemperature_pX(
                p_nom_turbine_LP_stage2_drain, Medium.reference_X) + 5 "Nominal turbine LP drain temperature"
              annotation (Evaluate=true, Dialog(group="Temperature"));
            parameter Modelica.Units.SI.Temperature T_nom_preheater_HP_cooling_out=256 + 273.15
              "Nominal HP preheater cooling temperrature" annotation (Evaluate=true, Dialog(group="Temperature"));

            // Mass-flow
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_steam= 67.1
              "Nominal turbine HP mass flow rate" annotation (Evaluate=true, Dialog(group="Flow"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_turbine_HP_stage1=67.1
              "Nominal turbine HP mass flow rate" annotation (Evaluate=true, Dialog(group="Flow"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_turbine_LP_stage1=63.5
              "Nominal turbine IP1 mass flow rate" annotation (Evaluate=true, Dialog(group="Flow"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_turbine_LP_stage2=58.45
              "Nominal turbine LP mass flow rate" annotation (Evaluate=true, Dialog(group="Flow"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_turbine_LP_stage3=53.46
              "Nominal turbine LP2 mass flow rate" annotation (Evaluate=true, Dialog(group="Flow"));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nom_feedWaterPump=67.1
              "Nominal feed water pump mass flow rate" annotation (Dialog(group="Flow"));
            parameter Modelica.Units.SI.SpecificEnthalpy h_turbine_inlet_s1=2999.39e3 "HP Turbine Stage 1 Inlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_turbine_outlet_s1=2673.75e3 "HP Turbine Stage 1 Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_turbine_outlet_s2=2563.03e3 "HP Turbine Stage 2 Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_turbine_outlet_s3=2401.84e3 "LP Turbine Stage 2 Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_turbine_outlet_s4=2260.18e3 "LP Turbine Stage 3 Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_condenser_outlet=138.1e3 "Condenser Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_LP_FWH2_shell_outlet=302.38e3 "LP FWH2 Shell Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_LP_FWH1_shell_outlet=368.21e3 "LP FWH1 Shell Outlet Enthalpy";
            parameter Modelica.Units.SI.SpecificEnthalpy h_HP_FWH_shell_outlet=544.52e3 "HP FWH Shell Outlet Enthalpy";
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false)),
              Documentation(revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
          end NominalData;
        end Data;

        package FinalPlantModel "Final Model with Coupling"
          model FinalPlantModel
            import FinalProject;
            Components.SteamGenerator steamGenerator(
              pPI1(k=-0.005, yInit=0.2),
              SG(L=4),
              pPI(k=0.05, Ti=5))
              annotation (Placement(transformation(extent={{-146,-36},{-102,26}})));
            Components.BalanceOfPlant_Component balanceOfPlant_Component
              annotation (Placement(transformation(extent={{-84,-20},{-2,20}})));
            Components.SimpleGenerator simpleGenerator(efficiency=1.0,
                w_nom=50*2*3.14)
              annotation (Placement(transformation(extent={{50,-18},{84,16}})));
            Modelica.Blocks.Sources.RealExpression ConstantPowerforSuperheatedSteam(y=
                  10e6)
              annotation (Placement(transformation(extent={{-178,0},{-164,10}})));
            Modelica.Blocks.Sources.RealExpression PowertoSG(y=140e6)
              annotation (Placement(transformation(extent={{-178,-16},{-164,-6}})));
            Modelica.Blocks.Sources.RealExpression realExpression2(y=0.5)
              annotation (Placement(transformation(extent={{-178,-34},{-164,-22}})));
            Modelica.Blocks.Sources.RealExpression realExpression3(y=3.3e6)
              annotation (Placement(transformation(extent={{-178,12},{-164,22}})));
            inner ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-170,64},{-150,84}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-90,-28})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-104,-58},{-76,-30}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-90,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-114,22},{-94,42}})));
          equation
            connect(balanceOfPlant_Component.ToGenerator, simpleGenerator.flange_a)
              annotation (Line(points={{-0.0578947,-1.05263},{-0.0578947,-1},{53.4,-1}},
                  color={0,0,0}));
            connect(ConstantPowerforSuperheatedSteam.y, steamGenerator.PowerSuperHeat)
              annotation (Line(points={{-163.3,5},{-163.3,3.68},{-151.657,3.68}}, color={
                    0,0,127}));
            connect(PowertoSG.y, steamGenerator.PowertoSG) annotation (Line(points={{-163.3,
                    -11},{-163.3,-11.2},{-151.657,-11.2}},        color={0,0,127}));
            connect(realExpression2.y, steamGenerator.SGLevelSetpoint) annotation (Line(
                  points={{-163.3,-28},{-157.479,-28},{-157.479,-27.94},{
                    -151.657,-27.94}},
                  color={0,0,127}));
            connect(multiDisplayVis_phTmdot8.y, multiData8.u)
              annotation (Line(points={{-90,-44},{-90,-28}}, color={0,0,0}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y)
              annotation (Line(points={{-104,32},{-104,46}}, color={0,0,0}));
            connect(steamGenerator.SteamOutlet, multiData2.port_a) annotation (Line(
                  points={{-120.543,25.69},{-110,25.69},{-110,32}}, color={0,0,255}));
            connect(multiData2.port_b, balanceOfPlant_Component.SteamInlet) annotation (
                Line(points={{-98,32},{-77.6342,32},{-77.6342,20.5263}}, color={0,0,255}));
            connect(steamGenerator.SGPressurelSetpoint, realExpression3.y) annotation (
                Line(points={{-152.286,19.8},{-152.286,17},{-163.3,17}}, color={0,0,127}));
            connect(multiData8.port_b, steamGenerator.FeedWaterInlet) annotation (Line(
                  points={{-96,-28},{-96,7.4},{-101.371,7.4}}, color={0,0,255}));
            connect(balanceOfPlant_Component.FeedWaterOutlet, multiData8.port_a)
              annotation (Line(points={{-77.9579,-20.6316},{-77.9579,-28},{-84,
                    -28}},
                  color={0,0,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-180,
                      -100},{140,100}})), Diagram(coordinateSystem(preserveAspectRatio=
                      false, extent={{-180,-100},{140,100}})));
          end FinalPlantModel;

          model FinalPlantModel_withMiguel
            import FinalProject;
            Components.SteamGenerator steamGenerator
              annotation (Placement(transformation(extent={{-78,-38},{-34,24}})));
            Components.BalanceOfPlant_Component balanceOfPlant_Component
              annotation (Placement(transformation(extent={{-16,-22},{66,18}})));
            Modelica.Blocks.Sources.RealExpression ConstantPowerforSuperheatedSteam(y=
                  10e6) annotation (Placement(transformation(extent={{-110,-2},{-96,8}})));
            Modelica.Blocks.Sources.RealExpression realExpression2(y=0.5)
              annotation (Placement(transformation(extent={{-110,-36},{-96,-24}})));
            Modelica.Blocks.Sources.RealExpression realExpression3(y=3.5e6)
              annotation (Placement(transformation(extent={{-110,10},{-96,20}})));
            inner ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-170,64},{-150,84}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-22,-30})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-34,-56},{-10,-32}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-48,30},{-24,54}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-46,20},{-26,40}})));
            Modelica.Blocks.Interfaces.RealInput ThermalPowerInput
              annotation (Placement(transformation(extent={{-170,-20},{-130,20}})));
            Modelica.Mechanics.Rotational.Interfaces.Flange_a ToGenerator1
              annotation (Placement(transformation(extent={{92,-12},{112,8}})));
          equation
            connect(ConstantPowerforSuperheatedSteam.y, steamGenerator.PowerSuperHeat)
              annotation (Line(points={{-95.3,3},{-95.3,1.68},{-83.6571,1.68}}, color={0,
                    0,127}));
            connect(realExpression2.y, steamGenerator.SGLevelSetpoint) annotation (Line(
                  points={{-95.3,-30},{-89.479,-30},{-89.479,-29.94},{-83.6571,
                    -29.94}},
                  color={0,0,127}));
            connect(multiDisplayVis_phTmdot8.y, multiData8.u)
              annotation (Line(points={{-22,-44},{-22,-30}}, color={0,0,0}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y)
              annotation (Line(points={{-36,30},{-36,42}}, color={0,0,0}));
            connect(steamGenerator.SteamOutlet, multiData2.port_a) annotation (Line(
                  points={{-52.5429,23.69},{-42,23.69},{-42,30}}, color={0,0,255}));
            connect(multiData2.port_b, balanceOfPlant_Component.SteamInlet) annotation (
                Line(points={{-30,30},{-9.63421,30},{-9.63421,18.5263}}, color={0,0,255}));
            connect(steamGenerator.SGPressurelSetpoint, realExpression3.y) annotation (
                Line(points={{-84.2857,17.8},{-84.2857,15},{-95.3,15}}, color={0,0,127}));
            connect(multiData8.port_b, steamGenerator.FeedWaterInlet) annotation (Line(
                  points={{-28,-30},{-28,5.4},{-33.3714,5.4}}, color={0,0,255}));
            connect(balanceOfPlant_Component.FeedWaterOutlet, multiData8.port_a)
              annotation (Line(points={{-9.9579,-22.6316},{-9.9579,-30},{-16,
                    -30}},                                                          color=
                   {0,0,255}));
            connect(ThermalPowerInput, steamGenerator.PowertoSG) annotation (Line(points={{-150,0},
                    {-116,0},{-116,-13.2},{-83.6571,-13.2}},           color={0,0,127}));
            connect(balanceOfPlant_Component.ToGenerator, ToGenerator1) annotation (Line(
                  points={{67.9421,-3.05263},{67.9421,-2},{102,-2}}, color={0,0,0}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-140,
                      -100},{100,100}})), Diagram(coordinateSystem(preserveAspectRatio=
                      false, extent={{-140,-100},{100,100}})));
          end FinalPlantModel_withMiguel;

          package PF_Data

            record Power_Flow
              extends Modelica.Icons.Record;

              replaceable record PowerFlow =
                  Power_Flow_Template constrainedby Power_Flow_Template
                annotation (choicesAllMatching);

              PowerFlow powerflow;

            end Power_Flow;

            record Power_Flow_Template
              extends Modelica.Icons.Record;

            end Power_Flow_Template;

            package Bus_Data

              partial record Bus_Template

                parameter OpenIPSL.Types.PerUnit V1 "(pu) B01"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.Angle A1 "B01"
                  annotation (Dialog(enable=false));

                parameter OpenIPSL.Types.PerUnit V2 "(pu) B02"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.Angle A2 "B02"
                  annotation (Dialog(enable=false));

                parameter OpenIPSL.Types.PerUnit V3 "(pu) B03"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.Angle A3 "B03"
                  annotation (Dialog(enable=false));

                parameter OpenIPSL.Types.PerUnit V4 "(pu) B04"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.Angle A4 "B04"
                  annotation (Dialog(enable=false));

                parameter OpenIPSL.Types.PerUnit V5 "(pu) B05"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.Angle A5 "B05"
                  annotation (Dialog(enable=false));

              end Bus_Template;

              record PF_Bus_00020
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0401244,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9969903,
                  A3=0.0000110,
                  V4=0.9984951,
                  A4=0.0000055,
                  V5=0.9984951,
                  A5=0.0000055);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00020;

              record PF_Bus_00022
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0441531,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9966586,
                  A3=0.0000118,
                  V4=0.9983293,
                  A4=0.0000059,
                  V5=0.9983293,
                  A5=0.0000059);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00022;

              record PF_Bus_00024
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0481854,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9963212,
                  A3=0.0000126,
                  V4=0.9981606,
                  A4=0.0000063,
                  V5=0.9981606,
                  A5=0.0000063);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00024;

              record PF_Bus_00026
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0522213,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9959781,
                  A3=0.0000133,
                  V4=0.9979891,
                  A4=0.0000066,
                  V5=0.9979891,
                  A5=0.0000066);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00026;

              record PF_Bus_00028
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0562609,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9956294,
                  A3=0.0000139,
                  V4=0.9978147,
                  A4=0.0000069,
                  V5=0.9978147,
                  A5=0.0000069);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00028;

              record PF_Bus_00030
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0603045,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9952749,
                  A3=0.0000145,
                  V4=0.9976375,
                  A4=0.0000072,
                  V5=0.9976375,
                  A5=0.0000072);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00030;

              record PF_Bus_00032
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0643522,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9949147,
                  A3=0.0000150,
                  V4=0.9974573,
                  A4=0.0000075,
                  V5=0.9974573,
                  A5=0.0000075);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00032;

              record PF_Bus_00034
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0684041,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9945487,
                  A3=0.0000155,
                  V4=0.9972743,
                  A4=0.0000077,
                  V5=0.9972743,
                  A5=0.0000077);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00034;

              record PF_Bus_00036
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0724604,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9941769,
                  A3=0.0000159,
                  V4=0.9970884,
                  A4=0.0000079,
                  V5=0.9970884,
                  A5=0.0000079);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00036;

              record PF_Bus_00038
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0765212,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9937992,
                  A3=0.0000163,
                  V4=0.9968996,
                  A4=0.0000081,
                  V5=0.9968996,
                  A5=0.0000081);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00038;

              record PF_Bus_00040
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0805866,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9934158,
                  A3=0.0000166,
                  V4=0.9967079,
                  A4=0.0000083,
                  V5=0.9967079,
                  A5=0.0000083);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00040;

              record PF_Bus_00042
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0846569,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9930264,
                  A3=0.0000168,
                  V4=0.9965132,
                  A4=0.0000084,
                  V5=0.9965132,
                  A5=0.0000084);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00042;

              record PF_Bus_00044
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0887321,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9926312,
                  A3=0.0000170,
                  V4=0.9963156,
                  A4=0.0000085,
                  V5=0.9963156,
                  A5=0.0000085);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00044;

              record PF_Bus_00046
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0928124,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9922300,
                  A3=0.0000172,
                  V4=0.9961150,
                  A4=0.0000086,
                  V5=0.9961150,
                  A5=0.0000086);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00046;

              record PF_Bus_00048
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.0968980,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9918228,
                  A3=0.0000173,
                  V4=0.9959114,
                  A4=0.0000086,
                  V5=0.9959114,
                  A5=0.0000086);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00048;

              record PF_Bus_00050
                extends Bus_Template(
                  V1=1.0000000,
                  A1=0.1009890,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9914097,
                  A3=0.0000173,
                  V4=0.9957048,
                  A4=0.0000086,
                  V5=0.9957048,
                  A5=0.0000086);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00050;
            end Bus_Data;

            package Loads_Data

              partial record Loads_Template

                parameter OpenIPSL.Types.ActivePower PL1 "load"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.ReactivePower QL1 "load"
                  annotation (Dialog(enable=false));

              end Loads_Template;

              record PF_Loads_00020
                extends Loads_Template(PL1=1e06*(20.0000000), QL1=1e06*(4.0000000));

                // Load: '3_1'

              end PF_Loads_00020;

              record PF_Loads_00022
                extends Loads_Template(PL1=1e06*(22.0000000), QL1=1e06*(4.4000000));

                // Load: '3_1'

              end PF_Loads_00022;

              record PF_Loads_00024
                extends Loads_Template(PL1=1e06*(24.0000000), QL1=1e06*(4.8000000));

                // Load: '3_1'

              end PF_Loads_00024;

              record PF_Loads_00026
                extends Loads_Template(PL1=1e06*(26.0000000), QL1=1e06*(5.2000000));

                // Load: '3_1'

              end PF_Loads_00026;

              record PF_Loads_00028
                extends Loads_Template(PL1=1e06*(28.0000000), QL1=1e06*(5.6000000));

                // Load: '3_1'

              end PF_Loads_00028;

              record PF_Loads_00030
                extends Loads_Template(PL1=1e06*(30.0000000), QL1=1e06*(6.0000000));

                // Load: '3_1'

              end PF_Loads_00030;

              record PF_Loads_00032
                extends Loads_Template(PL1=1e06*(32.0000000), QL1=1e06*(6.4000000));

                // Load: '3_1'

              end PF_Loads_00032;

              record PF_Loads_00034
                extends Loads_Template(PL1=1e06*(34.0000000), QL1=1e06*(6.8000000));

                // Load: '3_1'

              end PF_Loads_00034;

              record PF_Loads_00036
                extends Loads_Template(PL1=1e06*(36.0000000), QL1=1e06*(7.2000000));

                // Load: '3_1'

              end PF_Loads_00036;

              record PF_Loads_00038
                extends Loads_Template(PL1=1e06*(38.0000000), QL1=1e06*(7.6000000));

                // Load: '3_1'

              end PF_Loads_00038;

              record PF_Loads_00040
                extends Loads_Template(PL1=1e06*(40.0000000), QL1=1e06*(8.0000000));

                // Load: '3_1'

              end PF_Loads_00040;

              record PF_Loads_00042
                extends Loads_Template(PL1=1e06*(42.0000000), QL1=1e06*(8.4000000));

                // Load: '3_1'

              end PF_Loads_00042;

              record PF_Loads_00044
                extends Loads_Template(PL1=1e06*(44.0000000), QL1=1e06*(8.8000000));

                // Load: '3_1'

              end PF_Loads_00044;

              record PF_Loads_00046
                extends Loads_Template(PL1=1e06*(46.0000000), QL1=1e06*(9.2000000));

                // Load: '3_1'

              end PF_Loads_00046;

              record PF_Loads_00048
                extends Loads_Template(PL1=1e06*(48.0000000), QL1=1e06*(9.6000000));

                // Load: '3_1'

              end PF_Loads_00048;

              record PF_Loads_00050
                extends Loads_Template(PL1=1e06*(50.0000000), QL1=1e06*(10.0000000));

                // Load: '3_1'

              end PF_Loads_00050;
            end Loads_Data;

            package Trafos_Data

              record PF_Trafos_00020
                extends Trafos_Template;

              end PF_Trafos_00020;

              record PF_Trafos_00022
                extends Trafos_Template;

              end PF_Trafos_00022;

              record PF_Trafos_00024
                extends Trafos_Template;

              end PF_Trafos_00024;

              record PF_Trafos_00026
                extends Trafos_Template;

              end PF_Trafos_00026;

              record PF_Trafos_00028
                extends Trafos_Template;

              end PF_Trafos_00028;

              record PF_Trafos_00030
                extends Trafos_Template;

              end PF_Trafos_00030;

              record PF_Trafos_00032
                extends Trafos_Template;

              end PF_Trafos_00032;

              record PF_Trafos_00034
                extends Trafos_Template;

              end PF_Trafos_00034;

              record PF_Trafos_00036
                extends Trafos_Template;

              end PF_Trafos_00036;

              record PF_Trafos_00038
                extends Trafos_Template;

              end PF_Trafos_00038;

              record PF_Trafos_00040
                extends Trafos_Template;

              end PF_Trafos_00040;

              record PF_Trafos_00042
                extends Trafos_Template;

              end PF_Trafos_00042;

              record PF_Trafos_00044
                extends Trafos_Template;

              end PF_Trafos_00044;

              record PF_Trafos_00046
                extends Trafos_Template;

              end PF_Trafos_00046;

              record PF_Trafos_00048
                extends Trafos_Template;

              end PF_Trafos_00048;

              record PF_Trafos_00050
                extends Trafos_Template;

              end PF_Trafos_00050;

              partial record Trafos_Template

              end Trafos_Template;
            end Trafos_Data;

            package Machines_Data

              partial record Machines_Template

                parameter OpenIPSL.Types.ActivePower PG1 "generatorA"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.ReactivePower QG1 "generatorA"
                  annotation (Dialog(enable=false));

                parameter OpenIPSL.Types.ActivePower PG2 "generatorB"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.ReactivePower QG2 "generatorB"
                  annotation (Dialog(enable=false));

              end Machines_Template;

              record PF_Machines_00020
                extends Machines_Template(
                  PG1=1e06*(20.0000000),
                  QG1=1e06*(1.8058714),
                  PG2=1e06*(0.0040779),
                  QG2=1e06*(3.0097093));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00020;

              record PF_Machines_00022
                extends Machines_Template(
                  PG1=1e06*(22.0000000),
                  QG1=1e06*(2.0461260),
                  PG2=1e06*(0.0049377),
                  QG2=1e06*(3.3414123));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00022;

              record PF_Machines_00024
                extends Machines_Template(
                  PG1=1e06*(24.0000000),
                  QG1=1e06*(2.2973119),
                  PG2=1e06*(0.0058804),
                  QG2=1e06*(3.6787769));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00024;

              record PF_Machines_00026
                extends Machines_Template(
                  PG1=1e06*(26.0000000),
                  QG1=1e06*(2.5594531),
                  PG2=1e06*(0.0069064),
                  QG2=1e06*(4.0218236));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00026;

              record PF_Machines_00028
                extends Machines_Template(
                  PG1=1e06*(28.0000000),
                  QG1=1e06*(2.8325748),
                  PG2=1e06*(0.0080157),
                  QG2=1e06*(4.3705742));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00028;

              record PF_Machines_00030
                extends Machines_Template(
                  PG1=1e06*(30.0000000),
                  QG1=1e06*(3.1167032),
                  PG2=1e06*(0.0092088),
                  QG2=1e06*(4.7250506));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00030;

              record PF_Machines_00032
                extends Machines_Template(
                  PG1=1e06*(32.0000000),
                  QG1=1e06*(3.4118658),
                  PG2=1e06*(0.0104857),
                  QG2=1e06*(5.0852760));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00032;

              record PF_Machines_00034
                extends Machines_Template(
                  PG1=1e06*(34.0000000),
                  QG1=1e06*(3.7180908),
                  PG2=1e06*(0.0118468),
                  QG2=1e06*(5.4512741));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00034;

              record PF_Machines_00036
                extends Machines_Template(
                  PG1=1e06*(36.0000000),
                  QG1=1e06*(4.0354080),
                  PG2=1e06*(0.0132924),
                  QG2=1e06*(5.8230694));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00036;

              record PF_Machines_00038
                extends Machines_Template(
                  PG1=1e06*(38.0000000),
                  QG1=1e06*(4.3638479),
                  PG2=1e06*(0.0148227),
                  QG2=1e06*(6.2006871));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00038;

              record PF_Machines_00040
                extends Machines_Template(
                  PG1=1e06*(40.0000000),
                  QG1=1e06*(4.7034426),
                  PG2=1e06*(0.0164380),
                  QG2=1e06*(6.5841535));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00040;

              record PF_Machines_00042
                extends Machines_Template(
                  PG1=1e06*(42.0000000),
                  QG1=1e06*(5.0542251),
                  PG2=1e06*(0.0181386),
                  QG2=1e06*(6.9734952));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00042;

              record PF_Machines_00044
                extends Machines_Template(
                  PG1=1e06*(44.0000000),
                  QG1=1e06*(5.4162296),
                  PG2=1e06*(0.0199248),
                  QG2=1e06*(7.3687402));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00044;

              record PF_Machines_00046
                extends Machines_Template(
                  PG1=1e06*(46.0000000),
                  QG1=1e06*(5.7894915),
                  PG2=1e06*(0.0217970),
                  QG2=1e06*(7.7699170));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00046;

              record PF_Machines_00048
                extends Machines_Template(
                  PG1=1e06*(48.0000000),
                  QG1=1e06*(6.1740476),
                  PG2=1e06*(0.0237555),
                  QG2=1e06*(8.1770549));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00048;

              record PF_Machines_00050
                extends Machines_Template(
                  PG1=1e06*(50.0000000),
                  QG1=1e06*(6.5699358),
                  PG2=1e06*(0.0258006),
                  QG2=1e06*(8.5901842));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00050;
            end Machines_Data;

            record PF_00020
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00020 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00020 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00020 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00020 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00020;

            record PF_00022
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00022 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00022 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00022 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00022 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00022;

            record PF_00024
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00024 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00024 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00024 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00024 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00024;

            record PF_00026
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00026 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00026 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00026 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00026 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00026;

            record PF_00028
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00028 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00028 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00028 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00028 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00028;

            record PF_00030
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00030 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00030 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00030 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00030 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00030;

            record PF_00032
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00032 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00032 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00032 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00032 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00032;

            record PF_00034
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00034 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00034 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00034 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00034 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00034;

            record PF_00036
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00036 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00036 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00036 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00036 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00036;

            record PF_00038
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00038 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00038 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00038 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00038 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00038;

            record PF_00040
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00040 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00040 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00040 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00040 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00040;

            record PF_00042
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00042 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00042 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00042 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00042 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00042;

            record PF_00044
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00044 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00044 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00044 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00044 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00044;

            record PF_00046
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00046 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00046 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00046 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00046 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00046;

            record PF_00048
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00048 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00048 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00048 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00048 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00048;

            record PF_00050
              extends Power_Flow_Template;

              replaceable record Bus =
                  Bus_Data.PF_Bus_00050 constrainedby Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  Loads_Data.PF_Loads_00050 constrainedby
                Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  Machines_Data.PF_Machines_00050 constrainedby
                Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  Trafos_Data.PF_Trafos_00050 constrainedby
                Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00050;
          end PF_Data;

          model SteamB2_withoutprimemover "Network model with ThermalPower-based ST"
            import FinalProject;
            extends Modelica.Icons.Example;
            OpenIPSL.Electrical.Branches.PwLine pwLine(
              R=0.001,
              X=0.2,
              G=0,
              B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
            OpenIPSL.Electrical.Branches.PwLine pwLine3(
              R=0.0005,
              X=0.1,
              G=0,
              B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
            OpenIPSL.Electrical.Branches.PwLine pwLine4(
              R=0.0005,
              X=0.1,
              G=0,
              B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
            OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
              PQBRAK=0.7,
              d_t=0,
              d_P=0,
              t1=0,
              characteristic=2,
              P_0=pf.powerflow.loads.PL1,
              Q_0=pf.powerflow.loads.QL1,
              v_0=pf.powerflow.bus.V3,
              angle_0=pf.powerflow.bus.A3)
              annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
            OpenIPSL.Electrical.Events.PwFault pwFault(
              t1=42,
              t2=42.15,
              R=0,
              X=0) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={26,-60})));
            OpenIPSL.Electrical.Buses.Bus B01
              annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
            inner OpenIPSL.Electrical.SystemBase SysData(S_b=100000000,
                                                                      fn = 50)
              annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
            OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
              annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
            OpenIPSL.Electrical.Buses.Bus B02
              annotation (Placement(transformation(extent={{56,-10},{76,10}})));
            OpenIPSL.Electrical.Buses.Bus B05
              annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
            OpenIPSL.Electrical.Branches.PwLine pwLine1(
              R=0.0005,
              G=0,
              B=0,
              X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
            OpenIPSL.Electrical.Branches.PwLine pwLine2(
              R=0.0005,
              G=0,
              B=0,
              X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
            OpenIPSL.Electrical.Buses.Bus B04
              annotation (Placement(transformation(extent={{16,20},{36,40}})));
            FinalProject.BaseModels.GeneratingUnits.Generator_02 generatorB(
              M_b=100000000,
              P_0=pf.powerflow.machines.PG2,
              Q_0=pf.powerflow.machines.QG2,
              v_0=pf.powerflow.bus.V2,
              angle_0=pf.powerflow.bus.A2,
              displayPF=true) annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={88,0})));
            PF_Data.Power_Flow pf(redeclare record PowerFlow =
                  FinalProject.PrimeMovers.Steam.PlantB.FinalPlantModel.PF_Data.PF_00044)
              annotation (Placement(transformation(extent={{-82,34},{-62,54}})));
            OpenIPSL.Electrical.Events.Breaker breaker(
              t_o=10000,
              rc_enabled=true,
              t_rc=12000)
              annotation (Placement(transformation(extent={{-78,-10},{-58,10}})));
            OpenIPSL.Interfaces.PwPin s1
                               "Sending pin"
              annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
          equation
            connect(B01.p, pwLine.p)
              annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
            connect(pwLine.n, B03.p)
              annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
            connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                    -4,0},{-14,0}}, color={0,0,255}));
            connect(load.p, B03.p)
              annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
            connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                    {56,0},{66,0}}, color={0,0,255}));
            connect(B05.p, pwLine4.p)
              annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
            connect(B05.p, pwLine3.n)
              annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
            connect(pwFault.p, pwLine4.p)
              annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                      color={0,0,255}));
            connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                    0},{-14,0}}, color={0,0,255}));
            connect(pwLine1.n, B04.p)
              annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
            connect(pwLine2.p, B04.p)
              annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
            connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                    56,0},{66,0}}, color={0,0,255}));
            connect(generatorB.pwPin, B02.p)
              annotation (Line(points={{77,0},{66,0}}, color={0,0,255}));
            connect(breaker.r, B01.p)
              annotation (Line(points={{-58,0},{-44,0}}, color={0,0,255}));
            connect(breaker.s, s1)
              annotation (Line(points={{-78,0},{-100,0}}, color={0,0,255}));
            annotation (experiment(StopTime=20, __Dymola_Algorithm="Dassl"), Diagram(
                  graphics={Text(
                    extent={{-60,68},{58,56}},
                    textColor={0,0,0},
                    textString="Without Prime Mover",
                    textStyle={TextStyle.Bold})}));
          end SteamB2_withoutprimemover;

          model FinalPlantModel_ver0
            import FinalProject;
            Components.SteamGenerator steamGenerator(
              pPI1(k=-0.005, yInit=0.2),
              SG(L=4),
              pPI(k=0.05, Ti=5))
              annotation (Placement(transformation(extent={{-146,-36},{-102,26}})));
            Components.BalanceOfPlant_Component balanceOfPlant_Component
              annotation (Placement(transformation(extent={{-84,-20},{-2,20}})));
            Modelica.Blocks.Sources.RealExpression ConstantPowerforSuperheatedSteam(y=
                  10e6)
              annotation (Placement(transformation(extent={{-178,0},{-164,10}})));
            Modelica.Blocks.Sources.RealExpression PowertoSG(y=140e6)
              annotation (Placement(transformation(extent={{-178,-16},{-164,-6}})));
            Modelica.Blocks.Sources.RealExpression realExpression2(y=0.5)
              annotation (Placement(transformation(extent={{-178,-34},{-164,-22}})));
            Modelica.Blocks.Sources.RealExpression realExpression3(y=3.3e6)
              annotation (Placement(transformation(extent={{-178,12},{-164,22}})));
            inner ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-170,64},{-150,84}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-90,-28})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-104,-58},{-76,-30}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-90,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-114,22},{-94,42}})));
            Components.Generator_04 generator_04_1(M_b=55000000)
              annotation (Placement(transformation(extent={{28,-10},{48,10}})));
            SteamB2_withoutprimemover steamB2_withoutprimemover(
              pwFault(t1=7000, t2=7002),
              breaker(t_rc=5000),
              generatorB(M_b=55000000))
              annotation (Placement(transformation(extent={{70,-10},{90,10}})));
            Modelica.Blocks.Sources.Constant const(k=0)
              annotation (Placement(transformation(extent={{10,-54},{30,-34}})));
          equation
            connect(ConstantPowerforSuperheatedSteam.y, steamGenerator.PowerSuperHeat)
              annotation (Line(points={{-163.3,5},{-163.3,3.68},{-151.657,3.68}}, color={
                    0,0,127}));
            connect(PowertoSG.y, steamGenerator.PowertoSG) annotation (Line(points={{-163.3,
                    -11},{-163.3,-11.2},{-151.657,-11.2}},        color={0,0,127}));
            connect(realExpression2.y, steamGenerator.SGLevelSetpoint) annotation (Line(
                  points={{-163.3,-28},{-157.479,-28},{-157.479,-27.94},{
                    -151.657,-27.94}},
                  color={0,0,127}));
            connect(multiDisplayVis_phTmdot8.y, multiData8.u)
              annotation (Line(points={{-90,-44},{-90,-28}}, color={0,0,0}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y)
              annotation (Line(points={{-104,32},{-104,46}}, color={0,0,0}));
            connect(steamGenerator.SteamOutlet, multiData2.port_a) annotation (Line(
                  points={{-120.543,25.69},{-110,25.69},{-110,32}}, color={0,0,255}));
            connect(multiData2.port_b, balanceOfPlant_Component.SteamInlet) annotation (
                Line(points={{-98,32},{-77.6342,32},{-77.6342,20.5263}}, color={0,0,255}));
            connect(steamGenerator.SGPressurelSetpoint, realExpression3.y) annotation (
                Line(points={{-152.286,19.8},{-152.286,17},{-163.3,17}}, color={0,0,127}));
            connect(multiData8.port_b, steamGenerator.FeedWaterInlet) annotation (Line(
                  points={{-96,-28},{-96,7.4},{-101.371,7.4}}, color={0,0,255}));
            connect(balanceOfPlant_Component.FeedWaterOutlet, multiData8.port_a)
              annotation (Line(points={{-77.9579,-20.6316},{-77.9579,-28},{-84,
                    -28}},
                  color={0,0,255}));
            connect(generator_04_1.flange_a1, balanceOfPlant_Component.ToGenerator)
              annotation (Line(points={{28,0},{26,0},{26,-1.05263},{-0.0578947,
                    -1.05263}}, color={0,0,0}));
            connect(generator_04_1.pwPin, steamB2_withoutprimemover.s1)
              annotation (Line(points={{49,0},{70,0}}, color={0,0,255}));
            connect(const.y, generator_04_1.DeltaPM) annotation (Line(points={{31,-44},
                    {38,-44},{38,-10}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-180,
                      -100},{100,100}})), Diagram(coordinateSystem(preserveAspectRatio=
                      false, extent={{-180,-100},{100,100}})),
              experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
          end FinalPlantModel_ver0;

          model FinalPlantModel_ver1
            Components.SteamGenerator steamGenerator(
              pPI1(k=-0.005, yInit=0.2),
              SG(L=4),
              pPI(k=0.05, Ti=5))
              annotation (Placement(transformation(extent={{-146,-36},{-102,26}})));
            Components.BalanceOfPlant_Component balanceOfPlant_Component
              annotation (Placement(transformation(extent={{-84,-20},{-2,20}})));
            Modelica.Blocks.Sources.RealExpression ConstantPowerforSuperheatedSteam(y=
                  10e6)
              annotation (Placement(transformation(extent={{-178,0},{-164,10}})));
            Modelica.Blocks.Sources.RealExpression PowertoSG(y=140e6)
              annotation (Placement(transformation(extent={{-178,-16},{-164,-6}})));
            Modelica.Blocks.Sources.RealExpression realExpression2(y=0.5)
              annotation (Placement(transformation(extent={{-178,-34},{-164,-22}})));
            Modelica.Blocks.Sources.RealExpression realExpression3(y=3.3e6)
              annotation (Placement(transformation(extent={{-178,12},{-164,22}})));
            inner ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-170,64},{-150,84}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-90,-28})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-104,-58},{-76,-30}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-90,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-114,22},{-94,42}})));
            Components.Generator_04 generator_04_1(
              P_0=44000000,
              displayPF=true,
              M_b=55000000)
              annotation (Placement(transformation(extent={{28,-10},{48,10}})));
            SteamB2_withoutprimemover steamB2_withoutprimemover(
              pwFault(t1=7000, t2=7002),
              breaker(t_rc=5000),
              generatorB(M_b=55000000))
              annotation (Placement(transformation(extent={{70,-10},{90,10}})));
            Modelica.Blocks.Sources.Step step(
              height=1e6,
              offset=0,
              startTime=10000)
              annotation (Placement(transformation(extent={{6,-74},{26,-54}})));
          equation
            connect(ConstantPowerforSuperheatedSteam.y, steamGenerator.PowerSuperHeat)
              annotation (Line(points={{-163.3,5},{-163.3,3.68},{-151.657,3.68}}, color={
                    0,0,127}));
            connect(PowertoSG.y, steamGenerator.PowertoSG) annotation (Line(points={{-163.3,
                    -11},{-163.3,-11.2},{-151.657,-11.2}},        color={0,0,127}));
            connect(realExpression2.y, steamGenerator.SGLevelSetpoint) annotation (Line(
                  points={{-163.3,-28},{-157.479,-28},{-157.479,-27.94},{
                    -151.657,-27.94}},
                  color={0,0,127}));
            connect(multiDisplayVis_phTmdot8.y, multiData8.u)
              annotation (Line(points={{-90,-44},{-90,-28}}, color={0,0,0}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y)
              annotation (Line(points={{-104,32},{-104,46}}, color={0,0,0}));
            connect(steamGenerator.SteamOutlet, multiData2.port_a) annotation (Line(
                  points={{-120.543,25.69},{-110,25.69},{-110,32}}, color={0,0,255}));
            connect(multiData2.port_b, balanceOfPlant_Component.SteamInlet) annotation (
                Line(points={{-98,32},{-77.6342,32},{-77.6342,20.5263}}, color={0,0,255}));
            connect(steamGenerator.SGPressurelSetpoint, realExpression3.y) annotation (
                Line(points={{-152.286,19.8},{-152.286,17},{-163.3,17}}, color={0,0,127}));
            connect(multiData8.port_b, steamGenerator.FeedWaterInlet) annotation (Line(
                  points={{-96,-28},{-96,7.4},{-101.371,7.4}}, color={0,0,255}));
            connect(balanceOfPlant_Component.FeedWaterOutlet, multiData8.port_a)
              annotation (Line(points={{-77.9579,-20.6316},{-77.9579,-28},{-84,
                    -28}},
                  color={0,0,255}));
            connect(generator_04_1.flange_a1, balanceOfPlant_Component.ToGenerator)
              annotation (Line(points={{28,0},{26,0},{26,-1.05263},{-0.0578947,
                    -1.05263}}, color={0,0,0}));
            connect(generator_04_1.pwPin, steamB2_withoutprimemover.s1)
              annotation (Line(points={{49,0},{70,0}}, color={0,0,255}));
            connect(step.y, generator_04_1.DeltaPM) annotation (Line(points={{27,-64},
                    {38,-64},{38,-10}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-180,
                      -100},{100,100}})), Diagram(coordinateSystem(preserveAspectRatio=
                      false, extent={{-180,-100},{100,100}})),
              experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
          end FinalPlantModel_ver1;

          model FinalPlantModel_ver2_SteamControl
            import FinalProject;
            Components.BalanceOfPlant_Component balanceOfPlant_Component
              annotation (Placement(transformation(extent={{-84,-20},{-2,20}})));
            Modelica.Blocks.Sources.RealExpression ConstantPowerforSuperheatedSteam(y=
                  10e6)
              annotation (Placement(transformation(extent={{-178,0},{-164,10}})));
            Modelica.Blocks.Sources.RealExpression PowertoSG(y=140e6)
              annotation (Placement(transformation(extent={{-178,-16},{-164,-6}})));
            Modelica.Blocks.Sources.RealExpression realExpression2(y=0.5)
              annotation (Placement(transformation(extent={{-178,-34},{-164,-22}})));
            inner ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-170,64},{-150,84}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-90,-28})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-104,-58},{-76,-30}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-90,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-114,22},{-94,42}})));
            Components.Generator_04 generator_04_1(
              displayPF=true,
              M_b=55000000,
              pU_PID(Kp=-0.01, CSmax=1),
              powerSensor1(k=1))
              annotation (Placement(transformation(extent={{28,-10},{48,10}})));
            SteamB2_withoutprimemover steamB2_withoutprimemover(
              pwFault(t1=7000, t2=7002),
              breaker(t_rc=5000),
              generatorB(M_b=55000000))
              annotation (Placement(transformation(extent={{70,-10},{90,10}})));
            Modelica.Blocks.Sources.Step step(
              height=-1e6,
              offset=0,
              startTime=6000)
              annotation (Placement(transformation(extent={{6,-74},{26,-54}})));
            Components.SteamGeneratorWithControl steamGeneratorWithControl
              annotation (Placement(transformation(extent={{-146,-36},{-108,24}})));
          equation
            connect(multiDisplayVis_phTmdot8.y, multiData8.u)
              annotation (Line(points={{-90,-44},{-90,-28}}, color={0,0,0}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y)
              annotation (Line(points={{-104,32},{-104,46}}, color={0,0,0}));
            connect(multiData2.port_b, balanceOfPlant_Component.SteamInlet) annotation (
                Line(points={{-98,32},{-77.6342,32},{-77.6342,20.5263}}, color={0,0,255}));
            connect(balanceOfPlant_Component.FeedWaterOutlet, multiData8.port_a)
              annotation (Line(points={{-77.9579,-20.6316},{-77.9579,-28},{-84,
                    -28}},
                  color={0,0,255}));
            connect(generator_04_1.flange_a1, balanceOfPlant_Component.ToGenerator)
              annotation (Line(points={{28,0},{26,0},{26,-1.05263},{-0.0578947,
                    -1.05263}}, color={0,0,0}));
            connect(generator_04_1.pwPin, steamB2_withoutprimemover.s1)
              annotation (Line(points={{49,0},{70,0}}, color={0,0,255}));
            connect(step.y, generator_04_1.DeltaPM) annotation (Line(points={{27,-64},
                    {38,-64},{38,-10}}, color={0,0,127}));
            connect(multiData8.port_b, steamGeneratorWithControl.FeedWaterInlet)
              annotation (Line(points={{-96,-28},{-96,6},{-107.457,6}}, color={0,0,
                    255}));
            connect(generator_04_1.CS1, steamGeneratorWithControl.GovernorValveArea)
              annotation (Line(points={{27,-4.6},{8,-4.6},{8,38},{-166,38},{
                    -166,18},{-151.429,18}},
                                    color={0,0,127}));
            connect(ConstantPowerforSuperheatedSteam.y, steamGeneratorWithControl.PowerSuperHeat)
              annotation (Line(points={{-163.3,5},{-163.3,2.4},{-150.886,2.4}}, color=
                   {0,0,127}));
            connect(PowertoSG.y, steamGeneratorWithControl.PowertoSG) annotation (
                Line(points={{-163.3,-11},{-163.3,-12},{-150.886,-12}}, color={0,0,
                    127}));
            connect(realExpression2.y, steamGeneratorWithControl.SGLevelSetpoint)
              annotation (Line(points={{-163.3,-28},{-157.093,-28},{-157.093,
                    -28.2},{-150.886,-28.2}},
                                      color={0,0,127}));
            connect(multiData2.port_a, steamGeneratorWithControl.SteamOutlet)
              annotation (Line(points={{-110,32},{-124.014,32},{-124.014,23.7}},
                  color={0,0,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-180,
                      -100},{100,100}})), Diagram(coordinateSystem(preserveAspectRatio=
                      false, extent={{-180,-100},{100,100}})),
              experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
          end FinalPlantModel_ver2_SteamControl;

          model FinalPlantModel_withSteamFLowControl
            import FinalProject;
            Modelica.Blocks.Sources.RealExpression ConstantPowerforSuperheatedSteam(y=
                  10e6)
              annotation (Placement(transformation(extent={{-186,-2},{-172,8}})));
            Modelica.Blocks.Sources.RealExpression PowertoSG(y=140e6)
              annotation (Placement(transformation(extent={{-184,-16},{-170,-6}})));
            Modelica.Blocks.Sources.RealExpression realExpression2(y=0.5)
              annotation (Placement(transformation(extent={{-186,-34},{-172,-22}})));
            inner ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-170,64},{-150,84}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-90,-28})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-104,-58},{-76,-30}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-90,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-114,22},{-94,42}})));
            Components.Generator_04 generator_04_1(
              P_0=44000000,
              displayPF=true,
              M_b=55000000,
              pU_PID(CSmin=63, CSmax=70))
              annotation (Placement(transformation(extent={{30,-10},{50,10}})));
            SteamB2_withoutprimemover steamB2_withoutprimemover(
              pwFault(t1=7000, t2=7002),
              breaker(t_rc=5000),
              generatorB(M_b=55000000))
              annotation (Placement(transformation(extent={{70,-10},{90,10}})));
            Modelica.Blocks.Sources.Step step(
              height=1e6,
              offset=0,
              startTime=10000)
              annotation (Placement(transformation(extent={{6,-74},{26,-54}})));
            Components.BalanceOfPlant_Component_with_steamFlowControl balanceOfPlant_Component_with_steamByPass(pPI(
                k=0.005,
                Ti=1,
                yInit=1.0), RequiredMassFlowRate(k=1, T=1))
              annotation (Placement(transformation(extent={{-70,-20},{6,18}})));
            Components.SteamGeneratorwithSteamControl steamGeneratorwithSteamControl
              annotation (Placement(transformation(extent={{-152,-32},{-114,20}})));
          equation
            connect(multiDisplayVis_phTmdot8.y, multiData8.u)
              annotation (Line(points={{-90,-44},{-90,-28}}, color={0,0,0}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y)
              annotation (Line(points={{-104,32},{-104,46}}, color={0,0,0}));
            connect(generator_04_1.pwPin, steamB2_withoutprimemover.s1)
              annotation (Line(points={{51,0},{70,0}}, color={0,0,255}));
            connect(step.y, generator_04_1.DeltaPM) annotation (Line(points={{27,-64},
                    {40,-64},{40,-10}}, color={0,0,127}));
            connect(balanceOfPlant_Component_with_steamByPass.ToGenerator,
              generator_04_1.flange_a1)
              annotation (Line(points={{7.8,-2},{7.8,0},{30,0}}, color={0,0,0}));
            connect(multiData8.port_a, balanceOfPlant_Component_with_steamByPass.FeedWaterOutlet)
              annotation (Line(points={{-84,-28},{-64.4,-28},{-64.4,-20.6}}, color={0,
                    0,255}));
            connect(multiData2.port_b, balanceOfPlant_Component_with_steamByPass.SteamInlet)
              annotation (Line(points={{-98,32},{-64.1,32},{-64.1,18.5}}, color={0,0,
                    255}));
            connect(generator_04_1.CS1, balanceOfPlant_Component_with_steamByPass.u1)
              annotation (Line(points={{29,-4.6},{18,-4.6},{18,36},{-50.2,36},{-50.2,
                    19.8}}, color={0,0,127}));
            connect(steamGeneratorwithSteamControl.SteamOutlet, multiData2.port_a)
              annotation (Line(points={{-130.014,20.78},{-130.014,32},{-110,32}},
                  color={0,0,255}));
            connect(steamGeneratorwithSteamControl.FeedWaterInlet, multiData8.port_b)
              annotation (Line(points={{-113.457,4.4},{-96,4.4},{-96,-28}}, color={0,
                    0,255}));
            connect(PowertoSG.y, steamGeneratorwithSteamControl.PowertoSG)
              annotation (Line(points={{-169.3,-11},{-169.3,-11.2},{-156.886,
                    -11.2}},
                  color={0,0,127}));
            connect(ConstantPowerforSuperheatedSteam.y,
              steamGeneratorwithSteamControl.PowerSuperHeat) annotation (Line(points={{-171.3,
                    3},{-171.3,1.28},{-156.886,1.28}},          color={0,0,127}));
            connect(realExpression2.y, steamGeneratorwithSteamControl.SGLevelSetpoint)
              annotation (Line(points={{-171.3,-28},{-171.3,-25.24},{-156.886,
                    -25.24}},
                  color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-180,
                      -100},{100,100}})), Diagram(coordinateSystem(preserveAspectRatio=
                      false, extent={{-180,-100},{100,100}})),
              experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
          end FinalPlantModel_withSteamFLowControl;

          model FinalPlantModel_withSteamByPass
            import FinalProject;
            Modelica.Blocks.Sources.RealExpression ConstantPowerforSuperheatedSteam(y=
                  10e6)
              annotation (Placement(transformation(extent={{-178,0},{-164,10}})));
            Modelica.Blocks.Sources.RealExpression PowertoSG(y=140e6)
              annotation (Placement(transformation(extent={{-178,-16},{-164,-6}})));
            Modelica.Blocks.Sources.RealExpression realExpression2(y=0.5)
              annotation (Placement(transformation(extent={{-178,-34},{-164,-22}})));
            inner ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-170,64},{-150,84}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-90,-28})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-104,-58},{-76,-30}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-90,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-114,22},{-94,42}})));
            Components.Generator_04 generator_04_1(
              P_0=pf.powerflow.machines.PG1,
              Q_0=pf.powerflow.machines.QG1,
              v_0=pf.powerflow.bus.V1,
              angle_0=pf.powerflow.bus.A1,
              displayPF=true,
              M_b=55000000,
              pU_PID(CSmin=63, CSmax=70))
              annotation (Placement(transformation(extent={{30,-10},{50,10}})));
            SteamB2_withoutprimemover steamB2_withoutprimemover(
              pwFault(t1=7000, t2=7002),
              breaker(t_rc=100000),
              generatorB(M_b=55000000))
              annotation (Placement(transformation(extent={{70,-10},{90,10}})));
            Modelica.Blocks.Sources.Step step(
              height=1e6,
              offset=0,
              startTime=6000)
              annotation (Placement(transformation(extent={{6,-74},{26,-54}})));
            Components.SteamGeneratorwithSteamFeedControl steamGeneratorwithDump
              annotation (Placement(transformation(extent={{-142,-38},{-106,18}})));
            Components.BalanceOfPlant_Component_with_SteamDump balanceOfPlant_Component_with_SteamDump
              annotation (Placement(transformation(extent={{-62,-18},{14,20}})));
            PF_Data.Power_Flow pf(redeclare record PowerFlow =
                  FinalProject.PrimeMovers.Steam.PlantB.FinalPlantModel.PF_Data.PF_00044)
              annotation (Placement(transformation(extent={{-70,64},{-50,84}})));
          equation
            connect(multiDisplayVis_phTmdot8.y, multiData8.u)
              annotation (Line(points={{-90,-44},{-90,-28}}, color={0,0,0}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y)
              annotation (Line(points={{-104,32},{-104,46}}, color={0,0,0}));
            connect(generator_04_1.pwPin, steamB2_withoutprimemover.s1)
              annotation (Line(points={{51,0},{70,0}}, color={0,0,255}));
            connect(step.y, generator_04_1.DeltaPM) annotation (Line(points={{27,-64},
                    {40,-64},{40,-10}}, color={0,0,127}));
            connect(multiData8.port_b, steamGeneratorwithDump.FeedWaterInlet)
              annotation (Line(points={{-96,-28},{-105.486,-28},{-105.486,1.2}},
                  color={0,0,255}));
            connect(multiData2.port_a, steamGeneratorwithDump.SteamOutlet)
              annotation (Line(points={{-110,32},{-121.171,32},{-121.171,18.84}},
                  color={0,0,255}));
            connect(ConstantPowerforSuperheatedSteam.y, steamGeneratorwithDump.PowerSuperHeat)
              annotation (Line(points={{-163.3,5},{-156,5},{-156,-2.16},{
                    -146.629,-2.16}},
                             color={0,0,127}));
            connect(PowertoSG.y, steamGeneratorwithDump.PowertoSG) annotation (Line(
                  points={{-163.3,-11},{-156,-11},{-156,-15.6},{-146.629,-15.6}},
                  color={0,0,127}));
            connect(realExpression2.y, steamGeneratorwithDump.SGLevelSetpoint)
              annotation (Line(points={{-163.3,-28},{-163.3,-30.72},{-146.629,
                    -30.72}},
                  color={0,0,127}));
            connect(balanceOfPlant_Component_with_SteamDump.ToGenerator,
              generator_04_1.flange_a1)
              annotation (Line(points={{15.8,0},{30,0}}, color={0,0,0}));
            connect(balanceOfPlant_Component_with_SteamDump.SteamInlet, multiData2.port_b)
              annotation (Line(points={{-56.1,20.5},{-56.1,32},{-98,32}}, color={0,0,
                    255}));
            connect(balanceOfPlant_Component_with_SteamDump.FeedWaterOutlet,
              multiData8.port_a) annotation (Line(points={{-56.4,-18.6},{-56.4,-28},{
                    -84,-28}}, color={0,0,255}));
            connect(steamGeneratorwithDump.SteamDumpToCondenser,
              balanceOfPlant_Component_with_SteamDump.ToCondenser) annotation (Line(
                  points={{-105.486,15.2},{-105.486,26},{-2.2,26},{-2.2,20}}, color={
                    0,0,255}));
            connect(generator_04_1.CS1, balanceOfPlant_Component_with_SteamDump.u1)
              annotation (Line(points={{29,-4.6},{24,-4.6},{24,32},{-42.2,32},{-42.2,
                    21.8}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-180,
                      -100},{100,100}})), Diagram(coordinateSystem(preserveAspectRatio=
                      false, extent={{-180,-100},{100,100}})),
              experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
          end FinalPlantModel_withSteamByPass;

          model FinalPlantModel_withSteamByPass_test
            import FinalProject;
            Modelica.Blocks.Sources.RealExpression ConstantPowerforSuperheatedSteam(y=
                  10e6)
              annotation (Placement(transformation(extent={{-178,0},{-164,10}})));
            Modelica.Blocks.Sources.RealExpression PowertoSG(y=140e6)
              annotation (Placement(transformation(extent={{-178,-16},{-164,-6}})));
            Modelica.Blocks.Sources.RealExpression realExpression2(y=0.5)
              annotation (Placement(transformation(extent={{-178,-34},{-164,-22}})));
            inner ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{-170,64},{-150,84}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData8
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-90,-28})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-104,-58},{-76,-30}})));
            ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
              massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
              TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
              PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
              precision_p=2,
              precision_h=1,
              precision_T=1,
              precision_mdot=1,
              displayUnits=true)
              annotation (Placement(transformation(extent={{-118,32},{-90,60}})));
            ThermalPower.TwoPhase.Sensors.MultiData multiData2
              annotation (Placement(transformation(extent={{-114,22},{-94,42}})));
            Components.Generator_04 generator_04_1(
              displayPF=true,
              M_b=55000000,
              pU_PID(CSmin=63, CSmax=70),
              machinePars(M_b=55))
              annotation (Placement(transformation(extent={{52,-10},{72,10}})));
            Modelica.Blocks.Sources.Step step(
              height=1e6,
              offset=0,
              startTime=6000)
              annotation (Placement(transformation(extent={{6,-74},{26,-54}})));
            Components.SteamGeneratorwithSteamFeedControl
              steamGeneratorwithDump
              annotation (Placement(transformation(extent={{-142,-38},{-106,18}})));
            Components.BalanceOfPlant_Component_with_SteamDump
              balanceOfPlant_Component_with_SteamDump
              annotation (Placement(transformation(extent={{-62,-18},{14,20}})));
            FinalPlantModel.SteamB2_withoutprimemover_test
              steamB2_withoutprimemover_test1_1(breaker(t_rc=10))
              annotation (Placement(transformation(extent={{86,-10},{106,10}})));
          equation
            connect(multiDisplayVis_phTmdot8.y, multiData8.u)
              annotation (Line(points={{-90,-44},{-90,-28}}, color={0,0,0}));
            connect(multiData2.u, multiDisplayVis_phTmdot2.y)
              annotation (Line(points={{-104,32},{-104,46}}, color={0,0,0}));
            connect(step.y, generator_04_1.DeltaPM)
              annotation (Line(points={{27,-64},{62,-64},{62,-10}}, color={0,0,127}));
            connect(multiData8.port_b, steamGeneratorwithDump.FeedWaterInlet) annotation (
               Line(points={{-96,-28},{-105.486,-28},{-105.486,1.2}}, color={0,0,255}));
            connect(multiData2.port_a, steamGeneratorwithDump.SteamOutlet) annotation (
                Line(points={{-110,32},{-121.171,32},{-121.171,18.84}}, color={0,0,255}));
            connect(ConstantPowerforSuperheatedSteam.y, steamGeneratorwithDump.PowerSuperHeat)
              annotation (Line(points={{-163.3,5},{-156,5},{-156,-2.16},{
                    -146.629,-2.16}},
                  color={0,0,127}));
            connect(PowertoSG.y, steamGeneratorwithDump.PowertoSG) annotation (Line(
                  points={{-163.3,-11},{-156,-11},{-156,-15.6},{-146.629,-15.6}}, color={
                    0,0,127}));
            connect(realExpression2.y, steamGeneratorwithDump.SGLevelSetpoint)
              annotation (Line(points={{-163.3,-28},{-163.3,-30.72},{-146.629,
                    -30.72}},
                  color={0,0,127}));
            connect(balanceOfPlant_Component_with_SteamDump.ToGenerator, generator_04_1.flange_a1)
              annotation (Line(points={{15.8,-8.88178e-16},{33.9,-8.88178e-16},{
                    33.9,0},{52,0}},                     color={0,0,0}));
            connect(balanceOfPlant_Component_with_SteamDump.SteamInlet, multiData2.port_b)
              annotation (Line(points={{-56.1,20.5},{-56.1,32},{-98,32}}, color={0,0,255}));
            connect(balanceOfPlant_Component_with_SteamDump.FeedWaterOutlet, multiData8.port_a)
              annotation (Line(points={{-56.4,-18.6},{-56.4,-28},{-84,-28}}, color={0,0,
                    255}));
            connect(steamGeneratorwithDump.SteamDumpToCondenser,
              balanceOfPlant_Component_with_SteamDump.ToCondenser) annotation (Line(
                  points={{-105.486,15.2},{-105.486,26},{-2.2,26},{-2.2,20}}, color={0,0,
                    255}));
            connect(generator_04_1.CS1, balanceOfPlant_Component_with_SteamDump.u1)
              annotation (Line(points={{51,-4.6},{50,-4.6},{50,30},{-42.2,30},{
                    -42.2,21.8}}, color={0,0,127}));
            connect(steamB2_withoutprimemover_test1_1.s1, generator_04_1.pwPin)
              annotation (Line(points={{86,0},{73,0}}, color={0,0,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-180,
                      -100},{100,100}})), Diagram(coordinateSystem(preserveAspectRatio=
                      false, extent={{-180,-100},{100,100}})),
              experiment(StopTime=100, __Dymola_Algorithm="Dassl"));
          end FinalPlantModel_withSteamByPass_test;
        end FinalPlantModel;

        model SteamTurbineB1
          extends Icons.SteamTurbineIcon;

          Modelica.Blocks.Sources.RealExpression ConstantPowerforSuperheatedSteam(y=
                10e6)
            annotation (Placement(transformation(extent={{-138,0},{-124,10}})));
          Modelica.Blocks.Sources.RealExpression PowertoSG(y=140e6)
            annotation (Placement(transformation(extent={{-136,-14},{-122,-4}})));
          Modelica.Blocks.Sources.RealExpression realExpression2(y=0.5)
            annotation (Placement(transformation(extent={{-138,-32},{-124,-20}})));
          inner ThermalPower.System_TPL system_TPL
            annotation (Placement(transformation(extent={{-170,64},{-150,84}})));
          ThermalPower.TwoPhase.Sensors.MultiData multiData8
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-42,-26})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot8(
            massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
            TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
            PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
            precision_p=2,
            precision_h=1,
            precision_T=1,
            precision_mdot=1,
            displayUnits=true)
            annotation (Placement(transformation(extent={{-56,-56},{-28,-28}})));
          ThermalPower.Visualizers.MultiDisplayVis_phTmdot multiDisplayVis_phTmdot2(
            massFlowType=Modelon.ThermoFluid.Choices.MassFlowType.kg_per_s,
            TemperatureUnit=Modelon.ThermoFluid.Choices.RealTemperatureUnit.degC,
            PressureUnit=Modelon.ThermoFluid.Choices.RealPressureUnit.MPa,
            precision_p=2,
            precision_h=1,
            precision_T=1,
            precision_mdot=1,
            displayUnits=true)
            annotation (Placement(transformation(extent={{-70,34},{-42,62}})));
          ThermalPower.TwoPhase.Sensors.MultiData multiData2
            annotation (Placement(transformation(extent={{-66,24},{-46,44}})));
          Components.BalanceOfPlant_Component_with_steamFlowControl balanceOfPlant_Component_with_steamByPass(pPI(
              k=0.005,
              Ti=1,
              yInit=1.0), RequiredMassFlowRate(k=1, T=1))
            annotation (Placement(transformation(extent={{-22,-18},{54,20}})));
          Components.SteamGeneratorwithSteamControl steamGeneratorwithSteamControl
            annotation (Placement(transformation(extent={{-104,-30},{-66,22}})));
          Modelica.Mechanics.Rotational.Interfaces.Flange_b primeMoverFlange
            annotation (Placement(transformation(extent={{90,-10},{110,10}})));
          Modelica.Blocks.Interfaces.RealInput u "Connector of Real input signal"
            annotation (Placement(transformation(extent={{-200,-20},{-160,20}}),
            iconTransformation(extent={{-108,-10},{-88,10}})));
        equation
          connect(multiDisplayVis_phTmdot8.y, multiData8.u)
            annotation (Line(points={{-42,-42},{-42,-26}}, color={0,0,0}));
          connect(multiData2.u, multiDisplayVis_phTmdot2.y)
            annotation (Line(points={{-56,34},{-56,48}},   color={0,0,0}));
          connect(multiData8.port_a, balanceOfPlant_Component_with_steamByPass.FeedWaterOutlet)
            annotation (Line(points={{-36,-26},{-16.4,-26},{-16.4,-18.6}}, color={0,
                  0,255}));
          connect(multiData2.port_b, balanceOfPlant_Component_with_steamByPass.SteamInlet)
            annotation (Line(points={{-50,34},{-16.1,34},{-16.1,20.5}}, color={0,0,
                  255}));
          connect(steamGeneratorwithSteamControl.SteamOutlet, multiData2.port_a)
            annotation (Line(points={{-82.0143,22.78},{-82.0143,34},{-62,34}},
                color={0,0,255}));
          connect(steamGeneratorwithSteamControl.FeedWaterInlet, multiData8.port_b)
            annotation (Line(points={{-65.4571,6.4},{-48,6.4},{-48,-26}}, color={0,
                  0,255}));
          connect(PowertoSG.y, steamGeneratorwithSteamControl.PowertoSG)
            annotation (Line(points={{-121.3,-9},{-121.3,-9.2},{-108.886,-9.2}},
                color={0,0,127}));
          connect(ConstantPowerforSuperheatedSteam.y,
            steamGeneratorwithSteamControl.PowerSuperHeat) annotation (Line(points={{-123.3,
                  5},{-123.3,3.28},{-108.886,3.28}},          color={0,0,127}));
          connect(realExpression2.y, steamGeneratorwithSteamControl.SGLevelSetpoint)
            annotation (Line(points={{-123.3,-26},{-123.3,-23.24},{-108.886,
                  -23.24}},
                color={0,0,127}));
          connect(balanceOfPlant_Component_with_steamByPass.ToGenerator,
            primeMoverFlange) annotation (Line(points={{54,0},{100,0}}, color={0,0,0}));
          connect(balanceOfPlant_Component_with_steamByPass.u1, u) annotation (Line(
                points={{-2.2,21.8},{-2.2,66},{-144,66},{-144,0},{-180,0}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}})), Diagram(coordinateSystem(preserveAspectRatio=
                    false, extent={{-180,-100},{100,100}})),
            experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
        end SteamTurbineB1;

        model Plant
          import ThermoPower;
          replaceable package FlueGas = ThermoPower.Media.FlueGas constrainedby
            Modelica.Media.Interfaces.PartialMedium "Flue gas model";
          replaceable package Water = ThermoPower.Water.StandardWater
            constrainedby Modelica.Media.Interfaces.PartialPureSubstance
            "Fluid model";
          Modelica.Blocks.Continuous.FirstOrder powerSensor(
            k=1,
            T=1,
            y_start=56.8e6,
            initType=Modelica.Blocks.Types.Init.SteadyState) annotation (Placement(
                transformation(extent={{24,30},{44,50}},    rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput generatedPower annotation (
              Placement(transformation(extent={{90,-10},{110,10}},  rotation=0),
                iconTransformation(extent={{92,-10},{112,10}})));
          Modelica.Blocks.Interfaces.RealInput steamFlowRate annotation (
              Placement(transformation(extent={{-110,-10},{-90,10}}, rotation=0),
                iconTransformation(extent={{-110,-10},{-90,10}})));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
            annotation (Placement(transformation(extent={{-8,14},{20,-14}},
                  rotation=0)));
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
              w_fixed=157, phi(start=0, fixed=true))
            annotation (Placement(transformation(extent={{52,-10},{32,10}})));
          SteamTurbineB1 steamTurbineB1_1
            annotation (Placement(transformation(extent={{-48,-14},{-18,14}})));
        equation
          connect(generatedPower, powerSensor.y)
            annotation (Line(points={{100,0},{60,0},{60,40},{45,40}},
                                                           color={0,0,127}));

          connect(constantSpeed.flange, powerSensor1.flange_b)
            annotation (Line(points={{32,0},{20,-1.77636e-15}},
                                                         color={0,0,0}));
          connect(powerSensor1.power, powerSensor.u) annotation (Line(points={{
                  -5.2,15.4},{-5.2,40},{22,40}}, color={0,0,127}));
          connect(powerSensor1.flange_a, steamTurbineB1_1.primeMoverFlange)
            annotation (Line(points={{-8,-1.77636e-15},{-18,1.77636e-15}},
                color={0,0,0}));
          connect(steamFlowRate, steamTurbineB1_1.u) annotation (Line(points={{
                  -100,0},{-47.7,1.77636e-15}}, color={0,0,127}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1)),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1), graphics={Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-88,84},{100,-96}},
                  lineColor={0,0,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
This is a simple model of a steam plant.
</html>"));
        end Plant;
      end PlantB;

      package PlantC
        package Turbo_Machinery_Modeling "Developed by Junyung Kim"
          package Interface
            partial model ThermoPower_BasicInterface_1
              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;

              parameter Modelica.Units.SI.Pressure nomi_source_p           "Nominal pressure in SG outlet";
              parameter Modelica.Units.SI.SpecificEnthalpy nomi_source_h   "Nominal specificEnthalpy in SG outlet";

              parameter Modelica.Units.SI.Pressure nomi_sink_p           "Nominal pressure in SG inlet";
              parameter Modelica.Units.SI.SpecificEnthalpy nomi_sink_h   "Nominal specificEnthalpy in SG inlet";

              ThermoPower.Water.SourcePressure sourcePressure(
                redeclare package Medium = Medium,
                p0=nomi_source_p,
                h=nomi_source_h,
                allowFlowReversal=false)
                annotation (Placement(transformation(extent={{-150,46},{-130,66}})));
              ThermoPower.Water.SinkPressure sinkPressure(
                redeclare package Medium = Medium,
                p0=nomi_sink_p,
                h=nomi_sink_h)
                annotation (Placement(transformation(extent={{-130,-70},{-150,-50}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-150,-10},{-130,10}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b
                annotation (Placement(transformation(extent={{130,-10},{150,10}})));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-140,-100},
                        {140,100}})), Diagram(coordinateSystem(preserveAspectRatio=false,
                      extent={{-140,-100},{140,100}})));
            end ThermoPower_BasicInterface_1;

            partial model ThermoPower_BasicInterface_2
              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;

              parameter Modelica.Units.SI.Pressure nomi_source_p           "Nominal pressure in SG outlet";
              parameter Modelica.Units.SI.SpecificEnthalpy nomi_source_h   "Nominal specificEnthalpy in SG outlet";

              parameter Modelica.Units.SI.Pressure nomi_sink_p           "Nominal pressure in SG inlet";
              parameter Modelica.Units.SI.SpecificEnthalpy nomi_sink_h   "Nominal specificEnthalpy in SG inlet";

              ThermoPower.Water.SourcePressure sourcePressure(
                redeclare package Medium = Medium,
                p0=nomi_source_p,
                h=nomi_source_h,
                allowFlowReversal=false)
                annotation (Placement(transformation(extent={{-150,46},{-130,66}})));
              ThermoPower.Water.SinkPressure sinkPressure(
                redeclare package Medium = Medium,
                p0=nomi_sink_p,
                h=nomi_sink_h)
                annotation (Placement(transformation(extent={{-130,-70},{-150,-50}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-150,-10},{-130,10}})));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-140,-100},
                        {140,100}})), Diagram(coordinateSystem(preserveAspectRatio=false,
                      extent={{-140,-100},{140,100}})));
            end ThermoPower_BasicInterface_2;

            partial model ThermoPower_BasicInterface_3
              "Base class for Steam Turbine with three pressure levels"

              replaceable package FluidMedium = ThermoPower.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;

              //Turbines parameter
              parameter Modelica.Units.SI.MassFlowRate steamHPNomFlowRate
                "Nominal HP steam flow rate";
              parameter Modelica.Units.SI.MassFlowRate steamIPNomFlowRate
                "Nominal IP steam flow rate";
              parameter Modelica.Units.SI.MassFlowRate steamLPNomFlowRate
                "Nominal LP steam flowr rate";
              parameter Modelica.Units.SI.Pressure steamHPNomPressure
                "Nominal HP steam pressure";
              parameter Modelica.Units.SI.Pressure steamIPNomPressure
                "Nominal IP steam pressure";
              parameter Modelica.Units.SI.Pressure steamLPNomPressure
                "Nominal LP steam pressure";
              parameter Modelica.Units.SI.Area HPT_Kt "Flow coefficient"
                annotation (Dialog(group="HP Turbine"));
              parameter Real HPT_eta_mech=0.98 "Mechanical efficiency"
                annotation (Dialog(group="HP Turbine"));
              parameter Real HPT_eta_iso_nom=0.92 "Nominal isentropic efficiency"
                annotation (Dialog(group="HP Turbine"));
              parameter Modelica.Units.SI.Area IPT_Kt "Flow coefficient"
                annotation (Dialog(group="IP Turbine"));
              parameter Real IPT_eta_mech=0.98 "Mechanical efficiency"
                annotation (Dialog(group="IP Turbine"));
              parameter Real IPT_eta_iso_nom=0.92 "Nominal isentropic efficiency"
                annotation (Dialog(group="IP Turbine"));
              parameter Modelica.Units.SI.Area LPT_Kt "Flow coefficient"
                annotation (Dialog(group="LP Turbine"));
              parameter Real LPT_eta_mech=0.98 "Mechanical efficiency"
                annotation (Dialog(group="LP Turbine"));
              parameter Real LPT_eta_iso_nom=0.92 "Nominal isentropic efficiency"
                annotation (Dialog(group="LP Turbine"));

              //Start value
              parameter Boolean SSInit=false "Steady-state initialization"
                annotation (Dialog(tab="Initialization"));
              //HPT
              parameter Modelica.Units.SI.Pressure HPT_pstart_in=steamHPNomPressure
                "Inlet pressure start value"
                annotation (Dialog(tab="Initialization", group="HP Turbine"));
              parameter Modelica.Units.SI.Pressure HPT_pstart_out=steamIPNomPressure
                "Outlet pressure start value"
                annotation (Dialog(tab="Initialization", group="HP Turbine"));
              parameter Modelica.Units.SI.MassFlowRate HPT_wstart=steamHPNomFlowRate
                "Mass flow rate start value"
                annotation (Dialog(tab="Initialization", group="HP Turbine"));

              //IPT
              parameter Modelica.Units.SI.Pressure IPT_pstart_in=steamIPNomPressure
                "Inlet pressure start value"
                annotation (Dialog(tab="Initialization", group="IP Turbine"));
              parameter Modelica.Units.SI.Pressure IPT_pstart_out=steamLPNomPressure
                "Outlet pressure start value"
                annotation (Dialog(tab="Initialization", group="IP Turbine"));
              parameter Modelica.Units.SI.MassFlowRate IPT_wstart=steamIPNomFlowRate +
                  steamHPNomFlowRate "Mass flow rate start value"
                annotation (Dialog(tab="Initialization", group="IP Turbine"));

              //LPT
              parameter Modelica.Units.SI.Pressure LPT_pstart_in=steamLPNomPressure
                "Inlet pressure start value"
                annotation (Dialog(tab="Initialization", group="LP Turbine"));
              parameter Modelica.Units.SI.Pressure LPT_pstart_out=pcond
                "Outlet pressure start value"
                annotation (Dialog(tab="Initialization", group="LP Turbine"));
              parameter Modelica.Units.SI.MassFlowRate LPT_wstart=steamLPNomFlowRate +
                  steamIPNomFlowRate + steamHPNomFlowRate "Mass flow rate start value"
                annotation (Dialog(tab="Initialization", group="LP Turbine"));

              //Other parameter
              parameter Modelica.Units.SI.Pressure pcond "Condenser pressure";

              Modelica.Mechanics.Rotational.Interfaces.Flange_a Shaft_a annotation (
                  Placement(transformation(extent={{-220,-20},{-180,20}}, rotation=0)));
              ThermoPower.PowerPlants.Buses.Sensors SensorsBus annotation (Placement(
                    transformation(extent={{180,-100},{220,-60}}, rotation=0)));
              ThermoPower.PowerPlants.Buses.Actuators ActuatorsBus annotation (
                  Placement(transformation(extent={{220,-160},{180,-120}}, rotation=0)));
              annotation (Icon(coordinateSystem(
                    preserveAspectRatio=true,
                    extent={{-200,-200},{200,200}},
                    initialScale=0.1), graphics={Rectangle(
                            extent={{-200,200},{200,-200}},
                            lineColor={170,170,255},
                            fillColor={230,230,230},
                            fillPattern=FillPattern.Solid),Rectangle(
                            extent={{-200,14},{200,-14}},
                            lineColor={0,0,0},
                            lineThickness=0.5,
                            fillPattern=FillPattern.HorizontalCylinder,
                            fillColor={135,135,135}),Line(points={{-100,200},{-100,90}},
                      color={0,0,255}),Line(points={{-40,30},{-40,200}}, color={0,0,
                      255}),Line(points={{80,30},{80,200}}, color={0,0,255}),Line(
                      points={{20,90},{20,130},{80,130}}, color={0,0,255}),Ellipse(
                            extent={{76,134},{84,126}},
                            lineColor={0,0,255},
                            lineThickness=0.5,
                            fillColor={0,0,255},
                            fillPattern=FillPattern.Solid),Line(points={{140,-90},{
                      140,-200}}, color={0,0,255}),Line(points={{-160,30},{-160,120},
                      {-160,146},{-160,204}}, color={0,0,255}),Polygon(
                            points={{-166,148},{-154,148},{-160,132},{-166,148}},
                            lineColor={0,0,255},
                            fillPattern=FillPattern.Solid,
                            fillColor={0,0,255}),Polygon(
                            points={{-46,148},{-34,148},{-40,132},{-46,148}},
                            lineColor={0,0,255},
                            fillPattern=FillPattern.Solid,
                            fillColor={0,0,255}),Polygon(
                            points={{-106,134},{-94,134},{-100,150},{-106,134}},
                            lineColor={0,0,255},
                            fillPattern=FillPattern.Solid,
                            fillColor={0,0,255}),Polygon(
                            points={{40,136},{40,124},{56,130},{40,136}},
                            lineColor={0,0,255},
                            fillPattern=FillPattern.Solid,
                            fillColor={0,0,255}),Polygon(
                            points={{74,166},{86,166},{80,150},{74,166}},
                            lineColor={0,0,255},
                            fillPattern=FillPattern.Solid,
                            fillColor={0,0,255}),Polygon(
                            points={{74,106},{86,106},{80,90},{74,106}},
                            lineColor={0,0,255},
                            fillPattern=FillPattern.Solid,
                            fillColor={0,0,255}),Polygon(
                            points={{134,-132},{146,-132},{140,-148},{134,-132}},
                            lineColor={0,0,255},
                            fillPattern=FillPattern.Solid,
                            fillColor={0,0,255}),Polygon(
                            points={{-160,30},{-160,-30},{-100,-90},{-100,90},{-160,
                        30}},
                            lineColor={0,0,0},
                            lineThickness=0.5,
                            fillColor={0,0,255},
                            fillPattern=FillPattern.Solid),Polygon(
                            points={{-40,30},{-40,-30},{20,-90},{20,90},{-40,30}},
                            lineColor={0,0,0},
                            lineThickness=0.5,
                            fillColor={0,0,255},
                            fillPattern=FillPattern.Solid),Polygon(
                            points={{80,30},{80,-30},{140,-90},{140,90},{80,30}},
                            lineColor={0,0,0},
                            lineThickness=0.5,
                            fillColor={0,0,255},
                            fillPattern=FillPattern.Solid)}), Diagram(
                    coordinateSystem(
                    preserveAspectRatio=false,
                    extent={{-200,-200},{200,200}},
                    initialScale=0.1), graphics));
            end ThermoPower_BasicInterface_3;

            partial model HE_interface_up
              "Base class for heat exchanger fluid - steam"

              replaceable package FlueGasMedium =
                  ThermoPower.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance
                "steam model";
              replaceable package FluidMedium = ThermoPower.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance
                "Fluid model";

              parameter Integer N_G=2 "Number of node of the gas side";
              parameter Integer Nw_G=N_G - 1 "Number of volumes of the gas side wall";
              parameter Integer N_F=2 "Number of node of the fluid side";
              parameter Integer Nw_F=N_F - 1
                "Number of volumes of the fluid side wall";
              parameter Integer Nt = 1 "Number of tubes in parallel";

              //Nominal parameter
              parameter Modelica.Units.SI.MassFlowRate gasNomFlowRate
                "Nominal flow rate through the gas side";
              parameter Modelica.Units.SI.MassFlowRate fluidNomFlowRate
                "Nominal flow rate through the fluid side";
              parameter Modelica.Units.SI.Pressure gasNomPressure
                "Nominal pressure in the gas side inlet";
              parameter Modelica.Units.SI.Pressure fluidNomPressure
                "Nominal pressure in the fluid side inlet";

              //Physical Parameter
              parameter Modelica.Units.SI.Area exchSurface_G
                "Exchange surface between gas - metal tube";
              parameter Modelica.Units.SI.Area exchSurface_F
                "Exchange surface between metal tube - fluid";
              parameter Modelica.Units.SI.Area extSurfaceTub
                "Total external surface of the tubes";
              parameter Modelica.Units.SI.Volume gasVol "Gas volume";
              parameter Modelica.Units.SI.Volume fluidVol "Fluid volume";
              parameter Modelica.Units.SI.Volume metalVol
                "Volume of the metal part in the tubes";
              parameter Real rhomcm "Metal heat capacity per unit volume [J/m^3.K]";
              parameter Modelica.Units.SI.ThermalConductivity lambda
                "Thermal conductivity of the metal (density by specific heat capacity)";

              //Start value
              parameter Modelica.Units.SI.Temperature Tstartbar_G
                "Start value of the average gas temperature"
                annotation (Dialog(tab="Initialization"));
              parameter Modelica.Units.SI.Pressure pstart_G=gasNomPressure
                "Pressure start value, gas side" annotation (Dialog(tab="Initialization"));
              parameter Modelica.Units.SI.Temperature Tstartbar_M=Tstartbar_G - 50
                "Start value of the average metal temperature"
                annotation (Dialog(tab="Initialization"));
              parameter Modelica.Units.SI.Pressure pstart_F=50e5
                "Pressure start value, fluid side" annotation (Dialog(tab="Initialization"));
              parameter Boolean SSInit=false "Steady-state initialization"
                annotation (Dialog(tab="Initialization"));

              ThermoPower.Water.FlangeA WaterIn(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(extent={{-20,80},{20,120}},
                      rotation=0)));
              ThermoPower.Water.FlangeB WaterOut(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(extent={{-20,-120},{20,-80}}, rotation=
                       0)));

              ThermoPower.Water.FlangeA steamIn(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(extent={{-120,-20},{-80,20}},
                      rotation=0)));
              ThermoPower.Water.FlangeB steamOut(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(extent={{80,-20},{120,20}},
                      rotation=0)));
              annotation (Diagram(graphics), Icon(graphics={Rectangle(
                            extent={{-100,100},{100,-100}},
                            lineColor={0,0,255},
                            fillColor={230,230,230},
                            fillPattern=FillPattern.Solid),Line(
                            points={{0,-80},{0,-40},{40,-20},{-40,20},{0,40},{0,80}},
                            color={0,0,255},
                            thickness=0.5),Text(
                            extent={{-100,-115},{100,-145}},
                            lineColor={85,170,255},
                            textString="%name")}));
            end HE_interface_up;

            partial model HX_4_interface "Base class for condenser"
              replaceable package FluidMedium = ThermoPower.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;

              //Nominal parameter
              parameter Modelica.Units.SI.MassFlowRate condNomFlowRate
                "Nominal flow rate through the condensing fluid side";
              parameter Modelica.Units.SI.MassFlowRate coolNomFlowRate
                "Nominal flow rate through the cooling fluid side";
              parameter Modelica.Units.SI.Pressure condNomPressure
                "Nominal pressure in the condensing fluid side inlet";
              parameter Modelica.Units.SI.Pressure coolNomPressure
                "Nominal pressure in the cooling fluid side inlet";

              //Physical Parameter
              parameter Integer N_cool=2 "Number of nodes of the cooling fluid side";
              parameter Modelica.Units.SI.Area condExchSurface
                "Exchange surface between condensing fluid - metal";
              parameter Modelica.Units.SI.Area coolExchSurface
                "Exchange surface between metal - cooling fluid";
              parameter Modelica.Units.SI.Volume condVol "Condensing fluid volume";
              parameter Modelica.Units.SI.Volume coolVol "Cooling fluid volume";
              parameter Modelica.Units.SI.Volume metalVol
                "Volume of the metal part in the tubes";
              parameter Modelica.Units.SI.SpecificHeatCapacity cm
                "Specific heat capacity of metal";
              parameter Modelica.Units.SI.Density rhoMetal "Density of metal";

              //Initialization conditions
              parameter Modelica.Units.SI.Pressure pstart_cond=condNomPressure
                "Condensing fluid pressure start value"
                annotation (Dialog(tab="Initialization"));
              parameter Modelica.Units.SI.Volume Vlstart_cond=condVol*0.15
                "Start value of the liquid water volume, condensation side"
                annotation (Dialog(tab="Initialization"));
              parameter Boolean SSInit=false "Steady-state initialization"
                annotation (Dialog(tab="Initialization"));

              ThermoPower.Water.FlangeB waterOut(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(extent={{-30,-120},{10,-80}},
                      rotation=0)));
              ThermoPower.Water.FlangeA coolingIn(redeclare package Medium =
                    FluidMedium) annotation (Placement(transformation(extent={{80,22},{
                        120,62}}, rotation=0)));
              ThermoPower.Water.FlangeB coolingOut(redeclare package Medium =
                    FluidMedium) annotation (Placement(transformation(extent={{80,-46},
                        {120,-6}}, rotation=0)));
              ThermoPower.Water.FlangeA steamIn(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(extent={{-30,80},{10,120}},
                      rotation=0)));

              annotation (Diagram(graphics), Icon(graphics={Rectangle(
                            extent={{-100,100},{80,-60}},
                            lineColor={0,0,255},
                            fillColor={230,230,230},
                            fillPattern=FillPattern.Solid),Rectangle(
                            extent={{-90,-60},{70,-100}},
                            lineColor={0,0,255},
                            fillColor={230,230,230},
                            fillPattern=FillPattern.Solid),Line(
                            points={{100,-40},{-60,-40},{10,10},{-60,60},{100,60}},
                            color={0,0,255},
                            thickness=0.5),Text(
                            extent={{-100,-113},{100,-143}},
                            lineColor={85,170,255},
                            textString="%name")}));
            end HX_4_interface;

            connector ElectricalPowerPort_a "Electrical power connector  at flow port"
              extends NHES.Electrical.Interfaces.ElectricalPowerPort;
              annotation (defaultComponentName="portElec_a",
                          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                        -100},{100,100}}), graphics={Ellipse(
                    extent={{-40,40},{40,-40}},
                    lineColor={0,0,0},
                    fillColor={255,0,0},
                    fillPattern=FillPattern.Solid),   Text(extent={{-150,110},{150,50}},
                        textString="%name")}),
                   Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                        100,100}}), graphics={Ellipse(
                      extent={{-100,100},{100,-100}},
                      lineColor={255,0,0},
                      fillColor={255,0,0},
                      fillPattern=FillPattern.Solid), Ellipse(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,0},
                    fillColor={255,0,0},
                    fillPattern=FillPattern.Solid)}),
              Documentation(info="<html>
<p>Temporary connector until decision on how to exchange &QUOT;electrical power&QUOT;.... Want to specify V and I? what about 2 phase or 3 phase...</p>
</html>"));
            end ElectricalPowerPort_a;

            connector ElectricalPowerPort_b
              "Electrical power connector  at non-flow port"
              extends NHES.Electrical.Interfaces.ElectricalPowerPort;
              annotation (defaultComponentName="portElec_b",
                          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                        -100},{100,100}}), graphics={
                    Ellipse(
                    extent={{-40,40},{40,-40}},
                    lineColor={0,0,0},
                    fillColor={255,0,0},
                    fillPattern=FillPattern.Solid),
                    Ellipse(
                    extent={{-30,30},{30,-30}},
                    lineColor={255,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                    Text(extent={{-150,110},{150,50}}, textString="%name")}),
                   Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                        100,100}}), graphics={
                    Ellipse(
                      extent={{-100,100},{100,-100}},
                      lineColor={255,0,0},
                      fillColor={255,0,0},
                      fillPattern=FillPattern.Solid),
                    Ellipse(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,0},
                    fillColor={255,0,0},
                    fillPattern=FillPattern.Solid),
                    Ellipse(
                      extent={{-80,80},{80,-80}},
                      lineColor={255,0,0},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid)}),
              Documentation(info="<html>
<p><span style=\"font-family: MS Shell Dlg 2;\">Temporary connector until decision on how to exchange &QUOT;electrical power&QUOT;.... Want to specify V and I? what about 2 phase or 3 phase...</span></p>
</html>"));
            end ElectricalPowerPort_b;
          end Interface;

          package Data_Record
            record Data_1
              extends Modelica.Icons.Record;
              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;

                parameter Modelica.Units.SI.Pressure nomi_source_p =             3.5e6           "Nominal pressure in SG outlet (Pa)";
                parameter Modelica.Units.SI.SpecificEnthalpy nomi_source_h =     2999.4e3        "Nominal specificEnthalpy in SG outlet (J/Kg)";

                parameter Modelica.Units.SI.Pressure nomi_sink_p =               3.5e6           "Nominal pressure in SG inlet (Pa)";
                parameter Modelica.Units.SI.Temperature nomi_sink_T =            148.9 + 273.2   "Nominal specificEnthalpy in SG inlet (K)";

                parameter Modelica.Units.SI.MassFlowRate turbine_wnorm =         67.1            "Turbine inlet nominal flowrate (kg/sec)";
                parameter Modelica.Units.SI.Pressure turbine_pnorm =             3.5e6           "Turbine inlet nominal pressure (Pa)";
                parameter Real eta_iso_nom =                                     0.85            "Turbine Nominal isentropic efficiency";
                parameter Modelica.Units.SI.Area Kt =                            0.01            "Turbine Kt coefficient of Stodola's law (m2) ";
                parameter Modelica.Units.SI.MassFlowRate turbine_wnorm_start =   53.46           "Turbine massflow rate start value (kg/s)";
                parameter Real turbine_PR_start =                                432.098         "Turbine pressure ratio start value";

                parameter Modelica.Units.SI.Pressure nomi_conden_p =              0.0081e6        "Condenser inlet nominal pressure (Pa)";
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                    coordinateSystem(preserveAspectRatio=false)));
            end Data_1;

            record Data_2
              extends Modelica.Icons.Record;
              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;

              // SG inlet/outlet boundary conditions
              parameter Modelica.Units.SI.Pressure nomi_source_p =             3.5e6             "Nominal pressure in SG outlet (Pa)";
              parameter Modelica.Units.SI.SpecificEnthalpy nomi_source_h =     2999.39e3         "Nominal specificEnthalpy in SG outlet (J/Kg)";
              parameter Modelica.Units.SI.Pressure nomi_sink_p =               3.2e6             "Nominal pressure in SG inlet (Pa)";
              parameter Modelica.Units.SI.Temperature nomi_sink_T =            148.9 + 273.2    "Temperature in SG inlet (K)";

              // pressure
              parameter Modelica.Units.SI.Pressure           s1_inlet_p =   3.5e6                      "Turbine Stage 1 Inlet Pressure";
              parameter Modelica.Units.SI.Pressure           s1_outlet_p =  0.5126e6                   "Turbine Stage 1 Outlet Pressure";
              parameter Modelica.Units.SI.Pressure           s2_inlet_p =   s1_outlet_p                "Turbine Stage 2 Inlet Pressure";
              parameter Modelica.Units.SI.Pressure           s2_outlet_p =  0.2482e6                   "Turbine Stage 2 Outlet Pressure";
              parameter Modelica.Units.SI.Pressure           s3_inlet_p =   s2_outlet_p                "Turbine Stage 3 Inlet Pressure";
              parameter Modelica.Units.SI.Pressure           s3_outlet_p =  0.062e6                    "Turbine Stage 3 Outlet Pressure";
              parameter Modelica.Units.SI.Pressure           s4_inlet_p =   s3_outlet_p                "Turbine Stage 4 inlet Pressure";
              parameter Modelica.Units.SI.Pressure           s4_outlet_p =  0.0081e6                   "Turbine Stage 4 Outlet Pressure";
              parameter Modelica.Units.SI.Pressure           condenser_p =  s4_outlet_p                "Condenser Pressure";

              // turbine parameter
              parameter Real eta_iso_nom = 0.85                            "Turbine Nominal isentropic efficiency";
              parameter Real s1_PR_start = s1_inlet_p/s1_outlet_p          "Turbine s1 pressure ratio start value";
              parameter Real s2_PR_start = s2_inlet_p/s2_outlet_p          "Turbine s2 pressure ratio start value";
              parameter Real s3_PR_start = s3_inlet_p/s3_outlet_p          "Turbine s3 pressure ratio start value";
              parameter Real s4_PR_start = s4_inlet_p/s4_outlet_p          "Turbine s4 pressure ratio start value";
              parameter Modelica.Units.SI.Area s1_Kt =   0.00958167        "Turbine s1 Kt coefficient of Stodola's law (m2) (From Steady State)";
              parameter Modelica.Units.SI.Area s2_Kt =   0.06022770        "Turbine s2 Kt coefficient of Stodola's law (m2) (From Steady State)";
              parameter Modelica.Units.SI.Area s3_Kt =   0.00993885        "Turbine s3 Kt coefficient of Stodola's law (m2) (From Steady State)";
              parameter Modelica.Units.SI.Area s4_Kt =   0.33250600        "Turbine s4 Kt coefficient of Stodola's law (m2) (From Steady State)";

              // temperature
              parameter Modelica.Units.SI.Temperature        s1_inlet_T =   303.7+273.15               "Turbine Stage 1 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s1_outlet_T =  152.8+273.15               "Turbine Stage 1 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        s2_inlet_T =   s1_outlet_T                "Turbine Stage 2 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s2_outlet_T =  127.2+273.15               "Turbine Stage 2 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        s3_inlet_T =   s2_outlet_T                "Turbine Stage 3 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s3_outlet_T =  86.8+273.15                "Turbine Stage 3 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        s4_inlet_T =   s3_outlet_T                "Turbine Stage 4 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s4_outlet_T =  41.7+273.15                "Turbine Stage 4 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_outlet_T =   82.3+273.15          "LP FWH 2 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_outlet_T =  123.7+273.15          "LP FWH 1 Outlet Temperature";

              // massflow
              parameter Modelica.Units.SI.MassFlowRate       s1_mflow =        67.1                "Turbine Stage 1 Mass Flow    67.1 => 67.1  ";
              parameter Modelica.Units.SI.MassFlowRate       s2_mflow =        61.89               "Turbine Stage 2 Mass Flow    63.5 => 61.89 ";
              parameter Modelica.Units.SI.MassFlowRate       s3_mflow =        51.31               "Turbine Stage 3 Mass Flow    58.45=> 51.31 ";
              parameter Modelica.Units.SI.MassFlowRate       s4_mflow =        45.73               "Turbine Stage 4 Mass Flow    53.46=> 45.73 ";
              parameter Modelica.Units.SI.MassFlowRate       condPump_mflow =  67.1                "Condensate Pump Mass Flow                  ";
              parameter Modelica.Units.SI.MassFlowRate       FWPump_mflow =    67.1                "Feedwater Pump Mass Flow                   ";

              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_mflow =      15.79            "Mass Flow to LP FWH 1 from LP Turbine Stage 1  8.65 => 15.79  ";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_mflow =      21.37            "Mass Flow to LP FWH 2 from LP Turbine Stage 2 13.64 => 21.367 ";

              // enthalpy
              parameter Modelica.Units.SI.SpecificEnthalpy   s1_inlet_h =          2824.15e3           "Turbine Stage 1 Inlet Enthalpy      2999.39e3 => 2824.15e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s1_outlet_h =         2526.96e3           "Turbine Stage 1 Outlet Enthalpy     2673.75e3 => 2526.96e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s2_inlet_h =          s1_outlet_h         "Turbine Stage 2 inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   s2_outlet_h =         2416.94e3           "Turbine Stage 2 Outlet Enthalpy     2563.03e3 => 2416.94e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s3_inlet_h =          s2_outlet_h         "Turbine Stage 3 inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   s3_outlet_h =         2246.02e3           "Turbine Stage 3 Outlet Enthalpy     2401.84e3 => 2246.02e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s4_inlet_h =          s3_outlet_h         "Turbine Stage 4 inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   s4_outlet_h =         1751.20e3           "Turbine Stage 4 Outlet Enthalpy     2260.18e3 => 1751.20e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   condenser_inlet_h =   s4_outlet_h         "Condenser inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   condenser_outlet_h =  138.1e3             "Condenser Outlet Enthalpy            138.10e3 => 174.837e3";

              // FWH Geometry //

              Modelica.Units.SI.Length   dimension_tube = 0.014122                                        "hydraulic diameter of tube";
              Modelica.Units.SI.Length   perimeter_tube = Modelica.Constants.pi*dimension_tube            "length of tube";

              Modelica.Units.SI.Length   length_tube = 9.9               "length of tube";

              parameter Integer nTube = 66                                                    "Number of Tubes";
              parameter Modelica.Units.SI.Area     exchSurface_G = 0.49452             "Surface Area_Shell from TRANSFORM's GenericDistributed_HX";
              parameter Modelica.Units.SI.Area     exchSurface_F = 0.43922             "perimeter_tube * length_tube";
              parameter Modelica.Units.SI.Area     extSurfaceTub = 0.49452             "pi x (dimensino_tube + 2 x th_wall) x length_tube";
              parameter Modelica.Units.SI.Volume   gasVol = 204.96                            "gas volume";
              parameter Modelica.Units.SI.Volume   fluidVol = 0.00155066                      "fluid volume NOT 0.10234; 0.00155066 is correct ";
              parameter Modelica.Units.SI.Volume   metalVol = 0.000415046                     "metal volume";
              parameter Real rhomcm = 510*8.06*0.000001                                           "510 (J/kgK) * 8.06 (Mg/m3) * 1e-6 (kg/Mg) / Ref: SS304 azom.com";
              parameter Modelica.Units.SI.ThermalConductivity lambda = 15.5                   "Ref: SS304 azom.com";

              ////  HP_FWH  ////
              // 1. HP_FWH_Tube
              parameter Modelica.Units.SI.Pressure           HP_FWH_tube_inlet_p =           s1_inlet_p                "HP FWH tube Inlet pressure";
              parameter Modelica.Units.SI.Pressure           HP_FWH_tube_outlet_p =          s1_inlet_p                "HP FWH tube outlet pressure";
              parameter Modelica.Units.SI.Temperature        HP_FWH_tube_inlet_T =           LP_FWH1_tube_outlet_T     "HP FWH tube Inlet temperature";
              parameter Modelica.Units.SI.Temperature        HP_FWH_tube_outlet_T =          139.46 + 273.15           "HP FWH tube outlet temperature 148.9 + 273.15 => 139.46 + 273.15";
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_tube_mflow =             FWPump_mflow              "HP FWH tube massflow rate";
              // 2. HP_FWH_Shell
              parameter Modelica.Units.SI.Pressure           HP_FWH_shell_inlet_p =          s1_outlet_p             "HP FWH Shell Inlet pressure";
              parameter Modelica.Units.SI.Pressure           HP_FWH_shell_outlet_p =         s1_outlet_p             "HP FWH Shell Outlet pressure";
              parameter Modelica.Units.SI.SpecificEnthalpy   HP_FWH_shell_inlet_h =          s1_outlet_h             "HP FWH Shell Inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   HP_FWH_shell_outlet_h =         841.98e3                "HP FWH Shell Outlet Enthalpy   544.52e3 => 841.98e3  ";
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_shell_inlet_mflow =      5.212                   "Mass Flow to HP FWH (inlet)    3.6  => 5.212";
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_shell_outlet_mflow =     5.212                   "Mass Flow to HP FWH (outlet)   3.6  => 5.212";
              parameter Modelica.Units.SI.Temperature        HP_FWH_shell_inlet_T =           20 + 273                "Data from benchmark model (C)";

              // LP_FWH1 //
              // 1. LP_FWH1_Tube
              parameter Modelica.Units.SI.Pressure           LP_FWH1_tube_inlet_p =           s1_inlet_p              "LP FWH1 tube Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH1_tube_outlet_p =          s1_inlet_p              "LP FWH1 tube outlet pressure";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_tube_inlet_T =           LP_FWH2_tube_outlet_T   "LP FWH1 tube inlet temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_tube_outlet_T =          123.7+273.15            "LP FWH1 tube outlet temperature";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_tube_mflow =             condPump_mflow          "LP FWH1 tube massflow rate";

              // 2. LP_FWH1_Shell
              parameter Modelica.Units.SI.Pressure           LP_FWH1_shell_inlet_p =          s2_outlet_p             "LP FWH1 Shell Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH1_shell_outlet_p =         s2_outlet_p             "LP FWH1 Shell Outlet pressure";
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH1_shell_inlet_h =          s2_outlet_h             "LP FWH1 Shell Inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH1_shell_outlet_h =         368.21e3                "LP FWH1 Shell Outlet Enthalpy";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_shell_inlet_mflow =      8.65                    "Mass Flow to LP FWH1 (inlet)";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_shell_outlet_mflow =     8.65                    "Mass Flow to LP FWH1 (outlet)";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_shell_inlet_T =           HP_FWH_shell_inlet_T     "Data from benchmark model (C)";

              // LP_FWH2 //
              // 1. LP_FWH2_Tube
              parameter Modelica.Units.SI.Pressure           LP_FWH2_tube_inlet_p =          s1_inlet_p              "LP FWH2 tube Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH2_tube_outlet_p =         s1_inlet_p              "LP FWH2 tube outlet pressure";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_tube_inlet_T =          s1_outlet_T             "LP FWH2 tube inlet temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_tube_outlet_T =         82.3+273.15             "LP FWH2 tube outlet temperature";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_tube_mflow =            condPump_mflow          "LP FWH2 tube massflow rate";

              // 2. LP_FWH2_shell
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH2_shell_inlet_h =          s3_outlet_h            "LP FWH2 Shell Inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH2_shell_outlet_h =         302.38e3               "LP FWH2 Shell Outlet Enthalpy";
              parameter Modelica.Units.SI.Pressure           LP_FWH2_shell_inlet_p =          s3_outlet_p            "LP FWH2 Shell Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH2_shell_outlet_p =         s3_outlet_p            "LP FWH2 Shell Outlet pressure";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_shell_inlet_mflow =      13.64                  "Mass Flow to LP FWH2 (inlet)";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_shell_outlet_mflow =     13.64                  "Mass Flow to LP FWH2 (outlet)";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_shell_inlet_T =           HP_FWH_shell_inlet_T    "Data from benchmark model (C)";

              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                    coordinateSystem(preserveAspectRatio=false)));
            end Data_2;

            record Data_3
              extends Modelica.Icons.Record;
              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;

              // SG inlet/outlet boundary conditions
              parameter Modelica.Units.SI.Pressure nomi_source_p =             3.2e6             "Nominal pressure in SG outlet (Pa)";
              parameter Modelica.Units.SI.SpecificEnthalpy nomi_source_h =     2824.15e3       "Nominal specificEnthalpy in SG outlet (J/Kg)";
              parameter Modelica.Units.SI.Pressure nomi_sink_p =               3.2e6             "Nominal pressure in SG inlet (Pa)";
              parameter Modelica.Units.SI.Temperature nomi_sink_T =            139.46 + 273.2  "Temperature in SG inlet (K)";

              // pressure
              parameter Modelica.Units.SI.Pressure           s1_inlet_p =   3.2e6                      "Turbine Stage 1 Inlet Pressure   3.5e6 => 3.2e6       ";
              parameter Modelica.Units.SI.Pressure           s1_outlet_p =  0.4739e6                   "Turbine Stage 1 Outlet Pressure  0.5126e6 => 0.4739e6 ";
              parameter Modelica.Units.SI.Pressure           s2_inlet_p =   s1_outlet_p                "Turbine Stage 2 Inlet Pressure";
              parameter Modelica.Units.SI.Pressure           s2_outlet_p =  0.2109e6                   "Turbine Stage 2 Outlet Pressure  0.2482e6 => 0.2109e6 ";
              parameter Modelica.Units.SI.Pressure           s3_inlet_p =   s2_outlet_p                "Turbine Stage 3 Inlet Pressure";
              parameter Modelica.Units.SI.Pressure           s3_outlet_p =  0.0514e6                    "Turbine Stage 3 Outlet Pressure  0.062e6 => 0.0514e6 ";
              parameter Modelica.Units.SI.Pressure           s4_inlet_p =   s3_outlet_p                "Turbine Stage 4 inlet Pressure";
              parameter Modelica.Units.SI.Pressure           s4_outlet_p =  0.00816e6                   "Turbine Stage 4 Outlet Pressure  0.0081e6 => 0.00816e6";
              parameter Modelica.Units.SI.Pressure           condenser_p =  s4_outlet_p                "Condenser Pressure";

              // turbine parameter
              parameter Real eta_iso_nom = 0.85                            "Turbine Nominal isentropic efficiency";
              parameter Real s1_PR_start = s1_inlet_p/s1_outlet_p          "Turbine s1 pressure ratio start value";
              parameter Real s2_PR_start = s2_inlet_p/s2_outlet_p          "Turbine s2 pressure ratio start value";
              parameter Real s3_PR_start = s3_inlet_p/s3_outlet_p          "Turbine s3 pressure ratio start value";
              parameter Real s4_PR_start = s4_inlet_p/s4_outlet_p          "Turbine s4 pressure ratio start value";
              parameter Modelica.Units.SI.Area s1_Kt =   0.00958167        "Turbine s1 Kt coefficient of Stodola's law (m2) (From Steady State)";
              parameter Modelica.Units.SI.Area s2_Kt =   0.06022770        "Turbine s2 Kt coefficient of Stodola's law (m2) (From Steady State)";
              parameter Modelica.Units.SI.Area s3_Kt =   0.09938850        "Turbine s3 Kt coefficient of Stodola's law (m2) (From Steady State)";
              parameter Modelica.Units.SI.Area s4_Kt =   0.33250600        "Turbine s4 Kt coefficient of Stodola's law (m2) (From Steady State)";

              // temperature
              parameter Modelica.Units.SI.Temperature        s1_inlet_T =   303.7+273.15               "Turbine Stage 1 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s1_outlet_T =  152.8+273.15               "Turbine Stage 1 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        s2_inlet_T =   s1_outlet_T                "Turbine Stage 2 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s2_outlet_T =  127.2+273.15               "Turbine Stage 2 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        s3_inlet_T =   s2_outlet_T                "Turbine Stage 3 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s3_outlet_T =  86.8+273.15                "Turbine Stage 3 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        s4_inlet_T =   s3_outlet_T                "Turbine Stage 4 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s4_outlet_T =  41.7+273.15                "Turbine Stage 4 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_outlet_T =   82.3+273.15          "LP FWH 2 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_outlet_T =  123.7+273.15          "LP FWH 1 Outlet Temperature";

              // massflow
              parameter Modelica.Units.SI.MassFlowRate       s1_mflow =        67.1                  "Turbine Stage 1 Mass Flow    67.1 => 67.1  ";
              parameter Modelica.Units.SI.MassFlowRate       s1_outlet_stext_mflow =        4.67973  "Turbine Stage 1 steam extraction";
              parameter Modelica.Units.SI.MassFlowRate       s2_mflow =        62.42                 "Turbine Stage 2 Mass Flow    63.5 => 62.42 ";
              parameter Modelica.Units.SI.MassFlowRate       s2_outlet_stext_mflow =        10.6700  "Turbine Stage 2 steam extraction";
              parameter Modelica.Units.SI.MassFlowRate       s3_mflow =        51.74                 "Turbine Stage 3 Mass Flow    58.45=> 51.74 ";
              parameter Modelica.Units.SI.MassFlowRate       s3_outlet_stext_mflow =        5.64136  "Turbine Stage 3 steam extraction";
              parameter Modelica.Units.SI.MassFlowRate       s4_mflow =        46.09                 "Turbine Stage 4 Mass Flow    53.46=> 46.09 ";
              parameter Modelica.Units.SI.MassFlowRate       condPump_mflow =  67.1                  "Condensate Pump Mass Flow                  ";
              parameter Modelica.Units.SI.MassFlowRate       FWPump_mflow =    67.1                  "Feedwater Pump Mass Flow                   ";

              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_shell_mflow =      15.94            "Mass Flow to LP FWH 1 from LP Turbine Stage 1  8.65 => 15.94  ";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_shell_mflow =      21.58            "Mass Flow to LP FWH 2 from LP Turbine Stage 2 13.64 => 21.58 ";

              // enthalpy
              parameter Modelica.Units.SI.SpecificEnthalpy   s1_inlet_h =          2824.15e3           "Turbine Stage 1 Inlet Enthalpy      2999.39e3 => 2824.15e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s1_outlet_h =         1904.99e3           "Turbine Stage 1 Outlet Enthalpy     2673.75e3 => 1904.99e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s2_inlet_h =          s1_outlet_h         "Turbine Stage 2 inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   s2_outlet_h =         2416.94e3           "Turbine Stage 2 Outlet Enthalpy     2563.03e3 => 2416.94e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s3_inlet_h =          s2_outlet_h         "Turbine Stage 3 inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   s3_outlet_h =         2246.02e3           "Turbine Stage 3 Outlet Enthalpy     2401.84e3 => 2246.02e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s4_inlet_h =          s3_outlet_h         "Turbine Stage 4 inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   s4_outlet_h =         1751.20e3           "Turbine Stage 4 Outlet Enthalpy     2260.18e3 => 1751.20e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   condenser_inlet_h =   s4_outlet_h         "Condenser inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   condenser_outlet_h =  138.1e3             "Condenser Outlet Enthalpy            138.10e3 => 174.837e3";

              // CondenserPump Pressure //

              // FWH Geometry //

              Modelica.Units.SI.Length   dimension_tube = 0.014122                                        "hydraulic diameter of tube";
              Modelica.Units.SI.Length   perimeter_tube = Modelica.Constants.pi*dimension_tube            "length of tube";

              Modelica.Units.SI.Length   length_tube = 9.9               "length of tube";

              parameter Integer nTube = 66                                                    "Number of Tubes";
              parameter Modelica.Units.SI.Area     exchSurface_G = 0.49452                    "Surface Area_Shell from TRANSFORM's GenericDistributed_HX";
              parameter Modelica.Units.SI.Area     exchSurface_F = 0.43922                    "perimeter_tube * length_tube";
              parameter Modelica.Units.SI.Area     extSurfaceTub = 0.49452                    "pi x (dimensino_tube + 2 x th_wall) x length_tube";
              parameter Modelica.Units.SI.Volume   gasVol = 204.96                            "gas volume";
              parameter Modelica.Units.SI.Volume   fluidVol = 0.00155066                      "fluid volume NOT 0.10234; 0.00155066 is correct ";
              parameter Modelica.Units.SI.Volume   metalVol = 0.000415046                     "metal volume";
              parameter Real rhomcm = 510*8.06*0.000001                                           "510 (J/kgK) * 8.06 (Mg/m3) * 1e-6 (kg/Mg) / Ref: SS304 azom.com";
              parameter Modelica.Units.SI.ThermalConductivity lambda = 16.7536                   "Ref: SS304 azom.com";

              ////  HP_FWH  ////
              // 1. HP_FWH_Tube
              parameter Modelica.Units.SI.Pressure           HP_FWH_tube_inlet_p =           s1_inlet_p                "HP FWH tube Inlet pressure";
              parameter Modelica.Units.SI.Pressure           HP_FWH_tube_outlet_p =          s1_inlet_p                "HP FWH tube outlet pressure";
              parameter Modelica.Units.SI.Temperature        HP_FWH_tube_inlet_T =           LP_FWH1_tube_outlet_T     "HP FWH tube Inlet temperature";
              parameter Modelica.Units.SI.Temperature        HP_FWH_tube_outlet_T =          139.46 + 273.15           "HP FWH tube outlet temperature 148.9 + 273.15 => 139.46 + 273.15";
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_tube_mflow =             FWPump_mflow              "HP FWH tube massflow rate";
              // 2. HP_FWH_Shell
              parameter Modelica.Units.SI.Pressure           HP_FWH_shell_inlet_p =          s1_outlet_p             "HP FWH Shell Inlet pressure";
              parameter Modelica.Units.SI.Pressure           HP_FWH_shell_outlet_p =         s1_outlet_p             "HP FWH Shell Outlet pressure";
              parameter Modelica.Units.SI.SpecificEnthalpy   HP_FWH_shell_inlet_h =          s1_outlet_h             "HP FWH Shell Inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   HP_FWH_shell_outlet_h =         841.98e3                "HP FWH Shell Outlet Enthalpy   544.52e3 => 841.98e3  ";
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_shell_inlet_mflow =      5.212                   "Mass Flow to HP FWH (inlet)    3.6  => 5.212";
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_shell_outlet_mflow =     5.212                   "Mass Flow to HP FWH (outlet)   3.6  => 5.212";
              parameter Modelica.Units.SI.Temperature        HP_FWH_shell_inlet_T =          148.48 + 273            "Data from benchmark model (C)  20 => 148.48";

              // LP_FWH1 //
              // 1. LP_FWH1_Tube
              parameter Modelica.Units.SI.Pressure           LP_FWH1_tube_inlet_p =           s1_inlet_p              "LP FWH1 tube Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH1_tube_outlet_p =          s1_inlet_p              "LP FWH1 tube outlet pressure";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_tube_inlet_T =           LP_FWH2_tube_outlet_T   "LP FWH1 tube inlet temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_tube_outlet_T =          109.16 + 273.15         "LP FWH1 tube outlet temperature  123.7 => 109.16  ";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_tube_mflow =             condPump_mflow          "LP FWH1 tube massflow rate";

              // 2. LP_FWH1_Shell
              parameter Modelica.Units.SI.Pressure           LP_FWH1_shell_inlet_p =          s2_outlet_p             "LP FWH1 Shell Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH1_shell_outlet_p =         s2_outlet_p             "LP FWH1 Shell Outlet pressure";
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH1_shell_inlet_h =          s2_outlet_h             "LP FWH1 Shell Inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH1_shell_outlet_h =         1226.32e3                "LP FWH1 Shell Outlet Enthalpy   368.21e3 => 1226.32 ";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_shell_inlet_mflow =      15.79                    "Mass Flow to LP FWH1 (inlet)      8.65  => 15.79 ";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_shell_outlet_mflow =     15.79                    "Mass Flow to LP FWH1 (outlet)     8.65  => 15.79 ";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_shell_inlet_T =          HP_FWH_shell_inlet_T     "Data from benchmark model (C)";

              // LP_FWH2 //
              // 1. LP_FWH2_Tube
              parameter Modelica.Units.SI.Pressure           LP_FWH2_tube_inlet_p =          s1_inlet_p              "LP FWH2 tube Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH2_tube_outlet_p =         s1_inlet_p              "LP FWH2 tube outlet pressure";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_tube_inlet_T =          s1_outlet_T             "LP FWH2 tube inlet temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_tube_outlet_T =         96.61 + 273.15          "LP FWH2 tube outlet temperature  82.3 => 96.61";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_tube_mflow =            condPump_mflow          "LP FWH2 tube massflow rate";

              // 2. LP_FWH2_shell
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH2_shell_inlet_h =          s3_outlet_h            "LP FWH2 Shell Inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH2_shell_outlet_h =         1099.41e3               "LP FWH2 Shell Outlet Enthalpy    302.38 => 1099.41";
              parameter Modelica.Units.SI.Pressure           LP_FWH2_shell_inlet_p =          s3_outlet_p            "LP FWH2 Shell Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH2_shell_outlet_p =         s3_outlet_p            "LP FWH2 Shell Outlet pressure";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_shell_inlet_mflow =      21.37                  "Mass Flow to LP FWH2 (inlet)       13.64 => 21.37";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_shell_outlet_mflow =     21.37                  "Mass Flow to LP FWH2 (outlet)      13.64 => 21.37";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_shell_inlet_T =          HP_FWH_shell_inlet_T    "Data from benchmark model (C)";

              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                    coordinateSystem(preserveAspectRatio=false)));
            end Data_3;

            record Data_4
              extends Modelica.Icons.Record;
              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;

              // SG inlet/outlet boundary conditions
              parameter Modelica.Units.SI.Pressure nomi_source_p =             3.2e6             "Nominal pressure in SG outlet (Pa)";
              parameter Modelica.Units.SI.SpecificEnthalpy nomi_source_h =     2824.15e3       "Nominal specificEnthalpy in SG outlet (J/Kg)";
              parameter Modelica.Units.SI.Pressure nomi_sink_p =               3.2e6             "Nominal pressure in SG inlet (Pa)";
              parameter Modelica.Units.SI.Temperature nomi_sink_T =            139.46 + 273.2  "Temperature in SG inlet (K)";

              // pressure
              parameter Modelica.Units.SI.Pressure           s1_inlet_p =   3.2e6                      "Turbine Stage 1 Inlet Pressure   3.5e6 => 3.2e6       ";
              parameter Modelica.Units.SI.Pressure           s1_outlet_p =  0.4739e6                   "Turbine Stage 1 Outlet Pressure  0.5126e6 => 0.4739e6 ";
              parameter Modelica.Units.SI.Pressure           s2_inlet_p =   s1_outlet_p                "Turbine Stage 2 Inlet Pressure";
              parameter Modelica.Units.SI.Pressure           s2_outlet_p =  0.2109e6                   "Turbine Stage 2 Outlet Pressure  0.2482e6 => 0.2109e6 ";
              parameter Modelica.Units.SI.Pressure           s3_inlet_p =   s2_outlet_p                "Turbine Stage 3 Inlet Pressure";
              parameter Modelica.Units.SI.Pressure           s3_outlet_p =  0.0514e6                    "Turbine Stage 3 Outlet Pressure  0.062e6 => 0.0514e6 ";
              parameter Modelica.Units.SI.Pressure           s4_inlet_p =   s3_outlet_p                "Turbine Stage 4 inlet Pressure";
              parameter Modelica.Units.SI.Pressure           s4_outlet_p =  0.00816e6                   "Turbine Stage 4 Outlet Pressure  0.0081e6 => 0.00816e6";
              parameter Modelica.Units.SI.Pressure           condenser_p =  s4_outlet_p                "Condenser Pressure";

              // turbine parameter
              parameter Real eta_iso_nom = 0.85                            "Turbine Nominal isentropic efficiency";
              parameter Real s1_PR_start = s1_inlet_p/s1_outlet_p          "Turbine s1 pressure ratio start value";
              parameter Real s2_PR_start = s2_inlet_p/s2_outlet_p          "Turbine s2 pressure ratio start value";
              parameter Real s3_PR_start = s3_inlet_p/s3_outlet_p          "Turbine s3 pressure ratio start value";
              parameter Real s4_PR_start = s4_inlet_p/s4_outlet_p          "Turbine s4 pressure ratio start value";
              parameter Modelica.Units.SI.Area s1_Kt =   0.00958167        "Turbine s1 Kt coefficient of Stodola's law (m2) (From Steady State)";
              parameter Modelica.Units.SI.Area s2_Kt =   0.06022770        "Turbine s2 Kt coefficient of Stodola's law (m2) (From Steady State)";
              parameter Modelica.Units.SI.Area s3_Kt =   0.09938850        "Turbine s3 Kt coefficient of Stodola's law (m2) (From Steady State)";
              parameter Modelica.Units.SI.Area s4_Kt =   0.33250600        "Turbine s4 Kt coefficient of Stodola's law (m2) (From Steady State)";

              // temperature
              parameter Modelica.Units.SI.Temperature        s1_inlet_T =   303.7+273.15               "Turbine Stage 1 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s1_outlet_T =  152.8+273.15               "Turbine Stage 1 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        s2_inlet_T =   s1_outlet_T                "Turbine Stage 2 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s2_outlet_T =  127.2+273.15               "Turbine Stage 2 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        s3_inlet_T =   s2_outlet_T                "Turbine Stage 3 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s3_outlet_T =  86.8+273.15                "Turbine Stage 3 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        s4_inlet_T =   s3_outlet_T                "Turbine Stage 4 Inlet Temperature";
              parameter Modelica.Units.SI.Temperature        s4_outlet_T =  41.7+273.15                "Turbine Stage 4 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_outlet_T =   82.3+273.15          "LP FWH 2 Outlet Temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_outlet_T =  123.7+273.15          "LP FWH 1 Outlet Temperature";

              // massflow
              parameter Modelica.Units.SI.MassFlowRate       s1_mflow =        67.1                  "Turbine Stage 1 Mass Flow    67.1 => 67.1  ";
              parameter Modelica.Units.SI.MassFlowRate       s1_outlet_stext_mflow =        4.67973  "Turbine Stage 1 steam extraction";
              parameter Modelica.Units.SI.MassFlowRate       s2_mflow =        62.42                 "Turbine Stage 2 Mass Flow    63.5 => 62.42 ";
              parameter Modelica.Units.SI.MassFlowRate       s2_outlet_stext_mflow =        10.6700  "Turbine Stage 2 steam extraction";
              parameter Modelica.Units.SI.MassFlowRate       s3_mflow =        51.74                 "Turbine Stage 3 Mass Flow    58.45=> 51.74 ";
              parameter Modelica.Units.SI.MassFlowRate       s3_outlet_stext_mflow =        5.64136  "Turbine Stage 3 steam extraction";
              parameter Modelica.Units.SI.MassFlowRate       s4_mflow =        46.09                 "Turbine Stage 4 Mass Flow    53.46=> 46.09 ";
              parameter Modelica.Units.SI.MassFlowRate       condPump_mflow =  67.1                  "Condensate Pump Mass Flow                  ";
              parameter Modelica.Units.SI.MassFlowRate       FWPump_mflow =    67.1                  "Feedwater Pump Mass Flow                   ";

              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_shell_mflow =      15.94            "Mass Flow to LP FWH 1 from LP Turbine Stage 1  8.65 => 15.94  ";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_shell_mflow =      21.58            "Mass Flow to LP FWH 2 from LP Turbine Stage 2 13.64 => 21.58 ";

              // enthalpy
              parameter Modelica.Units.SI.SpecificEnthalpy   s1_inlet_h =          2824.15e3           "Turbine Stage 1 Inlet Enthalpy      2999.39e3 => 2824.15e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s1_outlet_h =         1904.99e3           "Turbine Stage 1 Outlet Enthalpy     2673.75e3 => 1904.99e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s2_inlet_h =          s1_outlet_h         "Turbine Stage 2 inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   s2_outlet_h =         2416.94e3           "Turbine Stage 2 Outlet Enthalpy     2563.03e3 => 2416.94e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s3_inlet_h =          s2_outlet_h         "Turbine Stage 3 inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   s3_outlet_h =         2246.02e3           "Turbine Stage 3 Outlet Enthalpy     2401.84e3 => 2246.02e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   s4_inlet_h =          s3_outlet_h         "Turbine Stage 4 inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   s4_outlet_h =         1751.20e3           "Turbine Stage 4 Outlet Enthalpy     2260.18e3 => 1751.20e3";
              parameter Modelica.Units.SI.SpecificEnthalpy   condenser_inlet_h =   s4_outlet_h         "Condenser inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   condenser_outlet_h =  138.1e3             "Condenser Outlet Enthalpy            138.10e3 => 174.837e3";

              // CondenserPump Pressure //

              // FWH Geometry //

              Modelica.Units.SI.Length   dimension_tube = 0.014122                                        "hydraulic diameter of tube";
              Modelica.Units.SI.Length   perimeter_tube = Modelica.Constants.pi*dimension_tube            "length of tube";

              Modelica.Units.SI.Length   length_tube = 9.9               "length of tube";

              parameter Integer nTube = 66                                                    "Number of Tubes";
              parameter Modelica.Units.SI.Area     exchSurface_G = 80.5409000 /66                "shell.geometry.surfaceArea_total";
              parameter Modelica.Units.SI.Area     exchSurface_F =  0.4392190                 "tube.geometry.surfaceArea_total";
              parameter Modelica.Units.SI.Area     extSurfaceTub = 0.4392190                  "tube.geometry.surfaceArea_total";
              parameter Modelica.Units.SI.Volume   gasVol = 2.00825                           "shell.geometry.V_total";
              parameter Modelica.Units.SI.Volume   fluidVol = 0.00155066                      "tube.geometry.V_total";
              parameter Modelica.Units.SI.Volume   metalVol = 0.000415046                     "metal volume";
              parameter Real rhomcm = 510*8.06*0.000001                                       "510 (J/kgK) * 8.06 (Mg/m3) * 1e-6 (kg/Mg) / Ref: SS304 azom.com";
              parameter Modelica.Units.SI.ThermalConductivity lambda = 16.7536                "Ref: SS304 azom.com";

              ////  HP_FWH  ////
              // 1. HP_FWH_Tube
              parameter Modelica.Units.SI.Pressure           HP_FWH_tube_inlet_p =           s1_inlet_p                "HP FWH tube Inlet pressure";
              parameter Modelica.Units.SI.Pressure           HP_FWH_tube_outlet_p =          s1_inlet_p                "HP FWH tube outlet pressure";
              parameter Modelica.Units.SI.Temperature        HP_FWH_tube_inlet_T =           LP_FWH1_tube_outlet_T     "HP FWH tube Inlet temperature";
              parameter Modelica.Units.SI.Temperature        HP_FWH_tube_outlet_T =          139.46 + 273.15           "HP FWH tube outlet temperature 148.9 + 273.15 => 139.46 + 273.15";
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_tube_mflow =             FWPump_mflow              "HP FWH tube massflow rate";
              // 2. HP_FWH_Shell
              parameter Modelica.Units.SI.Pressure           HP_FWH_shell_inlet_p =          s1_outlet_p             "HP FWH Shell Inlet pressure";
              parameter Modelica.Units.SI.Pressure           HP_FWH_shell_outlet_p =         s1_outlet_p             "HP FWH Shell Outlet pressure";
              parameter Modelica.Units.SI.SpecificEnthalpy   HP_FWH_shell_inlet_h =          s1_outlet_h             "HP FWH Shell Inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   HP_FWH_shell_outlet_h =         841.98e3                "HP FWH Shell Outlet Enthalpy   544.52e3 => 841.98e3  ";
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_shell_inlet_mflow =      5.212                   "Mass Flow to HP FWH (inlet)    3.6  => 5.212";
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_shell_outlet_mflow =     5.212                   "Mass Flow to HP FWH (outlet)   3.6  => 5.212";
              parameter Modelica.Units.SI.Temperature        HP_FWH_shell_inlet_T =          148.48 + 273            "Data from benchmark model (C)  20 => 148.48";

              // LP_FWH1 //
              // 1. LP_FWH1_Tube
              parameter Modelica.Units.SI.Pressure           LP_FWH1_tube_inlet_p =           s1_inlet_p              "LP FWH1 tube Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH1_tube_outlet_p =          s1_inlet_p              "LP FWH1 tube outlet pressure";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_tube_inlet_T =           LP_FWH2_tube_outlet_T   "LP FWH1 tube inlet temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_tube_outlet_T =          109.16 + 273.15         "LP FWH1 tube outlet temperature  123.7 => 109.16  ";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_tube_mflow =             condPump_mflow          "LP FWH1 tube massflow rate";

              // 2. LP_FWH1_Shell
              parameter Modelica.Units.SI.Pressure           LP_FWH1_shell_inlet_p =          s2_outlet_p             "LP FWH1 Shell Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH1_shell_outlet_p =         s2_outlet_p             "LP FWH1 Shell Outlet pressure";
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH1_shell_inlet_h =          s2_outlet_h             "LP FWH1 Shell Inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH1_shell_outlet_h =         1226.32e3                "LP FWH1 Shell Outlet Enthalpy   368.21e3 => 1226.32 ";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_shell_inlet_mflow =      15.79                    "Mass Flow to LP FWH1 (inlet)      8.65  => 15.79 ";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_shell_outlet_mflow =     15.79                    "Mass Flow to LP FWH1 (outlet)     8.65  => 15.79 ";
              parameter Modelica.Units.SI.Temperature        LP_FWH1_shell_inlet_T =          HP_FWH_shell_inlet_T     "Data from benchmark model (C)";

              // LP_FWH2 //
              // 1. LP_FWH2_Tube
              parameter Modelica.Units.SI.Pressure           LP_FWH2_tube_inlet_p =          s1_inlet_p              "LP FWH2 tube Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH2_tube_outlet_p =         s1_inlet_p              "LP FWH2 tube outlet pressure";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_tube_inlet_T =          s1_outlet_T             "LP FWH2 tube inlet temperature";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_tube_outlet_T =         96.61 + 273.15          "LP FWH2 tube outlet temperature  82.3 => 96.61";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_tube_mflow =            condPump_mflow          "LP FWH2 tube massflow rate";

              // 2. LP_FWH2_shell
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH2_shell_inlet_h =          s3_outlet_h            "LP FWH2 Shell Inlet Enthalpy";
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH2_shell_outlet_h =         1099.41e3               "LP FWH2 Shell Outlet Enthalpy    302.38 => 1099.41";
              parameter Modelica.Units.SI.Pressure           LP_FWH2_shell_inlet_p =          s3_outlet_p            "LP FWH2 Shell Inlet pressure";
              parameter Modelica.Units.SI.Pressure           LP_FWH2_shell_outlet_p =         s3_outlet_p            "LP FWH2 Shell Outlet pressure";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_shell_inlet_mflow =      21.37                  "Mass Flow to LP FWH2 (inlet)       13.64 => 21.37";
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_shell_outlet_mflow =     21.37                  "Mass Flow to LP FWH2 (outlet)      13.64 => 21.37";
              parameter Modelica.Units.SI.Temperature        LP_FWH2_shell_inlet_T =          HP_FWH_shell_inlet_T    "Data from benchmark model (C)";

              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                    coordinateSystem(preserveAspectRatio=false)));
            end Data_4;

            record Data_5
              extends Modelica.Icons.Record;
                package Medium = Modelica.Media.Water.WaterIF97_ph;

              // SG inlet/outlet boundary conditions
              parameter Modelica.Units.SI.Pressure nomi_source_p =             3.2e6             "Nominal pressure in SG outlet (Pa)" annotation (Evaluate=true, Dialog(group="SG inlet/outlet boundary conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy nomi_source_h =     2825.57e3         "Nominal specificEnthalpy in SG outlet (J/Kg)"
                                                                                                                                               annotation (Evaluate=true, Dialog(group="SG inlet/outlet boundary conditions"));
              parameter Modelica.Units.SI.Pressure nomi_sink_p =               3.2e6             "Nominal pressure in SG inlet (Pa)"
                                                                                                                                    annotation (Evaluate=true, Dialog(group="SG inlet/outlet boundary conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy nomi_sink_h =            590.089e3         "Nominal specificEnthalpy in SG inlet (J/Kg)"
                                                                                                                                                   annotation (Evaluate=true, Dialog(group="SG inlet/outlet boundary conditions"));

              //Turbine_s1_inlet
              parameter Modelica.Units.SI.Pressure           s1_inlet_p =                    3.2e6 annotation (Evaluate=true, Dialog(group="Turbine_s1_inlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       s1_inlet_mflow =                67.1 annotation (Evaluate=true, Dialog(group="Turbine_s1_inlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   s1_inlet_h =                    2824.15e3 annotation (Evaluate=true, Dialog(group="Turbine_s1_inlet_conditions"));

              //Turbine_s1_outlet
              parameter Modelica.Units.SI.Pressure           s1_outlet_p =                    0.47399e6 annotation (Evaluate=true, Dialog(group="Turbine_s1_outlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       s1_outlet_mflow =                67.1 annotation (Evaluate=true, Dialog(group="Turbine_s1_outlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   s1_outlet_h =                    2529.3e3 annotation (Evaluate=true, Dialog(group="Turbine_s1_outlet_conditions"));

              //Turbine_s2_Inlet
              parameter Modelica.Units.SI.Pressure           s2_inlet_p =                    0.4739e6 annotation (Evaluate=true, Dialog(group="Turbine_s2_inlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       s2_inlet_mflow =                62.42 annotation (Evaluate=true, Dialog(group="Turbine_s2_inlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   s2_inlet_h =                    2529.31e3 annotation (Evaluate=true, Dialog(group="Turbine_s2_inlet_conditions"));

              //Turbine_s2_outlet
              parameter Modelica.Units.SI.Pressure           s2_outlet_p =                    0.2109e6 annotation (Evaluate=true, Dialog(group="Turbine_s2_outlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       s2_outlet_mflow =                62.42 annotation (Evaluate=true, Dialog(group="Turbine_s2_outlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   s2_outlet_h =                    2419.09e3 annotation (Evaluate=true, Dialog(group="Turbine_s2_outlet_conditions"));

              //Turbine_s2_outlet_extraction
              parameter Modelica.Units.SI.Pressure           s2_out_ext_p =                    0.2109e6 annotation (Evaluate=true, Dialog(group="Turbine_s2_outlet_extracted_steam"));
              parameter Modelica.Units.SI.MassFlowRate       s2_out_ext_mflow =                10.67 annotation (Evaluate=true, Dialog(group="Turbine_s2_outlet_extracted_steam"));
              parameter Modelica.Units.SI.SpecificEnthalpy   s2_out_extlet_h =                 2419.09e3 annotation (Evaluate=true, Dialog(group="Turbine_s2_outlet_extracted_steam"));

              //Turbine_s3_Inlet
              parameter Modelica.Units.SI.Pressure           s3_inlet_p =                    0.2109e6 annotation (Evaluate=true, Dialog(group="Turbine_s3_inlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       s3_inlet_mflow =                51.74  annotation (Evaluate=true, Dialog(group="Turbine_s3_inlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   s3_inlet_h =                    2419.09e3 annotation (Evaluate=true, Dialog(group="Turbine_s3_inlet_conditions"));

              //Turbine_s3_outlet
              parameter Modelica.Units.SI.Pressure           s3_outlet_p =                    0.0514e6 annotation (Evaluate=true, Dialog(group="Turbine_s3_outlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       s3_outlet_mflow =                51.74 annotation (Evaluate=true, Dialog(group="Turbine_s3_outlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   s3_outlet_h =                    2247.86e3 annotation (Evaluate=true, Dialog(group="Turbine_s3_outlet_conditions"));

              //Turbine_s3_outlet_extraction
              parameter Modelica.Units.SI.Pressure           s3_out_ext_p =                    0.0514e6 annotation (Evaluate=true, Dialog(group="Turbine_s3_outlet_extracted_steam"));
              parameter Modelica.Units.SI.MassFlowRate       s3_out_ext_mflow =                5.6414 annotation (Evaluate=true, Dialog(group="Turbine_s2_outlet_extracted_steam"));
              parameter Modelica.Units.SI.SpecificEnthalpy   s3_out_extlet_h =                 2247.86e3 annotation (Evaluate=true, Dialog(group="Turbine_s2_outlet_extracted_steam"));

              //Turbine_s4_Inlet
              parameter Modelica.Units.SI.Pressure           s4_inlet_p =                    0.0514e6 annotation (Evaluate=true, Dialog(group="Turbine_s4_inlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       s4_inlet_mflow =                46.09 annotation (Evaluate=true, Dialog(group="Turbine_s4_inlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   s4_inlet_h =                    2247.86e3 annotation (Evaluate=true, Dialog(group="Turbine_s4_inlet_conditions"));

              //Turbine_s4_Outlet
              parameter Modelica.Units.SI.Pressure           s4_outlet_p =                    0.00816e6 annotation (Evaluate=true, Dialog(group="Turbine_s4_outlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       s4_outlet_mflow =                46.09 annotation (Evaluate=true, Dialog(group="Turbine_s4_outlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   s4_outlet_h =                    2056.54e3 annotation (Evaluate=true, Dialog(group="Turbine_s4_outlet_conditions"));

              //HP_FWH_Inlet
              parameter Modelica.Units.SI.Pressure           HP_FWH_shell_inlet_p =          0.4739e6 annotation (Evaluate=true, Dialog(group="HP_FWH_Inlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_shell_inlet_mflow =      4.6797 annotation (Evaluate=true, Dialog(group="HP_FWH_Inlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   HP_FWH_shell_inlet_h =          2529.31e3 annotation (Evaluate=true, Dialog(group="HP_FWH_Inlet_conditions"));
              parameter Modelica.Units.SI.Temperature        HP_FWH_shell_inlet_temp =       149.83 + 273.15 annotation (Evaluate=true, Dialog(group="HP_FWH_Inlet_conditions"));

              parameter Modelica.Units.SI.Pressure           HP_FWH_tube_inlet_p =          3.57e6 annotation (Evaluate=true, Dialog(group="HP_FWH_Inlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_tube_inlet_mflow =      67.1 annotation (Evaluate=true, Dialog(group="HP_FWH_Inlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   HP_FWH_tube_inlet_h =          458.92e3 annotation (Evaluate=true, Dialog(group="HP_FWH_Inlet_conditions"));

              //HP_FWH_outlet
              parameter Modelica.Units.SI.Pressure           HP_FWH_shell_outlet_p =          0.4739e6 annotation (Evaluate=true, Dialog(group="HP_FWH_Outlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_shell_outlet_mflow =      5.199 annotation (Evaluate=true, Dialog(group="HP_FWH_Outlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   HP_FWH_shell_outlet_h =          646.06e3 annotation (Evaluate=true, Dialog(group="HP_FWH_Outlet_conditions"));

              parameter Modelica.Units.SI.Pressure           HP_FWH_tube_outlet_p =          3.2049e6 annotation (Evaluate=true, Dialog(group="HP_FWH_Outlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       HP_FWH_tube_outlet_mflow =      67.1 annotation (Evaluate=true, Dialog(group="HP_FWH_Outlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   HP_FWH_tube_outlet_h =          590.09e3 annotation (Evaluate=true, Dialog(group="HP_FWH_Outlet_conditions"));

              //LP_FWH1_Inlet
              parameter Modelica.Units.SI.Pressure           LP_FWH1_shell_inlet_p =          0.2109e6 annotation (Evaluate=true, Dialog(group="LP_FWH1_Inlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_shell_inlet_mflow =      15.94 annotation (Evaluate=true, Dialog(group="LP_FWH1_Inlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH1_shell_inlet_h =          1833.77e3 annotation (Evaluate=true, Dialog(group="LP_FWH1_Inlet_conditions"));
              parameter Modelica.Units.SI.Temperature        LP_FWH1_shell_inlet_temp =       121.90 annotation (Evaluate=true, Dialog(group="LP_FWH1_Inlet_conditions"));

              parameter Modelica.Units.SI.Pressure           LP_FWH1_tube_inlet_p =          0.4993e6 annotation (Evaluate=true, Dialog(group="LP_FWH1_Inlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_tube_inlet_mflow =      67.1 annotation (Evaluate=true, Dialog(group="LP_FWH1_Inlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH1_tube_inlet_h =          406.077e3 annotation (Evaluate=true, Dialog(group="LP_FWH1_Inlet_conditions"));

              //LP_FWH1_outlet
              parameter Modelica.Units.SI.Pressure           LP_FWH1_shell_outlet_p =          0.2109e6 annotation (Evaluate=true, Dialog(group="LP_FWH1_Outlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_shell_outlet_mflow =      15.94  annotation (Evaluate=true, Dialog(group="LP_FWH1_Outlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH1_shell_outlet_h =          1167.36e3  annotation (Evaluate=true, Dialog(group="LP_FWH1_Outlet_conditions"));

              parameter Modelica.Units.SI.Pressure           LP_FWH1_tube_outlet_p =          0.1405e6  annotation (Evaluate=true, Dialog(group="LP_FWH1_Outlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH1_tube_outlet_mflow =      67.1  annotation (Evaluate=true, Dialog(group="LP_FWH1_Outlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH1_tube_outlet_h =          458.903e3  annotation (Evaluate=true, Dialog(group="LP_FWH1_Outlet_conditions"));

              //LP_FWH2_Inlet
              parameter Modelica.Units.SI.Pressure           LP_FWH2_shell_inlet_p =          0.0513e6 annotation (Evaluate=true, Dialog(group="LP_FWH2_Inlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_shell_inlet_mflow =      21.58 annotation (Evaluate=true, Dialog(group="LP_FWH2_Inlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH2_shell_inlet_h =          1449.78e3 annotation (Evaluate=true, Dialog(group="LP_FWH2_Inlet_conditions"));
              parameter Modelica.Units.SI.Temperature        LP_FWH2_shell_inlet_temp =       82.03 annotation (Evaluate=true, Dialog(group="LP_FWH2_Inlet_conditions"));

              parameter Modelica.Units.SI.Pressure           LP_FWH2_tube_inlet_p =          0.8545e6 annotation (Evaluate=true, Dialog(group="LP_FWH2_Inlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_tube_inlet_mflow =      67.1 annotation (Evaluate=true, Dialog(group="LP_FWH2_Inlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH2_tube_inlet_h =          258.298e3 annotation (Evaluate=true, Dialog(group="LP_FWH2_Inlet_conditions"));

              //LP_FWH2_outlet
              parameter Modelica.Units.SI.Pressure           LP_FWH2_shell_outlet_p =          0.0513e6 annotation (Evaluate=true, Dialog(group="LP_FWH2_Outlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_shell_outlet_mflow =      21.58 annotation (Evaluate=true, Dialog(group="LP_FWH2_Outlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH2_shell_outlet_h =          1058.76e3 annotation (Evaluate=true, Dialog(group="LP_FWH2_Outlet_conditions"));

              parameter Modelica.Units.SI.Pressure           LP_FWH2_tube_outlet_p =          0.4993e6 annotation (Evaluate=true, Dialog(group="LP_FWH2_Outlet_conditions"));
              parameter Modelica.Units.SI.MassFlowRate       LP_FWH2_tube_outlet_mflow =      67.1 annotation (Evaluate=true, Dialog(group="LP_FWH2_Outlet_conditions"));
              parameter Modelica.Units.SI.SpecificEnthalpy   LP_FWH2_tube_outlet_h =          406.077e3 annotation (Evaluate=true, Dialog(group="LP_FWH2_Outlet_conditions"));

              // Before Condenser
              parameter Modelica.Units.SI.Pressure           condenser_before_p =  0.00816e6     "before Condenser Pressure" annotation (Evaluate=true, Dialog(group="Parameters Before Condenser"));
              parameter Modelica.Units.SI.SpecificEnthalpy   condenser_before_h =  1738.36e3     "before Condenser enthalpy" annotation (Evaluate=true, Dialog(group="Parameters Before Condenser"));

              //Condenser
              parameter Modelica.Units.SI.Pressure           condenser_p =  0.0081e6                "Condenser Pressure" annotation (Evaluate=true, Dialog(group="Condenser"));

              //Condenser Pump
              parameter Modelica.Units.SI.MassFlowRate       condPump_mflow =  67.1                  "Condensate Pump Mass Flow" annotation (Evaluate=true, Dialog(group="Condenser Pump"));

              //Feedwater Pump
              parameter Modelica.Units.SI.MassFlowRate       FWPump_mflow =    67.1                  "Feedwater Pump Mass Flow" annotation (Evaluate=true, Dialog(group="Feedwater Pump"));

              // turbine parameter
              parameter Real eta_iso_nom = 0.85                            "Turbine Nominal isentropic efficiency" annotation (Evaluate=true, Dialog(group="Turbine Parameters"));
              parameter Real s1_PR_start = s1_inlet_p / s1_outlet_p        "Turbine s1 pressure ratio start value" annotation (Evaluate=true, Dialog(group="Turbine Parameters"));
              parameter Real s2_PR_start = s2_inlet_p / s2_outlet_p          "Turbine s2 pressure ratio start value" annotation (Evaluate=true, Dialog(group="Turbine Parameters"));
              parameter Real s3_PR_start = s3_inlet_p / s3_outlet_p          "Turbine s3 pressure ratio start value" annotation (Evaluate=true, Dialog(group="Turbine Parameters"));
              parameter Real s4_PR_start = s4_inlet_p / s4_outlet_p          "Turbine s4 pressure ratio start value" annotation (Evaluate=true, Dialog(group="Turbine Parameters"));
              parameter Modelica.Units.SI.Area s1_Kt =   0.00958167        "Turbine s1 Kt coefficient of Stodola's law (m2) (From Steady State)" annotation (Evaluate=true, Dialog(group="Turbine Parameters"));
              parameter Modelica.Units.SI.Area s2_Kt =   0.06022770        "Turbine s2 Kt coefficient of Stodola's law (m2) (From Steady State)" annotation (Evaluate=true, Dialog(group="Turbine Parameters"));
              parameter Modelica.Units.SI.Area s3_Kt =   0.09938850        "Turbine s3 Kt coefficient of Stodola's law (m2) (From Steady State)" annotation (Evaluate=true, Dialog(group="Turbine Parameters"));
              parameter Modelica.Units.SI.Area s4_Kt =   0.33250600        "Turbine s4 Kt coefficient of Stodola's law (m2) (From Steady State)" annotation (Evaluate=true, Dialog(group="Turbine Parameters"));

              // FWH Geometry

              Modelica.Units.SI.Length   dimension_tube = 0.014122                                        "hydraulic diameter of tube" annotation (Evaluate=true, Dialog(group="FWH Geometry"));
              Modelica.Units.SI.Length   perimeter_tube = Modelica.Constants.pi*dimension_tube            "length of tube" annotation (Evaluate=true, Dialog(group="FWH Geometry"));

              Modelica.Units.SI.Length   length_tube = 9.9               "length of tube" annotation (Evaluate=true, Dialog(group="FWH Geometry"));

              parameter Integer nTube = 66                                                    "Number of Tubes" annotation (Evaluate=true, Dialog(group="FWH Geometry"));
              parameter Modelica.Units.SI.Area     exchSurface_G = 80.5409000 /66                "shell.geometry.surfaceArea_total" annotation (Evaluate=true, Dialog(group="FWH Geometry"));
              parameter Modelica.Units.SI.Area     exchSurface_F =  0.4392190                 "tube.geometry.surfaceArea_total" annotation (Evaluate=true, Dialog(group="FWH Geometry"));
              parameter Modelica.Units.SI.Area     extSurfaceTub = 0.4392190                  "tube.geometry.surfaceArea_total" annotation (Evaluate=true, Dialog(group="FWH Geometry"));
              parameter Modelica.Units.SI.Volume   gasVol = 2.00825                           "shell.geometry.V_total" annotation (Evaluate=true, Dialog(group="FWH Geometry"));
              parameter Modelica.Units.SI.Volume   fluidVol = 0.00155066                      "tube.geometry.V_total" annotation (Evaluate=true, Dialog(group="FWH Geometry"));
              parameter Modelica.Units.SI.Volume   metalVol = 0.000415046                     "metal volume" annotation (Evaluate=true, Dialog(group="FWH Geometry"));
              parameter Real rhomcm = 510*8000                                                "510 (J/kgK) * 8000 (Kg/m3)  / Ref: SS304 azom.com" annotation (Evaluate=true, Dialog(group="FWH Geometry"));
              parameter Modelica.Units.SI.ThermalConductivity lambda = 14                     "Ref: SS304 azom.com" annotation (Evaluate=true, Dialog(group="FWH Geometry"));

              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                    coordinateSystem(preserveAspectRatio=false)));
            end Data_5;
          end Data_Record;

          package Components
            model Pump_ControlledFlowRate "Pump with flow rate control"
              import ThermoPower;
              replaceable package FluidMedium = ThermoPower.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialTwoPhaseMedium;

              parameter Modelica.Units.SI.VolumeFlowRate q_nom[3]
                "Nominal volume flow rates";
              parameter Modelica.Units.SI.Height head_nom[3] "Nominal heads";
              parameter Integer Np0=1 "Nominal number of pumps in parallel";
              parameter Modelica.Units.SI.Volume V=0 "Pump Internal Volume";
              parameter Modelica.Units.SI.Density rho0 "Nominal density";
              parameter Modelica.Units.NonSI.AngularVelocity_rpm n0 "Nominal rpm";
              parameter Modelica.Units.SI.Pressure nominalOutletPressure
                "Nominal outlet pressure";
              parameter Modelica.Units.SI.Pressure nominalInletPressure
                "Nominal inlet pressure";
              parameter Modelica.Units.SI.MassFlowRate nominalFlow "Nominal mass flow rate";
              parameter Modelica.Units.SI.SpecificEnthalpy hstart=1e5
                "Fluid Specific Enthalpy Start Value"
                annotation (Dialog(tab="Initialization"));
              parameter Boolean SSInit=false "Steady-state initialization"
                annotation (Dialog(tab="Initialization"));

              //PID for flow rate control
              parameter Real Kp=4 "Proportional gain (normalised units)"
                annotation (Dialog(tab="PID"));
              parameter Modelica.Units.SI.Time Ti=200 "Integral time"
                annotation (Dialog(tab="PID"));
              parameter Modelica.Units.SI.Time Td=0 "Derivative time"
                annotation (Dialog(tab="PID"));
              parameter Real PVmin=-1 "Minimum value of process variable for scaling"
                annotation (Dialog(tab="PID"));
              parameter Real PVmax=1 "Maximum value of process variable for scaling"
                annotation (Dialog(tab="PID"));
              parameter Real CSmin=500 "Minimum value of control signal for scaling"
                annotation (Dialog(tab="PID"));
              parameter Real CSmax=2500 "Maximum value of control signal for scaling"
                annotation (Dialog(tab="PID"));
              parameter Real PVstart=0.5 "Start value of PV (scaled)"
                annotation (Dialog(tab="PID"));
              parameter Real CSstart=0.5 "Start value of CS (scaled)"
                annotation (Dialog(tab="PID"));
              parameter Modelica.Units.SI.Time T_filter=1 "Time Constant of the filter"
                annotation (Dialog(tab="PID"));

            public
              ThermoPower.PowerPlants.HRSG.Components.PrescribedSpeedPump pump(
                redeclare package WaterMedium = FluidMedium,
                q_nom=q_nom,
                head_nom=head_nom,
                n0=n0,
                hstart=hstart,
                Np0=Np0,
                V=V,
                rho0=rho0,
                nominalOutletPressure=nominalOutletPressure,
                nominalInletPressure=nominalInletPressure,
                nominalFlow=nominalFlow,
                SSInit=SSInit) annotation (Placement(transformation(
                    origin={-24,0},
                    extent={{16,16},{-16,-16}},
                    rotation=180)));
              ThermoPower.Water.SensW feed_w(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(
                    origin={30,4},
                    extent={{10,10},{-10,-10}},
                    rotation=180)));
              ThermoPower.Water.FlangeA inlet(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(extent={{-120,-20},{-80,20}},
                      rotation=0)));
              ThermoPower.Water.FlangeB outlet(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(extent={{80,-20},{120,20}},
                      rotation=0)));
              Modelica.Blocks.Interfaces.RealInput setpoint_FlowRate annotation (
                  Placement(transformation(extent={{-120,54},{-88,86}}, rotation=0)));
              ThermoPower.PowerPlants.Control.PID pID(
                Kp=Kp,
                Ti=Ti,
                Td=Td,
                PVmin=PVmin,
                PVmax=PVmax,
                CSmin=CSmin,
                CSmax=CSmax,
                PVstart=PVstart,
                CSstart=CSstart,
                steadyStateInit=SSInit) annotation (Placement(transformation(
                    origin={0,50},
                    extent={{-10,10},{10,-10}},
                    rotation=180)));
              Modelica.Blocks.Continuous.FirstOrder firstOrder(
                T=10,
                y_start=67.1,
                initType=if SSInit then Modelica.Blocks.Types.Init.SteadyState else
                    Modelica.Blocks.Types.Init.NoInit) annotation (Placement(
                    transformation(extent={{-26,40},{-46,60}}, rotation=0)));

            equation
              connect(pID.PV, feed_w.w) annotation (Line(points={{10,46},{60,46},{60,
                      10},{38,10}}, color={0,0,127}));
              connect(pID.SP, setpoint_FlowRate) annotation (Line(points={{10,54},{20,
                      54},{20,70},{-104,70}}, color={0,0,127}));
              connect(firstOrder.u, pID.CS)
                annotation (Line(points={{-24,50},{-10,50}}, color={0,0,127}));
              connect(firstOrder.y, pump.pumpSpeed_rpm) annotation (Line(points={{-47,
                      50},{-60,50},{-60,9.6},{-35.52,9.6}}, color={0,0,127}));
              connect(outlet, feed_w.outlet) annotation (Line(
                  points={{100,0},{68,0},{68,-8.88178e-016},{36,-8.88178e-016}},
                  color={0,0,255},
                  thickness=0.5,
                  smooth=Smooth.None));
              connect(feed_w.inlet, pump.outlet) annotation (Line(
                  points={{24,8.88178e-016},{8,8.88178e-016},{8,-1.95943e-015},{-8,-1.95943e-015}},
                  color={0,0,255},
                  thickness=0.5,
                  smooth=Smooth.None));

              connect(pump.inlet, inlet) annotation (Line(
                  points={{-40,1.95943e-015},{-66,1.95943e-015},{-66,0},{-100,0}},
                  color={0,0,255},
                  thickness=0.5,
                  smooth=Smooth.None));
              annotation (Icon(graphics={Rectangle(
                            extent={{-100,100},{100,-100}},
                            lineColor={0,0,255},
                            fillColor={240,240,240},
                            fillPattern=FillPattern.Solid),Text(
                            extent={{-100,-118},{100,-144}},
                            lineColor={0,0,255},
                            textString="%name"),Ellipse(
                            extent={{-62,60},{58,-60}},
                            lineColor={0,0,0},
                            fillPattern=FillPattern.Sphere),Polygon(
                            points={{-32,32},{-32,-28},{46,0},{-32,32}},
                            lineColor={0,0,0},
                            pattern=LinePattern.None,
                            fillPattern=FillPattern.HorizontalCylinder,
                            fillColor={255,255,255}),Rectangle(
                            extent={{-88,90},{-48,50}},
                            lineColor={0,0,255},
                            fillColor={255,255,255},
                            fillPattern=FillPattern.Solid),Text(
                            extent={{-86,88},{-50,52}},
                            lineColor={0,0,255},
                            fillColor={170,213,255},
                            fillPattern=FillPattern.Solid,
                            textString="C"),Line(points={{-48,70},{-2,70},{-2,60}},
                      color={0,0,127}),Line(
                            points={{-62,0},{-80,0}},
                            color={0,0,255},
                            thickness=0.5),Line(points={{-70,0},{-70,50}}, color={0,0,
                      255}),Polygon(
                            points={{-70,46},{-72,40},{-68,40},{-70,46}},
                            lineColor={0,0,255},
                            lineThickness=0.5,
                            fillColor={0,0,255},
                            fillPattern=FillPattern.Solid),Polygon(
                            points={{-30,72},{-30,68},{-24,70},{-30,72}},
                            lineColor={0,0,127},
                            fillColor={0,0,127},
                            fillPattern=FillPattern.Solid)}), Diagram(graphics));
            end Pump_ControlledFlowRate;

            model HE_v1 "Heat Exchanger fluid - gas"
              extends
                FinalProject.PrimeMovers.Steam.PlantC.Turbo_Machinery_Modeling.Interface.HE_interface_up;

              replaceable model HeatTransfer_F =
                  ThermoPower.Thermal.HeatTransferFV.IdealHeatTransfer constrainedby
                ThermoPower.Thermal.BaseClasses.DistributedHeatTransferFV
              annotation (choicesAllMatching=true);
              replaceable model HeatTransfer_G =
                  ThermoPower.Thermal.HeatTransferFV.IdealHeatTransfer constrainedby
                ThermoPower.Thermal.BaseClasses.DistributedHeatTransferFV
              annotation (choicesAllMatching=true);

              replaceable model HeatExchangerTopology =
                  ThermoPower.Thermal.HeatExchangerTopologies.CoCurrentFlow constrainedby
                ThermoPower.Thermal.BaseClasses.HeatExchangerTopologyData
              annotation(choicesAllMatching=true);

              parameter ThermoPower.Choices.Flow1D.FFtypes FFtype_G=ThermoPower.Choices.Flow1D.FFtypes.NoFriction
                "Friction Factor Type, gas side";
              parameter Real Kfnom_G=0
                "Nominal hydraulic resistance coefficient, gas side";
              parameter Modelica.Units.SI.Pressure dpnom_G=0
                "Nominal pressure drop, gas side (friction term only!)";
              parameter Modelica.Units.SI.Density rhonom_G=0
                "Nominal inlet density, gas side";
              parameter Real Cfnom_G=0 "Nominal Fanning friction factor, gas side";
              parameter ThermoPower.Choices.Flow1D.FFtypes FFtype_F=ThermoPower.Choices.Flow1D.FFtypes.NoFriction
                "Friction Factor Type, fluid side";
              parameter Real Kfnom_F=0 "Nominal hydraulic resistance coefficient";
              parameter Modelica.Units.SI.Pressure dpnom_F=0
                "Nominal pressure drop fluid side (friction term only!)";
              parameter Modelica.Units.SI.Density rhonom_F=0
                "Nominal inlet density fluid side";
              parameter Modelica.Units.SI.PerUnit Cfnom_F=0
                "Nominal Fanning friction factor";
              parameter ThermoPower.Choices.Flow1D.HCtypes HCtype_F=ThermoPower.Choices.Flow1D.HCtypes.Downstream
                "Location of the hydraulic capacitance, fluid side";
              parameter Boolean gasQuasiStatic=false
                "Quasi-static model of the flue gas (mass, energy and momentum static balances";
              constant Real pi=Modelica.Constants.pi;
              final parameter Modelica.Units.SI.Distance L=1 "Tube length";
              parameter ThermoPower.Choices.FluidPhase.FluidPhases FluidPhaseStart=
                  ThermoPower.Choices.FluidPhase.FluidPhases.Liquid
                "Fluid phase (only for initialization!)"
                annotation (Dialog(tab="Initialization"));

              ThermoPower.Water.Flow1DFV liquidFlow(
                Nt=Nt,
                N=N_F,
                Nw=Nw_F,
                wnom=fluidNomFlowRate,
                initOpt=if SSInit then ThermoPower.Choices.Init.Options.steadyState
                     else ThermoPower.Choices.Init.Options.noInit,
                redeclare package Medium = FluidMedium,
                L=exchSurface_F^2/(fluidVol*pi*4),
                A=(fluidVol*4/exchSurface_F)^2/4*pi,
                omega=fluidVol*4/exchSurface_F*pi,
                Dhyd=fluidVol*4/exchSurface_F,
                FFtype=FFtype_F,
                HydraulicCapacitance=HCtype_F,
                Kfnom=Kfnom_F,
                dpnom=dpnom_F,
                rhonom=rhonom_F,
                Cfnom=Cfnom_F,
                FluidPhaseStart=FluidPhaseStart,
                pstart=pstart_F,
                redeclare model HeatTransfer = HeatTransfer_F) annotation (Placement(
                    transformation(extent={{-10,-66},{10,-46}}, rotation=0)));

              ThermoPower.Water.Flow1DFV steamFlow(
                Nt=1,
                N=N_G,
                Nw=Nw_G,
                Dhyd=1,
                wnom=gasNomFlowRate,
                initOpt=if SSInit then ThermoPower.Choices.Init.Options.steadyState
                     else ThermoPower.Choices.Init.Options.noInit,
                redeclare package Medium = FlueGasMedium,
                pstart=pstart_G,
                L=L,
                A=gasVol/L,
                omega=exchSurface_G/L,
                FFtype=FFtype_F,
                Kfnom=Kfnom_G,
                dpnom=dpnom_F,
                rhonom=rhonom_G,
                Cfnom=Cfnom_G,
                redeclare model HeatTransfer = HeatTransfer_F) annotation (Placement(
                    transformation(extent={{-12,66},{12,46}}, rotation=0)));

              ThermoPower.Thermal.MetalTubeFV metalTube(
                Nw=Nw_F,
                L=exchSurface_F^2/(fluidVol*pi*4),
                rint=fluidVol*4/exchSurface_F/2,
                rext=(metalVol + fluidVol)*4/extSurfaceTub/2,
                rhomcm=rhomcm,
                lambda=lambda,
                WallRes=false)
                annotation (Placement(transformation(extent={{-10,-4},{10,-24}})));

              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopology(Nw=Nw_F,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=
                        2))
                annotation (Placement(transformation(extent={{-10,6},{10,26}})));
            equation
              connect(liquidFlow.outfl, WaterOut) annotation (Line(
                  points={{10,-56},{40,-56},{40,-100},{0,-100}},
                  thickness=0.5,
                  color={0,0,255}));
              connect(liquidFlow.infl, WaterIn) annotation (Line(
                  points={{-10,-56},{-40,-56},{-40,100},{0,100}},
                  thickness=0.5,
                  color={0,0,255}));
              connect(heatExchangerTopology.side1, steamFlow.wall) annotation (Line(
                  points={{0,19},{0,51}},
                  color={255,127,0},
                  smooth=Smooth.None));
              connect(steamIn, steamFlow.infl) annotation (Line(points={{-100,0},{-100,
                      56},{-12,56}}, color={0,0,255}));
              connect(steamFlow.outfl, steamOut) annotation (Line(points={{12,56},{100,
                      56},{100,0}}, color={159,159,223}));
              connect(metalTube.int, liquidFlow.wall)
                annotation (Line(points={{0,-17},{0,-51}}, color={255,127,0}));
              connect(heatExchangerTopology.side2, metalTube.ext)
                annotation (Line(points={{0,12.9},{0,-10.9}}, color={255,127,0}));
              annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                        -100},{100,100}})));
            end HE_v1;

            model Mixer_2 "Mixer with metal walls for water/steam flows"
              extends ThermoPower.Icons.Water.Mixer;
              replaceable package Medium = ThermoPower.Water.StandardWater constrainedby
                Modelica.Media.Interfaces.PartialMedium "Medium model"
                annotation(choicesAllMatching = true);
              Medium.ThermodynamicState fluidState "Thermodynamic state of the fluid";
              parameter Modelica.Units.SI.Volume V "Internal volume";
              parameter Modelica.Units.SI.Area S=0 "Internal surface";
              parameter Modelica.Units.SI.CoefficientOfHeatTransfer gamma=0
                "Internal Heat Transfer Coefficient" annotation (Evaluate=true);
              parameter Modelica.Units.SI.HeatCapacity Cm=0 "Metal Heat Capacity"
                annotation (Evaluate=true);
              parameter Boolean allowFlowReversal=system.allowFlowReversal
                "= true to allow flow reversal, false restricts to design direction"
                annotation(Evaluate=true);
              outer ThermoPower.System system "System wide properties";
              parameter ThermoPower.Choices.FluidPhase.FluidPhases FluidPhaseStart=
                  ThermoPower.Choices.FluidPhase.FluidPhases.Liquid
                "Fluid phase (only for initialization!)"
                annotation (Dialog(tab="Initialisation"));
              parameter Medium.AbsolutePressure pstart "Pressure start value"
                annotation (Dialog(tab="Initialisation"));
              parameter Medium.SpecificEnthalpy hstart=if FluidPhaseStart ==ThermoPower.Choices.FluidPhase.FluidPhases.Liquid
                   then 1e5 else if FluidPhaseStart ==ThermoPower.Choices.FluidPhase.FluidPhases.Steam
                   then 3e6 else 1e6 "Specific enthalpy start value"
                annotation (Dialog(tab="Initialisation"));
              parameter Medium.Temperature Tmstart=300
                "Metal wall temperature start value"
                annotation (Dialog(tab="Initialisation"));
              parameter ThermoPower.Choices.Init.Options initOpt=system.initOpt
                "Initialisation option" annotation (Dialog(tab="Initialisation"));
              parameter Boolean noInitialPressure=false
                "Remove initial equation on pressure"
                annotation (Dialog(tab="Initialisation"),choices(checkBox=true));
              parameter Boolean noInitialEnthalpy=false
                "Remove initial equation on enthalpy"
                annotation (Dialog(tab="Initialisation"),choices(checkBox=true));

              ThermoPower.Water.FlangeA in1(
                h_outflow(start=hstart),
                redeclare package Medium = Medium,
                m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0))
                annotation (Placement(transformation(extent={{-124,-20},{-84,20}}, rotation=
                       0), iconTransformation(extent={{-124,-20},{-84,20}})));
              ThermoPower.Water.FlangeB out1(
                h_outflow(start=hstart),
                redeclare package Medium = Medium,
                m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0))
                annotation (Placement(transformation(extent={{80,40},{120,80}}, rotation=0)));
              Medium.AbsolutePressure p(start=pstart, stateSelect=if Medium.singleState then StateSelect.avoid
                     else StateSelect.prefer) "Fluid pressure";
              Medium.SpecificEnthalpy h(start=hstart, stateSelect=StateSelect.prefer)
                "Fluid specific enthalpy";
              Medium.SpecificEnthalpy hi1 "Inlet 1 specific enthalpy";
              Medium.SpecificEnthalpy hi2 "Inlet 2 specific enthalpy";
              Medium.SpecificEnthalpy ho "Outlet specific enthalpy";
              Modelica.Units.SI.Mass M "Fluid mass";
              Modelica.Units.SI.Energy E "Fluid energy";
              Modelica.Units.SI.HeatFlowRate Q "Heat flow rate exchanged with the outside";
              Medium.Temperature T "Fluid temperature";
              Medium.Temperature Tm(start=Tmstart) "Wall temperature";
              Modelica.Units.SI.Time Tr "Residence time";
              ThermoPower.Water.FlangeB out2(
                h_outflow(start=hstart),
                redeclare package Medium = Medium,
                m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0))
                annotation (Placement(transformation(extent={{80,-80},{120,-40}}, rotation=0)));
            equation
              // Set fluid properties
              fluidState = Medium.setState_phX(p, h);
              T = Medium.temperature(fluidState);

              M = V*Medium.density(fluidState) "Fluid mass";
              E = M*Medium.specificInternalEnergy(fluidState) "Fluid energy";
              der(M) =in1.m_flow + out1.m_flow + out2.m_flow "Fluid mass balance";
              der(E) =in1.m_flow*hi1 + out1.m_flow*hi2 + out2.m_flow*ho - gamma*S*(T - Tm) +
                Q    "Fluid energy balance";
              if Cm > 0 and gamma > 0 then
                Cm*der(Tm) = gamma*S*(T - Tm) "Metal wall energy balance";
              else
                Tm = T;
              end if;

              // Boundary conditions
              hi1 = homotopy(if not allowFlowReversal then inStream(in1.h_outflow) else
                actualStream(in1.h_outflow), inStream(in1.h_outflow));
              hi2 = homotopy(if not allowFlowReversal then inStream(in2.h_outflow) else
                actualStream(in2.h_outflow), inStream(in2.h_outflow));
              ho =homotopy(if not allowFlowReversal then h else actualStream(out1.h_outflow),
                h);
              in1.h_outflow = h;
              in2.h_outflow = h;
              out1.h_outflow = h;
              in1.p = p;
              in2.p = p;
              out1.p = p;
              thermalPort.Q_flow = Q;
              thermalPort.T = T;

              Tr =noEvent(M/max(abs(out1.m_flow), Modelica.Constants.eps))
                "Residence time";

            initial equation
              // Initial conditions
              if initOpt == ThermoPower.Choices.Init.Options.noInit then
                // do nothing
              elseif initOpt == ThermoPower.Choices.Init.Options.fixedState then
                if not noInitialPressure then
                  p = pstart;
                end if;
                if not noInitialEnthalpy then
                  h = hstart;
                end if;
                if (Cm > 0 and gamma > 0) then
                  Tm = Tmstart;
                end if;
              elseif initOpt == ThermoPower.Choices.Init.Options.steadyState then
                if not noInitialEnthalpy then
                  der(h) = 0;
                end if;
                if (not Medium.singleState and not noInitialPressure) then
                  der(p) = 0;
                end if;
                if (Cm > 0 and gamma > 0) then
                  der(Tm) = 0;
                end if;
              elseif initOpt == ThermoPower.Choices.Init.Options.steadyStateNoP then
                if not noInitialEnthalpy then
                  der(h) = 0;
                end if;
                if (Cm > 0 and gamma > 0) then
                  der(Tm) = 0;
                end if;
              else
                assert(false, "Unsupported initialisation option");
              end if;

              annotation (
                Placement(transformation(extent={{80,-20},{120,20}}, rotation=0)),
                Documentation(info="<HTML>
<p>This model describes a constant volume mixer with metal walls. The fluid can be water, steam, or a two-phase mixture. The metal wall temperature and the heat transfer coefficient between the wall and the fluid are uniform. The wall is thermally insulated from the outside.
</HTML>",           revisions="<html>
<ul>
<li><i>23 May 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       Thermal port added.</li>
<li><i>30 May 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco Casella</a>:<br>
       Initialisation support added.</li>
<li><i>16 Dec 2004</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco Casella</a>:<br>
       Standard medium definition added.</li>
<li><i>18 Jun 2004</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco Casella</a>:<br>
       Adapted to Modelica.Media.</li>
<li><i>1 Oct 2003</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco Casella</a>:<br>
       First release.</li>
</ul>
</html>"),      Icon(graphics),
                Diagram(graphics));
            end Mixer_2;

            model HE_v2 "Heat Exchanger fluid - gas"

              replaceable package FlueGasMedium = ThermoPower.Media.FlueGas
                constrainedby Modelica.Media.Interfaces.PartialMedium
                "Flue gas model";
              replaceable package FluidMedium = ThermoPower.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance
                "Fluid model";

              parameter Integer N_G=2 "Number of node of the gas side";
              parameter Integer N_F=2 "Number of node of the fluid side";

              //Nominal parameter
              parameter Modelica.Units.SI.MassFlowRate gasNomFlowRate
                "Nominal flow rate through the gas side";
              parameter Modelica.Units.SI.MassFlowRate fluidNomFlowRate
                "Nominal flow rate through the fluid side";
              parameter Modelica.Units.SI.Pressure gasNomPressure
                "Nominal pressure in the gas side inlet";
              parameter Modelica.Units.SI.Pressure fluidNomPressure
                "Nominal pressure in the fluid side inlet";

              //Physical Parameter
              parameter Modelica.Units.SI.Area exchSurface_G
                "Exchange surface between gas - metal tube";
              parameter Modelica.Units.SI.Area exchSurface_F
                "Exchange surface between metal tube - fluid";
              parameter Modelica.Units.SI.Area extSurfaceTub
                "Total external surface of the tubes";
              parameter Modelica.Units.SI.Volume gasVol "Gas volume";
              parameter Modelica.Units.SI.Volume fluidVol "Fluid volume";
              parameter Modelica.Units.SI.Volume metalVol
                "Volume of the metal part in the tubes";
              parameter Real rhomcm "Metal heat capacity per unit volume [J/m^3.K]";
              parameter Modelica.Units.SI.ThermalConductivity lambda
                "Thermal conductivity of the metal (density by specific heat capacity)";

              //Start values

              parameter Modelica.Units.SI.Temperature Tstart_G
                "Average gas temperature start value"
                annotation (Dialog(tab="Initialization"));
              parameter Modelica.Units.SI.Temperature Tstart_M
                "Average metal wall temperature start value"
                annotation (Dialog(tab="Initialization"));
              parameter ThermoPower.Choices.FluidPhase.FluidPhases FluidPhaseStart=
                  ThermoPower.Choices.FluidPhase.FluidPhases.Liquid
                "Initialization fluid phase" annotation (Dialog(tab="Initialization"));
              parameter Modelica.Units.SI.CoefficientOfHeatTransfer gamma_G
                "Constant heat transfer coefficient in the gas side";
              parameter Modelica.Units.SI.CoefficientOfHeatTransfer gamma_F
                "Constant heat transfer coefficient in the fluid side";
              parameter ThermoPower.Choices.Flow1D.FFtypes FFtype_G=ThermoPower.Choices.Flow1D.FFtypes.NoFriction
                "Friction Factor Type, gas side";
              parameter Real Kfnom_G=0
                "Nominal hydraulic resistance coefficient, gas side";
              parameter Modelica.Units.SI.PressureDifference dpnom_G=0
                "Nominal pressure drop, gas side (friction term only!)";
              parameter Modelica.Units.SI.Density rhonom_G=0
                "Nominal inlet density, gas side";
              parameter Real Cfnom_G=0 "Nominal Fanning friction factor, gsa side";
              parameter ThermoPower.Choices.Flow1D.FFtypes FFtype_F=ThermoPower.Choices.Flow1D.FFtypes.NoFriction
                "Friction Factor Type, fluid side";
              parameter Real Kfnom_F=0
                "Nominal hydraulic resistance coefficient, fluid side";
              parameter Modelica.Units.SI.PressureDifference dpnom_F=0
                "Nominal pressure drop, fluid side (friction term only!)";
              parameter Modelica.Units.SI.Density rhonom_F=0
                "Nominal inlet density, fluid side";
              parameter Real Cfnom_F=0 "Nominal Fanning friction factor, fluid side";
              parameter ThermoPower.Choices.Flow1D.HCtypes HCtype_F=ThermoPower.Choices.Flow1D.HCtypes.Downstream
                "Location of the hydraulic capacitance, fluid side";
              parameter Boolean counterCurrent=true "Counter-current flow";
              parameter Boolean gasQuasiStatic=false
                "Quasi-static model of the flue gas (mass, energy and momentum static balances";
              constant Real pi=Modelica.Constants.pi;
              ThermoPower.Water.FlangeA gasIn(redeclare package Medium =
                    FlueGasMedium)
                annotation (Placement(transformation(extent={{-120,-20},{-80,20}},
                      rotation=0)));
              ThermoPower.Water.FlangeB gasOut(redeclare package Medium =
                    FlueGasMedium)
                annotation (Placement(transformation(extent={{80,-20},{120,20}},
                      rotation=0)));
              ThermoPower.Water.FlangeA waterIn(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(extent={{-20,80},{20,120}},
                      rotation=0)));
              ThermoPower.Water.FlangeB waterOut(redeclare package Medium =
                    FluidMedium)
                annotation (Placement(transformation(extent={{-20,-120},{20,-80}},
                      rotation=0)));
              ThermoPower.Water.Flow1DFV waterFlow(
                Nt=1,
                N=N_F,
                wnom=fluidNomFlowRate,
                redeclare package Medium = FluidMedium,
                L=exchSurface_F^2/(fluidVol*pi*4),
                A=(fluidVol*4/exchSurface_F)^2/4*pi,
                omega=fluidVol*4/exchSurface_F*pi,
                Dhyd=fluidVol*4/exchSurface_F,
                FFtype=FFtype_F,
                dpnom=dpnom_F,
                rhonom=rhonom_F,
                HydraulicCapacitance=HCtype_F,
                Kfnom=Kfnom_F,
                Cfnom=Cfnom_F,
                FluidPhaseStart=FluidPhaseStart,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.ConstantHeatTransferCoefficient
                    (gamma=gamma_F)) annotation (Placement(transformation(extent={{-20,
                        -76},{20,-36}}, rotation=0)));

              ThermoPower.Thermal.MetalTubeFV metalTube(
                rhomcm=rhomcm,
                lambda=lambda,
                L=exchSurface_F^2/(fluidVol*pi*4),
                rint=fluidVol*4/exchSurface_F/2,
                WallRes=false,
                rext=(metalVol + fluidVol)*4/extSurfaceTub/2,
                Tstartbar=Tstart_M,
                Nw=N_F - 1) annotation (Placement(transformation(extent={{-20,0},{20,-40}},
                      rotation=0)));

              ThermoPower.Water.Flow1DFV SteamFlow(
                Dhyd=1,
                wnom=gasNomFlowRate,
                N=N_G,
                redeclare package Medium = FlueGasMedium,
                L=L,
                A=gasVol/L,
                omega=exchSurface_G/L,
                dpnom=dpnom_G,
                rhonom=rhonom_G,
                Kfnom=Kfnom_G,
                Cfnom=Cfnom_G,
                FFtype=FFtype_G,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.ConstantHeatTransferCoefficient
                    (gamma=gamma_G)) annotation (Placement(transformation(extent={{-20,
                        60},{20,20}}, rotation=0)));

              ThermoPower.Thermal.CounterCurrentFV cC(Nw=N_F - 1) annotation (Placement(
                    transformation(extent={{-20,-8},{20,32}}, rotation=0)));

              final parameter Modelica.Units.SI.Distance L=1 "Tube length";
            equation
              connect(waterFlow.outfl, waterOut) annotation (Line(
                  points={{20,-56},{40,-56},{40,-100},{0,-100}},
                  thickness=0.5,
                  color={0,0,255}));
              connect(waterFlow.infl, waterIn) annotation (Line(
                  points={{-20,-56},{-40,-56},{-40,100},{0,100}},
                  thickness=0.5,
                  color={0,0,255}));
              connect(metalTube.ext, cC.side2)
                annotation (Line(points={{0,-13.8},{0,5.8}},  color={255,127,0}));
              connect(metalTube.int,waterFlow. wall) annotation (Line(
                  points={{0,-26},{0,-46}},
                  color={255,127,0},
                  smooth=Smooth.None));
              connect(SteamFlow.wall, cC.side1) annotation (Line(
                  points={{0,30},{0,18}},
                  color={255,127,0},
                  smooth=Smooth.None));
              connect(gasIn, SteamFlow.infl) annotation (Line(points={{-100,0},{-100,40},
                      {-20,40}}, color={0,0,255}));
              connect(SteamFlow.outfl, gasOut)
                annotation (Line(points={{20,40},{100,40},{100,0}}, color={0,0,255}));
              annotation (
                Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                        -100},{100,100}})),
                Icon(graphics={
                    Rectangle(
                      extent={{-100,100},{100,-100}},
                      lineColor={0,0,255},
                      fillColor={230,230,230},
                      fillPattern=FillPattern.Solid),
                    Line(
                      points={{0,-80},{0,-40},{40,-20},{-40,20},{0,40},{0,80}},
                      color={0,0,255},
                      thickness=0.5),
                    Text(
                      extent={{-100,-115},{100,-145}},
                      lineColor={85,170,255},
                      textString="%name")}),
                Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",         info="<html>
</html>"));
            end HE_v2;

            model HX_v3 "Base class for heat exchanger fluid - gas"
              constant Real pi=Modelica.Constants.pi;
              replaceable package GasMedium =
                  Modelica.Media.IdealGases.MixtureGases.CombustionAir constrainedby
                Modelica.Media.Interfaces.PartialMedium;
              replaceable package WaterMedium = ThermoPower.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialMedium;
              parameter Boolean StaticGasBalances=false;
              parameter Integer Nr = 2 "Number of tube rows";
              parameter Integer Nt = 2 "Number of parallel tubes in each row";
              parameter Modelica.Units.SI.Length Lt "Length of a tube in a row";
              parameter Modelica.Units.SI.Length Dint "Internal diameter of each tube";
              parameter Modelica.Units.SI.Length Dext "External diameter of each tube";
              parameter Modelica.Units.SI.Density rhom
                "Density of the tube metal walls";
              parameter Modelica.Units.SI.SpecificHeatCapacity cm
                "Specific heat capacity of the tube metal walls";
              parameter Modelica.Units.SI.Area Sb
                "Cross-section of the boiler (including tubes)";
              final parameter Modelica.Units.SI.Area Sb_net=Sb - Nr*Nt*Dext*pi*Lt
                "Net cross-section of the boiler";
              parameter Modelica.Units.SI.Length Lb "Length of the boiler";
              parameter Modelica.Units.SI.Area St=Dext*pi*Lt*Nt*Nr
                "Total area of the heat exchange surface";
              parameter Modelica.Units.SI.CoefficientOfHeatTransfer gamma_nom=150
                "Nominal heat transfer coefficient - gas side";

              ThermoPower.Water.FlangeA SteamIn(redeclare package Medium = GasMedium)
                annotation (Placement(transformation(extent={{-120,-20},{-80,20}},
                      rotation=0)));
              ThermoPower.Water.FlangeB SteamOut(redeclare package Medium = GasMedium)
                annotation (Placement(transformation(extent={{80,-20},{120,20}},
                      rotation=0)));
              ThermoPower.Water.FlangeA waterIn(redeclare package Medium =
                    WaterMedium)
                annotation (Placement(transformation(extent={{-20,80},{20,120}},
                      rotation=0)));
              ThermoPower.Water.FlangeB waterOut(redeclare package Medium =
                    WaterMedium)
                annotation (Placement(transformation(extent={{-20,-120},{20,-80}},
                      rotation=0)));
              ThermoPower.Water.Flow1DFV WaterSide(
                redeclare package Medium = WaterMedium,
                Nt=Nt,
                A=pi*Dint^2/4,
                omega=pi*Dint,
                Dhyd=Dint,
                wnom=20,
                Cfnom=0.005,
                L=Lt*Nr,
                N=Nr + 1,
                hstartin=1e5,
                hstartout=2.7e5,
                FFtype=ThermoPower.Choices.Flow1D.FFtypes.Cfnom,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.DittusBoelter,
                dpnom=1000) annotation (Placement(transformation(extent={{-20,-70},{20,
                        -30}}, rotation=0)));
              ThermoPower.Thermal.MetalTubeFV TubeWalls(
                rint=Dint/2,
                rext=Dext/2,
                rhomcm=rhom*cm,
                lambda=20,
                L=Lt*Nr,
                Nw=Nr,
                Tstart1=300,
                TstartN=340) "Tube" annotation (Placement(transformation(extent={{-20,0},
                        {20,-40}}, rotation=0)));
              ThermoPower.Water.Flow1DFV SteamSide(
                redeclare package Medium = GasMedium,
                L=Lb,
                omega=St/Lb,
                wnom=10,
                A=Sb,
                Dhyd=St/Lb,
                N=Nr + 1,
                FFtype=ThermoPower.Choices.Flow1D.FFtypes.NoFriction,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.FlowDependentHeatTransferCoefficient
                    (gamma_nom=gamma_nom, alpha=0.6)) annotation (Placement(
                    transformation(extent={{-20,60},{20,20}}, rotation=0)));
              ThermoPower.Thermal.CounterCurrentFV CounterCurrent1(Nw=Nr) annotation (
                  Placement(transformation(extent={{-20,-8},{20,32}}, rotation=0)));
            equation
              connect(CounterCurrent1.side2, TubeWalls.ext)
                annotation (Line(points={{0,5.8},{0,5.8},{0,-13.8}},
                                                            color={255,127,0}));
              connect(SteamSide.infl, SteamIn) annotation (Line(
                  points={{-20,40},{-60,40},{-60,0},{-100,0}},
                  color={159,159,223},
                  thickness=0.5));
              connect(SteamSide.outfl, SteamOut) annotation (Line(
                  points={{20,40},{60,40},{60,0},{100,0}},
                  color={159,159,223},
                  thickness=0.5));
              connect(WaterSide.outfl, waterOut) annotation (Line(
                  points={{20,-50},{40,-50},{40,-70},{0,-70},{0,-100}},
                  thickness=0.5,
                  color={0,0,255}));
              connect(WaterSide.infl, waterIn) annotation (Line(
                  points={{-20,-50},{-40,-50},{-40,70},{0,70},{0,100}},
                  thickness=0.5,
                  color={0,0,255}));
              connect(SteamSide.wall, CounterCurrent1.side1) annotation (Line(
                  points={{0,30},{0,18}},
                  color={255,127,0},
                  smooth=Smooth.None));
              connect(TubeWalls.int, WaterSide.wall) annotation (Line(
                  points={{0,-26},{0,-40}},
                  color={255,127,0},
                  smooth=Smooth.None));
              annotation (
                Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                        100}}),
                        graphics),
                Icon(graphics={
                    Rectangle(
                      extent={{-100,100},{100,-100}},
                      lineColor={0,0,255},
                      fillColor={230,230,230},
                      fillPattern=FillPattern.Solid),
                    Line(
                      points={{0,-80},{0,-40},{40,-20},{-40,20},{0,40},{0,80}},
                      color={0,0,255},
                      thickness=0.5),
                    Text(
                      extent={{-100,-115},{100,-145}},
                      lineColor={85,170,255},
                      textString="%name")}),
                Documentation(revisions="<html>
<ul>
<li><i>12 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       Model restructured.</li>
<li><i>20 Dec 2004</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    First release.</li>
</ul>
</html>",         info="<html>
This is the model of a very simple heat exchanger. The modelling assumptions are as follows:
<ul>
<li> The boiler contains <tt>Nr</tt> rows of tubes, connected in series; each one is made of <tt>Nt</tt> identical tubes in parallel. 
<li>Each tube has a length <tt>L</tt>, internal and external diameters <tt>Dint</tt> and <tt>Dext</tt>, and is made of a metal having density <tt>rhom</tt> and a specific heat capacity of <tt>cm</tt>. 
<li>The series connection of the tubes is discretised with <tt>Nr+1</tt> nodes, so that each cell between two nodes corresponds to a single row.
<li>The gas flow is also discretised with <tt>Nr+1</tt> nodes, so that each gas cell interacts with a single tube row. 
<li>The gas flows through a volume having a (net) cross-section <tt>Sb</tt> and a (net) length <tt>Lb</tt>. 
<li>Mass and energy dynamic balances are assumed for the water side.
<li>The mass and energy balances for the gas side are either static or dynamic, depending on the value of the <tt>StaticGasBalances</tt> parameter.
<li>The fluid in the water side remains liquid throughout the boiler.
<li>The heat transfer coefficient on the water side is computed by Dittus-Boelter's correlation.
<li>The external heat transfer coefficient is computed according to the simple law declared <tt>Flow1DGasHT</tt>. To change that correlation, it is only necessary to change equations in that model.
</ul>
</html>"));
            end HX_v3;

            model HXr_4 "Condenser"
              extends
                FinalProject.PrimeMovers.Steam.PlantC.Turbo_Machinery_Modeling.Interface.HX_4_interface;
              parameter Modelica.Units.SI.CoefficientOfHeatTransfer gamma_cond
                "Coefficient of heat transfer on condensation surfaces";
              parameter Modelica.Units.SI.CoefficientOfHeatTransfer gamma_cool
                "Coefficient of heat transfer of cooling fluid side";
              parameter ThermoPower.Choices.Flow1D.FFtypes FFtype_cool=ThermoPower.Choices.Flow1D.FFtypes.NoFriction
                "Friction Factor Type";
              parameter ThermoPower.Choices.Flow1D.HCtypes HCtype_cool=ThermoPower.Choices.Flow1D.HCtypes.Downstream
                "Location of the hydraulic capacitance";
              parameter Modelica.Units.SI.Pressure dpnom_cool=0
                "Nominal pressure drop (friction term only!)";
              parameter Modelica.Units.SI.Density rhonom_cool=0 "Nominal inlet density";

              //other data
              constant Real pi=Modelica.Constants.pi;

              ThermoPower.Water.Flow1D flowCooling(
                Nt=1,
                initOpt=if SSInit then ThermoPower.Choices.Init.Options.steadyState else
                    ThermoPower.Choices.Init.Options.noInit,
                redeclare package Medium = FluidMedium,
                L=coolExchSurface^2/(coolVol*pi*4),
                A=(coolVol*4/coolExchSurface)^2/4*pi,
                omega=coolVol*4/coolExchSurface*pi,
                Dhyd=coolVol*4/coolExchSurface,
                wnom=coolNomFlowRate,
                N=N_cool,
                FFtype=FFtype_cool,
                dpnom=dpnom_cool,
                rhonom=rhonom_cool,
                HydraulicCapacitance=HCtype_cool) annotation (Placement(transformation(
                    origin={20,10},
                    extent={{-12,-10},{12,10}},
                    rotation=90)));
              ThermoPower.Thermal.ConvHT convHT(gamma=gamma_cool, N=N_cool) annotation (
                  Placement(transformation(
                    origin={-22,10},
                    extent={{-10,-10},{10,10}},
                    rotation=90)));
              ThermoPower.PowerPlants.SteamTurbineGroup.Components.CondenserShell condenserShell(
                redeclare package Medium = FluidMedium,
                V=condVol,
                Mm=metalVol*rhoMetal,
                Ac=condExchSurface,
                Af=coolExchSurface,
                cm=cm,
                hc=gamma_cond,
                Nc=N_cool,
                pstart=pstart_cond,
                Vlstart=Vlstart_cond,
                initOpt=if SSInit then ThermoPower.Choices.Init.Options.steadyState else
                    ThermoPower.Choices.Init.Options.noInit) annotation (Placement(
                    transformation(extent={{-66,-6},{-34,26}}, rotation=0)));
              Modelica.Blocks.Interfaces.RealOutput ratio_VvonVtot annotation (
                  Placement(transformation(
                    origin={-100,10},
                    extent={{-10,-10},{10,10}},
                    rotation=180)));
            equation
              connect(flowCooling.infl, coolingIn) annotation (Line(
                  points={{20,-2},{20,-40},{100,-40}},
                  thickness=0.5,
                  color={0,0,255}));
              connect(flowCooling.outfl, coolingOut) annotation (Line(
                  points={{20,22},{20,60},{100,60}},
                  thickness=0.5,
                  color={0,0,255}));
              connect(convHT.side2, flowCooling.wall)
                annotation (Line(points={{-18.9,10},{15,10}}, color={255,127,0}));
              connect(condenserShell.steam, steamIn) annotation (Line(
                  points={{-50,26},{-50,100},{-10,100}},
                  thickness=0.5,
                  color={0,0,255}));
              connect(condenserShell.condensate, coolingOut) annotation (Line(
                  points={{-50,-6},{-50,-26},{100,-26}},
                  thickness=0.5,
                  color={0,0,255}));
              connect(condenserShell.coolingFluid, convHT.side1) annotation (Line(
                    points={{-50,10},{-46,10},{-40,10},{-25,10}}, color={255,127,0}));
              connect(condenserShell.ratio_VvVtot, ratio_VvonVtot)
                annotation (Line(points={{-61.2,10},{-100,10}}, color={0,0,127}));
              annotation (Diagram(graphics), Icon(graphics));
            end HXr_4;

            model Generator "Active power generator"

              parameter Modelica.Units.SI.Efficiency eta=1.0
                "Mechanical to electric power conversion efficiency";
              parameter Modelica.Units.SI.MomentOfInertia J=0 "Moment of inertia";
              parameter Integer nPoles=2 "Number of electrical poles";
              parameter Modelica.Units.SI.Frequency f_start=60
                "Start value of the electrical frequency"
                annotation (Dialog(tab="Initialization"));

              /* Assumptions */
              parameter Modelica.Fluid.Types.Dynamics momentumDynamics=
                Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                "Default formulation of momentum balances"
                annotation(Evaluate=true, Dialog(tab = "Assumptions", group="Dynamics"));

              Modelica.Units.SI.Power Q_mech "Mechanical power";
              Modelica.Units.SI.Power Q_elec "Electrical Power";
              Modelica.Units.SI.Power Q_loss "Inertial power Loss";
              Modelica.Units.SI.Torque tau "Torque at shaft";

              Modelica.Units.SI.AngularVelocity omega_m(start=2*Modelica.Constants.pi*
                    f_start/nPoles) "Angular velocity of the shaft";
              Modelica.Units.SI.AngularVelocity omega_e
                "Angular velocity of the e.m.f. rotating frame";
              Modelica.Units.NonSI.AngularVelocity_rpm shaft_rpm=
                  Modelica.Units.Conversions.to_rpm(omega_m) "Shaft rotational speed";

              Modelica.Units.SI.Frequency f "Electrical frequency";

              Interface.ElectricalPowerPort_a portElec annotation (Placement(
                    transformation(extent={{86,-14},{114,14}}, rotation=0),
                    iconTransformation(extent={{90,-10},{110,10}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a shaft_a annotation (
                  Placement(transformation(extent={{-114,-14},{-86,14}}, rotation=0),
                    iconTransformation(extent={{-110,-10},{-90,10}})));

            initial equation

              if momentumDynamics == Modelica.Fluid.Types.Dynamics.SteadyStateInitial then
                der(omega_m) = 0;
              end if;

            equation
              omega_m =der(shaft_a.phi) "Mechanical boundary condition";
              omega_e = omega_m*nPoles;

              f = omega_e/(2*Modelica.Constants.pi) "Electrical frequency";

              Q_mech = omega_m*tau;
              if J > 0 then
                Q_loss = J*der(omega_m)*omega_m;
              else
                Q_loss = 0;
              end if annotation (Diagram);

              Q_mech = Q_elec/eta + Q_loss "Energy balance";

              // Boundary Conditions
              f =portElec.f;
              Q_elec =-portElec.W;
              tau =shaft_a.tau;

              annotation (defaultComponentName="generator",
                Icon(graphics={                          Line(points={{60,0},{90,0}},
                      color={255,0,0},
                      thickness=0.5),
                    Rectangle(
                      extent={{-102,6},{-60,-6}},
                      lineColor={0,0,0},
                      fillPattern=FillPattern.HorizontalCylinder,
                      fillColor={160,160,164}),    Ellipse(
                      extent={{60,-60},{-60,60}},
                      lineColor={0,0,0},
                      lineThickness=0.5,
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),
                                     Text(
                      extent={{-26,24},{28,-28}},
                      lineColor={0,0,0},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid,
                      textString="G")}),
                Documentation(info="<html>
<p>This model describes the conversion between mechanical power and electrical power in an ideal synchronous generator. 
The frequency in the electrical connector is the e.m.f. of generator.
<p>It is possible to consider the generator inertia in the model, by setting the parameter <tt>J > 0</tt>. 
</html>"));
            end Generator;

            model FrequencySource
              "Defines frequency variable for electrical power connector"
            parameter Boolean use_port = false "= true to use input signal" annotation(choices(checkBox=true));
            parameter Modelica.Units.SI.Frequency f=60 "Frequency";
              Interface.ElectricalPowerPort_b port
                annotation (Placement(transformation(extent={{90,-10},{110,10}})));
              Modelica.Blocks.Interfaces.RealInput f_input(unit="1/s") if use_port annotation (Placement(transformation(
                      extent={{-140,-20},{-100,20}}), iconTransformation(extent={{-140,-20},
                        {-100,20}})));
            protected
              Modelica.Blocks.Interfaces.RealInput f_internal(unit="1/s");
            equation
              connect(f_internal,f_input);
              if not use_port then
                f_internal = f;
              end if;
              port.f = f_internal;
               annotation (defaultComponentName="boundary",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Text(
                      extent={{-150,106},{150,146}},
                      lineColor={238,46,47},
                      textString="%name"),
                    Ellipse(
                      extent={{98,-100},{-100,100}},
                      lineColor={28,108,200},
                      fillColor={0,0,0},
                      fillPattern=FillPattern.Solid),
                    Text(
                      extent={{52,-36},{-50,38}},
                      textColor={255,255,255},
                      textString="%Frequency")}),                             Diagram(
                    coordinateSystem(preserveAspectRatio=false)));
            end FrequencySource;
          end Components;

          package Test
            model Test_Model_1
              Modelica.Blocks.Sources.Ramp Q(
                duration=10,
                height=50e6,
                offset=150e6,
                startTime=100) annotation (Placement(transformation(extent={{-78,-16},{
                        -56,6}}, rotation=0)));
              Model_with_HXs model_1_0
                annotation (Placement(transformation(extent={{-26,-12},{12,10}})));
              Components.Generator generator1
                annotation (Placement(transformation(extent={{24,-4},{44,16}})));
              Components.FrequencySource boundary1(f=60)
                annotation (Placement(transformation(extent={{70,-4},{50,16}})));
            equation
              connect(model_1_0.flange_b, generator1.shaft_a) annotation (Line(points={
                      {12,-1},{18,-1},{18,6},{24,6}}, color={0,0,0}));
              connect(generator1.portElec, boundary1.port)
                annotation (Line(points={{44,6},{50,6}}, color={255,0,0}));
              connect(Q.y, model_1_0.Q_flow1) annotation (Line(points={{-54.9,-5},{-52,
                      -5},{-52,-5.4},{-26,-5.4}}, color={0,0,127}));
              annotation (
                Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Rectangle(
                      lineColor={200,200,200},
                      fillColor={248,248,248},
                      fillPattern=FillPattern.HorizontalCylinder,
                      extent={{-100,-100},{100,100}},
                      radius=25.0),
                    Polygon(
                      origin={8,14},
                      lineColor={78,138,73},
                      fillColor={78,138,73},
                      pattern=LinePattern.None,
                      fillPattern=FillPattern.Solid,
                      points={{-58.0,46.0},{42.0,-14.0},{-58.0,-74.0},{-58.0,46.0}})}),
                Diagram(coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
            end Test_Model_1;

            model Model_with_HXs

              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;
              ThermoPower.Water.SteamTurbineStodola Turbine_s4(
                redeclare package Medium = Medium,
                wstart=data.s4_inlet_mflow,
                PRstart=data.s4_PR_start,
                wnom=data.s4_inlet_mflow,
                eta_mech=0.99,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s4_Kt,
                pnom(displayUnit="MPa") = data.s4_inlet_p)
                               annotation (Placement(transformation(extent={{-98,32},{
                        -70,60}},
                      rotation=0)));
              ThermoPower.Examples.RankineCycle.Models.PrescribedPressureCondenser
                prescribedPressureCondenser(
                redeclare package Medium = Medium,
                p=data.condenser_p,
                Vtot=10,
                Vlstart=1.5)
                annotation (Placement(transformation(extent={{78,-102},{98,-82}})));
              ThermoPower.Water.SteamTurbineStodola Turbine_s1(
                redeclare package Medium = Medium,
                wstart=data.s1_inlet_mflow,
                PRstart=data.s1_PR_start,
                wnom=data.s1_inlet_mflow,
                eta_mech=0.99,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s1_Kt,
                pnom(displayUnit="MPa") = data.s1_inlet_p) annotation (Placement(
                    transformation(extent={{-332,32},{-304,60}},  rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s2(
                redeclare package Medium = Medium,
                wstart=data.s2_inlet_mflow,
                PRstart=data.s2_PR_start,
                wnom=data.s2_inlet_mflow,
                eta_mech=0.99,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s2_Kt,
                pnom(displayUnit="MPa") = data.s2_inlet_p) annotation (Placement(
                    transformation(extent={{-266,32},{-238,60}}, rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s3(
                redeclare package Medium = Medium,
                wstart=data.s3_inlet_mflow,
                PRstart=data.s3_PR_start,
                wnom=data.s3_inlet_mflow,
                eta_mech=0.99,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s3_Kt,
                pnom(displayUnit="MPa") = data.s3_inlet_p) annotation (Placement(
                    transformation(extent={{-190,32},{-162,60}},rotation=0)));
              Components.Pump_ControlledFlowRate CondenserPump(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10)
                annotation (Placement(transformation(extent={{6,-138},{-14,-118}})));
              ThermoPower.Water.Header header(
                redeclare package Medium = Medium,
                V=1,
                allowFlowReversal=false,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.TwoPhases,
                pstart=data.s1_inlet_p,
                hstart=data.s1_inlet_h,
                Tmstart=517.01) annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=90,
                    origin={-370,-18})));
              ThermoPower.Thermal.MetalTubeFV HP_FWHX(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp) annotation (Placement(
                    transformation(
                    origin={-280,-94},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV HP_FWHX_Tube(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=CondenserPump.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa")) annotation (Placement(transformation(extent=
                        {{-270,-138},{-290,-118}}, rotation=0)));

              inner ThermoPower.System system
                annotation (Placement(transformation(extent={{-434,132},{-414,152}})));
              ThermoPower.Water.FlowSplit flowSplit
                annotation (Placement(transformation(extent={{-310,96},{-288,74}})));
              ThermoPower.Water.Mixer mixer(
                redeclare package Medium = Medium,
                V=0.1,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart=data.condenser_p,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={88,-50})));
              ThermoPower.Water.Flow1DFV2ph HP_FWHX_Shell(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.HP_FWH_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 1,
                pstart(displayUnit="MPa") = steam1_ext.pout_start) annotation (
                  Placement(transformation(extent={{-290,-30},{-270,-50}}, rotation=0)));

              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-290,-56},{-270,-76}})));
              ThermoPower.Water.FlowSplit flowSplit1
                annotation (Placement(transformation(extent={{-234,98},{-210,74}})));
              ThermoPower.Water.ValveVap steam2_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-214,12})));
              ThermoPower.Water.Mixer mixer1(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam2_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-206,-34})));
              ThermoPower.Water.Flow1DFV LP_FWHX2_Shell(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa")) annotation (Placement(transformation(extent=
                        {{-50,-30},{-30,-50}}, rotation=0)));

              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV1(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow)
                annotation (Placement(transformation(extent={{-30,-76},{-50,-56}})));
              ThermoPower.Thermal.MetalTubeFV LP_FWHX2(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp) annotation (Placement(
                    transformation(
                    origin={-40,-94},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV LP_FWHX2_Tube(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=CondenserPump.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa")) annotation (Placement(transformation(extent=
                        {{-30,-138},{-50,-118}}, rotation=0)));

              ThermoPower.Water.ValveVap LP_FWH2_cont_front(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s2_outlet_p,
                dpnom(displayUnit="Pa") = 100,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=mixer2.pstart,
                pout_start=LP_FWHX2_Shell.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-74,-40})));
              ThermoPower.Water.ValveVap steam1_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s1_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s1_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-292,12})));
              ThermoPower.Water.FlowSplit flowSplit2
                annotation (Placement(transformation(extent={{-170,100},{-146,76}})));
              ThermoPower.Water.Mixer mixer2(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam3_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-104,-28})));
              ThermoPower.Water.ValveVap steam3_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.04,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-124,10})));
              ThermoPower.Water.ValveVap HP_FWH_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=HP_FWHX_Shell.pstart,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=HP_FWHX_Shell.pstart,
                pout_start=HP_FWHX_Shell.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-250,-40})));
              ThermoPower.Water.Flow1DFV2ph LP_FWHX1_Shell(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=false,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 0,
                pstart(displayUnit="MPa") = mixer1.pstart) annotation (Placement(
                    transformation(extent={{-180,-24},{-160,-44}}, rotation=0)));

              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV2(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-180,-50},{-160,-70}})));
              ThermoPower.Thermal.MetalTubeFV LP_FWHX1(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp) annotation (Placement(
                    transformation(
                    origin={-170,-88},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV LP_FWHX1_Tube(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=CondenserPump.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa")) annotation (Placement(transformation(extent=
                        {{-160,-138},{-180,-118}}, rotation=0)));

              ThermoPower.Water.ValveVap LP_FWH2_cont_back(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=LP_FWHX2_Shell.pstart,
                pout_start=mixer.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-2,-40})));
              ThermoPower.Water.ValveVap LP_FWH1_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="MPa") = 10000,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=LP_FWHX1_Shell.pstart,
                pout_start=mixer2.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-138,-34})));
              Components.Pump_ControlledFlowRate FeedWaterPump(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10) annotation (Placement(transformation(extent={{-228,-138},
                        {-248,-118}})));
              Modelica.Blocks.Interfaces.RealInput Q_flow1 annotation (Placement(
                    transformation(extent={{-456,-80},{-424,-48}}), iconTransformation(
                      extent={{-456,-80},{-424,-48}})));
              Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow
                annotation (Placement(transformation(extent={{-408,-28},{-388,-8}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b
                annotation (Placement(transformation(extent={{110,-10},{130,10}})));
              Data_Record.Data_5 data
                annotation (Placement(transformation(extent={{94,132},{114,152}})));
              Modelica.Blocks.Sources.Constant const1(k=1500)
                annotation (Placement(transformation(extent={{-200,-116},{-220,-96}})));
              Modelica.Blocks.Sources.Constant const2(k=1500)
                annotation (Placement(transformation(extent={{36,-116},{16,-96}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-450,-10},{-430,10}})));
              Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor annotation (
                 Placement(transformation(extent={{60,-10},{80,10}},  rotation=0)));
            equation
              connect(Turbine_s2.shaft_a, Turbine_s1.shaft_b) annotation (Line(points={{-261.24,
                      46},{-309.04,46}},                            color={0,0,0}));
              connect(Turbine_s2.shaft_b, Turbine_s3.shaft_a) annotation (Line(points={{-243.04,
                      46},{-185.24,46}},                           color={0,0,0}));
              connect(Turbine_s3.shaft_b, Turbine_s4.shaft_a) annotation (Line(points={{-167.04,
                      46},{-93.24,46}},                           color={0,0,0}));
              connect(prescribedPressureCondenser.waterOut, CondenserPump.inlet)
                annotation (Line(points={{88,-102},{88,-128},{6,-128}}, color={0,0,255}));
              connect(Turbine_s1.inlet, header.outlet) annotation (Line(points={{-329.2,
                      57.2},{-370,57.2},{-370,-8}},  color={0,0,255}));
              connect(HP_FWHX.int, HP_FWHX_Tube.wall) annotation (Line(points={{-280,
                      -98.2},{-280,-123}}, color={255,127,0}));
              connect(HP_FWHX_Tube.outfl, header.inlet) annotation (Line(points={{-290,
                      -128},{-370,-128},{-370,-28.1}}, color={0,0,255}));
              connect(flowSplit.in1, Turbine_s1.outlet) annotation (Line(points={{-305.6,
                      85},{-305.6,66.6},{-306.8,66.6},{-306.8,57.2}},        color={0,0,
                      255}));
              connect(flowSplit.out2, Turbine_s2.inlet) annotation (Line(points={{-292.4,
                      89.4},{-263.2,89.4},{-263.2,57.2}},        color={0,0,255}));
              connect(mixer.out, prescribedPressureCondenser.steamIn)
                annotation (Line(points={{88,-60},{88,-82}},   color={0,0,255}));
              connect(Turbine_s2.outlet, flowSplit1.in1) annotation (Line(points={{-240.8,
                      57.2},{-240.8,56},{-230,56},{-230,86},{-229.2,86}},        color=
                      {0,0,255}));
              connect(flowSplit1.out2, Turbine_s3.inlet) annotation (Line(points={{-214.8,
                      90.8},{-187.2,90.8},{-187.2,57.2}},        color={0,0,255}));
              connect(Turbine_s4.outlet, mixer.in2) annotation (Line(points={{-72.8,
                      57.2},{-72.8,54},{94,54},{94,-42}},color={0,0,255}));
              connect(flowSplit1.out1, steam2_ext.inlet) annotation (Line(points={{-214.8,
                      81.2},{-214.8,78},{-214,78},{-214,22}},
                                                         color={0,0,255}));
              connect(steam2_ext.outlet, mixer1.in2)
                annotation (Line(points={{-214,2},{-214,-28}},   color={0,0,255}));
              connect(CondenserPump.outlet, LP_FWHX2_Tube.infl)
                annotation (Line(points={{-14,-128},{-30,-128}}, color={0,0,255}));
              connect(LP_FWHX2.int, LP_FWHX2_Tube.wall)
                annotation (Line(points={{-40,-98.2},{-40,-123}}, color={255,127,0}));
              connect(HP_FWHX_Shell.wall, heatExchangerTopologyFV.side2)
                annotation (Line(points={{-280,-45},{-280,-62.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV.side1, HP_FWHX.ext) annotation (Line(
                    points={{-280,-69},{-280,-89.66}}, color={255,127,0}));
              connect(LP_FWHX2_Shell.wall, heatExchangerTopologyFV1.side1)
                annotation (Line(points={{-40,-45},{-40,-63}}, color={255,127,0}));
              connect(heatExchangerTopologyFV1.side2, LP_FWHX2.ext) annotation (Line(
                    points={{-40,-69.1},{-40,-89.66}}, color={255,127,0}));
              connect(LP_FWH2_cont_front.outlet, LP_FWHX2_Shell.infl)
                annotation (Line(points={{-64,-40},{-50,-40}}, color={0,0,255}));
              connect(flowSplit.out1, steam1_ext.inlet) annotation (Line(points={{-292.4,
                      80.6},{-292,80.6},{-292,22}},
                                               color={0,0,255}));
              connect(steam1_ext.outlet, HP_FWHX_Shell.infl) annotation (Line(points={{
                      -292,2},{-292,-40},{-290,-40}}, color={0,0,255}));
              connect(flowSplit2.in1, Turbine_s3.outlet) annotation (Line(points={{-165.2,
                      88},{-166,88},{-166,57.2},{-164.8,57.2}},
                                                            color={0,0,255}));
              connect(flowSplit2.out2, Turbine_s4.inlet) annotation (Line(points={{-150.8,
                      92.8},{-95.2,92.8},{-95.2,57.2}},
                                                  color={0,0,255}));
              connect(mixer2.out, LP_FWH2_cont_front.inlet) annotation (Line(points={{
                      -94,-28},{-90,-28},{-90,-40},{-84,-40}}, color={0,0,255}));
              connect(flowSplit2.out1, steam3_ext.inlet) annotation (Line(points={{-150.8,
                      83.2},{-150.8,82},{-124,82},{-124,20}},
                                                         color={0,0,255}));
              connect(steam3_ext.outlet, mixer2.in2) annotation (Line(points={{-124,0},
                      {-124,-12},{-112,-12},{-112,-22}},
                                                   color={0,0,255}));
              connect(HP_FWHX_Shell.outfl, HP_FWH_cont.inlet)
                annotation (Line(points={{-270,-40},{-260,-40}}, color={0,0,255}));
              connect(HP_FWH_cont.outlet, mixer1.in1)
                annotation (Line(points={{-240,-40},{-214,-40}}, color={0,0,255}));
              connect(mixer1.out, LP_FWHX1_Shell.infl)
                annotation (Line(points={{-196,-34},{-180,-34}}, color={0,0,255}));
              connect(LP_FWHX2_Tube.outfl, LP_FWHX1_Tube.infl)
                annotation (Line(points={{-50,-128},{-160,-128}}, color={0,0,255}));
              connect(LP_FWHX1_Shell.wall, heatExchangerTopologyFV2.side2)
                annotation (Line(points={{-170,-39},{-170,-56.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV2.side1, LP_FWHX1.ext) annotation (Line(
                    points={{-170,-63},{-170,-83.66}}, color={255,127,0}));
              connect(LP_FWHX1.int, LP_FWHX1_Tube.wall) annotation (Line(points={{-170,
                      -92.2},{-170,-123}}, color={255,127,0}));
              connect(LP_FWHX2_Shell.outfl, LP_FWH2_cont_back.inlet)
                annotation (Line(points={{-30,-40},{-12,-40}}, color={0,0,255}));
              connect(LP_FWH2_cont_back.outlet, mixer.in1)
                annotation (Line(points={{8,-40},{82,-40},{82,-42}}, color={0,0,255}));
              connect(LP_FWHX1_Shell.outfl, LP_FWH1_cont.inlet)
                annotation (Line(points={{-160,-34},{-148,-34}}, color={0,0,255}));
              connect(LP_FWH1_cont.outlet, mixer2.in1)
                annotation (Line(points={{-128,-34},{-112,-34}}, color={0,0,255}));
              connect(LP_FWHX1_Tube.outfl, FeedWaterPump.inlet)
                annotation (Line(points={{-180,-128},{-228,-128}}, color={0,0,255}));
              connect(FeedWaterPump.outlet, HP_FWHX_Tube.infl)
                annotation (Line(points={{-248,-128},{-270,-128}}, color={0,0,255}));
              connect(prescribedHeatFlow.port, header.thermalPort)
                annotation (Line(points={{-388,-18},{-375.7,-18}}, color={191,0,0}));
              connect(Q_flow1, prescribedHeatFlow.Q_flow)
                annotation (Line(points={{-440,-64},{-424,-64},{-424,-18},{-408,-18}},
                                                                 color={0,0,127}));
              connect(const1.y, FeedWaterPump.setpoint_FlowRate) annotation (Line(
                    points={{-221,-106},{-227.6,-106},{-227.6,-121}}, color={0,0,127}));
              connect(const2.y, CondenserPump.setpoint_FlowRate) annotation (Line(
                    points={{15,-106},{6.4,-106},{6.4,-121}}, color={0,0,127}));
              connect(flange_a, Turbine_s1.shaft_a) annotation (Line(points={{-440,0},{
                      -338,0},{-338,46},{-327.24,46}}, color={0,0,0}));
              connect(Turbine_s4.shaft_b, powerSensor.flange_a) annotation (Line(
                    points={{-75.04,46},{22.48,46},{22.48,0},{60,0}}, color={0,0,0}));
              connect(powerSensor.flange_b, flange_b)
                annotation (Line(points={{80,0},{120,0}}, color={0,0,0}));
              annotation (Diagram(coordinateSystem(extent={{-440,-160},{120,160}})), Icon(
                    coordinateSystem(extent={{-440,-160},{120,160}}), graphics={
                    Polygon(
                      points={{-400,140},{-400,-140},{-180,-80},{-180,100},{-400,140}},
                      lineColor={28,108,200},
                      fillColor={28,108,200},
                      fillPattern=FillPattern.Solid),
                    Polygon(
                      points={{-140,100},{80,140},{80,-140},{-140,-80},{-140,100}},
                      lineColor={28,108,200},
                      fillColor={28,108,200},
                      fillPattern=FillPattern.Solid),
                    Rectangle(
                      extent={{-430,4},{110,-4}},
                      lineColor={28,108,200},
                      fillColor={135,135,135},
                      fillPattern=FillPattern.Solid)}),
                experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
            end Model_with_HXs;
          end Test;

          package Examples
            model ex3_with_HXs

              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;
              ThermoPower.Water.SteamTurbineStodola Turbine_s4(
                redeclare package Medium = Medium,
                wstart=data.s4_inlet_mflow,
                PRstart=data.s4_PR_start,
                wnom=data.s4_inlet_mflow,
                eta_mech=0.99,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s4_Kt,
                pnom(displayUnit="MPa") = data.s4_inlet_p)
                               annotation (Placement(transformation(extent={{-98,-14},{-70,14}},
                      rotation=0)));
              ThermoPower.Examples.RankineCycle.Models.PrescribedPressureCondenser
                prescribedPressureCondenser(
                redeclare package Medium = Medium,
                p=data.condenser_p,
                Vtot=10,
                Vlstart=1.5)
                annotation (Placement(transformation(extent={{78,-148},{98,-128}})));
              ThermoPower.Water.SteamTurbineStodola Turbine_s1(
                redeclare package Medium = Medium,
                wstart=data.s1_inlet_mflow,
                PRstart=data.s1_PR_start,
                wnom=data.s1_inlet_mflow,
                eta_mech=0.99,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s1_Kt,
                pnom(displayUnit="MPa") = data.s1_inlet_p) annotation (Placement(
                    transformation(extent={{-332,-14},{-304,14}}, rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s2(
                redeclare package Medium = Medium,
                wstart=data.s2_inlet_mflow,
                PRstart=data.s2_PR_start,
                wnom=data.s2_inlet_mflow,
                eta_mech=0.99,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s2_Kt,
                pnom(displayUnit="MPa") = data.s2_inlet_p) annotation (Placement(
                    transformation(extent={{-266,-14},{-238,14}},rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s3(
                redeclare package Medium = Medium,
                wstart=data.s3_inlet_mflow,
                PRstart=data.s3_PR_start,
                wnom=data.s3_inlet_mflow,
                eta_mech=0.99,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s3_Kt,
                pnom(displayUnit="MPa") = data.s3_inlet_p) annotation (Placement(
                    transformation(extent={{-190,-14},{-162,14}},
                                                                rotation=0)));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10)
                annotation (Placement(transformation(extent={{6,-184},{-14,-164}})));
              Modelica.Blocks.Sources.Constant const(k=1500)
                annotation (Placement(transformation(extent={{44,-158},{24,-138}})));
              Data_Record.Data_5 data
                annotation (Placement(transformation(extent={{186,34},{206,54}})));
              ThermoPower.Water.Header header(
                redeclare package Medium = Medium,
                V=1,
                allowFlowReversal=false,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.TwoPhases,
                pstart=data.s1_inlet_p,
                hstart=data.s1_inlet_h,
                Tmstart=517.01) annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=90,
                    origin={-370,-64})));
              Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow fixedHeatFlow(Q_flow=150e6)
                annotation (Placement(transformation(extent={{-422,-76},{-398,-52}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-280,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-270,-184},{-290,
                        -164}},  rotation=0)));
              inner ThermoPower.System system
                annotation (Placement(transformation(extent={{-396,36},{-376,56}})));
              ThermoPower.Water.FlowSplit flowSplit
                annotation (Placement(transformation(extent={{-310,50},{-288,28}})));
              ThermoPower.Water.Mixer mixer(
                redeclare package Medium = Medium,
                V=0.1,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart=data.condenser_p,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={88,-96})));
              ThermoPower.Water.Flow1DFV2ph
                                SH1(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.HP_FWH_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 1,
                pstart(displayUnit="MPa") = steam1_ext.pout_start)
                                annotation (Placement(transformation(extent={{-290,-76},{-270,
                        -96}},   rotation=0)));

              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-290,-102},{-270,-122}})));
              ThermoPower.Water.FlowSplit flowSplit1
                annotation (Placement(transformation(extent={{-234,52},{-210,28}})));
              ThermoPower.Water.ValveVap steam2_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-214,-34})));
              ThermoPower.Water.Mixer mixer1(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam2_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-206,-80})));
              ThermoPower.Water.Flow1DFV
                                SH2(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-50,-76},{-30,
                        -96}},   rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV1(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow)
                annotation (Placement(transformation(extent={{-30,-122},{-50,-102}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall1(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-40,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH3(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-30,-184},{-50,
                        -164}},  rotation=0)));
              ThermoPower.Water.ValveVap valveVap3(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s2_outlet_p,
                dpnom(displayUnit="Pa") = 100,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=mixer2.pstart,
                pout_start=SH2.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-74,-86})));
              ThermoPower.Water.ValveVap steam1_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s1_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s1_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-292,-34})));
              ThermoPower.Water.FlowSplit flowSplit2
                annotation (Placement(transformation(extent={{-170,54},{-146,30}})));
              ThermoPower.Water.Mixer mixer2(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam3_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-104,-74})));
              ThermoPower.Water.ValveVap steam3_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.04,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-124,-36})));
              ThermoPower.Water.ValveVap SH1_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=SH1.pstart,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH1.pstart,
                pout_start=SH1.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-250,-86})));
              ThermoPower.Water.Flow1DFV2ph
                                SH4(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=false,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 0,
                pstart(displayUnit="MPa") = mixer1.pstart)
                                annotation (Placement(transformation(extent={{-180,-70},{-160,
                        -90}},   rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV2(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-180,-96},{-160,-116}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall2(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-170,-134},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH5(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-160,-184},{-180,
                        -164}},  rotation=0)));
              ThermoPower.Water.ValveVap valveVap1(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH2.pstart,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-2,-86})));
              ThermoPower.Water.ValveVap SH4_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="MPa") = 10000,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH4.pstart,
                pout_start=mixer2.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-138,-80})));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate1(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10) annotation (Placement(transformation(extent={{-228,-184},
                        {-248,-164}})));
              Modelica.Blocks.Sources.Constant const1(k=1500)
                annotation (Placement(transformation(extent={{-194,-158},{-214,-138}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-430,-10},{-410,10}})));
              ThermoPower.Electrical.Generator generator(Pnom=50e6, initOpt=
                    ThermoPower.Choices.Init.Options.steadyState)
                annotation (Placement(transformation(extent={{110,-16},{144,18}})));
              ThermoPower.Electrical.Grid grid(Pgrid=10e9)
                annotation (Placement(transformation(extent={{158,-14},{188,16}})));
            equation
              connect(Turbine_s2.shaft_a, Turbine_s1.shaft_b) annotation (Line(points={{-261.24,
                      1.77636e-15},{-309.04,1.77636e-15}},          color={0,0,0}));
              connect(Turbine_s2.shaft_b, Turbine_s3.shaft_a) annotation (Line(points={{-243.04,
                      1.77636e-15},{-185.24,1.77636e-15}},         color={0,0,0}));
              connect(Turbine_s3.shaft_b, Turbine_s4.shaft_a) annotation (Line(points={{-167.04,
                      1.77636e-15},{-93.24,1.77636e-15}},         color={0,0,0}));
              connect(prescribedPressureCondenser.waterOut, pump_ControlledFlowRate.inlet)
                annotation (Line(points={{88,-148},{88,-174},{6,-174}},  color={0,0,255}));
              connect(const.y, pump_ControlledFlowRate.setpoint_FlowRate) annotation (
                  Line(points={{23,-148},{12,-148},{12,-167},{6.4,-167}},      color={0,
                      0,127}));
              connect(Turbine_s1.inlet, header.outlet) annotation (Line(points={{-329.2,
                      11.2},{-370,11.2},{-370,-54}}, color={0,0,255}));
              connect(fixedHeatFlow.port, header.thermalPort)
                annotation (Line(points={{-398,-64},{-375.7,-64}}, color={191,0,0}));
              connect(SHWall.int, SH.wall) annotation (Line(points={{-280,-144.2},{-280,-169}},
                                                      color={255,127,0}));
              connect(SH.outfl, header.inlet) annotation (Line(points={{-290,-174},{-370,-174},
                      {-370,-74.1}},            color={0,0,255}));
              connect(flowSplit.in1, Turbine_s1.outlet) annotation (Line(points={{
                      -305.6,39},{-305.6,20.6},{-306.8,20.6},{-306.8,11.2}}, color={0,0,
                      255}));
              connect(flowSplit.out2, Turbine_s2.inlet) annotation (Line(points={{-292.4,43.4},
                      {-263.2,43.4},{-263.2,11.2}},              color={0,0,255}));
              connect(mixer.out, prescribedPressureCondenser.steamIn)
                annotation (Line(points={{88,-106},{88,-128}}, color={0,0,255}));
              connect(Turbine_s2.outlet, flowSplit1.in1) annotation (Line(points={{-240.8,11.2},
                      {-240.8,10},{-230,10},{-230,40},{-229.2,40}},              color=
                      {0,0,255}));
              connect(flowSplit1.out2, Turbine_s3.inlet) annotation (Line(points={{-214.8,44.8},
                      {-187.2,44.8},{-187.2,11.2}},              color={0,0,255}));
              connect(Turbine_s4.outlet, mixer.in2) annotation (Line(points={{-72.8,11.2},{-72.8,
                      8},{94,8},{94,-88}},               color={0,0,255}));
              connect(flowSplit1.out1, steam2_ext.inlet) annotation (Line(points={{-214.8,35.2},
                      {-214.8,32},{-214,32},{-214,-24}}, color={0,0,255}));
              connect(steam2_ext.outlet, mixer1.in2)
                annotation (Line(points={{-214,-44},{-214,-74}}, color={0,0,255}));
              connect(pump_ControlledFlowRate.outlet, SH3.infl)
                annotation (Line(points={{-14,-174},{-30,-174}},  color={0,0,255}));
              connect(SHWall1.int, SH3.wall)
                annotation (Line(points={{-40,-144.2},{-40,-169}},   color={255,127,0}));
              connect(SH1.wall, heatExchangerTopologyFV.side2)
                annotation (Line(points={{-280,-91},{-280,-108.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV.side1, SHWall.ext)
                annotation (Line(points={{-280,-115},{-280,-135.66}}, color={255,127,0}));
              connect(SH2.wall, heatExchangerTopologyFV1.side1)
                annotation (Line(points={{-40,-91},{-40,-109}},   color={255,127,0}));
              connect(heatExchangerTopologyFV1.side2, SHWall1.ext) annotation (Line(points={{-40,
                      -115.1},{-40,-135.66}},        color={255,127,0}));
              connect(valveVap3.outlet, SH2.infl)
                annotation (Line(points={{-64,-86},{-50,-86}}, color={0,0,255}));
              connect(flowSplit.out1, steam1_ext.inlet) annotation (Line(points={{-292.4,34.6},
                      {-292,34.6},{-292,-24}}, color={0,0,255}));
              connect(steam1_ext.outlet, SH1.infl) annotation (Line(points={{-292,-44},{-292,
                      -86},{-290,-86}}, color={0,0,255}));
              connect(flowSplit2.in1, Turbine_s3.outlet) annotation (Line(points={{-165.2,42},
                      {-166,42},{-166,11.2},{-164.8,11.2}}, color={0,0,255}));
              connect(flowSplit2.out2, Turbine_s4.inlet) annotation (Line(points={{-150.8,46.8},
                      {-95.2,46.8},{-95.2,11.2}}, color={0,0,255}));
              connect(mixer2.out, valveVap3.inlet) annotation (Line(points={{-94,-74},{-90,-74},
                      {-90,-86},{-84,-86}}, color={0,0,255}));
              connect(flowSplit2.out1, steam3_ext.inlet) annotation (Line(points={{-150.8,37.2},
                      {-150.8,36},{-124,36},{-124,-26}}, color={0,0,255}));
              connect(steam3_ext.outlet, mixer2.in2) annotation (Line(points={{-124,-46},{-124,
                      -58},{-112,-58},{-112,-68}}, color={0,0,255}));
              connect(SH1.outfl, SH1_cont.inlet)
                annotation (Line(points={{-270,-86},{-260,-86}}, color={0,0,255}));
              connect(SH1_cont.outlet, mixer1.in1)
                annotation (Line(points={{-240,-86},{-214,-86}}, color={0,0,255}));
              connect(mixer1.out, SH4.infl)
                annotation (Line(points={{-196,-80},{-180,-80}}, color={0,0,255}));
              connect(SH3.outfl, SH5.infl)
                annotation (Line(points={{-50,-174},{-160,-174}}, color={0,0,255}));
              connect(SH4.wall, heatExchangerTopologyFV2.side2)
                annotation (Line(points={{-170,-85},{-170,-102.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV2.side1, SHWall2.ext)
                annotation (Line(points={{-170,-109},{-170,-129.66}}, color={255,127,0}));
              connect(SHWall2.int, SH5.wall)
                annotation (Line(points={{-170,-138.2},{-170,-169}}, color={255,127,0}));
              connect(SH2.outfl, valveVap1.inlet)
                annotation (Line(points={{-30,-86},{-12,-86}}, color={0,0,255}));
              connect(valveVap1.outlet, mixer.in1)
                annotation (Line(points={{8,-86},{82,-86},{82,-88}}, color={0,0,255}));
              connect(SH4.outfl, SH4_cont.inlet)
                annotation (Line(points={{-160,-80},{-148,-80}}, color={0,0,255}));
              connect(SH4_cont.outlet, mixer2.in1)
                annotation (Line(points={{-128,-80},{-112,-80}}, color={0,0,255}));
              connect(SH5.outfl, pump_ControlledFlowRate1.inlet)
                annotation (Line(points={{-180,-174},{-228,-174}}, color={0,0,255}));
              connect(pump_ControlledFlowRate1.outlet, SH.infl)
                annotation (Line(points={{-248,-174},{-270,-174}}, color={0,0,255}));
              connect(const1.y, pump_ControlledFlowRate1.setpoint_FlowRate) annotation (
                  Line(points={{-215,-148},{-226,-148},{-226,-167},{-227.6,-167}}, color={0,
                      0,127}));
              connect(Turbine_s1.shaft_a, flange_a) annotation (Line(points={{-327.24,
                      1.77636e-15},{-328.62,1.77636e-15},{-328.62,0},{-420,0}}, color={
                      0,0,0}));
              connect(Turbine_s4.shaft_b, generator.shaft) annotation (Line(points={{
                      -75.04,1.77636e-15},{-75.04,1},{112.38,1}}, color={0,0,0}));
              connect(generator.port, grid.port) annotation (Line(
                  points={{141.62,1},{160.1,1}},
                  color={0,0,255},
                  thickness=0.5));
              annotation (Diagram(coordinateSystem(extent={{-420,-180},{220,60}})),  Icon(
                    coordinateSystem(extent={{-420,-180},{220,60}})),
                experiment(StopTime=1000, __Dymola_Algorithm="Dassl"),
                Documentation(info="<html>
<p>Example3. Steam Turbine Model with fixed power (with Feedwater heat exchangers)</p>
</html>"));
            end ex3_with_HXs;

            model ex2_without_HXs
              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;
              ThermoPower.Water.SteamTurbineStodola Turbine_s4(
                redeclare package Medium = Medium,
                wstart=data.s4_mflow,
                PRstart=data.s4_PR_start,
                wnom=data.s4_mflow,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s4_Kt,
                pnom(displayUnit="MPa") = data.s4_inlet_p)
                               annotation (Placement(transformation(extent={{-46,-14},{-18,14}},
                      rotation=0)));
              ThermoPower.Water.SinkPressure sinkP(
                redeclare package Medium = Medium,
                use_T=true,
                T=data.nomi_sink_T,
                p0(displayUnit="MPa") = data.nomi_sink_p,
                allowFlowReversal=false)                                   annotation (
                  Placement(transformation(extent={{-172,-110},{-192,-90}},
                                                                     rotation=0)));
              ThermoPower.Water.SourcePressure sourceP(
                redeclare package Medium = Medium,
                h=data.nomi_source_h,
                p0(displayUnit="MPa") = data.nomi_sink_p,
                allowFlowReversal=false)                                      annotation (
                  Placement(transformation(extent={{-190,76},{-170,96}},rotation=0)));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-190,-10},{-170,10}})));
              ThermoPower.PowerPlants.SteamTurbineGroup.Components.BaseReader_water
                baseReader_water(redeclare package Medium = Medium, allowFlowReversal=
                    false) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-2,-18})));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,869.8,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10) annotation (Placement(transformation(extent={{-84,-110},
                        {-104,-90}})));
              Modelica.Blocks.Sources.Constant const(k=67.1)
                annotation (Placement(transformation(extent={{-44,-72},{-64,-52}})));
              ThermoPower.PowerPlants.SteamTurbineGroup.Examples.CondPlant_open
                condPlant_open(
                redeclare package FluidMedium = Medium,
                p=data.condenser_p,
                Vtot=10,
                Vlstart=1.5,
                setPoint_ratio=0.85)
                annotation (Placement(transformation(extent={{-12,-60},{8,-40}})));
              ThermoPower.Water.SteamTurbineStodola Turbine_s1(
                redeclare package Medium = Medium,
                wstart=data.s1_mflow,
                PRstart=data.s1_PR_start,
                wnom=data.s1_mflow,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s1_Kt,
                pnom(displayUnit="MPa") = data.s1_inlet_p) annotation (Placement(
                    transformation(extent={{-164,-14},{-136,14}}, rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s2(
                redeclare package Medium = Medium,
                wstart=data.s2_mflow,
                PRstart=data.s2_PR_start,
                wnom=data.s2_mflow,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s2_Kt,
                pnom(displayUnit="MPa") = data.s2_inlet_p) annotation (Placement(
                    transformation(extent={{-126,-14},{-98,14}}, rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s3(
                redeclare package Medium = Medium,
                wstart=data.s3_mflow,
                PRstart=data.s3_PR_start,
                wnom=data.s3_mflow,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s3_Kt,
                pnom(displayUnit="MPa") = data.s3_inlet_p) annotation (Placement(
                    transformation(extent={{-86,-14},{-58,14}}, rotation=0)));
              Data_Record.Data_2 data
                annotation (Placement(transformation(extent={{112,78},{132,98}})));
              ThermoPower.Electrical.Generator generator(Pnom=50e6, initOpt=
                    ThermoPower.Choices.Init.Options.steadyState)
                annotation (Placement(transformation(extent={{34,-16},{66,16}})));
              ThermoPower.Electrical.Grid grid(Pgrid=10e9)
                annotation (Placement(transformation(extent={{82,-14},{110,14}})));
            equation
              connect(Turbine_s4.outlet, baseReader_water.inlet) annotation (Line(
                    points={{-20.8,11.2},{-20.8,10},{-2,10},{-2,-12}}, color={0,0,255}));
              connect(pump_ControlledFlowRate.outlet, sinkP.flange)
                annotation (Line(points={{-104,-100},{-172,-100}}, color={0,0,255}));
              connect(const.y, pump_ControlledFlowRate.setpoint_FlowRate) annotation (
                  Line(points={{-65,-62},{-78,-62},{-78,-93},{-83.6,-93}}, color={0,0,
                      127}));
              connect(baseReader_water.outlet, condPlant_open.SteamIn)
                annotation (Line(points={{-2,-24},{-2,-40}}, color={0,0,255}));
              connect(condPlant_open.WaterOut, pump_ControlledFlowRate.inlet)
                annotation (Line(points={{-2,-60},{-2,-100},{-84,-100}}, color={0,0,255}));
              connect(Turbine_s1.shaft_a, flange_a) annotation (Line(points={{-159.24,
                      1.77636e-15},{-160.62,1.77636e-15},{-160.62,0},{-180,0}}, color={
                      0,0,0}));
              connect(Turbine_s2.shaft_a, Turbine_s1.shaft_b) annotation (Line(points={
                      {-121.24,1.77636e-15},{-141.04,1.77636e-15}}, color={0,0,0}));
              connect(sourceP.flange, Turbine_s1.inlet) annotation (Line(points={{-170,
                      86},{-161.2,86},{-161.2,11.2}}, color={0,0,255}));
              connect(Turbine_s1.outlet, Turbine_s2.inlet) annotation (Line(points={{
                      -138.8,11.2},{-123.2,11.2}}, color={0,0,255}));
              connect(Turbine_s2.shaft_b, Turbine_s3.shaft_a) annotation (Line(points={
                      {-103.04,1.77636e-15},{-81.24,1.77636e-15}}, color={0,0,0}));
              connect(Turbine_s3.shaft_b, Turbine_s4.shaft_a) annotation (Line(points={
                      {-63.04,1.77636e-15},{-41.24,1.77636e-15}}, color={0,0,0}));
              connect(Turbine_s2.outlet, Turbine_s3.inlet) annotation (Line(points={{
                      -100.8,11.2},{-83.2,11.2}}, color={0,0,255}));
              connect(Turbine_s3.outlet, Turbine_s4.inlet)
                annotation (Line(points={{-60.8,11.2},{-43.2,11.2}}, color={0,0,255}));
              connect(Turbine_s4.shaft_b, generator.shaft) annotation (Line(points={{
                      -23.04,1.77636e-15},{6.67,1.77636e-15},{6.67,3.33067e-16},{
                      36.24,3.33067e-16}}, color={0,0,0}));
              connect(generator.port, grid.port) annotation (Line(
                  points={{63.76,0},{73.86,0},{73.86,1.77636e-15},{83.96,1.77636e-15}},
                  color={0,0,255},
                  thickness=0.5));

              annotation (Diagram(coordinateSystem(extent={{-180,-140},{140,100}})), Icon(
                    coordinateSystem(extent={{-180,-140},{140,100}})),
                experiment(StopTime=100, __Dymola_Algorithm="Dassl"),
                Documentation(info="<html>
<p>Example2. Steam Turbine Model with boundary conditions (without Feedwater heat exchangers)</p>
</html>"));
            end ex2_without_HXs;

            model ex1_basic
              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;
              ThermoPower.Water.SteamTurbineStodola HP_turbine(
                redeclare package Medium = Medium,
                wstart=data.turbine_wnorm_start,
                PRstart=data.turbine_PR_start,
                wnom=data.turbine_wnorm,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.Kt,
                pnom(displayUnit="MPa") = data.turbine_pnorm)
                               annotation (Placement(transformation(extent={{-46,-14},{-18,14}},
                      rotation=0)));
              ThermoPower.Water.SinkPressure sinkP(
                redeclare package Medium = Medium,
                use_T=true,
                T=data.nomi_sink_T,
                p0(displayUnit="MPa") = data.nomi_sink_p,
                allowFlowReversal=false)                                   annotation (
                  Placement(transformation(extent={{-172,-110},{-192,-90}},
                                                                     rotation=0)));
              ThermoPower.Water.SourcePressure sourceP(
                redeclare package Medium = Medium,
                h=data.nomi_source_h,
                p0(displayUnit="MPa") = data.nomi_sink_p,
                allowFlowReversal=false)                                      annotation (
                  Placement(transformation(extent={{-190,76},{-170,96}},rotation=0)));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-190,-10},{-170,10}})));
              Data_Record.Data_1 data
                annotation (Placement(transformation(extent={{114,80},{134,100}})));
              ThermoPower.PowerPlants.SteamTurbineGroup.Components.BaseReader_water
                baseReader_water(redeclare package Medium = Medium, allowFlowReversal=
                    false) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-2,-18})));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,869.8,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10) annotation (Placement(transformation(extent={{-84,-110},
                        {-104,-90}})));
              Modelica.Blocks.Sources.Constant const(k=67.1)
                annotation (Placement(transformation(extent={{-44,-72},{-64,-52}})));
              ThermoPower.PowerPlants.SteamTurbineGroup.Examples.CondPlant_open
                condPlant_open(
                redeclare package FluidMedium = Medium,
                p=data.nomi_conden_p,
                Vtot=10,
                Vlstart=1.5,
                setPoint_ratio=0.85)
                annotation (Placement(transformation(extent={{-12,-60},{8,-40}})));
              ThermoPower.Electrical.Generator generator(Pnom=50e6, initOpt=
                    ThermoPower.Choices.Init.Options.steadyState)
                annotation (Placement(transformation(extent={{48,-16},{80,16}})));
              ThermoPower.Electrical.Grid grid(Pgrid=10e9)
                annotation (Placement(transformation(extent={{96,-14},{124,14}})));
            equation
              connect(HP_turbine.shaft_a, flange_a) annotation (Line(points={{-41.24,
                      1.77636e-15},{-70.62,1.77636e-15},{-70.62,0},{-180,0}},
                                                                 color={0,0,0}));
              connect(sourceP.flange, HP_turbine.inlet) annotation (Line(points={{-170,
                      86},{-43.2,86},{-43.2,11.2}}, color={0,0,255}));
              connect(HP_turbine.outlet, baseReader_water.inlet) annotation (Line(
                    points={{-20.8,11.2},{-20.8,10},{-2,10},{-2,-12}}, color={0,0,255}));
              connect(pump_ControlledFlowRate.outlet, sinkP.flange)
                annotation (Line(points={{-104,-100},{-172,-100}}, color={0,0,255}));
              connect(const.y, pump_ControlledFlowRate.setpoint_FlowRate) annotation (
                  Line(points={{-65,-62},{-78,-62},{-78,-93},{-83.6,-93}}, color={0,0,
                      127}));
              connect(baseReader_water.outlet, condPlant_open.SteamIn)
                annotation (Line(points={{-2,-24},{-2,-40}}, color={0,0,255}));
              connect(condPlant_open.WaterOut, pump_ControlledFlowRate.inlet)
                annotation (Line(points={{-2,-60},{-2,-100},{-84,-100}}, color={0,0,255}));
              connect(HP_turbine.shaft_b, generator.shaft) annotation (Line(points={{
                      -23.04,1.77636e-15},{13.6,1.77636e-15},{13.6,0},{50.24,0}},
                    color={0,0,0}));
              connect(generator.port, grid.port) annotation (Line(
                  points={{77.76,0},{87.86,0},{87.86,1.77636e-15},{97.96,1.77636e-15}},
                  color={0,0,255},
                  thickness=0.5));

              annotation (Diagram(coordinateSystem(extent={{-180,-140},{140,100}})), Icon(
                    coordinateSystem(extent={{-180,-140},{140,100}})),
                experiment(StopTime=100, __Dymola_Algorithm="Dassl"),
                Documentation(info="<html>
<p>Example1.Basic model </p>
</html>"));
            end ex1_basic;

            model ex4_with_HXs_and_steam_bypass

              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;
              ThermoPower.Water.SteamTurbineStodola Turbine_s4(
                redeclare package Medium = Medium,
                wstart=data.s4_inlet_mflow,
                PRstart=data.s4_PR_start,
                wnom=data.s4_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s4_Kt,
                pnom(displayUnit="MPa") = data.s4_inlet_p)
                               annotation (Placement(transformation(extent={{-50,-14},
                        {-22,14}},
                      rotation=0)));
              ThermoPower.Examples.RankineCycle.Models.PrescribedPressureCondenser
                prescribedPressureCondenser(
                redeclare package Medium = Medium,
                p=data.condenser_p,
                Vtot=10,
                Vlstart=1.5)
                annotation (Placement(transformation(extent={{126,-166},{146,-146}})));
              ThermoPower.Water.SteamTurbineStodola Turbine_s1(
                redeclare package Medium = Medium,
                wstart=data.s1_inlet_mflow,
                PRstart=data.s1_PR_start,
                wnom=data.s1_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s1_Kt,
                pnom(displayUnit="MPa") = data.s1_inlet_p) annotation (Placement(
                    transformation(extent={{-284,-14},{-256,14}}, rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s2(
                redeclare package Medium = Medium,
                wstart=data.s2_inlet_mflow,
                PRstart=data.s2_PR_start,
                wnom=data.s2_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s2_Kt,
                pnom(displayUnit="MPa") = data.s2_inlet_p) annotation (Placement(
                    transformation(extent={{-218,-14},{-190,14}},rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s3(
                redeclare package Medium = Medium,
                wstart=data.s3_inlet_mflow,
                PRstart=data.s3_PR_start,
                wnom=data.s3_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s3_Kt,
                pnom(displayUnit="MPa") = data.s3_inlet_p) annotation (Placement(
                    transformation(extent={{-142,-14},{-114,14}},
                                                                rotation=0)));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10)
                annotation (Placement(transformation(extent={{54,-184},{34,-164}})));
              Modelica.Blocks.Sources.Constant const(k=1500)
                annotation (Placement(transformation(extent={{92,-158},{72,-138}})));
              Data_Record.Data_5 data
                annotation (Placement(transformation(extent={{194,96},{214,116}})));
              ThermoPower.Water.Header header(
                redeclare package Medium = Medium,
                V=1,
                allowFlowReversal=false,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.TwoPhases,
                pstart=data.s1_inlet_p,
                hstart=data.s1_inlet_h,
                Tmstart=517.01) annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=90,
                    origin={-370,-64})));
              Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow fixedHeatFlow(Q_flow=150e6)
                annotation (Placement(transformation(extent={{-422,-76},{-398,-52}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-232,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-222,
                        -184},{-242,-164}},
                                 rotation=0)));
              inner ThermoPower.System system
                annotation (Placement(transformation(extent={{-414,96},{-394,116}})));
              ThermoPower.Water.FlowSplit flowSplit
                annotation (Placement(transformation(extent={{-262,50},{-240,28}})));
              ThermoPower.Water.Mixer mixer(
                redeclare package Medium = Medium,
                V=0.1,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart=data.condenser_p,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={136,-96})));
              ThermoPower.Water.Flow1DFV2ph
                                SH1(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.HP_FWH_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 1,
                pstart(displayUnit="MPa") = steam1_ext.pout_start)
                                annotation (Placement(transformation(extent={{-242,
                        -76},{-222,-96}},
                                 rotation=0)));

              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-242,-102},{-222,-122}})));
              ThermoPower.Water.FlowSplit flowSplit1
                annotation (Placement(transformation(extent={{-186,52},{-162,28}})));
              ThermoPower.Water.ValveVap steam2_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-166,-34})));
              ThermoPower.Water.Mixer mixer1(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam2_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-158,-80})));
              ThermoPower.Water.Flow1DFV
                                SH2(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-2,-76},
                        {18,-96}},
                                 rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV1(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow)
                annotation (Placement(transformation(extent={{18,-122},{-2,-102}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall1(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={8,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH3(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{18,-184},
                        {-2,-164}},
                                 rotation=0)));
              ThermoPower.Water.ValveVap valveVap3(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s2_outlet_p,
                dpnom(displayUnit="Pa") = 100,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=mixer2.pstart,
                pout_start=SH2.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-26,-86})));
              ThermoPower.Water.ValveVap steam1_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s1_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s1_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-244,-34})));
              ThermoPower.Water.FlowSplit flowSplit2
                annotation (Placement(transformation(extent={{-122,54},{-98,30}})));
              ThermoPower.Water.Mixer mixer2(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam3_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-56,-74})));
              ThermoPower.Water.ValveVap steam3_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.04,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-76,-36})));
              ThermoPower.Water.ValveVap SH1_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=SH1.pstart,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH1.pstart,
                pout_start=SH1.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-202,-86})));
              ThermoPower.Water.Flow1DFV2ph
                                SH4(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=false,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 0,
                pstart(displayUnit="MPa") = mixer1.pstart)
                                annotation (Placement(transformation(extent={{-132,
                        -70},{-112,-90}},
                                 rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV2(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-132,-96},{-112,-116}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall2(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-122,-134},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH5(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-112,
                        -184},{-132,-164}},
                                 rotation=0)));
              ThermoPower.Water.ValveVap valveVap1(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH2.pstart,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={46,-86})));
              ThermoPower.Water.ValveVap SH4_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="MPa") = 10000,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH4.pstart,
                pout_start=mixer2.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-90,-80})));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate1(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10) annotation (Placement(transformation(extent={{-180,-184},
                        {-200,-164}})));
              Modelica.Blocks.Sources.Constant const1(k=1500)
                annotation (Placement(transformation(extent={{-146,-158},{-166,-138}})));
              Components.Generator generator1(f_start=60)
                annotation (Placement(transformation(extent={{170,-20},{210,20}})));
              Components.FrequencySource boundary1(f=60)
                annotation (Placement(transformation(extent={{286,-24},{242,24}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-430,-10},{-410,10}})));
              ThermoPower.Water.ValveVap steamValve(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=3.0,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s1_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.FWPump_mflow,
                CheckValve=true) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-316,12})));
              ThermoPower.Water.ValveVap valveVap2(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=3.0,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.condenser_before_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.s4_outlet_mflow,
                CheckValve=true,
                pin_start=data.s4_outlet_p,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=270,
                    origin={142,-56})));
              ThermoPower.Water.Mixer mixer3(
                redeclare package Medium = Medium,
                V=0.1,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart=data.s4_outlet_p,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={142,-18})));
              ThermoPower.Water.FlowSplit flowSplit3
                annotation (Placement(transformation(extent={{-370,38},{-332,0}})));
              ThermoPower.Water.ValveVap steamValve1(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=1,
                useThetaInput=false,
                theta_fix=0,
                pnom=data.s1_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.FWPump_mflow,
                CheckValve=true) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-316,60})));
            equation
              connect(Turbine_s2.shaft_a, Turbine_s1.shaft_b) annotation (Line(points={{-213.24,
                      1.77636e-15},{-261.04,1.77636e-15}},          color={0,0,0}));
              connect(Turbine_s2.shaft_b, Turbine_s3.shaft_a) annotation (Line(points={{-195.04,
                      1.77636e-15},{-137.24,1.77636e-15}},         color={0,0,0}));
              connect(Turbine_s3.shaft_b, Turbine_s4.shaft_a) annotation (Line(points={{-119.04,
                      1.77636e-15},{-45.24,1.77636e-15}},         color={0,0,0}));
              connect(prescribedPressureCondenser.waterOut, pump_ControlledFlowRate.inlet)
                annotation (Line(points={{136,-166},{136,-174},{54,-174}},
                                                                         color={0,0,255}));
              connect(const.y, pump_ControlledFlowRate.setpoint_FlowRate) annotation (
                  Line(points={{71,-148},{60,-148},{60,-167},{54.4,-167}},     color={0,
                      0,127}));
              connect(fixedHeatFlow.port, header.thermalPort)
                annotation (Line(points={{-398,-64},{-375.7,-64}}, color={191,0,0}));
              connect(SHWall.int, SH.wall) annotation (Line(points={{-232,-144.2},{
                      -232,-169}},                    color={255,127,0}));
              connect(SH.outfl, header.inlet) annotation (Line(points={{-242,-174},{
                      -370,-174},{-370,-74.1}}, color={0,0,255}));
              connect(flowSplit.in1, Turbine_s1.outlet) annotation (Line(points={{-257.6,
                      39},{-257.6,20.6},{-258.8,20.6},{-258.8,11.2}},        color={0,0,
                      255}));
              connect(flowSplit.out2, Turbine_s2.inlet) annotation (Line(points={{-244.4,
                      43.4},{-215.2,43.4},{-215.2,11.2}},        color={0,0,255}));
              connect(Turbine_s2.outlet, flowSplit1.in1) annotation (Line(points={{-192.8,
                      11.2},{-192.8,10},{-182,10},{-182,40},{-181.2,40}},        color=
                      {0,0,255}));
              connect(flowSplit1.out2, Turbine_s3.inlet) annotation (Line(points={{-166.8,
                      44.8},{-139.2,44.8},{-139.2,11.2}},        color={0,0,255}));
              connect(flowSplit1.out1, steam2_ext.inlet) annotation (Line(points={{-166.8,
                      35.2},{-166.8,32},{-166,32},{-166,-24}},
                                                         color={0,0,255}));
              connect(steam2_ext.outlet, mixer1.in2)
                annotation (Line(points={{-166,-44},{-166,-74}}, color={0,0,255}));
              connect(pump_ControlledFlowRate.outlet, SH3.infl)
                annotation (Line(points={{34,-174},{18,-174}},    color={0,0,255}));
              connect(SHWall1.int, SH3.wall)
                annotation (Line(points={{8,-144.2},{8,-169}},       color={255,127,0}));
              connect(SH1.wall, heatExchangerTopologyFV.side2)
                annotation (Line(points={{-232,-91},{-232,-108.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV.side1, SHWall.ext)
                annotation (Line(points={{-232,-115},{-232,-135.66}}, color={255,127,0}));
              connect(SH2.wall, heatExchangerTopologyFV1.side1)
                annotation (Line(points={{8,-91},{8,-109}},       color={255,127,0}));
              connect(heatExchangerTopologyFV1.side2, SHWall1.ext) annotation (Line(points={{8,
                      -115.1},{8,-135.66}},          color={255,127,0}));
              connect(valveVap3.outlet, SH2.infl)
                annotation (Line(points={{-16,-86},{-2,-86}},  color={0,0,255}));
              connect(flowSplit.out1, steam1_ext.inlet) annotation (Line(points={{-244.4,
                      34.6},{-244,34.6},{-244,-24}},
                                               color={0,0,255}));
              connect(steam1_ext.outlet, SH1.infl) annotation (Line(points={{-244,-44},
                      {-244,-86},{-242,-86}},
                                        color={0,0,255}));
              connect(flowSplit2.in1, Turbine_s3.outlet) annotation (Line(points={{-117.2,
                      42},{-118,42},{-118,11.2},{-116.8,11.2}},
                                                            color={0,0,255}));
              connect(flowSplit2.out2, Turbine_s4.inlet) annotation (Line(points={{-102.8,
                      46.8},{-47.2,46.8},{-47.2,11.2}},
                                                  color={0,0,255}));
              connect(mixer2.out, valveVap3.inlet) annotation (Line(points={{-46,-74},
                      {-42,-74},{-42,-86},{-36,-86}},
                                            color={0,0,255}));
              connect(flowSplit2.out1, steam3_ext.inlet) annotation (Line(points={{-102.8,
                      37.2},{-102.8,36},{-76,36},{-76,-26}},
                                                         color={0,0,255}));
              connect(steam3_ext.outlet, mixer2.in2) annotation (Line(points={{-76,-46},
                      {-76,-58},{-64,-58},{-64,-68}},
                                                   color={0,0,255}));
              connect(SH1.outfl, SH1_cont.inlet)
                annotation (Line(points={{-222,-86},{-212,-86}}, color={0,0,255}));
              connect(SH1_cont.outlet, mixer1.in1)
                annotation (Line(points={{-192,-86},{-166,-86}}, color={0,0,255}));
              connect(mixer1.out, SH4.infl)
                annotation (Line(points={{-148,-80},{-132,-80}}, color={0,0,255}));
              connect(SH3.outfl, SH5.infl)
                annotation (Line(points={{-2,-174},{-112,-174}},  color={0,0,255}));
              connect(SH4.wall, heatExchangerTopologyFV2.side2)
                annotation (Line(points={{-122,-85},{-122,-102.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV2.side1, SHWall2.ext)
                annotation (Line(points={{-122,-109},{-122,-129.66}}, color={255,127,0}));
              connect(SHWall2.int, SH5.wall)
                annotation (Line(points={{-122,-138.2},{-122,-169}}, color={255,127,0}));
              connect(SH2.outfl, valveVap1.inlet)
                annotation (Line(points={{18,-86},{36,-86}},   color={0,0,255}));
              connect(valveVap1.outlet, mixer.in1)
                annotation (Line(points={{56,-86},{130,-86},{130,-88}},
                                                                     color={0,0,255}));
              connect(SH4.outfl, SH4_cont.inlet)
                annotation (Line(points={{-112,-80},{-100,-80}}, color={0,0,255}));
              connect(SH4_cont.outlet, mixer2.in1)
                annotation (Line(points={{-80,-80},{-64,-80}},   color={0,0,255}));
              connect(SH5.outfl, pump_ControlledFlowRate1.inlet)
                annotation (Line(points={{-132,-174},{-180,-174}}, color={0,0,255}));
              connect(pump_ControlledFlowRate1.outlet, SH.infl)
                annotation (Line(points={{-200,-174},{-222,-174}}, color={0,0,255}));
              connect(const1.y, pump_ControlledFlowRate1.setpoint_FlowRate) annotation (
                  Line(points={{-167,-148},{-178,-148},{-178,-167},{-179.6,-167}}, color={0,
                      0,127}));
              connect(Turbine_s4.shaft_b, generator1.shaft_a) annotation (Line(points={{-27.04,
                      1.77636e-15},{80.48,1.77636e-15},{80.48,0},{170,0}},
                                                          color={0,0,0}));
              connect(generator1.portElec, boundary1.port)
                annotation (Line(points={{210,0},{242,0}},   color={255,0,0}));
              connect(Turbine_s1.shaft_a, flange_a) annotation (Line(points={{-279.24,
                      1.77636e-15},{-280.62,1.77636e-15},{-280.62,0},{-420,0}}, color={
                      0,0,0}));
              connect(steamValve.outlet, Turbine_s1.inlet) annotation (Line(points={{
                      -306,12},{-306,11.2},{-281.2,11.2}}, color={0,0,255}));
              connect(mixer.out, prescribedPressureCondenser.steamIn)
                annotation (Line(points={{136,-106},{136,-146}}, color={0,0,255}));
              connect(valveVap2.outlet, mixer.in2)
                annotation (Line(points={{142,-66},{142,-88}}, color={0,0,255}));
              connect(mixer3.out, valveVap2.inlet)
                annotation (Line(points={{142,-28},{142,-46}}, color={0,0,255}));
              connect(Turbine_s4.outlet, mixer3.in1) annotation (Line(points={{-24.8,
                      11.2},{-24.8,10},{136,10},{136,-10}}, color={0,0,255}));
              connect(flowSplit3.out1, steamValve.inlet) annotation (Line(points={{
                      -339.6,11.4},{-338,11.4},{-338,12},{-326,12}}, color={0,0,255}));
              connect(header.outlet, flowSplit3.in1) annotation (Line(points={{-370,
                      -54},{-370,20},{-366,20},{-366,19},{-362.4,19}}, color={0,0,255}));
              connect(flowSplit3.out2, steamValve1.inlet) annotation (Line(points={{
                      -339.6,26.6},{-338,26.6},{-338,60},{-326,60}}, color={0,0,255}));
              connect(steamValve1.outlet, mixer3.in2) annotation (Line(points={{-306,
                      60},{148,60},{148,-10}}, color={0,0,255}));
              annotation (Diagram(coordinateSystem(extent={{-420,-180},{300,120}})), Icon(
                    coordinateSystem(extent={{-420,-180},{300,120}})),
                experiment(StopTime=1000, __Dymola_Algorithm="Dassl"),
                Documentation(info="<html>
<p>Example3. Steam Turbine Model with fixed power (with Feedwater heat exchangers)</p>
</html>"));
            end ex4_with_HXs_and_steam_bypass;

            model ex5_with_HXs_and_steam_bypass_Control

              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;
              ThermoPower.Water.SteamTurbineStodola Turbine_s4(
                redeclare package Medium = Medium,
                wstart=data.s4_inlet_mflow,
                PRstart=data.s4_PR_start,
                wnom=data.s4_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s4_Kt,
                pnom(displayUnit="MPa") = data.s4_inlet_p)
                               annotation (Placement(transformation(extent={{-50,-14},
                        {-22,14}},
                      rotation=0)));
              ThermoPower.Examples.RankineCycle.Models.PrescribedPressureCondenser
                prescribedPressureCondenser(
                redeclare package Medium = Medium,
                p=data.condenser_p,
                Vtot=10,
                Vlstart=1.5)
                annotation (Placement(transformation(extent={{126,-166},{146,-146}})));
              ThermoPower.Water.SteamTurbineStodola Turbine_s1(
                redeclare package Medium = Medium,
                wstart=data.s1_inlet_mflow,
                PRstart=data.s1_PR_start,
                wnom=data.s1_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s1_Kt,
                pnom(displayUnit="MPa") = data.s1_inlet_p) annotation (Placement(
                    transformation(extent={{-284,-14},{-256,14}}, rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s2(
                redeclare package Medium = Medium,
                wstart=data.s2_inlet_mflow,
                PRstart=data.s2_PR_start,
                wnom=data.s2_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s2_Kt,
                pnom(displayUnit="MPa") = data.s2_inlet_p) annotation (Placement(
                    transformation(extent={{-218,-14},{-190,14}},rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s3(
                redeclare package Medium = Medium,
                wstart=data.s3_inlet_mflow,
                PRstart=data.s3_PR_start,
                wnom=data.s3_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s3_Kt,
                pnom(displayUnit="MPa") = data.s3_inlet_p) annotation (Placement(
                    transformation(extent={{-142,-14},{-114,14}},
                                                                rotation=0)));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10)
                annotation (Placement(transformation(extent={{54,-184},{34,-164}})));
              Modelica.Blocks.Sources.Constant const(k=1500)
                annotation (Placement(transformation(extent={{92,-158},{72,-138}})));
              Data_Record.Data_5 data
                annotation (Placement(transformation(extent={{194,96},{214,116}})));
              ThermoPower.Water.Header header(
                redeclare package Medium = Medium,
                V=1,
                allowFlowReversal=false,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.TwoPhases,
                pstart=data.s1_inlet_p,
                hstart=data.s1_inlet_h,
                Tmstart=517.01) annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=90,
                    origin={-370,-64})));
              Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow fixedHeatFlow(Q_flow=150e6)
                annotation (Placement(transformation(extent={{-422,-76},{-398,-52}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-232,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-222,
                        -184},{-242,-164}},
                                 rotation=0)));
              ThermoPower.Water.FlowSplit flowSplit
                annotation (Placement(transformation(extent={{-262,50},{-240,28}})));
              ThermoPower.Water.Mixer mixer(
                redeclare package Medium = Medium,
                V=0.1,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart=data.condenser_p,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={136,-96})));
              ThermoPower.Water.Flow1DFV2ph
                                SH1(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.HP_FWH_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 1,
                pstart(displayUnit="MPa") = steam1_ext.pout_start)
                                annotation (Placement(transformation(extent={{-242,
                        -76},{-222,-96}},
                                 rotation=0)));

              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-242,-102},{-222,-122}})));
              ThermoPower.Water.FlowSplit flowSplit1
                annotation (Placement(transformation(extent={{-186,52},{-162,28}})));
              ThermoPower.Water.ValveVap steam2_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-166,-34})));
              ThermoPower.Water.Mixer mixer1(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam2_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-158,-80})));
              ThermoPower.Water.Flow1DFV
                                SH2(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-2,-76},
                        {18,-96}},
                                 rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV1(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow)
                annotation (Placement(transformation(extent={{18,-122},{-2,-102}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall1(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={8,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH3(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{18,-184},
                        {-2,-164}},
                                 rotation=0)));
              ThermoPower.Water.ValveVap valveVap3(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s2_outlet_p,
                dpnom(displayUnit="Pa") = 100,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=mixer2.pstart,
                pout_start=SH2.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-26,-86})));
              ThermoPower.Water.ValveVap steam1_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s1_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s1_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-244,-34})));
              ThermoPower.Water.FlowSplit flowSplit2
                annotation (Placement(transformation(extent={{-122,54},{-98,30}})));
              ThermoPower.Water.Mixer mixer2(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam3_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-56,-74})));
              ThermoPower.Water.ValveVap steam3_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.04,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-76,-36})));
              ThermoPower.Water.ValveVap SH1_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=SH1.pstart,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH1.pstart,
                pout_start=SH1.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-202,-86})));
              ThermoPower.Water.Flow1DFV2ph
                                SH4(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=false,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 0,
                pstart(displayUnit="MPa") = mixer1.pstart)
                                annotation (Placement(transformation(extent={{-132,
                        -70},{-112,-90}},
                                 rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV2(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-132,-96},{-112,-116}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall2(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-122,-134},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH5(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-112,
                        -184},{-132,-164}},
                                 rotation=0)));
              ThermoPower.Water.ValveVap valveVap1(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH2.pstart,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={46,-86})));
              ThermoPower.Water.ValveVap SH4_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="MPa") = 10000,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH4.pstart,
                pout_start=mixer2.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-90,-80})));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate1(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10) annotation (Placement(transformation(extent={{-180,-184},
                        {-200,-164}})));
              Modelica.Blocks.Sources.Constant const1(k=1500)
                annotation (Placement(transformation(extent={{-146,-158},{-166,-138}})));
              Components.Generator generator1
                annotation (Placement(transformation(extent={{170,-20},{210,20}})));
              Components.FrequencySource boundary1(f=60)
                annotation (Placement(transformation(extent={{286,-24},{242,24}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-430,-10},{-410,10}})));
              ThermoPower.Water.ValveVap byPassV_2(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=3.0,
                useThetaInput=true,
                theta_fix=1,
                pnom=data.s1_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.FWPump_mflow,
                CheckValve=true) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-316,12})));
              ThermoPower.Water.ValveVap valveVap2(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=3.0,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.condenser_before_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.s4_outlet_mflow,
                CheckValve=true,
                pin_start=data.s4_outlet_p,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=270,
                    origin={142,-56})));
              ThermoPower.Water.Mixer mixer3(
                redeclare package Medium = Medium,
                V=0.1,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart=data.s4_outlet_p,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={142,-18})));
              ThermoPower.Water.FlowSplit flowSplit3
                annotation (Placement(transformation(extent={{-370,38},{-332,0}})));
              ThermoPower.Water.ValveVap byPassV_1(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=1,
                useThetaInput=true,
                theta_fix=0,
                pnom=data.s1_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.FWPump_mflow,
                CheckValve=true) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-316,78})));
              Modelica.Blocks.Sources.Ramp byPass_1(
                height=0.05,
                duration=300,
                offset=0,
                startTime=500)
                annotation (Placement(transformation(extent={{-268,96},{-288,116}})));
              Modelica.Blocks.Sources.Ramp byPass_2(
                height=-0.05,
                duration=300,
                offset=1,
                startTime=500)
                annotation (Placement(transformation(extent={{-282,38},{-302,58}})));
            equation
              connect(Turbine_s2.shaft_a, Turbine_s1.shaft_b) annotation (Line(points={{-213.24,
                      1.77636e-15},{-261.04,1.77636e-15}},          color={0,0,0}));
              connect(Turbine_s2.shaft_b, Turbine_s3.shaft_a) annotation (Line(points={{-195.04,
                      1.77636e-15},{-137.24,1.77636e-15}},         color={0,0,0}));
              connect(Turbine_s3.shaft_b, Turbine_s4.shaft_a) annotation (Line(points={{-119.04,
                      1.77636e-15},{-45.24,1.77636e-15}},         color={0,0,0}));
              connect(prescribedPressureCondenser.waterOut, pump_ControlledFlowRate.inlet)
                annotation (Line(points={{136,-166},{136,-174},{54,-174}},
                                                                         color={0,0,255}));
              connect(const.y, pump_ControlledFlowRate.setpoint_FlowRate) annotation (
                  Line(points={{71,-148},{60,-148},{60,-167},{54.4,-167}},     color={0,
                      0,127}));
              connect(fixedHeatFlow.port, header.thermalPort)
                annotation (Line(points={{-398,-64},{-375.7,-64}}, color={191,0,0}));
              connect(SHWall.int, SH.wall) annotation (Line(points={{-232,-144.2},{
                      -232,-169}},                    color={255,127,0}));
              connect(SH.outfl, header.inlet) annotation (Line(points={{-242,-174},{
                      -370,-174},{-370,-74.1}}, color={0,0,255}));
              connect(flowSplit.in1, Turbine_s1.outlet) annotation (Line(points={{-257.6,
                      39},{-257.6,20.6},{-258.8,20.6},{-258.8,11.2}},        color={0,0,
                      255}));
              connect(flowSplit.out2, Turbine_s2.inlet) annotation (Line(points={{-244.4,
                      43.4},{-215.2,43.4},{-215.2,11.2}},        color={0,0,255}));
              connect(Turbine_s2.outlet, flowSplit1.in1) annotation (Line(points={{-192.8,
                      11.2},{-192.8,10},{-182,10},{-182,40},{-181.2,40}},        color=
                      {0,0,255}));
              connect(flowSplit1.out2, Turbine_s3.inlet) annotation (Line(points={{-166.8,
                      44.8},{-139.2,44.8},{-139.2,11.2}},        color={0,0,255}));
              connect(flowSplit1.out1, steam2_ext.inlet) annotation (Line(points={{-166.8,
                      35.2},{-166.8,32},{-166,32},{-166,-24}},
                                                         color={0,0,255}));
              connect(steam2_ext.outlet, mixer1.in2)
                annotation (Line(points={{-166,-44},{-166,-74}}, color={0,0,255}));
              connect(pump_ControlledFlowRate.outlet, SH3.infl)
                annotation (Line(points={{34,-174},{18,-174}},    color={0,0,255}));
              connect(SHWall1.int, SH3.wall)
                annotation (Line(points={{8,-144.2},{8,-169}},       color={255,127,0}));
              connect(SH1.wall, heatExchangerTopologyFV.side2)
                annotation (Line(points={{-232,-91},{-232,-108.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV.side1, SHWall.ext)
                annotation (Line(points={{-232,-115},{-232,-135.66}}, color={255,127,0}));
              connect(SH2.wall, heatExchangerTopologyFV1.side1)
                annotation (Line(points={{8,-91},{8,-109}},       color={255,127,0}));
              connect(heatExchangerTopologyFV1.side2, SHWall1.ext) annotation (Line(points={{8,
                      -115.1},{8,-135.66}},          color={255,127,0}));
              connect(valveVap3.outlet, SH2.infl)
                annotation (Line(points={{-16,-86},{-2,-86}},  color={0,0,255}));
              connect(flowSplit.out1, steam1_ext.inlet) annotation (Line(points={{-244.4,
                      34.6},{-244,34.6},{-244,-24}},
                                               color={0,0,255}));
              connect(steam1_ext.outlet, SH1.infl) annotation (Line(points={{-244,-44},
                      {-244,-86},{-242,-86}},
                                        color={0,0,255}));
              connect(flowSplit2.in1, Turbine_s3.outlet) annotation (Line(points={{-117.2,
                      42},{-118,42},{-118,11.2},{-116.8,11.2}},
                                                            color={0,0,255}));
              connect(flowSplit2.out2, Turbine_s4.inlet) annotation (Line(points={{-102.8,
                      46.8},{-47.2,46.8},{-47.2,11.2}},
                                                  color={0,0,255}));
              connect(mixer2.out, valveVap3.inlet) annotation (Line(points={{-46,-74},
                      {-42,-74},{-42,-86},{-36,-86}},
                                            color={0,0,255}));
              connect(flowSplit2.out1, steam3_ext.inlet) annotation (Line(points={{-102.8,
                      37.2},{-102.8,36},{-76,36},{-76,-26}},
                                                         color={0,0,255}));
              connect(steam3_ext.outlet, mixer2.in2) annotation (Line(points={{-76,-46},
                      {-76,-58},{-64,-58},{-64,-68}},
                                                   color={0,0,255}));
              connect(SH1.outfl, SH1_cont.inlet)
                annotation (Line(points={{-222,-86},{-212,-86}}, color={0,0,255}));
              connect(SH1_cont.outlet, mixer1.in1)
                annotation (Line(points={{-192,-86},{-166,-86}}, color={0,0,255}));
              connect(mixer1.out, SH4.infl)
                annotation (Line(points={{-148,-80},{-132,-80}}, color={0,0,255}));
              connect(SH3.outfl, SH5.infl)
                annotation (Line(points={{-2,-174},{-112,-174}},  color={0,0,255}));
              connect(SH4.wall, heatExchangerTopologyFV2.side2)
                annotation (Line(points={{-122,-85},{-122,-102.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV2.side1, SHWall2.ext)
                annotation (Line(points={{-122,-109},{-122,-129.66}}, color={255,127,0}));
              connect(SHWall2.int, SH5.wall)
                annotation (Line(points={{-122,-138.2},{-122,-169}}, color={255,127,0}));
              connect(SH2.outfl, valveVap1.inlet)
                annotation (Line(points={{18,-86},{36,-86}},   color={0,0,255}));
              connect(valveVap1.outlet, mixer.in1)
                annotation (Line(points={{56,-86},{130,-86},{130,-88}},
                                                                     color={0,0,255}));
              connect(SH4.outfl, SH4_cont.inlet)
                annotation (Line(points={{-112,-80},{-100,-80}}, color={0,0,255}));
              connect(SH4_cont.outlet, mixer2.in1)
                annotation (Line(points={{-80,-80},{-64,-80}},   color={0,0,255}));
              connect(SH5.outfl, pump_ControlledFlowRate1.inlet)
                annotation (Line(points={{-132,-174},{-180,-174}}, color={0,0,255}));
              connect(pump_ControlledFlowRate1.outlet, SH.infl)
                annotation (Line(points={{-200,-174},{-222,-174}}, color={0,0,255}));
              connect(const1.y, pump_ControlledFlowRate1.setpoint_FlowRate) annotation (
                  Line(points={{-167,-148},{-178,-148},{-178,-167},{-179.6,-167}}, color={0,
                      0,127}));
              connect(Turbine_s4.shaft_b, generator1.shaft_a) annotation (Line(points={{-27.04,
                      1.77636e-15},{80.48,1.77636e-15},{80.48,0},{170,0}},
                                                          color={0,0,0}));
              connect(generator1.portElec, boundary1.port)
                annotation (Line(points={{210,0},{242,0}},   color={255,0,0}));
              connect(Turbine_s1.shaft_a, flange_a) annotation (Line(points={{-279.24,
                      1.77636e-15},{-280.62,1.77636e-15},{-280.62,0},{-420,0}}, color={
                      0,0,0}));
              connect(byPassV_2.outlet, Turbine_s1.inlet) annotation (Line(points={{
                      -306,12},{-306,11.2},{-281.2,11.2}}, color={0,0,255}));
              connect(mixer.out, prescribedPressureCondenser.steamIn)
                annotation (Line(points={{136,-106},{136,-146}}, color={0,0,255}));
              connect(valveVap2.outlet, mixer.in2)
                annotation (Line(points={{142,-66},{142,-88}}, color={0,0,255}));
              connect(mixer3.out, valveVap2.inlet)
                annotation (Line(points={{142,-28},{142,-46}}, color={0,0,255}));
              connect(Turbine_s4.outlet, mixer3.in1) annotation (Line(points={{-24.8,
                      11.2},{-24.8,10},{136,10},{136,-10}}, color={0,0,255}));
              connect(flowSplit3.out1, byPassV_2.inlet) annotation (Line(points={{
                      -339.6,11.4},{-338,11.4},{-338,12},{-326,12}}, color={0,0,255}));
              connect(header.outlet, flowSplit3.in1) annotation (Line(points={{-370,
                      -54},{-370,20},{-366,20},{-366,19},{-362.4,19}}, color={0,0,255}));
              connect(flowSplit3.out2, byPassV_1.inlet) annotation (Line(points={{
                      -339.6,26.6},{-338,26.6},{-338,78},{-326,78}}, color={0,0,255}));
              connect(byPassV_1.outlet, mixer3.in2) annotation (Line(points={{-306,78},
                      {148,78},{148,-10}}, color={0,0,255}));
              connect(byPass_1.y, byPassV_1.theta) annotation (Line(points={{-289,106},
                      {-316,106},{-316,86}}, color={0,0,127}));
              connect(byPass_2.y, byPassV_2.theta) annotation (Line(points={{-303,48},
                      {-316,48},{-316,20}}, color={0,0,127}));
              annotation (Diagram(coordinateSystem(extent={{-420,-180},{300,120}})), Icon(
                    coordinateSystem(extent={{-420,-180},{300,120}})),
                experiment(StopTime=1000, __Dymola_Algorithm="Dassl"),
                Documentation(info="<html>
<p>Example3. Steam Turbine Model with fixed power (with Feedwater heat exchangers)</p>
</html>"));
            end ex5_with_HXs_and_steam_bypass_Control;

            model ex6_with_HXs_and_SingleSteamBypass_Control

              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;
              ThermoPower.Water.SteamTurbineStodola Turbine_s4(
                redeclare package Medium = Medium,
                wstart=data.s4_inlet_mflow,
                PRstart=data.s4_PR_start,
                wnom=data.s4_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s4_Kt,
                pnom(displayUnit="MPa") = data.s4_inlet_p)
                               annotation (Placement(transformation(extent={{-50,-14},
                        {-22,14}},
                      rotation=0)));
              ThermoPower.Examples.RankineCycle.Models.PrescribedPressureCondenser
                prescribedPressureCondenser(
                redeclare package Medium = Medium,
                p=data.condenser_p,
                Vtot=10,
                Vlstart=1.5)
                annotation (Placement(transformation(extent={{126,-166},{146,-146}})));
              ThermoPower.Water.SteamTurbineStodola Turbine_s1(
                redeclare package Medium = Medium,
                wstart=data.s1_inlet_mflow,
                PRstart=data.s1_PR_start,
                wnom=data.s1_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s1_Kt,
                pnom(displayUnit="MPa") = data.s1_inlet_p) annotation (Placement(
                    transformation(extent={{-284,-14},{-256,14}}, rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s2(
                redeclare package Medium = Medium,
                wstart=data.s2_inlet_mflow,
                PRstart=data.s2_PR_start,
                wnom=data.s2_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s2_Kt,
                pnom(displayUnit="MPa") = data.s2_inlet_p) annotation (Placement(
                    transformation(extent={{-218,-14},{-190,14}},rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s3(
                redeclare package Medium = Medium,
                wstart=data.s3_inlet_mflow,
                PRstart=data.s3_PR_start,
                wnom=data.s3_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s3_Kt,
                pnom(displayUnit="MPa") = data.s3_inlet_p) annotation (Placement(
                    transformation(extent={{-142,-14},{-114,14}},
                                                                rotation=0)));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10)
                annotation (Placement(transformation(extent={{54,-184},{34,-164}})));
              Modelica.Blocks.Sources.Constant const(k=1500)
                annotation (Placement(transformation(extent={{92,-158},{72,-138}})));
              Data_Record.Data_5 data
                annotation (Placement(transformation(extent={{194,96},{214,116}})));
              ThermoPower.Water.Header header(
                redeclare package Medium = Medium,
                V=1,
                allowFlowReversal=false,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.TwoPhases,
                pstart=data.s1_inlet_p,
                hstart=data.s1_inlet_h,
                Tmstart=517.01) annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=90,
                    origin={-370,-64})));
              Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow fixedHeatFlow(Q_flow=150e6)
                annotation (Placement(transformation(extent={{-422,-76},{-398,-52}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-232,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-222,
                        -184},{-242,-164}},
                                 rotation=0)));
              inner ThermoPower.System system
                annotation (Placement(transformation(extent={{-414,96},{-394,116}})));
              ThermoPower.Water.FlowSplit flowSplit
                annotation (Placement(transformation(extent={{-262,50},{-240,28}})));
              ThermoPower.Water.Mixer mixer(
                redeclare package Medium = Medium,
                V=1,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart=data.condenser_p,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={136,-96})));
              ThermoPower.Water.Flow1DFV2ph
                                SH1(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.HP_FWH_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 1,
                pstart(displayUnit="MPa") = steam1_ext.pout_start)
                                annotation (Placement(transformation(extent={{-242,
                        -76},{-222,-96}},
                                 rotation=0)));

              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-242,-102},{-222,-122}})));
              ThermoPower.Water.FlowSplit flowSplit1
                annotation (Placement(transformation(extent={{-186,52},{-162,28}})));
              ThermoPower.Water.ValveVap steam2_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-166,-34})));
              ThermoPower.Water.Mixer mixer1(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam2_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-158,-80})));
              ThermoPower.Water.Flow1DFV
                                SH2(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-2,-76},
                        {18,-96}},
                                 rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV1(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow)
                annotation (Placement(transformation(extent={{18,-122},{-2,-102}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall1(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={8,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH3(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{18,-184},
                        {-2,-164}},
                                 rotation=0)));
              ThermoPower.Water.ValveVap valveVap3(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s2_outlet_p,
                dpnom(displayUnit="Pa") = 100,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=mixer2.pstart,
                pout_start=SH2.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-26,-86})));
              ThermoPower.Water.ValveVap steam1_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s1_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s1_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-244,-34})));
              ThermoPower.Water.FlowSplit flowSplit2
                annotation (Placement(transformation(extent={{-122,54},{-98,30}})));
              ThermoPower.Water.Mixer mixer2(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam3_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-56,-74})));
              ThermoPower.Water.ValveVap steam3_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.04,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-76,-36})));
              ThermoPower.Water.ValveVap SH1_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=SH1.pstart,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH1.pstart,
                pout_start=SH1.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-202,-86})));
              ThermoPower.Water.Flow1DFV2ph
                                SH4(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=false,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 0,
                pstart(displayUnit="MPa") = mixer1.pstart)
                                annotation (Placement(transformation(extent={{-132,
                        -70},{-112,-90}},
                                 rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV2(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-132,-96},{-112,-116}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall2(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-122,-134},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH5(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-112,
                        -184},{-132,-164}},
                                 rotation=0)));
              ThermoPower.Water.ValveVap valveVap1(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH2.pstart,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={46,-86})));
              ThermoPower.Water.ValveVap SH4_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="MPa") = 10000,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH4.pstart,
                pout_start=mixer2.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-90,-80})));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate1(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10) annotation (Placement(transformation(extent={{-180,-184},
                        {-200,-164}})));
              Modelica.Blocks.Sources.Constant const1(k=1500)
                annotation (Placement(transformation(extent={{-146,-158},{-166,-138}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-430,-10},{-410,10}})));
              ThermoPower.Water.ValveVap steamValve(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=3.1,
                useThetaInput=true,
                pnom=data.s1_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.FWPump_mflow,
                CheckValve=true) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-316,12})));
              ThermoPower.Electrical.Generator generator(Pnom=50e6, initOpt=
                    ThermoPower.Choices.Init.Options.steadyState)
                annotation (Placement(transformation(extent={{184,-16},{216,16}})));
              ThermoPower.Electrical.Grid grid(Pgrid=10e9)
                annotation (Placement(transformation(extent={{232,-14},{260,14}})));
              ThermoPower.Water.ValveVap valveVap2(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=3.0,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.condenser_before_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.s4_outlet_mflow,
                CheckValve=true,
                pin_start=data.s4_outlet_p,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=270,
                    origin={142,-62})));
              Modelica.Blocks.Sources.Ramp byPass_2(
                height=-0.2,
                duration=200,
                offset=1,
                startTime=500)
                annotation (Placement(transformation(extent={{-282,50},{-302,70}})));
            equation
              connect(Turbine_s2.shaft_a, Turbine_s1.shaft_b) annotation (Line(points={{-213.24,
                      1.77636e-15},{-261.04,1.77636e-15}},          color={0,0,0}));
              connect(Turbine_s2.shaft_b, Turbine_s3.shaft_a) annotation (Line(points={{-195.04,
                      1.77636e-15},{-137.24,1.77636e-15}},         color={0,0,0}));
              connect(Turbine_s3.shaft_b, Turbine_s4.shaft_a) annotation (Line(points={{-119.04,
                      1.77636e-15},{-45.24,1.77636e-15}},         color={0,0,0}));
              connect(prescribedPressureCondenser.waterOut, pump_ControlledFlowRate.inlet)
                annotation (Line(points={{136,-166},{136,-174},{54,-174}},
                                                                         color={0,0,255}));
              connect(const.y, pump_ControlledFlowRate.setpoint_FlowRate) annotation (
                  Line(points={{71,-148},{60,-148},{60,-167},{54.4,-167}},     color={0,
                      0,127}));
              connect(fixedHeatFlow.port, header.thermalPort)
                annotation (Line(points={{-398,-64},{-375.7,-64}}, color={191,0,0}));
              connect(SHWall.int, SH.wall) annotation (Line(points={{-232,-144.2},{
                      -232,-169}},                    color={255,127,0}));
              connect(SH.outfl, header.inlet) annotation (Line(points={{-242,-174},{
                      -370,-174},{-370,-74.1}}, color={0,0,255}));
              connect(flowSplit.in1, Turbine_s1.outlet) annotation (Line(points={{-257.6,
                      39},{-257.6,20.6},{-258.8,20.6},{-258.8,11.2}},        color={0,0,
                      255}));
              connect(flowSplit.out2, Turbine_s2.inlet) annotation (Line(points={{-244.4,
                      43.4},{-215.2,43.4},{-215.2,11.2}},        color={0,0,255}));
              connect(Turbine_s2.outlet, flowSplit1.in1) annotation (Line(points={{-192.8,
                      11.2},{-192.8,10},{-182,10},{-182,40},{-181.2,40}},        color=
                      {0,0,255}));
              connect(flowSplit1.out2, Turbine_s3.inlet) annotation (Line(points={{-166.8,
                      44.8},{-139.2,44.8},{-139.2,11.2}},        color={0,0,255}));
              connect(flowSplit1.out1, steam2_ext.inlet) annotation (Line(points={{-166.8,
                      35.2},{-166.8,32},{-166,32},{-166,-24}},
                                                         color={0,0,255}));
              connect(steam2_ext.outlet, mixer1.in2)
                annotation (Line(points={{-166,-44},{-166,-74}}, color={0,0,255}));
              connect(pump_ControlledFlowRate.outlet, SH3.infl)
                annotation (Line(points={{34,-174},{18,-174}},    color={0,0,255}));
              connect(SHWall1.int, SH3.wall)
                annotation (Line(points={{8,-144.2},{8,-169}},       color={255,127,0}));
              connect(SH1.wall, heatExchangerTopologyFV.side2)
                annotation (Line(points={{-232,-91},{-232,-108.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV.side1, SHWall.ext)
                annotation (Line(points={{-232,-115},{-232,-135.66}}, color={255,127,0}));
              connect(SH2.wall, heatExchangerTopologyFV1.side1)
                annotation (Line(points={{8,-91},{8,-109}},       color={255,127,0}));
              connect(heatExchangerTopologyFV1.side2, SHWall1.ext) annotation (Line(points={{8,
                      -115.1},{8,-135.66}},          color={255,127,0}));
              connect(valveVap3.outlet, SH2.infl)
                annotation (Line(points={{-16,-86},{-2,-86}},  color={0,0,255}));
              connect(flowSplit.out1, steam1_ext.inlet) annotation (Line(points={{-244.4,
                      34.6},{-244,34.6},{-244,-24}},
                                               color={0,0,255}));
              connect(steam1_ext.outlet, SH1.infl) annotation (Line(points={{-244,-44},
                      {-244,-86},{-242,-86}},
                                        color={0,0,255}));
              connect(flowSplit2.in1, Turbine_s3.outlet) annotation (Line(points={{-117.2,
                      42},{-118,42},{-118,11.2},{-116.8,11.2}},
                                                            color={0,0,255}));
              connect(flowSplit2.out2, Turbine_s4.inlet) annotation (Line(points={{-102.8,
                      46.8},{-47.2,46.8},{-47.2,11.2}},
                                                  color={0,0,255}));
              connect(mixer2.out, valveVap3.inlet) annotation (Line(points={{-46,-74},
                      {-42,-74},{-42,-86},{-36,-86}},
                                            color={0,0,255}));
              connect(flowSplit2.out1, steam3_ext.inlet) annotation (Line(points={{-102.8,
                      37.2},{-102.8,36},{-76,36},{-76,-26}},
                                                         color={0,0,255}));
              connect(steam3_ext.outlet, mixer2.in2) annotation (Line(points={{-76,-46},
                      {-76,-58},{-64,-58},{-64,-68}},
                                                   color={0,0,255}));
              connect(SH1.outfl, SH1_cont.inlet)
                annotation (Line(points={{-222,-86},{-212,-86}}, color={0,0,255}));
              connect(SH1_cont.outlet, mixer1.in1)
                annotation (Line(points={{-192,-86},{-166,-86}}, color={0,0,255}));
              connect(mixer1.out, SH4.infl)
                annotation (Line(points={{-148,-80},{-132,-80}}, color={0,0,255}));
              connect(SH3.outfl, SH5.infl)
                annotation (Line(points={{-2,-174},{-112,-174}},  color={0,0,255}));
              connect(SH4.wall, heatExchangerTopologyFV2.side2)
                annotation (Line(points={{-122,-85},{-122,-102.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV2.side1, SHWall2.ext)
                annotation (Line(points={{-122,-109},{-122,-129.66}}, color={255,127,0}));
              connect(SHWall2.int, SH5.wall)
                annotation (Line(points={{-122,-138.2},{-122,-169}}, color={255,127,0}));
              connect(SH2.outfl, valveVap1.inlet)
                annotation (Line(points={{18,-86},{36,-86}},   color={0,0,255}));
              connect(valveVap1.outlet, mixer.in1)
                annotation (Line(points={{56,-86},{130,-86},{130,-88}},
                                                                     color={0,0,255}));
              connect(SH4.outfl, SH4_cont.inlet)
                annotation (Line(points={{-112,-80},{-100,-80}}, color={0,0,255}));
              connect(SH4_cont.outlet, mixer2.in1)
                annotation (Line(points={{-80,-80},{-64,-80}},   color={0,0,255}));
              connect(SH5.outfl, pump_ControlledFlowRate1.inlet)
                annotation (Line(points={{-132,-174},{-180,-174}}, color={0,0,255}));
              connect(pump_ControlledFlowRate1.outlet, SH.infl)
                annotation (Line(points={{-200,-174},{-222,-174}}, color={0,0,255}));
              connect(const1.y, pump_ControlledFlowRate1.setpoint_FlowRate) annotation (
                  Line(points={{-167,-148},{-178,-148},{-178,-167},{-179.6,-167}}, color={0,
                      0,127}));
              connect(Turbine_s1.shaft_a, flange_a) annotation (Line(points={{-279.24,
                      1.77636e-15},{-280.62,1.77636e-15},{-280.62,0},{-420,0}}, color={
                      0,0,0}));
              connect(steamValve.outlet, Turbine_s1.inlet) annotation (Line(points={{-306,12},
                      {-293.6,12},{-293.6,11.2},{-281.2,11.2}},
                                                           color={0,0,255}));
              connect(mixer.out, prescribedPressureCondenser.steamIn)
                annotation (Line(points={{136,-106},{136,-146}}, color={0,0,255}));
              connect(Turbine_s4.shaft_b, generator.shaft) annotation (Line(points={{
                      -27.04,1.77636e-15},{130,1.77636e-15},{130,0},{186.24,0}},
                    color={0,0,0}));
              connect(generator.port, grid.port) annotation (Line(
                  points={{213.76,0},{223.86,0},{223.86,1.77636e-15},{233.96,
                      1.77636e-15}},
                  color={0,0,255},
                  thickness=0.5));
              connect(valveVap2.outlet, mixer.in2)
                annotation (Line(points={{142,-72},{142,-88}}, color={0,0,255}));
              connect(Turbine_s4.outlet, valveVap2.inlet) annotation (Line(points={{
                      -24.8,11.2},{-24.8,10},{142,10},{142,-52}}, color={0,0,255}));
              connect(header.outlet, steamValve.inlet) annotation (Line(points={{-370,
                      -54},{-370,12},{-326,12}}, color={0,0,255}));
              connect(byPass_2.y, steamValve.theta) annotation (Line(points={{-303,60},
                      {-316,60},{-316,20}}, color={0,0,127}));
              annotation (Diagram(coordinateSystem(extent={{-420,-180},{300,120}})), Icon(
                    coordinateSystem(extent={{-420,-180},{300,120}})),
                experiment(StopTime=1000, __Dymola_Algorithm="Dassl"),
                Documentation(info="<html>
<p>Example3. Steam Turbine Model with fixed power (with Feedwater heat exchangers)</p>
</html>"));
            end ex6_with_HXs_and_SingleSteamBypass_Control;

            model test3

              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;
              ThermoPower.Water.SteamTurbineStodola Turbine_s4(
                redeclare package Medium = Medium,
                wstart=data.s4_inlet_mflow,
                PRstart=data.s4_PR_start,
                wnom=data.s4_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s4_Kt,
                pnom(displayUnit="MPa") = data.s4_inlet_p)
                               annotation (Placement(transformation(extent={{-50,-14},
                        {-22,14}},
                      rotation=0)));
              ThermoPower.Examples.RankineCycle.Models.PrescribedPressureCondenser
                prescribedPressureCondenser(
                redeclare package Medium = Medium,
                p=data.condenser_p,
                Vtot=10,
                Vlstart=1.5)
                annotation (Placement(transformation(extent={{126,-166},{146,-146}})));
              ThermoPower.Water.SteamTurbineStodola Turbine_s1(
                redeclare package Medium = Medium,
                wstart=data.s1_inlet_mflow,
                PRstart=data.s1_PR_start,
                wnom=data.s1_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s1_Kt,
                pnom(displayUnit="MPa") = data.s1_inlet_p) annotation (Placement(
                    transformation(extent={{-284,-14},{-256,14}}, rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s2(
                redeclare package Medium = Medium,
                wstart=data.s2_inlet_mflow,
                PRstart=data.s2_PR_start,
                wnom=data.s2_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s2_Kt,
                pnom(displayUnit="MPa") = data.s2_inlet_p) annotation (Placement(
                    transformation(extent={{-218,-14},{-190,14}},rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s3(
                redeclare package Medium = Medium,
                wstart=data.s3_inlet_mflow,
                PRstart=data.s3_PR_start,
                wnom=data.s3_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s3_Kt,
                pnom(displayUnit="MPa") = data.s3_inlet_p) annotation (Placement(
                    transformation(extent={{-142,-14},{-114,14}},
                                                                rotation=0)));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10)
                annotation (Placement(transformation(extent={{54,-184},{34,-164}})));
              Modelica.Blocks.Sources.Constant const(k=1500)
                annotation (Placement(transformation(extent={{92,-158},{72,-138}})));
              Data_Record.Data_5 data
                annotation (Placement(transformation(extent={{194,96},{214,116}})));
              ThermoPower.Water.Header header(
                redeclare package Medium = Medium,
                V=1,
                allowFlowReversal=false,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.TwoPhases,
                pstart=data.s1_inlet_p,
                hstart=data.s1_inlet_h,
                Tmstart=517.01) annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=90,
                    origin={-370,-64})));
              Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow fixedHeatFlow(Q_flow=150e6)
                annotation (Placement(transformation(extent={{-422,-76},{-398,-52}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-232,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-222,
                        -184},{-242,-164}},
                                 rotation=0)));
              inner ThermoPower.System system
                annotation (Placement(transformation(extent={{-414,96},{-394,116}})));
              ThermoPower.Water.FlowSplit flowSplit
                annotation (Placement(transformation(extent={{-262,50},{-240,28}})));
              ThermoPower.Water.Mixer mixer(
                redeclare package Medium = Medium,
                V=1,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart=data.condenser_p,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={136,-96})));
              ThermoPower.Water.Flow1DFV2ph
                                SH1(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.HP_FWH_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 1,
                pstart(displayUnit="MPa") = steam1_ext.pout_start)
                                annotation (Placement(transformation(extent={{-242,
                        -76},{-222,-96}},
                                 rotation=0)));

              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-242,-102},{-222,-122}})));
              ThermoPower.Water.FlowSplit flowSplit1
                annotation (Placement(transformation(extent={{-186,52},{-162,28}})));
              ThermoPower.Water.ValveVap steam2_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-166,-34})));
              ThermoPower.Water.Mixer mixer1(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam2_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-158,-80})));
              ThermoPower.Water.Flow1DFV
                                SH2(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-2,-76},
                        {18,-96}},
                                 rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV1(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow)
                annotation (Placement(transformation(extent={{18,-122},{-2,-102}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall1(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={8,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH3(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{18,-184},
                        {-2,-164}},
                                 rotation=0)));
              ThermoPower.Water.ValveVap valveVap3(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s2_outlet_p,
                dpnom(displayUnit="Pa") = 100,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=mixer2.pstart,
                pout_start=SH2.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-26,-86})));
              ThermoPower.Water.ValveVap steam1_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s1_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s1_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-244,-34})));
              ThermoPower.Water.FlowSplit flowSplit2
                annotation (Placement(transformation(extent={{-122,54},{-98,30}})));
              ThermoPower.Water.Mixer mixer2(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam3_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-56,-74})));
              ThermoPower.Water.ValveVap steam3_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.04,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-76,-36})));
              ThermoPower.Water.ValveVap SH1_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=SH1.pstart,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH1.pstart,
                pout_start=SH1.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-202,-86})));
              ThermoPower.Water.Flow1DFV2ph
                                SH4(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=false,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 0,
                pstart(displayUnit="MPa") = mixer1.pstart)
                                annotation (Placement(transformation(extent={{-132,
                        -70},{-112,-90}},
                                 rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV2(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-132,-96},{-112,-116}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall2(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-122,-134},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH5(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-112,
                        -184},{-132,-164}},
                                 rotation=0)));
              ThermoPower.Water.ValveVap valveVap1(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH2.pstart,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={46,-86})));
              ThermoPower.Water.ValveVap SH4_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="MPa") = 10000,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH4.pstart,
                pout_start=mixer2.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-90,-80})));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate1(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10) annotation (Placement(transformation(extent={{-180,-184},
                        {-200,-164}})));
              Modelica.Blocks.Sources.Constant const1(k=1500)
                annotation (Placement(transformation(extent={{-146,-158},{-166,-138}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-430,-10},{-410,10}})));
              ThermoPower.Water.ValveVap steamValve(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=3.0,
                useThetaInput=true,
                pnom=data.s1_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.FWPump_mflow,
                CheckValve=true) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-316,12})));
              ThermoPower.Electrical.Generator generator(Pnom=50e6, initOpt=
                    ThermoPower.Choices.Init.Options.steadyState)
                annotation (Placement(transformation(extent={{184,-16},{216,16}})));
              ThermoPower.Electrical.Grid grid(Pgrid=10e9)
                annotation (Placement(transformation(extent={{232,-14},{260,14}})));
              ThermoPower.Water.FlowSplit flowSplit3
                annotation (Placement(transformation(extent={{-376,58},{-342,24}})));
              ThermoPower.Water.ValveVap steamValve1(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=1,
                useThetaInput=true,
                pnom=data.s1_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.FWPump_mflow,
                CheckValve=true) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-316,70})));
              ThermoPower.Water.ValveVap valveVap2(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=3.0,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.condenser_before_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.s4_outlet_mflow,
                CheckValve=true,
                pin_start=data.s4_outlet_p,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=270,
                    origin={142,-62})));
              ThermoPower.Water.SourcePressure sourceP(
                redeclare package Medium = Medium,
                h=data.s4_outlet_h,
                p0(displayUnit="MPa") = data.s4_outlet_p,
                allowFlowReversal=false)                                      annotation (
                  Placement(transformation(extent={{178,68},{158,88}},  rotation=0)));
              ThermoPower.Water.Mixer mixer3(
                redeclare package Medium = Medium,
                V=0.1,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart=data.s4_outlet_p,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={142,-20})));
              Modelica.Blocks.Sources.Ramp byPass_1(
                height=0.05,
                duration=300,
                offset=0,
                startTime=500)
                annotation (Placement(transformation(extent={{-258,86},{-278,106}})));
              Modelica.Blocks.Sources.Ramp byPass_2(
                height=-0.05,
                duration=300,
                offset=1,
                startTime=500)
                annotation (Placement(transformation(extent={{-272,28},{-292,48}})));
              ThermoPower.Water.SinkPressure sinkP(
                redeclare package Medium = Medium,
                use_T=false,
                p0(displayUnit="MPa") = data.condenser_before_p,
                h=data.condenser_before_h,
                allowFlowReversal=false)                                   annotation (
                  Placement(transformation(extent={{-306,104},{-326,124}},
                                                                     rotation=0)));
            equation
              connect(Turbine_s2.shaft_a, Turbine_s1.shaft_b) annotation (Line(points={{-213.24,
                      1.77636e-15},{-261.04,1.77636e-15}},          color={0,0,0}));
              connect(Turbine_s2.shaft_b, Turbine_s3.shaft_a) annotation (Line(points={{-195.04,
                      1.77636e-15},{-137.24,1.77636e-15}},         color={0,0,0}));
              connect(Turbine_s3.shaft_b, Turbine_s4.shaft_a) annotation (Line(points={{-119.04,
                      1.77636e-15},{-45.24,1.77636e-15}},         color={0,0,0}));
              connect(prescribedPressureCondenser.waterOut, pump_ControlledFlowRate.inlet)
                annotation (Line(points={{136,-166},{136,-174},{54,-174}},
                                                                         color={0,0,255}));
              connect(const.y, pump_ControlledFlowRate.setpoint_FlowRate) annotation (
                  Line(points={{71,-148},{60,-148},{60,-167},{54.4,-167}},     color={0,
                      0,127}));
              connect(fixedHeatFlow.port, header.thermalPort)
                annotation (Line(points={{-398,-64},{-375.7,-64}}, color={191,0,0}));
              connect(SHWall.int, SH.wall) annotation (Line(points={{-232,-144.2},{
                      -232,-169}},                    color={255,127,0}));
              connect(SH.outfl, header.inlet) annotation (Line(points={{-242,-174},{
                      -370,-174},{-370,-74.1}}, color={0,0,255}));
              connect(flowSplit.in1, Turbine_s1.outlet) annotation (Line(points={{-257.6,
                      39},{-257.6,20.6},{-258.8,20.6},{-258.8,11.2}},        color={0,0,
                      255}));
              connect(flowSplit.out2, Turbine_s2.inlet) annotation (Line(points={{-244.4,
                      43.4},{-215.2,43.4},{-215.2,11.2}},        color={0,0,255}));
              connect(Turbine_s2.outlet, flowSplit1.in1) annotation (Line(points={{-192.8,
                      11.2},{-192.8,10},{-182,10},{-182,40},{-181.2,40}},        color=
                      {0,0,255}));
              connect(flowSplit1.out2, Turbine_s3.inlet) annotation (Line(points={{-166.8,
                      44.8},{-139.2,44.8},{-139.2,11.2}},        color={0,0,255}));
              connect(flowSplit1.out1, steam2_ext.inlet) annotation (Line(points={{-166.8,
                      35.2},{-166.8,32},{-166,32},{-166,-24}},
                                                         color={0,0,255}));
              connect(steam2_ext.outlet, mixer1.in2)
                annotation (Line(points={{-166,-44},{-166,-74}}, color={0,0,255}));
              connect(pump_ControlledFlowRate.outlet, SH3.infl)
                annotation (Line(points={{34,-174},{18,-174}},    color={0,0,255}));
              connect(SHWall1.int, SH3.wall)
                annotation (Line(points={{8,-144.2},{8,-169}},       color={255,127,0}));
              connect(SH1.wall, heatExchangerTopologyFV.side2)
                annotation (Line(points={{-232,-91},{-232,-108.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV.side1, SHWall.ext)
                annotation (Line(points={{-232,-115},{-232,-135.66}}, color={255,127,0}));
              connect(SH2.wall, heatExchangerTopologyFV1.side1)
                annotation (Line(points={{8,-91},{8,-109}},       color={255,127,0}));
              connect(heatExchangerTopologyFV1.side2, SHWall1.ext) annotation (Line(points={{8,
                      -115.1},{8,-135.66}},          color={255,127,0}));
              connect(valveVap3.outlet, SH2.infl)
                annotation (Line(points={{-16,-86},{-2,-86}},  color={0,0,255}));
              connect(flowSplit.out1, steam1_ext.inlet) annotation (Line(points={{-244.4,
                      34.6},{-244,34.6},{-244,-24}},
                                               color={0,0,255}));
              connect(steam1_ext.outlet, SH1.infl) annotation (Line(points={{-244,-44},
                      {-244,-86},{-242,-86}},
                                        color={0,0,255}));
              connect(flowSplit2.in1, Turbine_s3.outlet) annotation (Line(points={{-117.2,
                      42},{-118,42},{-118,11.2},{-116.8,11.2}},
                                                            color={0,0,255}));
              connect(flowSplit2.out2, Turbine_s4.inlet) annotation (Line(points={{-102.8,
                      46.8},{-47.2,46.8},{-47.2,11.2}},
                                                  color={0,0,255}));
              connect(mixer2.out, valveVap3.inlet) annotation (Line(points={{-46,-74},
                      {-42,-74},{-42,-86},{-36,-86}},
                                            color={0,0,255}));
              connect(flowSplit2.out1, steam3_ext.inlet) annotation (Line(points={{-102.8,
                      37.2},{-102.8,36},{-76,36},{-76,-26}},
                                                         color={0,0,255}));
              connect(steam3_ext.outlet, mixer2.in2) annotation (Line(points={{-76,-46},
                      {-76,-58},{-64,-58},{-64,-68}},
                                                   color={0,0,255}));
              connect(SH1.outfl, SH1_cont.inlet)
                annotation (Line(points={{-222,-86},{-212,-86}}, color={0,0,255}));
              connect(SH1_cont.outlet, mixer1.in1)
                annotation (Line(points={{-192,-86},{-166,-86}}, color={0,0,255}));
              connect(mixer1.out, SH4.infl)
                annotation (Line(points={{-148,-80},{-132,-80}}, color={0,0,255}));
              connect(SH3.outfl, SH5.infl)
                annotation (Line(points={{-2,-174},{-112,-174}},  color={0,0,255}));
              connect(SH4.wall, heatExchangerTopologyFV2.side2)
                annotation (Line(points={{-122,-85},{-122,-102.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV2.side1, SHWall2.ext)
                annotation (Line(points={{-122,-109},{-122,-129.66}}, color={255,127,0}));
              connect(SHWall2.int, SH5.wall)
                annotation (Line(points={{-122,-138.2},{-122,-169}}, color={255,127,0}));
              connect(SH2.outfl, valveVap1.inlet)
                annotation (Line(points={{18,-86},{36,-86}},   color={0,0,255}));
              connect(valveVap1.outlet, mixer.in1)
                annotation (Line(points={{56,-86},{130,-86},{130,-88}},
                                                                     color={0,0,255}));
              connect(SH4.outfl, SH4_cont.inlet)
                annotation (Line(points={{-112,-80},{-100,-80}}, color={0,0,255}));
              connect(SH4_cont.outlet, mixer2.in1)
                annotation (Line(points={{-80,-80},{-64,-80}},   color={0,0,255}));
              connect(SH5.outfl, pump_ControlledFlowRate1.inlet)
                annotation (Line(points={{-132,-174},{-180,-174}}, color={0,0,255}));
              connect(pump_ControlledFlowRate1.outlet, SH.infl)
                annotation (Line(points={{-200,-174},{-222,-174}}, color={0,0,255}));
              connect(const1.y, pump_ControlledFlowRate1.setpoint_FlowRate) annotation (
                  Line(points={{-167,-148},{-178,-148},{-178,-167},{-179.6,-167}}, color={0,
                      0,127}));
              connect(Turbine_s1.shaft_a, flange_a) annotation (Line(points={{-279.24,
                      1.77636e-15},{-280.62,1.77636e-15},{-280.62,0},{-420,0}}, color={
                      0,0,0}));
              connect(steamValve.outlet, Turbine_s1.inlet) annotation (Line(points={{-306,12},
                      {-293.6,12},{-293.6,11.2},{-281.2,11.2}},
                                                           color={0,0,255}));
              connect(mixer.out, prescribedPressureCondenser.steamIn)
                annotation (Line(points={{136,-106},{136,-146}}, color={0,0,255}));
              connect(Turbine_s4.shaft_b, generator.shaft) annotation (Line(points={{
                      -27.04,1.77636e-15},{130,1.77636e-15},{130,0},{186.24,0}},
                    color={0,0,0}));
              connect(generator.port, grid.port) annotation (Line(
                  points={{213.76,0},{223.86,0},{223.86,1.77636e-15},{233.96,
                      1.77636e-15}},
                  color={0,0,255},
                  thickness=0.5));
              connect(flowSplit3.in1, header.outlet) annotation (Line(points={{-369.2,
                      41},{-369.2,42},{-370,42},{-370,-54}}, color={0,0,255}));
              connect(flowSplit3.out1, steamValve.inlet) annotation (Line(points={{
                      -348.8,34.2},{-332,34.2},{-332,12},{-326,12}}, color={0,0,255}));
              connect(flowSplit3.out2, steamValve1.inlet) annotation (Line(points={{
                      -348.8,47.8},{-348.8,46},{-332,46},{-332,70},{-326,70}}, color=
                      {0,0,255}));
              connect(valveVap2.outlet, mixer.in2)
                annotation (Line(points={{142,-72},{142,-88}}, color={0,0,255}));
              connect(Turbine_s4.outlet, mixer3.in1) annotation (Line(points={{-24.8,
                      11.2},{-24.8,10},{136,10},{136,-12}}, color={0,0,255}));
              connect(mixer3.out, valveVap2.inlet)
                annotation (Line(points={{142,-30},{142,-52}}, color={0,0,255}));
              connect(sourceP.flange, mixer3.in2) annotation (Line(points={{158,78},{
                      148,78},{148,-12}}, color={0,0,255}));
              connect(byPass_2.y, steamValve.theta) annotation (Line(points={{-293,38},
                      {-316,38},{-316,20}}, color={0,0,127}));
              connect(byPass_1.y, steamValve1.theta) annotation (Line(points={{-279,
                      96},{-316,96},{-316,78}}, color={0,0,127}));
              connect(sinkP.flange, steamValve1.outlet) annotation (Line(points={{
                      -306,114},{-300,114},{-300,70},{-306,70}}, color={0,0,255}));
              annotation (Diagram(coordinateSystem(extent={{-420,-180},{300,120}})), Icon(
                    coordinateSystem(extent={{-420,-180},{300,120}})),
                experiment(StopTime=1000, __Dymola_Algorithm="Dassl"),
                Documentation(info="<html>
<p>Example3. Steam Turbine Model with fixed power (with Feedwater heat exchangers)</p>
</html>"));
            end test3;

            model test4

              replaceable package Medium = Modelica.Media.Water.StandardWater
                constrainedby Modelica.Media.Interfaces.PartialPureSubstance;
              ThermoPower.Water.SteamTurbineStodola Turbine_s4(
                redeclare package Medium = Medium,
                wstart=data.s4_inlet_mflow,
                PRstart=data.s4_PR_start,
                wnom=data.s4_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s4_Kt,
                pnom(displayUnit="MPa") = data.s4_inlet_p)
                               annotation (Placement(transformation(extent={{-50,-14},
                        {-22,14}},
                      rotation=0)));
              ThermoPower.Examples.RankineCycle.Models.PrescribedPressureCondenser
                prescribedPressureCondenser(
                redeclare package Medium = Medium,
                p=data.condenser_p,
                Vtot=10,
                Vlstart=1.5)
                annotation (Placement(transformation(extent={{126,-166},{146,-146}})));
              ThermoPower.Water.SteamTurbineStodola Turbine_s1(
                redeclare package Medium = Medium,
                wstart=data.s1_inlet_mflow,
                PRstart=data.s1_PR_start,
                wnom=data.s1_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s1_Kt,
                pnom(displayUnit="MPa") = data.s1_inlet_p) annotation (Placement(
                    transformation(extent={{-284,-14},{-256,14}}, rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s2(
                redeclare package Medium = Medium,
                wstart=data.s2_inlet_mflow,
                PRstart=data.s2_PR_start,
                wnom=data.s2_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s2_Kt,
                pnom(displayUnit="MPa") = data.s2_inlet_p) annotation (Placement(
                    transformation(extent={{-218,-14},{-190,14}},rotation=0)));
              ThermoPower.Water.SteamTurbineStodola Turbine_s3(
                redeclare package Medium = Medium,
                wstart=data.s3_inlet_mflow,
                PRstart=data.s3_PR_start,
                wnom=data.s3_inlet_mflow,
                eta_mech=0.98,
                eta_iso_nom=data.eta_iso_nom,
                Kt=data.s3_Kt,
                pnom(displayUnit="MPa") = data.s3_inlet_p) annotation (Placement(
                    transformation(extent={{-142,-14},{-114,14}},
                                                                rotation=0)));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10)
                annotation (Placement(transformation(extent={{54,-184},{34,-164}})));
              Modelica.Blocks.Sources.Constant const(k=1500)
                annotation (Placement(transformation(extent={{92,-158},{72,-138}})));
              Data_Record.Data_5 data
                annotation (Placement(transformation(extent={{194,96},{214,116}})));
              ThermoPower.Water.Header header(
                redeclare package Medium = Medium,
                V=1,
                allowFlowReversal=false,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.TwoPhases,
                pstart=data.s1_inlet_p,
                hstart=data.s1_inlet_h,
                Tmstart=517.01) annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=90,
                    origin={-370,-64})));
              Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow fixedHeatFlow(Q_flow=150e6)
                annotation (Placement(transformation(extent={{-422,-76},{-398,-52}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-232,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-222,
                        -184},{-242,-164}},
                                 rotation=0)));
              inner ThermoPower.System system
                annotation (Placement(transformation(extent={{-414,96},{-394,116}})));
              ThermoPower.Water.FlowSplit flowSplit
                annotation (Placement(transformation(extent={{-262,50},{-240,28}})));
              ThermoPower.Water.Mixer mixer(
                redeclare package Medium = Medium,
                V=1,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart=data.condenser_p,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={136,-96})));
              ThermoPower.Water.Flow1DFV2ph
                                SH1(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.HP_FWH_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 1,
                pstart(displayUnit="MPa") = steam1_ext.pout_start)
                                annotation (Placement(transformation(extent={{-242,
                        -76},{-222,-96}},
                                 rotation=0)));

              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-242,-102},{-222,-122}})));
              ThermoPower.Water.FlowSplit flowSplit1
                annotation (Placement(transformation(extent={{-186,52},{-162,28}})));
              ThermoPower.Water.ValveVap steam2_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-166,-34})));
              ThermoPower.Water.Mixer mixer1(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam2_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-158,-80})));
              ThermoPower.Water.Flow1DFV
                                SH2(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-2,-76},
                        {18,-96}},
                                 rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV1(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow)
                annotation (Placement(transformation(extent={{18,-122},{-2,-102}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall1(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={8,-140},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH3(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{18,-184},
                        {-2,-164}},
                                 rotation=0)));
              ThermoPower.Water.ValveVap valveVap3(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s2_outlet_p,
                dpnom(displayUnit="Pa") = 100,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=mixer2.pstart,
                pout_start=SH2.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-26,-86})));
              ThermoPower.Water.ValveVap steam1_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s1_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s1_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-244,-34})));
              ThermoPower.Water.FlowSplit flowSplit2
                annotation (Placement(transformation(extent={{-122,54},{-98,30}})));
              ThermoPower.Water.Mixer mixer2(
                redeclare package Medium = Medium,
                V=100,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                pstart(displayUnit="MPa") = steam3_ext.pout_start,
                initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={-56,-74})));
              ThermoPower.Water.ValveVap steam3_ext(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.04,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.LP_FWH1_shell_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=data.s2_outlet_p) annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={-76,-36})));
              ThermoPower.Water.ValveVap SH1_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.01,
                useThetaInput=false,
                theta_fix=1,
                pnom=SH1.pstart,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.HP_FWH_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH1.pstart,
                pout_start=SH1.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-202,-86})));
              ThermoPower.Water.Flow1DFV2ph
                                SH4(
                redeclare package Medium = Medium,
                Nt=1,
                L=1.2584,
                Dhyd=0.196592,
                omega=16.2354,
                A=0.797938,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Steam,
                noInitialPressure=false,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 0,
                pstart(displayUnit="MPa") = mixer1.pstart)
                                annotation (Placement(transformation(extent={{-132,
                        -70},{-112,-90}},
                                 rotation=0)));
              ThermoPower.Thermal.HeatExchangerTopologyFV heatExchangerTopologyFV2(Nw=2,
                  redeclare model HeatExchangerTopology =
                    ThermoPower.Thermal.HeatExchangerTopologies.CounterCurrentFlow
                    (                                                               Nw=2))
                annotation (Placement(transformation(extent={{-132,-96},{-112,-116}})));
              ThermoPower.Thermal.MetalTubeFV
                                SHWall2(
                Nw=2,
                Nt=66,
                L=4.95,
                rint=0.014122/2,
                rext=0.000889 + 0.014122/2,
                rhomcm=510*8000,
                lambda=17,
                WallRes=false,
                Tstart1=data.HP_FWH_shell_inlet_temp,
                TstartN=data.HP_FWH_shell_inlet_temp)                 annotation (
                  Placement(transformation(
                    origin={-122,-134},
                    extent={{-14,-14},{14,14}},
                    rotation=180)));
              ThermoPower.Water.Flow1DFV
                                SH5(
                redeclare package Medium = Medium,
                Nt=66,
                L=4.95,
                Dhyd=0.014122,
                omega=0.0443656,
                A=0.000156633,
                Cfnom=0.0059,
                DynamicMomentum=false,
                wnom=pump_ControlledFlowRate.nominalFlow,
                N=3,
                e=2.5e-5,
                HydraulicCapacitance=ThermoPower.Choices.Flow1D.HCtypes.Downstream,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.Liquid,
                noInitialPressure=true,
                redeclare model HeatTransfer =
                    ThermoPower.Thermal.HeatTransferFV.HeatTransfer2phDB (gamma_b=20000),
                dpnom(displayUnit="Pa") = 100,
                pstart(displayUnit="MPa"))
                                annotation (Placement(transformation(extent={{-112,
                        -184},{-132,-164}},
                                 rotation=0)));
              ThermoPower.Water.ValveVap valveVap1(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.1,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH2.pstart,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={46,-86})));
              ThermoPower.Water.ValveVap SH4_cont(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=0.05,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.s3_outlet_p,
                dpnom(displayUnit="MPa") = 10000,
                wnom=data.LP_FWH1_shell_inlet_mflow,
                CheckValve=true,
                pin_start=SH4.pstart,
                pout_start=mixer2.pstart) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-90,-80})));
              Components.Pump_ControlledFlowRate pump_ControlledFlowRate1(
                redeclare package FluidMedium = Medium,
                q_nom={0,0.0671,0.1},
                head_nom={1000,170,0},
                Np0=1,
                V=0,
                rho0=1000,
                n0=3000,
                nominalOutletPressure(displayUnit="MPa") = 853000,
                nominalInletPressure(displayUnit="MPa") = 8100,
                nominalFlow=67.1,
                hstart=174837,
                Kp=4,
                Ti=200,
                Td=0,
                PVmin=-1,
                PVmax=1,
                CSmin=500,
                CSmax=2500,
                PVstart=0.5,
                CSstart=0.5,
                T_filter=10) annotation (Placement(transformation(extent={{-180,-184},
                        {-200,-164}})));
              Modelica.Blocks.Sources.Constant const1(k=1500)
                annotation (Placement(transformation(extent={{-146,-158},{-166,-138}})));
              Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
                annotation (Placement(transformation(extent={{-430,-10},{-410,10}})));
              ThermoPower.Water.ValveVap steamValve(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=3.0,
                useThetaInput=true,
                pnom=data.s1_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.FWPump_mflow,
                CheckValve=true) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-316,12})));
              ThermoPower.Electrical.Generator generator(Pnom=50e6, initOpt=
                    ThermoPower.Choices.Init.Options.steadyState)
                annotation (Placement(transformation(extent={{184,-16},{216,16}})));
              ThermoPower.Electrical.Grid grid(Pgrid=10e9)
                annotation (Placement(transformation(extent={{232,-14},{260,14}})));
              ThermoPower.Water.FlowSplit flowSplit3
                annotation (Placement(transformation(extent={{-376,58},{-342,24}})));
              ThermoPower.Water.ValveVap steamValve1(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=1,
                useThetaInput=true,
                pnom=data.s1_inlet_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.FWPump_mflow,
                CheckValve=true) annotation (Placement(transformation(
                    extent={{10,10},{-10,-10}},
                    rotation=180,
                    origin={-316,70})));
              ThermoPower.Water.ValveVap valveVap2(
                redeclare package Medium = Medium,
                CvData=ThermoPower.Choices.Valve.CvTypes.Av,
                Av=3.0,
                useThetaInput=false,
                theta_fix=1,
                pnom=data.condenser_before_p,
                dpnom(displayUnit="Pa") = 1,
                wnom=data.s4_outlet_mflow,
                CheckValve=true,
                pin_start=data.s4_outlet_p,
                pout_start=mixer.pstart)
                                 annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=270,
                    origin={142,-62})));
              Modelica.Blocks.Sources.Ramp byPass_1(
                height=0.05,
                duration=300,
                offset=0,
                startTime=500)
                annotation (Placement(transformation(extent={{-258,86},{-278,106}})));
              Modelica.Blocks.Sources.Ramp byPass_2(
                height=-0.05,
                duration=300,
                offset=1,
                startTime=500)
                annotation (Placement(transformation(extent={{-272,28},{-292,48}})));
              ThermoPower.Water.SinkPressure sinkP(
                redeclare package Medium = Medium,
                use_T=false,
                p0(displayUnit="MPa") = data.condenser_before_p,
                h=data.condenser_before_h,
                allowFlowReversal=false)                                   annotation (
                  Placement(transformation(extent={{-306,104},{-326,124}},
                                                                     rotation=0)));
              ThermoPower.Water.Header header1(
                redeclare package Medium = Medium,
                V=1,
                allowFlowReversal=false,
                FluidPhaseStart=ThermoPower.Choices.FluidPhase.FluidPhases.TwoPhases,
                pstart=data.s4_inlet_p)
                                annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={142,-26})));

            equation
              connect(Turbine_s2.shaft_a, Turbine_s1.shaft_b) annotation (Line(points={{-213.24,
                      1.77636e-15},{-261.04,1.77636e-15}},          color={0,0,0}));
              connect(Turbine_s2.shaft_b, Turbine_s3.shaft_a) annotation (Line(points={{-195.04,
                      1.77636e-15},{-137.24,1.77636e-15}},         color={0,0,0}));
              connect(Turbine_s3.shaft_b, Turbine_s4.shaft_a) annotation (Line(points={{-119.04,
                      1.77636e-15},{-45.24,1.77636e-15}},         color={0,0,0}));
              connect(prescribedPressureCondenser.waterOut, pump_ControlledFlowRate.inlet)
                annotation (Line(points={{136,-166},{136,-174},{54,-174}},
                                                                         color={0,0,255}));
              connect(const.y, pump_ControlledFlowRate.setpoint_FlowRate) annotation (
                  Line(points={{71,-148},{60,-148},{60,-167},{54.4,-167}},     color={0,
                      0,127}));
              connect(fixedHeatFlow.port, header.thermalPort)
                annotation (Line(points={{-398,-64},{-375.7,-64}}, color={191,0,0}));
              connect(SHWall.int, SH.wall) annotation (Line(points={{-232,-144.2},{
                      -232,-169}},                    color={255,127,0}));
              connect(SH.outfl, header.inlet) annotation (Line(points={{-242,-174},{
                      -370,-174},{-370,-74.1}}, color={0,0,255}));
              connect(flowSplit.in1, Turbine_s1.outlet) annotation (Line(points={{-257.6,
                      39},{-257.6,20.6},{-258.8,20.6},{-258.8,11.2}},        color={0,0,
                      255}));
              connect(flowSplit.out2, Turbine_s2.inlet) annotation (Line(points={{-244.4,
                      43.4},{-215.2,43.4},{-215.2,11.2}},        color={0,0,255}));
              connect(Turbine_s2.outlet, flowSplit1.in1) annotation (Line(points={{-192.8,
                      11.2},{-192.8,10},{-182,10},{-182,40},{-181.2,40}},        color=
                      {0,0,255}));
              connect(flowSplit1.out2, Turbine_s3.inlet) annotation (Line(points={{-166.8,
                      44.8},{-139.2,44.8},{-139.2,11.2}},        color={0,0,255}));
              connect(flowSplit1.out1, steam2_ext.inlet) annotation (Line(points={{-166.8,
                      35.2},{-166.8,32},{-166,32},{-166,-24}},
                                                         color={0,0,255}));
              connect(steam2_ext.outlet, mixer1.in2)
                annotation (Line(points={{-166,-44},{-166,-74}}, color={0,0,255}));
              connect(pump_ControlledFlowRate.outlet, SH3.infl)
                annotation (Line(points={{34,-174},{18,-174}},    color={0,0,255}));
              connect(SHWall1.int, SH3.wall)
                annotation (Line(points={{8,-144.2},{8,-169}},       color={255,127,0}));
              connect(SH1.wall, heatExchangerTopologyFV.side2)
                annotation (Line(points={{-232,-91},{-232,-108.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV.side1, SHWall.ext)
                annotation (Line(points={{-232,-115},{-232,-135.66}}, color={255,127,0}));
              connect(SH2.wall, heatExchangerTopologyFV1.side1)
                annotation (Line(points={{8,-91},{8,-109}},       color={255,127,0}));
              connect(heatExchangerTopologyFV1.side2, SHWall1.ext) annotation (Line(points={{8,
                      -115.1},{8,-135.66}},          color={255,127,0}));
              connect(valveVap3.outlet, SH2.infl)
                annotation (Line(points={{-16,-86},{-2,-86}},  color={0,0,255}));
              connect(flowSplit.out1, steam1_ext.inlet) annotation (Line(points={{-244.4,
                      34.6},{-244,34.6},{-244,-24}},
                                               color={0,0,255}));
              connect(steam1_ext.outlet, SH1.infl) annotation (Line(points={{-244,-44},
                      {-244,-86},{-242,-86}},
                                        color={0,0,255}));
              connect(flowSplit2.in1, Turbine_s3.outlet) annotation (Line(points={{-117.2,
                      42},{-118,42},{-118,11.2},{-116.8,11.2}},
                                                            color={0,0,255}));
              connect(flowSplit2.out2, Turbine_s4.inlet) annotation (Line(points={{-102.8,
                      46.8},{-47.2,46.8},{-47.2,11.2}},
                                                  color={0,0,255}));
              connect(mixer2.out, valveVap3.inlet) annotation (Line(points={{-46,-74},
                      {-42,-74},{-42,-86},{-36,-86}},
                                            color={0,0,255}));
              connect(flowSplit2.out1, steam3_ext.inlet) annotation (Line(points={{-102.8,
                      37.2},{-102.8,36},{-76,36},{-76,-26}},
                                                         color={0,0,255}));
              connect(steam3_ext.outlet, mixer2.in2) annotation (Line(points={{-76,-46},
                      {-76,-58},{-64,-58},{-64,-68}},
                                                   color={0,0,255}));
              connect(SH1.outfl, SH1_cont.inlet)
                annotation (Line(points={{-222,-86},{-212,-86}}, color={0,0,255}));
              connect(SH1_cont.outlet, mixer1.in1)
                annotation (Line(points={{-192,-86},{-166,-86}}, color={0,0,255}));
              connect(mixer1.out, SH4.infl)
                annotation (Line(points={{-148,-80},{-132,-80}}, color={0,0,255}));
              connect(SH3.outfl, SH5.infl)
                annotation (Line(points={{-2,-174},{-112,-174}},  color={0,0,255}));
              connect(SH4.wall, heatExchangerTopologyFV2.side2)
                annotation (Line(points={{-122,-85},{-122,-102.9}}, color={255,127,0}));
              connect(heatExchangerTopologyFV2.side1, SHWall2.ext)
                annotation (Line(points={{-122,-109},{-122,-129.66}}, color={255,127,0}));
              connect(SHWall2.int, SH5.wall)
                annotation (Line(points={{-122,-138.2},{-122,-169}}, color={255,127,0}));
              connect(SH2.outfl, valveVap1.inlet)
                annotation (Line(points={{18,-86},{36,-86}},   color={0,0,255}));
              connect(valveVap1.outlet, mixer.in1)
                annotation (Line(points={{56,-86},{130,-86},{130,-88}},
                                                                     color={0,0,255}));
              connect(SH4.outfl, SH4_cont.inlet)
                annotation (Line(points={{-112,-80},{-100,-80}}, color={0,0,255}));
              connect(SH4_cont.outlet, mixer2.in1)
                annotation (Line(points={{-80,-80},{-64,-80}},   color={0,0,255}));
              connect(SH5.outfl, pump_ControlledFlowRate1.inlet)
                annotation (Line(points={{-132,-174},{-180,-174}}, color={0,0,255}));
              connect(pump_ControlledFlowRate1.outlet, SH.infl)
                annotation (Line(points={{-200,-174},{-222,-174}}, color={0,0,255}));
              connect(const1.y, pump_ControlledFlowRate1.setpoint_FlowRate) annotation (
                  Line(points={{-167,-148},{-178,-148},{-178,-167},{-179.6,-167}}, color={0,
                      0,127}));
              connect(Turbine_s1.shaft_a, flange_a) annotation (Line(points={{-279.24,
                      1.77636e-15},{-280.62,1.77636e-15},{-280.62,0},{-420,0}}, color={
                      0,0,0}));
              connect(steamValve.outlet, Turbine_s1.inlet) annotation (Line(points={{-306,12},
                      {-293.6,12},{-293.6,11.2},{-281.2,11.2}},
                                                           color={0,0,255}));
              connect(mixer.out, prescribedPressureCondenser.steamIn)
                annotation (Line(points={{136,-106},{136,-146}}, color={0,0,255}));
              connect(Turbine_s4.shaft_b, generator.shaft) annotation (Line(points={{
                      -27.04,1.77636e-15},{130,1.77636e-15},{130,0},{186.24,0}},
                    color={0,0,0}));
              connect(generator.port, grid.port) annotation (Line(
                  points={{213.76,0},{223.86,0},{223.86,1.77636e-15},{233.96,
                      1.77636e-15}},
                  color={0,0,255},
                  thickness=0.5));
              connect(flowSplit3.in1, header.outlet) annotation (Line(points={{-369.2,
                      41},{-369.2,42},{-370,42},{-370,-54}}, color={0,0,255}));
              connect(flowSplit3.out1, steamValve.inlet) annotation (Line(points={{
                      -348.8,34.2},{-332,34.2},{-332,12},{-326,12}}, color={0,0,255}));
              connect(flowSplit3.out2, steamValve1.inlet) annotation (Line(points={{
                      -348.8,47.8},{-348.8,46},{-332,46},{-332,70},{-326,70}}, color=
                      {0,0,255}));
              connect(valveVap2.outlet, mixer.in2)
                annotation (Line(points={{142,-72},{142,-88}}, color={0,0,255}));
              connect(byPass_2.y, steamValve.theta) annotation (Line(points={{-293,38},
                      {-316,38},{-316,20}}, color={0,0,127}));
              connect(byPass_1.y, steamValve1.theta) annotation (Line(points={{-279,
                      96},{-316,96},{-316,78}}, color={0,0,127}));
              connect(sinkP.flange, steamValve1.outlet) annotation (Line(points={{
                      -306,114},{-300,114},{-300,70},{-306,70}}, color={0,0,255}));
              connect(Turbine_s4.outlet, header1.inlet) annotation (Line(points={{
                      -24.8,11.2},{-24.8,10},{-10,10},{-10,-6},{142,-6},{142,-15.9}},
                    color={0,0,255}));
              connect(header1.outlet, valveVap2.inlet)
                annotation (Line(points={{142,-36},{142,-52}}, color={0,0,255}));
              annotation (Diagram(coordinateSystem(extent={{-420,-180},{300,120}})), Icon(
                    coordinateSystem(extent={{-420,-180},{300,120}})),
                experiment(StopTime=1000, __Dymola_Algorithm="Dassl"),
                Documentation(info="<html>
<p>Example3. Steam Turbine Model with fixed power (with Feedwater heat exchangers)</p>
</html>"));
            end test4;
          end Examples;
        end Turbo_Machinery_Modeling;

        package Multi_Domain_Modelling

          package Model_test

            model Model_test_2
              ECSE_6170_Final_Project_before_Miguel.Turbo_Machinery_Modeling.Test.Model_with_HXs
                model_1_0_1 annotation (Placement(transformation(extent={{-72,-12},
                        {-30,12}})));
              inner ThermoPower.System system
                annotation (Placement(transformation(extent={{58,68},{78,88}})));
              ThermoPower.Electrical.Generator generator(Pnom=50e6, initOpt=
                    ThermoPower.Choices.Init.Options.steadyState)
                annotation (Placement(transformation(extent={{-12,-18},{22,16}})));
              ThermoPower.Electrical.Grid grid(Pgrid=10e9)
                annotation (Placement(transformation(extent={{36,-16},{66,14}})));
              Modelica.Blocks.Sources.Ramp Q(
                duration=10,
                height=50e6,
                offset=150e6,
                startTime=100) annotation (Placement(transformation(extent={{-116,-16},
                        {-94,6}},rotation=0)));
            equation
              connect(model_1_0_1.flange_b, generator.shaft) annotation (Line(points={{-30,0},
                      {-19.81,0},{-19.81,-1},{-9.62,-1}}, color={0,0,0}));
              connect(generator.port, grid.port) annotation (Line(
                  points={{19.62,-1},{38.1,-1}},
                  color={0,0,255},
                  thickness=0.5));
              connect(Q.y, model_1_0_1.Q_flow1) annotation (Line(points={{-92.9,-5},{
                      -82.45,-5},{-82.45,-4.8},{-72,-4.8}}, color={0,0,127}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                        -140,-100},{80,100}})),                              Diagram(
                    coordinateSystem(preserveAspectRatio=false, extent={{-140,-100},{
                        80,100}})));
            end Model_test_2;

            model Plant
              Turbo_Machinery_Modeling.Test.Model_with_HXs
                model_1_0_1
                annotation (Placement(transformation(extent={{-72,-12},{-30,12}})));
              inner ThermoPower.System system
                annotation (Placement(transformation(extent={{58,68},{78,88}})));
              ThermoPower.Electrical.Generator generator(Pnom=50e6, initOpt=
                    ThermoPower.Choices.Init.Options.steadyState)
                annotation (Placement(transformation(extent={{-12,-18},{22,16}})));
              ThermoPower.Electrical.Grid grid(Pgrid=10e9)
                annotation (Placement(transformation(extent={{38,-14},{66,14}})));
              Modelica.Blocks.Interfaces.RealInput Q_flow
                annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
              Modelica.Blocks.Sources.RealExpression realExpression(y=generator.Pm)
                annotation (Placement(transformation(extent={{66,-32},{86,-12}})));
              Modelica.Blocks.Interfaces.RealOutput Pgen "Value of Real output"
                annotation (Placement(transformation(extent={{90,-10},{110,10}})));
            equation
              connect(model_1_0_1.flange_b, generator.shaft) annotation (Line(points={{-30,0},
                      {-19.81,0},{-19.81,-1},{-9.62,-1}}, color={0,0,0}));
              connect(generator.port, grid.port) annotation (Line(
                  points={{19.62,-1},{29.79,-1},{29.79,0},{39.96,0}},
                  color={0,0,255},
                  thickness=0.5));
              connect(model_1_0_1.Q_flow1, Q_flow) annotation (Line(points={{-72,-4.8},{-76,
                      -4.8},{-76,-6},{-86,-6},{-86,0},{-100,0}}, color={0,0,127}));
              connect(realExpression.y, Pgen) annotation (Line(points={{87,-22},{92,-22},{92,
                      0},{100,0}}, color={0,0,127}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                      Rectangle(extent={{-100,100},{100,-100}}, lineColor={28,108,200},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid), Text(
                      extent={{-50,36},{40,-32}},
                      textColor={28,108,200},
                      textString="%P")}),                                    Diagram(
                    coordinateSystem(preserveAspectRatio=false)));
            end Plant;
          end Model_test;

          package Simulator
            model Open_Loop
              extends Modelica.Icons.Example;
              Model_test.Plant plant
                annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
              Modelica.Blocks.Sources.Ramp Q(
                duration=100,
                height=20e6,
                offset=150e6,
                startTime=100) annotation (Placement(transformation(extent={{-44,-8},
                        {-28,8}},  rotation=0)));
            equation
              connect(Q.y, plant.Q_flow)
                annotation (Line(points={{-27.2,0},{-10,0}}, color={0,0,127}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                    coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
            end Open_Loop;

            model Closed_Loop
              extends Modelica.Icons.Example;

              Model_test.Plant plant annotation (Placement(transformation(extent={{20,
                        -20},{60,20}}, rotation=0)));
              Modelica.Blocks.Sources.Ramp powerSetPoint(
                offset=43e6,
                height=7e6,
                duration=100,
                startTime=500) annotation (Placement(transformation(extent={{-80,-6},{-60,
                        14}}, rotation=0)));
              ThermoPower.Examples.RankineCycle.Models.PID pID(
                Ti=10,
                PVmin=42e6,
                PVmax=52e6,
                CSmin=150e6,
                CSmax=175e6,
                steadyStateInit=true,
                Kp=1,
                holdWhenSimplified=true) annotation (Placement(transformation(extent=
                        {{-32,-10},{-12,10}}, rotation=0)));
              inner ThermoPower.System system
                annotation (Placement(transformation(extent={{80,80},{100,100}})));
            equation
              connect(pID.SP, powerSetPoint.y)
                annotation (Line(points={{-32,4},{-59,4}}, color={0,0,127}));
              connect(pID.CS, plant.Q_flow)
                annotation (Line(points={{-12,0},{20,0}}, color={0,0,127}));
              connect(plant.Pgen, pID.PV) annotation (Line(points={{60,0},{80,0},{80,
                      -40},{-40,-40},{-40,-4},{-32,-4}}, color={0,0,127}));
              annotation (
                experiment(StopTime=1000, Tolerance=1e-006),
                Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",         info="<html>
<p>This model simulates a simple continuous-time control system for the steam power plant. The generated power is controlled to the set point by a PI controller with anti-windup.</p>
<p>The model starts at steady state.
</html>"));
            end Closed_Loop;
          end Simulator;
        end Multi_Domain_Modelling;

        model SteamTurbineC1
          extends Icons.SteamTurbineIcon;

          Modelica.Mechanics.Rotational.Interfaces.Flange_b primeMoverFlange
            annotation (Placement(transformation(extent={{90,-10},{110,10}})));
          Modelica.Blocks.Interfaces.RealInput u "Connector of Real input signal"
            annotation (Placement(transformation(extent={{-200,-20},{-160,20}}),
            iconTransformation(extent={{-108,-10},{-88,10}})));
          Turbo_Machinery_Modeling.Test.Model_with_HXs model_with_HXs
            annotation (Placement(transformation(extent={{-68,-10},{-8,24}})));
        equation
          connect(model_with_HXs.Q_flow1, u)
            annotation (Line(points={{-68,0.2},{-180,0}}, color={0,0,127}));
          connect(model_with_HXs.flange_b, primeMoverFlange) annotation (Line(
                points={{-8,7},{12,7},{12,0},{100,0}}, color={0,0,0}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}})), Diagram(coordinateSystem(preserveAspectRatio=
                    false, extent={{-180,-100},{100,100}})),
            experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
        end SteamTurbineC1;

        model Plant
          import ThermoPower;
          replaceable package FlueGas = ThermoPower.Media.FlueGas constrainedby
            Modelica.Media.Interfaces.PartialMedium "Flue gas model";
          replaceable package Water = ThermoPower.Water.StandardWater
            constrainedby Modelica.Media.Interfaces.PartialPureSubstance
            "Fluid model";
          Modelica.Blocks.Interfaces.RealOutput generatedPower annotation (
              Placement(transformation(extent={{90,-10},{110,10}},  rotation=0),
                iconTransformation(extent={{92,-10},{112,10}})));
          Modelica.Blocks.Interfaces.RealInput steamFlowRate annotation (
              Placement(transformation(extent={{-110,-10},{-90,10}}, rotation=0),
                iconTransformation(extent={{-110,-10},{-90,10}})));
          inner ThermoPower.System system
            annotation (Placement(transformation(extent={{60,68},{80,88}})));
          SteamTurbineC1 steamTurbineC1_1
            annotation (Placement(transformation(extent={{-62,-16},{-28,16}})));
          ThermoPower.Electrical.Generator generator(Pnom=50e6, initOpt=
                ThermoPower.Choices.Init.Options.steadyState)
            annotation (Placement(transformation(extent={{-20,-18},{16,18}})));
          ThermoPower.Electrical.Grid grid(Pgrid=10e9)
            annotation (Placement(transformation(extent={{32,-14},{60,14}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=generator.Pm)
            annotation (Placement(transformation(extent={{42,-36},{62,-16}})));
        equation

          connect(steamTurbineC1_1.u, steamFlowRate)
            annotation (Line(points={{-61.66,0},{-100,0}}, color={0,0,127}));
          connect(generator.port,grid. port) annotation (Line(
              points={{13.48,3.33067e-16},{23.79,3.33067e-16},{23.79,
                  2.22045e-15},{33.96,2.22045e-15}},
              color={0,0,255},
              thickness=0.5));
          connect(generator.shaft, steamTurbineC1_1.primeMoverFlange)
            annotation (Line(points={{-17.48,0},{-28,0}}, color={0,0,0}));
          connect(realExpression.y, generatedPower) annotation (Line(points={{
                  63,-26},{76,-26},{76,0},{100,0}}, color={0,0,127}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1)),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1), graphics={Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-88,84},{100,-96}},
                  lineColor={0,0,255},
                  textString="P")}),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
This is a simple model of a steam plant.
</html>"));
        end Plant;
      end PlantC;
    end Steam;

    package CHP

      model TurbineSystem
        replaceable package WaterMedium =
          Modelon.Media.PreDefined.TwoPhase.WaterIF97                            constrainedby
          Modelon.Media.Interfaces.TwoPhaseMedium annotation(choicesAllMatching);
        replaceable package CoolMedium =
          Modelon.Media.PreDefined.TwoPhase.WaterIF97   constrainedby
          Modelon.Media.Interfaces.TwoPhaseMedium annotation(choicesAllMatching);
        ThermalPower.TwoPhase.TurboMachinery.Turbines.SteamTurbineStodola turbine_HP(
          useNominalPoint=true,
          eta_mech=1,
          eta_is_nom=eta_is_nom_HP,
          m_flow_nom=m_flow_nom_HP,
          T_nom=T_nom,
          pstartin=pstartin_HP,
          pstart=pstart_HP,
          hstartin=hstartin_HP,
          hstartout=hstartout_HP,
          p1_nom=pstartin_HP,
          p2_nom=pstart_HP,
          redeclare package Medium = WaterMedium)
          annotation (Placement(transformation(extent={{-20,-30},{-60,10}})));

        parameter Real eta_is_nom_HP=0.879 "Nominal isentropic efficiency"
          annotation (Dialog(group="HP Turbine"));
        parameter Modelica.Units.SI.MassFlowRate m_flow_nom_HP=109 "Nominal inlet flowrate"
          annotation (Dialog(group="HP Turbine"));
        parameter Modelica.Units.SI.Temperature T_nom=864.15 "Nominal inlet temperature"
          annotation (Dialog(group="HP Turbine"));
        parameter Modelica.Units.SI.AbsolutePressure pstartin_HP=141.4e5 "Inlet pressure start value"
          annotation (Dialog(group="HP Turbine"));
        parameter Modelica.Units.SI.AbsolutePressure pstart_HP=34.72e5 "Outlet pressure start value"
          annotation (Dialog(group="HP Turbine"));
        parameter Modelon.Media.Units.SpecificEnthalpy hstartin_HP=3.568e6
          "Inlet enthalpy start value"
                                      annotation (Dialog(group="HP Turbine"));
        parameter Modelon.Media.Units.SpecificEnthalpy hstartout_HP=3.176e6
          "Outlet enthalpy start value"
                                       annotation (Dialog(group="HP Turbine"));

        parameter Modelica.Units.SI.MassFlowRate m_flow_nom_IP=128.2 "Nominal inlet flowrate"
          annotation (Dialog(group="IP Turbine"));
        parameter Modelica.Units.SI.Temperature T_nom_IP=863.15 "Nominal inlet temperature"
          annotation (Dialog(group="IP Turbine"));
        parameter Modelica.Units.SI.AbsolutePressure pstartin_IP=29.4e5 "Inlet pressure start value"
          annotation (Dialog(group="IP Turbine"));
        parameter Modelica.Units.SI.AbsolutePressure pstart_IP=3.689e5 "Outlet pressure start value"
          annotation (Dialog(group="IP Turbine"));
        parameter Modelon.Media.Units.SpecificEnthalpy hstartin_IP=3.660e6
          "Inlet enthalpy start value" annotation (Dialog(group="IP Turbine"));
        parameter Modelon.Media.Units.SpecificEnthalpy hstartout_IP=3.056e6
          "Outlet enthalpy start value" annotation (Dialog(group="IP Turbine"));

            parameter Modelon.Media.Units.AbsolutePressure pstart_Vseparation=3.689e5
          "Pressure start value" annotation (Dialog(group="Volume for extraction"));
        parameter Modelon.Media.Units.SpecificEnthalpy hstart_Vseparation=3.057e6
          "Enthalpy start value"
                                annotation (Dialog(group="Volume for extraction"));
        parameter Modelica.Units.SI.Pressure dp_nom_valveIP=0.6e5 "Nominal pressure drop"
          annotation (Dialog(group="Valve IP"));
        parameter Modelica.Units.SI.AbsolutePressure p_nom_in_IPvalve=30e5 "Nominal inlet pressure"
          annotation (Dialog(group="Valve IP"));
        parameter Modelon.Media.Units.Temperature T_nom_IPvalve=864.15
          "Nominal inlet Temperature" annotation (Dialog(group="Valve IP"));

        parameter Boolean use_Bauman=false
          "Efficiency degradation using Baumann's formula"
          annotation (Dialog(group="LP Turbine"));
        parameter Real alpha_Bauman=0.8 "Bauman coefficient"
          annotation (Dialog(group="LP Turbine"));
        parameter Modelica.Units.SI.Area S=0 "Internal surface" annotation (Dialog(group="LP Turbine"));
        parameter Modelica.Units.SI.CoefficientOfHeatTransfer gamma=0 "Heat Transfer Coefficient"
          annotation (Dialog(group="LP Turbine"));
        parameter Real eta_is_nom_IP=0.923 "Nominal isentropic efficiency"
          annotation (Dialog(group="IP Turbine"));
        parameter Modelica.Units.SI.Volume V_separation=0.1 "Total volume"
          annotation (Dialog(group="Volume for extraction"));

        parameter Real eta_is_nom_LP=0.9391 "Nominal isentropic efficiency"
          annotation (Dialog(group="LP Turbine"));
        parameter Modelica.Units.SI.MassFlowRate m_flow_nom_LP=63.11 "Nominal inlet flowrate"
          annotation (Dialog(group="LP Turbine"));
        parameter Modelica.Units.SI.Temperature T_nom_LP=568.15 "Nominal inlet temperature"
          annotation (Dialog(group="LP Turbine"));
        parameter Modelica.Units.SI.AbsolutePressure pstartin_LP=3.689e5 "Inlet pressure start value"
          annotation (Dialog(group="LP Turbine"));
        parameter Modelica.Units.SI.AbsolutePressure pstart_LP=0.0483e5 "Outlet pressure start value"
          annotation (Dialog(group="LP Turbine"));
        parameter Modelon.Media.Units.SpecificEnthalpy hstartin_LP=3.057e6
          "Inlet enthalpy start value"
                                      annotation (Dialog(group="LP Turbine"));
        parameter Modelon.Media.Units.SpecificEnthalpy hstartout_LP=2.3559e6
          "Outlet enthalpy start value" annotation (Dialog(group="LP Turbine"));
        ThermalPower.TwoPhase.Volumes.MixVolume header_intake_HP(
          N_drain=1,
          m_flow_nom=111.5,
          hstart=hstartin_HP,
          pstart=pstartin_HP,
          redeclare package Medium = WaterMedium,
          N_feed=1) "Header with thermal wall for Steam Turbine HP intake"
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={-20,20})));
        ThermalPower.TwoPhase.Volumes.MixVolume volume_HP_drain(
          V_tot=0.1,
          hstart=3171e3,
          m_flow_nom=107.8,
          N_drain=1,
          N_feed=1,
          redeclare package Medium = WaterMedium,
          pstart=3472000)
          annotation (Placement(transformation(extent={{-70,-34},{-90,-14}})));
        ThermalPower.TwoPhase.FlowResistances.TurbulentLoss pipingLoss_drain(
          m_flow_nom=107.8,
          redeclare package Medium = WaterMedium,
          p_nom=3472000,
          T_nom=651.15,
          dp_nom=134000) annotation (Placement(transformation(
              origin={-110,-24},
              extent={{-10,-10},{10,10}},
              rotation=180)));
        ThermalPower.TwoPhase.Interfaces.FlowPort drain_HP(redeclare package
            Medium =
              WaterMedium) annotation (Placement(transformation(extent={{-130,-172},{-110,
                  -152}}),     iconTransformation(extent={{-46,-164},{-34,-152}})));
        ThermalPower.TwoPhase.Valves.ValveSteam stopValve_HP(
          m_flow_nom=111.5,
          redeclare package Medium = WaterMedium,
          dp_nom=360000,
          p_nom=14500000,
          T_nom=864.15) "Stop Valve HP Steam" annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-20,50})));
        ThermalPower.TwoPhase.Volumes.MixVolume volume_HP_feed(
          hstart=3567e3,
          m_flow_nom=111.5,
          N_feed=1,
          N_drain=1,
          V_tot=0.1,
          redeclare package Medium = WaterMedium,
          pstart=14700000) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-110,80})));
        ThermalPower.TwoPhase.FlowResistances.TurbulentLoss pipingLoss_feed(
          m_flow_nom=111.5,
          redeclare package Medium = WaterMedium,
          p_nom=14700000,
          T_nom=865.85,
          dp_nom=200000) annotation (Placement(transformation(
              origin={-80,80},
              extent={{-10,-10},{10,10}},
              rotation=0)));
        ThermalPower.TwoPhase.Volumes.MixVolume volume_HP_pipe(
          m_flow_nom=111.5,
          N_feed=1,
          V_tot=0.1,
          hstart=3564e3,
          redeclare package Medium = WaterMedium,
          pstart=14500000,
          N_drain=1)       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-52,80})));
        ThermalPower.TwoPhase.Interfaces.VolumePort feed_HP[1](redeclare
            package Medium =
                     WaterMedium) annotation (Placement(transformation(extent={{-150,
                  70},{-130,90}}), iconTransformation(extent={{-142,74},{-132,84}})));
        ThermalPower.TwoPhase.TurboMachinery.Turbines.SteamTurbineStodola turbine_IP(
          useNominalPoint=true,
          eta_mech=1,
          eta_is_nom=eta_is_nom_IP,
          m_flow_nom=m_flow_nom_IP,
          pstartin=pstartin_IP,
          pstart=pstart_IP,
          T_nom=T_nom_IP,
          p1_nom=pstartin_IP,
          hstartin=hstartin_IP,
          hstartout=hstartout_IP,
          p2_nom=pstart_IP,
          redeclare package Medium = WaterMedium)
          "Intermediate pressure turbine"
          annotation (Placement(transformation(extent={{0,-30},{40,10}})));
        ThermalPower.TwoPhase.Volumes.MixVolume volume_drain_IP(
          N_drain=2,
          V_tot=V_separation,
          pstart=pstart_Vseparation,
          hstart=hstart_Vseparation,
          m_flow_nom=m_flow_nom_IP,
          QuasiStatic=false,
          redeclare package Medium = WaterMedium,
          N_feed=1) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={40,-40})));
        ThermalPower.TwoPhase.Volumes.MixVolume header_intake_IP(
          N_drain=1,
          V_tot=V_separation,
          m_flow_nom=m_flow_nom_IP,
          QuasiStatic=false,
          pstart=pstartin_IP,
          hstart=hstartin_IP,
          N_feed=1,
          redeclare package Medium = WaterMedium) annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={28,30})));
        ThermalPower.TwoPhase.TurboMachinery.Turbines.SteamTurbineStodola turbine_LP(
          useNominalPoint=true,
          eta_mech=1,
          pstartin=pstartin_LP,
          pstart=pstart_LP,
          hstartin=hstartin_LP,
          hstartout=hstartout_LP,
          eta_is_nom=eta_is_nom_LP,
          m_flow_nom=m_flow_nom_LP,
          T_nom=T_nom_LP,
          p1_nom=pstartin_LP,
          p2_nom=pstart_LP,
          use_Bauman=use_Bauman,
          alpha_Bauman=alpha_Bauman,
          redeclare package Medium = WaterMedium) "Low pressure Turbine"
          annotation (Placement(transformation(extent={{60,-30},{100,10}})));
        ThermalPower.TwoPhase.Interfaces.VolumePort feed_IP[1](redeclare
            package Medium = WaterMedium) annotation (Placement(transformation(
                extent={{10,88},{30,108}}), iconTransformation(extent={{14,92},
                  {24,102}})));
        ThermalPower.TwoPhase.Interfaces.FlowPort drain_LP(redeclare package
            Medium = WaterMedium) annotation (Placement(transformation(extent={
                  {148,-128},{168,-108}}), iconTransformation(extent={{154,-120},
                  {164,-110}})));
        Modelica.Blocks.Sources.Constant open_IP(k=1)
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        ThermalPower.TwoPhase.Valves.ValveSteam IPSteam(
          m_flow_nom=128.2,
          dp_nom=60000,
          p_nom=3000000,
          T_nom=863.15,
          redeclare package Medium = WaterMedium) "Stop Valve IP Steam"
          annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={70,30})));
        ThermalPower.TwoPhase.Volumes.MixVolume volume_feed_IP(
          N_feed=1,
          m_flow_nom=125.7,
          hstart=3665e3,
          V_tot=0.1,
          N_drain=1,
          useTstart=true,
          pstart=3120000,
          Tstart=865.65,
          redeclare package Medium = WaterMedium) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={70,90})));
        ThermalPower.TwoPhase.FlowResistances.TurbulentLoss pipinglossHPsteam1(
          m_flow_nom=125.7,
          p_nom=3120000,
          T_nom=865.65,
          dp_nom=120000,
          redeclare package Medium = WaterMedium) annotation (Placement(
              transformation(
              origin={90,80},
              extent={{-10,-10},{10,10}},
              rotation=-90)));
        ThermalPower.TwoPhase.Volumes.MixVolume volume_pipe_IP(
          m_flow_nom=125.7,
          N_drain=1,
          hstart=3.66009e6,
          V_tot=0.1,
          useTstart=true,
          N_feed=1,
          pstart=3000000,
          Tstart=865.65,
          redeclare package Medium = WaterMedium) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={90,50})));
        Modelica.Blocks.Sources.Constant open_HP(k=1)
          annotation (Placement(transformation(extent={{-64,40},{-44,60}})));
        ThermalPower.TwoPhase.FlowResistances.TurbulentLoss pipingLoss_tapoff(
          m_flow_nom=111.5,
          redeclare package Medium = WaterMedium,
          p_nom=300000,
          T_nom=573.15,
          dp_nom=20000) annotation (Placement(transformation(
              origin={40,-70},
              extent={{-10,-10},{10,10}},
              rotation=-90)));
        ThermalPower.TwoPhase.Interfaces.FlowPort drain_tapoff(redeclare
            package Medium = WaterMedium) annotation (Placement(transformation(
                extent={{30,-170},{50,-150}}), iconTransformation(extent={{36,-164},
                  {48,-152}})));
        ThermalPower.TwoPhase.SourcesAndSinks.MassFlowBoundary coolFlow(
          redeclare package Medium = CoolMedium,
          m_flow0=30,
          use_mdot_in=true,
          h0=63173.5,
          p0=200000) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={122,-30})));
        Modelica.Blocks.Sources.Constant
                                     coolingMassFlow(k=3388)
          annotation (Placement(transformation(extent={{158,-36},{138,-16}})));
        ThermalPower.TwoPhase.SourcesAndSinks.PressureBoundary_h coolSink(
            redeclare package Medium = CoolMedium, N_ports=1) annotation (
            Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=-90,
              origin={122,-90})));
        ThermalPower.TwoPhase.Condensers.Condenser cond(
          redeclare package CoolMedium = CoolMedium,
          initOpt=Modelon.ThermoFluid.Choices.InitOptions.initialValues,
          tubelength=8.372,
          d_inner=0.0246888,
          d_outer=0.0254,
          A_hotwell=4003,
          N_tubes=5992,
          ystart=0.62,
          diameter=2.68,
          length=11.3,
          V_hotwell=19.09,
          redeclare package Medium = WaterMedium,
          pstart=4830,
          Tmstart=305.4) annotation (Placement(transformation(extent={{80,-80},
                  {120,-40}}, rotation=0)));

        ThermalPower.TwoPhase.FlowResistances.HeightDiff heightDiff1(height=-3,
            p_nom=4000) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={100,-90})));
        ThermalPower.TwoPhase.TurboMachinery.Pumps.Pump pump_condensate_P1(
          usePowerCharacteristic=false,
          etaMech=0.9693,
          checkValve=true,
          Np_nom=1,
          n_nom=1500,
          head_nom={245,208,183.6,110},
          redeclare function efficiencyCharacteristic =
              Modelon.ThermoFluid.Pumps.PumpCharacteristics.constantEfficiency
              (eta_nom=0.8),
          q_nom={0.020597,0.659160,0.08238985,0.1112138},
          P_cons={165100,165100,165100,165100},
          h_start=137e3,
          V=0.1,
          T_inertia=25,
          m_flow_nom=63.3,
          pin_start=40720,
          pout_start=398900) "Condensate Pump P6 to HRSG" annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={100,-122})));

        ThermalPower.Experiments.SubComponents.ControlBuses.ControlBus_Turbine controlBus_Turbine
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={160,-80}), iconTransformation(
              extent={{-9,-9},{9,9}},
              rotation=90,
              origin={161,1})));
        Modelica.Mechanics.Rotational.Interfaces.Flange_b shaft_b1 annotation (
            Placement(transformation(extent={{-150,4},{-130,24}}),
              iconTransformation(extent={{-150,4},{-130,24}})));
      equation
        connect(header_intake_HP.drain[1], turbine_HP.feed) annotation (Line(
            points={{-20,12},{-20,2},{-24,2}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(pipingLoss_drain.feed, volume_HP_drain.drain[1]) annotation (Line(
            points={{-100,-24},{-88,-24}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(volume_HP_drain.feed[1], turbine_HP.drain)
          annotation (Line(points={{-72,-24},{-56,-24}}, color={0,0,255}));
        connect(pipingLoss_drain.drain, drain_HP) annotation (Line(points={{-120,-24},
                {-120,-162}},           color={0,0,255}));
        connect(volume_HP_feed.drain[1], pipingLoss_feed.feed) annotation (Line(
            points={{-102,80},{-90,80}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(pipingLoss_feed.drain, volume_HP_pipe.feed[1]) annotation (Line(
            points={{-70,80},{-60,80}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(volume_HP_feed.feed[1:1], feed_HP)
          annotation (Line(points={{-118,80},{-140,80}}, color={0,0,255}));
        connect(turbine_IP.feed, header_intake_IP.drain[1])
          annotation (Line(points={{4,2},{4,30},{20,30}}, color={0,0,255}));
        connect(turbine_IP.shaft_a, turbine_HP.shaft_a)
          annotation (Line(points={{2,-10},{-22,-10}}, color={0,0,0}));
        connect(IPSteam.command, open_IP.y)
          annotation (Line(points={{70,35.6},{70,50},{61,50}}, color={0,0,127}));
        connect(feed_IP, volume_feed_IP.feed[1:1])
          annotation (Line(points={{20,98},{20,90},{62,90}}, color={0,0,255}));
        connect(volume_feed_IP.drain[1], pipinglossHPsteam1.feed) annotation (Line(
              points={{78,90},{78,90.5},{90,90.5},{90,90}}, color={0,0,255}));
        connect(volume_pipe_IP.drain[1], IPSteam.feed)
          annotation (Line(points={{90,42},{90,30},{80,30}}, color={0,0,255}));
        connect(IPSteam.drain, header_intake_IP.feed[1])
          annotation (Line(points={{60,30},{36,30}}, color={0,0,255}));
        connect(stopValve_HP.drain, header_intake_HP.feed[1])
          annotation (Line(points={{-20,40},{-20,28}}, color={0,0,255}));
        connect(pipinglossHPsteam1.drain, volume_pipe_IP.feed[1])
          annotation (Line(points={{90,70},{90,58}}, color={0,0,255}));
        connect(turbine_IP.shaft_b, turbine_LP.shaft_a)
          annotation (Line(points={{38,-10},{62,-10}}, color={0,0,0}));
        connect(turbine_IP.drain, volume_drain_IP.feed[1])
          annotation (Line(points={{36,-24},{40,-24},{40,-32}}, color={0,0,255}));
        connect(volume_drain_IP.drain[1], turbine_LP.feed) annotation (Line(points={{
                39.5,-48},{54,-48},{54,2},{64,2}}, color={0,0,255}));
        connect(volume_drain_IP.drain[2], pipingLoss_tapoff.feed) annotation (Line(
              points={{40.5,-48},{40.5,-60},{40,-60}}, color={0,0,255}));
        connect(pipingLoss_tapoff.drain, drain_tapoff)
          annotation (Line(points={{40,-80},{40,-134},{40,-160},{40,-160}},
                                                       color={0,0,255}));
        connect(coolingMassFlow.y,coolFlow. mdot_in) annotation (Line(
            points={{137,-26},{127,-26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(coolSink.port[1],cond. drain_cool) annotation (Line(
            points={{122,-81},{122.35,-81},{122.35,-62.4},{122.4,-62.4}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(coolFlow.port, cond.feed_cool) annotation (Line(points={{122,-39},{122,
                -46},{122,-54.4},{122.4,-54.4}}, color={0,0,255}));
        connect(turbine_LP.drain, cond.feed) annotation (Line(points={{96,-24},{96,-44},
                {85.4,-44},{85.4,-49.2}}, color={0,0,255}));
        connect(cond.drain, heightDiff1.feed)
          annotation (Line(points={{100,-72},{100,-80}}, color={0,0,255}));
        connect(pump_condensate_P1.feed, heightDiff1.drain)
          annotation (Line(points={{100,-113.8},{100,-100}}, color={0,0,255}));
        connect(pump_condensate_P1.drain, drain_LP) annotation (Line(points={{106,-130},
                {106,-156},{158,-156},{158,-118}},color={0,0,255}));
        connect(controlBus_Turbine.condenser_level, cond.level) annotation (Line(
            points={{159.9,-79.9},{77.2,-79.9},{77.2,-67.2}},
            color={255,204,51},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(controlBus_Turbine.condenserPump_speed, pump_condensate_P1.in_n)
          annotation (Line(
            points={{159.9,-79.9},{142,-79.9},{142,-115.7},{108.1,-115.7}},
            color={255,204,51},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(stopValve_HP.command, open_HP.y)
          annotation (Line(points={{-25.6,50},{-43,50}}, color={0,0,127}));
        connect(volume_HP_pipe.drain[1], stopValve_HP.feed)
          annotation (Line(points={{-44,80},{-20,80},{-20,60}}, color={0,0,255}));
        connect(turbine_LP.shaft_b, shaft_b1) annotation (Line(points={{98,-10},
                {146,-10},{146,14},{-140,14}}, color={0,0,0}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-140,
                  -160},{160,100}})),                  Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-140,-160},{160,100}}), graphics={
              Rectangle(
                extent={{-67,80},{-66,28}},
                fillColor={216,112,112},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Rectangle(
                extent={{19,94},{20,42}},
                fillColor={216,112,112},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Rectangle(
                extent={{-1,20.5},{0,-20.5}},
                fillColor={216,112,112},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                origin={79.5,33.5},
                rotation=180),
              Rectangle(
                extent={{0,20.5},{1,-20.5}},
                fillColor={216,112,112},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                origin={41.5,33.5},
                rotation=180),
              Rectangle(
                extent={{-41,-12},{-40,-156}},
                fillColor={216,112,112},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Polygon(
                points={{-11,9},{-11,-9},{11,-21},{11,21},{-11,9}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                origin={-41,29},
                rotation=360),
              Rectangle(
                extent={{-140,18},{126,12}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-80,46},{-22,-12}},
                lineColor={105,149,214},
                fillColor={105,149,214},
                fillPattern=FillPattern.Solid,
                radius=3),
              Polygon(
                points={{-15,15},{-15,-7},{11,-21},{11,29},{-15,15}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                origin={-51,13},
                rotation=360),      Text(extent={{-132,112},{148,134}},textString=
                "%name"),
              Rectangle(
                extent={{62,46},{4,-12}},
                lineColor={105,149,214},
                fillColor={105,149,214},
                fillPattern=FillPattern.Solid,
                radius=3),
              Rectangle(
                extent={{68,46},{126,-12}},
                lineColor={105,149,214},
                fillColor={105,149,214},
                fillPattern=FillPattern.Solid,
                radius=3),
              Polygon(
                points={{-15,15},{-15,-7},{11,-21},{11,29},{-15,15}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                origin={97,13},
                rotation=360),
              Rectangle(
                extent={{41,-12},{42,-156}},
                fillColor={216,112,112},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Rectangle(
                extent={{103,-12},{104,-116}},
                fillColor={105,149,214},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Rectangle(
                extent={{84,-64},{122,-94}},
                lineColor={105,149,214},
                fillColor={105,149,214},
                fillPattern=FillPattern.Solid,
                radius=3),
              Polygon(
                points={{90,-68},{90,-86},{96,-86},{96,-90},{112,-90},{112,-86},{118,-86},
                    {118,-68},{90,-68}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{118,-72},{92,-72},{98,-78},{94,-84},{118,-84},{118,-82},{98,-82},
                    {102,-78},{98,-74},{118,-74},{118,-72}},
                lineColor={105,149,214},
                fillColor={105,149,214},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-28,1},{28,0}},
                lineColor={105,149,214},
                lineThickness=0.5,
                fillColor={105,149,214},
                fillPattern=FillPattern.Solid,
                origin={132,-115},
                rotation=180),  Text(
                extent={{-197,-64},{-47,-54}},
                lineColor={0,0,0},
                textString="Power [MW]"),Rectangle(
                extent={{-173,-19},{-74,-45}},
                lineColor={175,175,175},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid),Text(
                extent={{-192,-46},{-52,-25}},
                lineColor={0,0,0},
                textString=DynamicSelect("0",
                    String(
                    simpleGenerator.power/1e6,
                    format="1.f"))),
              Polygon(
                points={{-15,15},{-15,-7},{11,-21},{11,29},{-15,15}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                origin={33,13},
                rotation=360),
              Rectangle(
                extent={{-0.5,34.25},{0.5,-34.25}},
                fillColor={216,112,112},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                origin={-100.25,79.75},
                rotation=90),
              Rectangle(
                extent={{-1,19.6},{0,-18.9375}},
                fillColor={216,112,112},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                origin={61.0625,54},
                rotation=90)}),
          Documentation(info="<html>
<h4>Information</h4>
<p>Turbine system with high, intermediate and low pressure turbine stages.</p>
</html>",       revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
      end TurbineSystem;

      model OpenCycleGasTurbine
        "Model of gas turbine, compressor and combustor"
        package Medium_Fuel =ThermalPower.Media.Gases.NaturalGasWithH2;
        package Medium =ThermalPower.Media.Gases.MoistFlueGas;
        Modelon.Visualizers.RealValue realValue1(
            precision=0, number=turbine.summary.shaftSpeed*60/(2*3.14))
          annotation (Placement(transformation(extent={{-45,-71},{-25,-51}})));
        Modelon.Visualizers.RealValue realValue2(
                      precision=2, number=combustor.Q_combust*1e-6)
          annotation (Placement(transformation(extent={{-17,-71},{3,-51}})));
        Modelon.Visualizers.RealValue realValue3(
                     precision=2, number=combustor.gas_out.p*1e-5)
          annotation (Placement(transformation(extent={{11,-71},{31,-51}})));
        Modelon.Visualizers.RealValue realValue4(
            precision=2, number=combustor.lambda)
          annotation (Placement(transformation(extent={{39,-71},{59,-51}})));
        ThermalPower.FlueGas.Sensors.MultiData
                                  multiData(redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-86,-40},{-66,-20}})));
        ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                            multiDisplayVis_phTmdot(displayUnits=
              true)
          annotation (Placement(transformation(extent={{-91,-35},{-61,-5}})));
        ThermalPower.FlueGas.Sensors.MultiData
                                  multiData1(redeclare package Medium =
            Medium_Fuel)
          annotation (Placement(transformation(extent={{-36,70},{-16,90}})));
        ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                            multiDisplayVis_phTmdot1(displayUnits=
              true)
          annotation (Placement(transformation(extent={{-41,75},{-11,105}})));
        ThermalPower.FlueGas.Sensors.MultiData
                                  multiData2(redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={82,-20})));
        ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                            multiDisplayVis_phTmdot2(displayUnits=
              true)
          annotation (Placement(transformation(extent={{87,-25},{117,5}})));
        Modelon.ThermoFluid.Compressors.DynamicCompressor compressor(
          redeclare package Medium = Medium,
          eta_mech=eta_mech_compressor,
          positiveFlow=false,
          internalLeakage=false,
          redeclare model CharMap = CharMap_compressor,
          T_start=293.15)  annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=0,
              origin={-48,20})));
        ThermalPower.FlueGas.TurboMachinery.Turbines.Turbine
                                             turbine(
          redeclare package Medium = Medium,
          w_start=w_start,
          redeclare model CharMap = CharMap,
          T_start(displayUnit="K") = Tstart_turbine,
          eta_mech=eta_mech)
                           annotation (Placement(transformation(
              extent={{16,16},{-16,-16}},
              rotation=180,
              origin={32,12})));
        ThermalPower.FlueGas.Combustors.Combustor combustor(
          A_inner=A_inner,
          kc_combust=kc_combust,
          Cm=Cm,
          V=V_combustor,
          pstart=pstart_combustor,
          Tstart=Tstart_combustor,
          initOpt=initOpt_combustor) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-12,42})));

        ThermalPower.FlueGas.Sensors.MultiData
                                  multiData3(redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={12,30})));
        ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                            multiDisplayVis_phTmdot3(displayUnits=
              true)
          annotation (Placement(transformation(extent={{23,25},{53,55}})));
        ThermalPower.Visualizers.MultiDisplayVis_phTmdot
                                            multiDisplayVis_phTmdot4(
                                                                    displayUnits=
              true)
          annotation (Placement(transformation(extent={{-81,29},{-51,59}})));
        ThermalPower.FlueGas.Sensors.MultiData
                                  multiData4(
                                            redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-38,34})));
        ThermalPower.FlueGas.Interfaces.VolumePort fuel_in(redeclare package
            Medium = Medium_Fuel) annotation (Placement(transformation(extent={
                  {-82,70},{-62,90}}), iconTransformation(extent={{-46,92},{-32,
                  106}})));
        ThermalPower.FlueGas.Interfaces.FlowPort gas_out(redeclare package
            Medium = Medium) annotation (Placement(transformation(extent={{72,-108},
                  {92,-88}}), iconTransformation(extent={{36,-106},{50,-92}})));
        ThermalPower.FlueGas.Interfaces.VolumePort gas_in(redeclare package
            Medium = Medium) annotation (Placement(transformation(extent={{-132,
                  -114},{-112,-94}}), iconTransformation(extent={{-126,-108},{-112,
                  -94}})));
        replaceable model CharMap =
            Modelon.ThermoFluid.Turbines.Characteristics.TableBasedSAE (normalizedCorrection=true, effMap=[0, 1, 2, 3, 4, 6, 9, 12, 16, 20, 25, 30; 20000, 0.85, 0.853, 0.856, 0.86, 0.865, 0.87, 0.8725, 0.875, 0.8752, 0.8754, 0.876; 40000, 0.85, 0.853, 0.856, 0.86, 0.865, 0.87, 0.8725, 0.875, 0.8752, 0.8754, 0.876; 60000, 0.85, 0.853, 0.856, 0.86, 0.865, 0.87, 0.8725, 0.875, 0.8752, 0.8754, 0.876], flowMap=[0, 20, 25, 30; 0, 0.0002, 0.0002, 0.0002; 10000, 180, 210, 225; 40000, 220, 235, 242; 60000, 250, 267, 281], p_ref=450000, T_ref=973.15)
          constrainedby
          Modelon.ThermoFluid.Turbines.Characteristics.TableBasedSAE               annotation (__Dymola_choicesAllMatching=true, Dialog(group="Turbine"));
        parameter Real eta_mech=0.99 "Mechanical efficiency" annotation(Dialog(group="Turbine"));
        parameter Modelica.Units.SI.Temperature T_start=573.15 "Initial temperature"
          annotation (Dialog(group="Turbine"));
        parameter Modelica.Units.SI.AngularVelocity w_start=1000 "Initial angular velocity"
          annotation (Dialog(group="Turbine"));
        replaceable model CharMap_compressor =
          Modelon.ThermoFluid.Compressors.Characteristics.Dynamic.TableBasedFlowFromPR
            (                                                                             normalizedCorrection=true, effMap=[0, 1, 2, 4, 6, 9, 12, 16, 20, 25, 30; 10000, 0.85, 0.84, 0.82, 0.81, 0.795, 0.789, 0.785, 0.783, 0.781, 0.78; 40000, 0.85, 0.84, 0.82, 0.81, 0.795, 0.789, 0.785, 0.783, 0.781, 0.78; 60000, 0.85, 0.84, 0.82, 0.81, 0.795, 0.789, 0.785, 0.783, 0.781, 0.78], flowMap=[0, 20, 25, 30; 0, 0.00002, 0.00002, 0.00002; 10000, 900, 870, 820; 40000, 950, 920, 900; 60000, 980, 940, 920], p_ref=200000, T_ref=973.15)
          constrainedby
          Modelon.ThermoFluid.Compressors.Characteristics.Dynamic.TableBasedSAE               annotation (__Dymola_choicesAllMatching=true, Dialog(group="Compressor"));

        parameter Real eta_mech_compressor=1.0 "Mechanical efficiency" annotation(Dialog(group="Compressor"));
        parameter Boolean internalLeakage_compressor=false "Include internal mass flow leakage" annotation(Dialog(group="Compressor"));

        parameter Modelica.Units.SI.HeatCapacity Cm=0 "Metal Heat Capacity" annotation (Dialog(group="Combustor"));
        parameter Modelica.Units.SI.Volume V_combustor=10 "Inner volume" annotation (Dialog(group="Combustor"));
        parameter Modelica.Units.SI.Area A_inner=0 "Inner surface" annotation (Dialog(group="Combustor"));
        parameter Modelica.Units.SI.CoefficientOfHeatTransfer kc_combust=0 "Heat Transfer Coefficient"
          annotation (Dialog(group="Combustor"));
        parameter Modelica.Units.SI.AbsolutePressure pstart_combustor=2400000 "Combustor pressure start value"
          annotation (Dialog(group="Combustor"));
        parameter Modelica.Units.SI.Temperature Tstart_combustor=1648.15 "Combustor temperature start value"
          annotation (Dialog(group="Combustor"));
        parameter Modelica.Units.SI.Temperature Tstart_turbine=573.15 "Turbine temperature start value"
          annotation (Dialog(group="Combustor"));
        parameter Modelon.ThermoFluid.Choices.InitOptions initOpt_combustor=Modelon.ThermoFluid.Choices.InitOptions.steadyState "Initialization option" annotation(Dialog(group="Combustor"));
        Modelica.Mechanics.Rotational.Interfaces.Flange_b shaftGas annotation (
            Placement(transformation(extent={{140,-8},{160,12}}),
              iconTransformation(extent={{140,-8},{160,12}})));
      equation

        connect(multiData.u, multiDisplayVis_phTmdot.y)
          annotation (Line(points={{-76,-30},{-76,-30},{-76,-20}}, color={0,0,0}));
        connect(multiData1.u, multiDisplayVis_phTmdot1.y) annotation (Line(points={
                {-26,80},{-26,84},{-26,86},{-26,90}}, color={0,0,0}));
        connect(multiDisplayVis_phTmdot2.y, multiData2.u) annotation (Line(points={{102,-10},
                {102,-20},{82,-20}},                  color={0,0,0}));
        connect(compressor.portA, multiData.port_b) annotation (Line(points={{-58,20},
                {-58,-30},{-70,-30}},     color={0,191,0}));
        connect(combustor.gas_out, multiData3.port_a)
          annotation (Line(points={{-3,42},{12,42},{12,36}}, color={0,191,0}));
        connect(multiDisplayVis_phTmdot3.y, multiData3.u) annotation (Line(points={
                {38,40},{38,40},{38,30},{12,30}}, color={0,0,0}));
        connect(compressor.flange, turbine.shaft_a) annotation (Line(points={{-48,13},
                {18,13},{18,12.32},{17.28,12.32}},    color={0,0,0}));
        connect(multiData3.port_b, turbine.port_a)
          annotation (Line(points={{12,24},{12,21.92},{17.6,21.92}},
                                                               color={0,191,0}));
        connect(turbine.port_b, multiData2.port_a) annotation (Line(points={{45.76,
                1.12},{82,1.12},{82,-14}}, color={0,191,0}));
        connect(multiData4.u, multiDisplayVis_phTmdot4.y)
          annotation (Line(points={{-38,34},{-66,34},{-66,44}}, color={0,0,0}));
        connect(compressor.portB, multiData4.port_a) annotation (Line(points={{-38,20},
                {-38,28}},              color={255,128,0}));
        connect(multiData4.port_b, combustor.gas_in) annotation (Line(points={{-38,
                40},{-38,40},{-38,42},{-21,42}}, color={0,191,0}));
        connect(multiData1.port_b, combustor.fuel_in)
          annotation (Line(points={{-20,80},{-12,80},{-12,51}}, color={0,191,0}));
        connect(gas_out, multiData2.port_b) annotation (Line(points={{82,-98},{82,-26}},
                                             color={0,191,0}));
        connect(fuel_in, multiData1.port_a)
          annotation (Line(points={{-72,80},{-32,80}}, color={0,191,0}));
        connect(gas_in, multiData.port_a) annotation (Line(points={{-122,-104},{-122,
                -30},{-82,-30}},      color={0,191,0}));
        connect(turbine.shaft_b, shaftGas) annotation (Line(points={{46.08,
                12.32},{96.04,12.32},{96.04,2},{150,2}}, color={0,0,0}));
        annotation (Diagram(coordinateSystem(extent={{-150,-100},{150,100}}),
                                     graphics={
              Rectangle(
                extent={{-80,-48},{68,-74}},
                lineColor={215,215,215},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid,
                radius=2),
              Text(
                extent={{-56,-66},{-6,-70}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Speed [rpm]"),
              Text(
                extent={{-28,-66},{22,-70}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Q combust [MW]"),
              Text(
                extent={{0,-66},{50,-70}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Combustor [bar]"),
              Text(
                extent={{28,-66},{78,-70}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="lambda")}),
          experiment(StopTime=1000),
          __Dymola_experimentSetupOutput,
          Documentation(revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>",       info="<html>
<h4>Open brayton cycle</h4>
<p>The open Brayton cycle is a system model component consisting of a combustor, compressor and turbine. Ambient air supplied to the compressor is 
compressed with a compression ratio in the range 20 to 25. The compressed air is then introduced in the combustor where fuel is added as well. The default fuel used in the model is natural gas.
After combustion, which is assumed to be complete, the exhaust gas is fed to the turbine. Work produced by the turbine is supplied both to a generator and the compressor.</p>
</html>"),Icon(coordinateSystem(extent={{-150,-100},{150,100}}), graphics={
              Rectangle(
                extent={{-53,1.5},{52,-1.5}},
                pattern=LinePattern.None,
                fillColor={119,217,119},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,0},
                origin={-38,60.25},
                rotation=0),
              Rectangle(
                extent={{-141,5},{141,-5}},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,0},
                origin={9,1},
                rotation=360),
              Line(
                points={{-142,80}},
                color={0,0,0},
                pattern=LinePattern.None),
              Rectangle(
                extent={{-136,28},{-78,-30}},
                fillColor={119,216,119},
                fillPattern=FillPattern.Solid,
                radius=3,
                pattern=LinePattern.None),
              Rectangle(
                extent={{2,28},{60,-30}},
                fillColor={119,217,119},
                fillPattern=FillPattern.Solid,
                radius=3,
                pattern=LinePattern.None),
              Ellipse(
                extent={{-58,80},{-18,40}},
                pattern=LinePattern.None,
                fillColor={119,216,119},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-38.5,1.5},{38.5,-1.5}},
                pattern=LinePattern.None,
                fillColor={119,217,119},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,0},
                origin={42.5,-60.5},
                rotation=-90),
              Polygon(
                points={{-15,15},{-15,-7},{11,-21},{11,29},{-15,15}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                origin={31,-5},
                rotation=360),
              Ellipse(
                extent={{-54,76},{-22,44}},
                pattern=LinePattern.None,
                fillColor={255,168,112},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,0}),
              Polygon(
                points={{-15,-11},{11,15},{15,13},{-11,-13},{-15,-11}},
                lineColor={28,108,200},
                fillColor={119,217,119},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                origin={-37,59},
                rotation=90),
              Polygon(
                points={{-52,50},{-26,76},{-24,72},{-50,46},{-52,50}},
                lineColor={28,108,200},
                fillColor={119,217,119},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Text(
                extent={{-82,-46},{10,-68}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillColor={119,217,119},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Rectangle(
                extent={{-38.5,1.5},{38.5,-1.5}},
                pattern=LinePattern.None,
                fillColor={119,217,119},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,0},
                origin={-119.5,-56.5},
                rotation=-90),
              Rectangle(
                extent={{-38.5,1.5},{38.5,-1.5}},
                pattern=LinePattern.None,
                fillColor={119,217,119},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,0},
                origin={-89.5,21.5},
                rotation=90),
              Rectangle(
                extent={{-38.5,1.5},{38.5,-1.5}},
                pattern=LinePattern.None,
                fillColor={119,217,119},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,0},
                origin={12.5,21.5},
                rotation=90),
              Polygon(
                points={{15,15},{15,-7},{-11,-21},{-11,29},{15,15}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                origin={-107,-5},
                rotation=360),
              Rectangle(
                extent={{-10,1},{10,-1}},
                pattern=LinePattern.None,
                fillColor={119,217,119},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,0},
                origin={-39,88},
                rotation=-90),                 Text(
                extent={{-184,72},{-44,93}},
                lineColor={0,0,0},
                textString=DynamicSelect("0",
                    String(
                    generator.power/1e6,
                    format="1.f"))),
                                Text(
                extent={{-193,100},{-43,110}},
                lineColor={0,0,0},
                textString="Firing Power [MW]"),
                                         Rectangle(
                extent={{-165,97},{-66,71}},
                lineColor={255,168,112},
                fillColor={255,168,112},
                fillPattern=FillPattern.Solid),Text(
                extent={{-186,72},{-46,93}},
                lineColor={0,0,0},
                textString=DynamicSelect("0",
                    String(
                    combustor.Q_combust/1e6,
                    format="1.f")))}));
      end OpenCycleGasTurbine;

      model GasCombinedCycleProcess "Three pressure level boiler"
        replaceable package WaterMedium =
          Modelon.Media.PreDefined.TwoPhase.WaterIF97 constrainedby
          Modelon.Media.Interfaces.TwoPhaseMedium annotation(choicesAllMatching);
        replaceable package GasMedium =
          ThermalPower.Media.Gases.MoistFlueGas
        constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);
        ThermalPower.Experiments.SubComponents.HRSG heatRecoverySteamGenerator(
            redeclare package WaterMedium = WaterMedium, redeclare package
            GasMedium =
              GasMedium)
          annotation (Placement(transformation(extent={{-170,-94},{84,-50}})));

        ThermalPower.Experiments.SubComponents.Control.ControlSystem.TPLBControlSystem
          controlSystem(variableLoadSetpoint=true) annotation (Placement(
              transformation(
              extent={{13,13},{-13,-13}},
              rotation=180,
              origin={-117,49})));
        inner ThermalPower.System_TPL system_TPL
          annotation (Placement(transformation(extent={{-168,38},{-148,58}})));
        ThermalPower.Experiments.SubComponents.CCS carbonCapture(redeclare
            package WaterMedium =
                          WaterMedium, redeclare package GasMedium = GasMedium)
          annotation (Placement(transformation(extent={{-132,-14},{-104,14}})));

        package Medium_Fuel =
            ThermalPower.Media.Gases.NaturalGasWithH2;
        ThermalPower.FlueGas.SourcesAndSinks.MassFlowBoundary feedFuel(
          redeclare package Medium = Medium_Fuel,
          m_flow0=2,
          use_mdot_in=true) annotation (Placement(transformation(extent={{156,12},{136,
                  32}}, rotation=0)));

        TurbineSystem               turbineSystem
          annotation (Placement(transformation(extent={{46,-30},{-56,56}})));
        OpenCycleGasTurbine                        openBraytonCycle
          annotation (Placement(transformation(extent={{158,-54},{74,2}})));
        ThermalPower.FlueGas.SourcesAndSinks.PressureBoundary_pTX
                                                     airSource(redeclare
            package Medium =
                     GasMedium, N_ports=1)
                     annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={164,-72})));
        Modelica.Blocks.Interfaces.RealInput fueFlowIn
          annotation (Placement(
              transformation(extent={{76,34},{104,62}}),
              iconTransformation(extent={{-108,-10},{-88,10}})));
        Modelica.Mechanics.Rotational.Interfaces.Flange_b shaftGas
          annotation (Placement(transformation(extent={{32,-36},{52,-16}}),
              iconTransformation(extent={{90,50},{110,70}})));
        Modelica.Mechanics.Rotational.Interfaces.Flange_b shaftSteam
          annotation (Placement(transformation(extent={{76,16},{96,36}}),
              iconTransformation(extent={{90,-70},{110,-50}})));
      equation
        connect(heatRecoverySteamGenerator.outlet_LPS, carbonCapture.portLPS[1])
          annotation (Line(points={{-47.3543,-50.3667},{-47.3543,-52},{-48,-52},
                {-48,-34},{-100,-34},{-100,-5.6},{-104,-5.6}},                color={216,112,
                112}));
        connect(heatRecoverySteamGenerator.outlet_exhaustGas, carbonCapture.exhaustGas[
          1]) annotation (Line(points={{-162.743,-38.6333},{-162,-38.6333},{
                -162,-8.4},{-132,-8.4}},
                              color={0,191,0}));
        connect(heatRecoverySteamGenerator.inletLTE, carbonCapture.flowPort)
          annotation (Line(points={{-152.583,-49.6333},{-152,-49.6333},{-152,0},
                {-132,0}},
              color={0,0,255}));
        connect(controlSystem.controlBus_HRSG_out, heatRecoverySteamGenerator.controlBus_HRSG_in)
          annotation (Line(
            points={{-125.32,36},{-126,36},{-126,24},{-176,24},{-176,-70.9},{
                -170.363,-70.9}},
            color={255,204,51},
            thickness=0.5,
            pattern=LinePattern.Dash));
        connect(controlSystem.controlBus_CarbonCapture, carbonCapture.controlBus_CarbonCapture)
          annotation (Line(
            points={{-117,36},{-118,36},{-118,14}},
            color={255,204,51},
            thickness=0.5,
            pattern=LinePattern.Dash));
        connect(heatRecoverySteamGenerator.outlet_reheat,turbineSystem. feed_IP[1])
          annotation (Line(points={{56.4229,-50.3667},{56.4229,-50},{60,-50},{
                60,56},{-8.06,56},{-8.06,55.0077}},
                         color={216,112,112}));
        connect(heatRecoverySteamGenerator.outlet_HPSuperheater,turbineSystem. feed_HP[
          1]) annotation (Line(points={{69.8486,-50},{69.8486,49.0538},{44.98,
                49.0538}},
              color={216,112,112}));
        connect(turbineSystem.drain_LP, heatRecoverySteamGenerator.inletLTE)
          annotation (Line(points={{-55.66,-15.1154},{-58,-15.1154},{-58,-16},{
                -74,-16},{-74,18},{-152,18},{-152,-49.6333},{-152.583,-49.6333}},
              color={0,0,255}));
        connect(carbonCapture.portTapoff[1],turbineSystem. drain_tapoff) annotation (
            Line(points={{-104,5.6},{-104,6},{-82,6},{-82,-28},{-15.88,-28},{
                -15.88,-29.3385}},                                    color={216,112,
                112}));
        connect(heatRecoverySteamGenerator.inlet_reheat,turbineSystem. drain_HP)
          annotation (Line(points={{23.04,-50},{22,-50},{22,-38},{14,-38},{14,
                -29.3385},{12,-29.3385}},
              color={216,112,112}));
        connect(turbineSystem.controlBus_Turbine, controlSystem.controlBus_Turbine)
          annotation (Line(
            points={{-56.34,23.2538},{-56.34,36},{-108.16,36}},
            color={255,204,51},
            thickness=0.5,
            pattern=LinePattern.Dash));
        connect(feedFuel.port,openBraytonCycle. fuel_in) annotation (Line(points={{137,22},
                {126.92,22},{126.92,1.72}},         color={0,191,0}));
        connect(openBraytonCycle.gas_out, heatRecoverySteamGenerator.inlet_exhaustGas)
          annotation (Line(points={{103.96,-53.72},{103.96,-72.7333},{85.0886,
                -72.7333}}, color={0,191,0}));
        connect(airSource.port[1], openBraytonCycle.gas_in) annotation (Line(points={{155,-72},
                {148,-72},{148,-54.28},{149.32,-54.28}},           color={0,191,0}));
        connect(feedFuel.mdot_in, fueFlowIn)
          annotation (Line(points={{152,27},{152,48},{90,48}}, color={0,0,127}));
        connect(openBraytonCycle.shaftGas, shaftGas) annotation (Line(points={{74,
                -25.44},{42,-26}},              color={0,0,0}));
        connect(turbineSystem.shaft_b1, shaftSteam) annotation (Line(points={{46,
                27.5538},{46,26},{86,26}},     color={0,0,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics={Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,255},
                lineThickness=0.5), Text(
                extent={{-60,24},{54,-24}},
                textColor={0,0,255},
                textString="CHP")}),                                   Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-180,-160},{180,
                  100}})),
          experiment(
            StopTime=5000,
            __Dymola_NumberOfIntervals=1000,
            __Dymola_Algorithm="Dassl"),
          Documentation(info="<html>
<h4>Information</h4>
<p>Combined cycle power plant model with a three-pressure reheat system and <a href=\"modelica://ThermalPower.Experiments.SubComponents.CCS\">simplified post combustion CO2 capture</a>. The model includes the full
steam cycle and an <a href=\"modelica://ThermalPower.FlueGas.TurboMachinery.OpenCycleGasTurbine\">open Brayton cycle</a> for power generation using natural gas. Steam is extracted from the <a href=\"modelica://ThermalPower.Experiments.SubComponents.HRSG\">HRSG</a> to feed the reboiler duty of the carbon capture.</p>
<h4>Output</h4>
<p>The model diagram contains a dynamic TQ-diagram from the package <a href=\"modelica://ThermalPower.Visualizers\">ThermalPower.Visualizers</a>. 
The diagram illustrates the pinch between the gas and the steam side throughout the HRSG component by showing water/steam and gas temperatures versus the accumulated heat transfer from gas inlet to gas outlet.</p>
<h4>Scenario</h4>
<p>The scenario includes steady state operation at 80% of the nominal load, a positive load change of 20%, steady state operation at nominal load and a negative load change back to the partial load operation point at 80%. </p>
<h4>Acknowledgements</h4>
<p>This model was originally developed by Rub&eacute;n Mochol&iacute; Monta&ntilde;&eacute;s during his Ph.D. studies (2014-2017) at
EPT-NTNU. His contributions to the library are greatly appreciated. See the publication below for further documentation.</p>

<h4>References</h4>
<p><b>Monta&ntilde;&eacute;s R.M. et al. </b>&QUOT;Demonstrating load-change transient performance of a commercial
scale natural gas combined cycle power plant with Post combustion CO<sub>2</sub> capture&QUOT; <i>International Journal
of Greenhouse Gas Control Technologies. vol. 63. August 2017 pp. 158-174.</i></p>
</html>

",              revisions="<html>
<hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"),__Dymola_experimentFlags(
            Advanced(GenerateVariableDependencies=false, OutputModelicaCode=false),
            Evaluate=false,
            OutputCPUtime=true,
            OutputFlatModelica=false));
      end GasCombinedCycleProcess;

      model Plant
        replaceable package GasMedium =
          ThermalPower.Media.Gases.MoistFlueGas
        constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);

        Modelica.Blocks.Interfaces.RealInput fuelFlowRate        annotation (
            Placement(transformation(extent={{-114,-10},{-94,10}},  rotation=0)));
        Modelica.Blocks.Interfaces.RealOutput generatedPowerGas annotation (
            Placement(transformation(extent={{96,50},{116,70}}, rotation=0)));
        GasCombinedCycleProcess gasCombinedCycleProcessJKL
          annotation (Placement(transformation(extent={{-52,-16},{-20,16}})));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{8,30},{28,50}})));
        inner ThermalPower.System_TPL system_TPL
          annotation (Placement(transformation(extent={{-82,58},{-62,78}})));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor1
          annotation (Placement(transformation(extent={{8,-50},{28,-30}})));
        Modelica.Blocks.Interfaces.RealOutput generatedPowerSteam annotation (
            Placement(transformation(extent={{94,-70},{114,-50}}, rotation=0)));
        Modelon.ThermoFluid.Electrical.SimpleGenerator generator(w_nom=500*2*
              3.141592)
          annotation (Placement(transformation(extent={{38,30},{58,50}})));
        Modelon.ThermoFluid.Electrical.SimpleGenerator simpleGenerator(
            efficiency=0.983)
                     annotation (Placement(transformation(extent={{40,-50},{60,
                  -30}})));
      equation
        connect(gasCombinedCycleProcessJKL.shaftGas, powerSensor.flange_a)
          annotation (Line(points={{-20,9.6},{-12,9.6},{-12,40},{8,40}}, color=
                {0,0,0}));
        connect(gasCombinedCycleProcessJKL.shaftSteam, powerSensor1.flange_a)
          annotation (Line(points={{-20,-9.6},{-12,-9.6},{-12,-40},{8,-40}},
              color={0,0,0}));
        connect(powerSensor.power, generatedPowerGas) annotation (Line(points={
                {10,29},{10,20},{80,20},{80,60},{106,60}}, color={0,0,127}));
        connect(powerSensor1.power, generatedPowerSteam) annotation (Line(
              points={{10,-51},{10,-60},{104,-60},{104,-60}}, color={0,0,127}));
        connect(gasCombinedCycleProcessJKL.fueFlowIn, fuelFlowRate)
          annotation (Line(points={{-51.68,0},{-104,0}}, color={0,0,127}));
        connect(powerSensor.flange_b, generator.flange_a)
          annotation (Line(points={{28,40},{40,40}}, color={0,0,0}));
        connect(powerSensor1.flange_b, simpleGenerator.flange_a)
          annotation (Line(points={{28,-40},{42,-40}}, color={0,0,0}));
        annotation (
          Diagram(coordinateSystem(
              preserveAspectRatio=false)),
          Icon(coordinateSystem(
              preserveAspectRatio=false),
                                 graphics={Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={170,170,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-98,98},{100,-98}},
                lineColor={170,170,255},
                textString="P")}),
          Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",   info="<html>
<p>This model contains the  gas turbine, generator and network models. The network model is based on swing equation.
</html>"));
      end Plant;
    end CHP;

    model ConstantPrimerMover "Constant Generic Prime Mover"
      Modelica.Mechanics.Rotational.Components.Inertia inertia(
        J=J,
        phi(start=0, fixed=true),
        w(start=2*Modelica.Constants.pi*freq, fixed=true))
        annotation (Placement(transformation(extent={{8,-10},{28,10}})));
      Modelica.Mechanics.Rotational.Sources.ConstantTorque constantTorque(
          useSupport=false, tau_constant=Pm/(2*Modelica.Constants.pi*freq/Np))
        annotation (Placement(transformation(extent={{-32,-10},{-12,10}})));
      Modelica.Mechanics.Rotational.Interfaces.Flange_b primeMoverFlange
        "Flange of shaft"
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));
      parameter Modelica.Units.SI.Inertia J=1e3 "Moment of inertia";
      parameter Modelica.Units.SI.Frequency freq=50 "Network frequency";
      parameter Real Np=1 "Number of generator field poles";
      parameter Modelica.Units.SI.Power Pm=3e6 "Mechanical power";
    equation
      connect(constantTorque.flange,inertia. flange_a)
        annotation (Line(points={{-12,0},{8,0}},     color={0,0,0}));
      connect(inertia.flange_b, primeMoverFlange)
        annotation (Line(points={{28,0},{100,0}}, color={0,0,0}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Bitmap(extent={{-98,-98},{96,96}}, fileName="modelica://FinalProject/turbine.png")}),
                                                                     Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end ConstantPrimerMover;

    model VariablePrimerMover "Variable Generic Prime Mover"
      Modelica.Mechanics.Rotational.Components.Inertia inertia(
        J=J)
        annotation (Placement(transformation(extent={{8,-10},{28,10}})));
      Modelica.Mechanics.Rotational.Interfaces.Flange_b primeMoverFlange
        "Flange of shaft"
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));
      parameter Modelica.Units.SI.Inertia J=1e3 "Moment of inertia";
      parameter Modelica.Units.SI.Frequency freq=50 "Network frequency";
      parameter Real Np=2 "Number of generator field poles";
      Modelica.Mechanics.Rotational.Sources.Torque primeMover(useSupport=false)
        annotation (Placement(transformation(extent={{-22,-10},{-2,10}},
              rotation=0)));
      Modelica.Blocks.Math.Gain gain(k=1/(2*Modelica.Constants.pi*freq/Np))
        annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
      Modelica.Blocks.Interfaces.RealInput Pm "Mechanical Power"
        annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
    equation
      connect(inertia.flange_b, primeMoverFlange)
        annotation (Line(points={{28,0},{100,0}}, color={0,0,0}));
      connect(gain.y, primeMover.tau)
        annotation (Line(points={{-33,0},{-24,0}}, color={0,0,127}));
      connect(primeMover.flange, inertia.flange_a)
        annotation (Line(points={{-2,0},{8,0}}, color={0,0,0}));
      connect(gain.u,Pm)
        annotation (Line(points={{-56,0},{-100,0}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Bitmap(extent={{-98,-98},{96,96}}, fileName="modelica://FinalProject/turbine.png")}),
                                                                     Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end VariablePrimerMover;

  end PrimeMovers;

  package Examples
    extends Modelica.Icons.ExamplesPackage;

    package OtherGenerators
      extends Modelica.Icons.ExamplesPackage;

      model TestPowerSystemsLibGen1
        "Test Model for Generator+Electrical models from PowerSystems Library + Generic Prime Mover"
        extends Modelica.Icons.Example;

        PrimeMovers.ConstantPrimerMover primerMover
          annotation (Placement(transformation(extent={{-38,-10},{-18,10}})));
        inner PowerSystems.System system
          annotation (Placement(transformation(extent={{-86,68},{-66,88}})));
        PowerSystems.Generic.Generator generator annotation (Placement(
            transformation(extent={{-10,-10},{10,10}})));
        PowerSystems.Generic.FixedLoad fixedLoad(P=3e6, phi=0.3)
          annotation (Placement(transformation(extent={{30,-10},{50,10}})));
      equation
      connect(generator.terminal,fixedLoad. terminal)
        annotation (Line(points={{10,0},{30,0}},  color={0,120,120}));
        connect(primerMover.primeMoverFlange, generator.flange)
          annotation (Line(points={{-18,0},{-10,0}}, color={0,0,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false), graphics={
              Text(
                extent={{-50,14},{-36,24}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{-44,16},{-12,-16}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Text(
                extent={{-16,14},{-2,24}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Rectangle(
                extent={{-12,16},{14,-16}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Line(
                points={{38,40},{20,40},{20,-40},{38,-40}},
                color={255,128,0},
                thickness=0.5,
                pattern=LinePattern.Dash,
                arrow={Arrow.Filled,Arrow.Filled}),
              Text(
                extent={{26,36},{86,28}},
                textColor={255,128,0},
                textString="Electrical Network"),
              Text(
                extent={{-66,-54},{66,-60}},
                textColor={0,140,72},
                textString=
                    "* To be replaced by detailed model of Turbine Dynamics."),
              Text(
                extent={{-66,-60},{66,-66}},
                textColor={217,67,180},
                textString="* To be replaced by detailed model of Generator.")}));
      end TestPowerSystemsLibGen1;

      model TestPowerSystemsLibGen2
        "Test Model for Generator+Electrical models from PowerSystems Library + Generic Prime Mover"
        extends Modelica.Icons.Example;

        PrimeMovers.ConstantPrimerMover primerMover(Np=0.5)
          annotation (Placement(transformation(extent={{-38,8},{-18,28}})));
        PowerSystems.Generic.Generator generator
          annotation (Placement(transformation(extent={{-10,8},{10,28}})));
        inner PowerSystems.System system
        annotation (Placement(transformation(extent={{-86,66},{-66,86}})));
        PowerSystems.Generic.FixedLoad fixedLoad(P=3e6, phi=0.3)
          annotation (Placement(transformation(extent={{68,-12},{88,8}})));
        PowerSystems.Generic.Impedance impedance
          annotation (Placement(transformation(extent={{28,8},{48,28}})));
        PowerSystems.Generic.Impedance impedance1
          annotation (Placement(transformation(extent={{28,-32},{48,-12}})));
        PrimeMovers.ConstantPrimerMover primerMover1
          annotation (Placement(transformation(extent={{-38,-32},{-18,-12}})));
        PowerSystems.Generic.Generator generator1(synchronous=false)
                                                 annotation (Placement(
            transformation(extent={{-10,-32},{10,-12}})));
      equation
        connect(primerMover.primeMoverFlange, generator.flange)
          annotation (Line(points={{-18,18},{-10,18}}, color={0,0,0}));
        connect(impedance.terminal_n,fixedLoad. terminal)
          annotation (Line(points={{48,18},{58,18},{58,-2},{68,-2}},   color={0,120,120}));
        connect(impedance1.terminal_n,fixedLoad. terminal)
          annotation (Line(points={{48,-22},{58,-22},{58,-2},{68,-2}},   color={0,120,120}));
        connect(primerMover1.primeMoverFlange, generator1.flange)
          annotation (Line(points={{-18,-22},{-10,-22}}, color={0,0,0}));
        connect(generator.terminal, impedance.terminal_p)
          annotation (Line(points={{10,18},{28,18}}, color={0,120,120}));
        connect(generator1.terminal, impedance1.terminal_p)
          annotation (Line(points={{10,-22},{28,-22}}, color={0,120,120}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false), graphics={
              Text(
                extent={{-50,32},{-36,42}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{-44,34},{-12,2}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Text(
                extent={{-16,32},{-2,42}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Rectangle(
                extent={{-12,34},{14,2}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Line(
                points={{38,40},{20,40},{20,-40},{38,-40}},
                color={255,128,0},
                thickness=0.5,
                pattern=LinePattern.Dash,
                arrow={Arrow.Filled,Arrow.Filled}),
              Text(
                extent={{26,36},{86,28}},
                textColor={255,128,0},
                textString="Electrical Network"),
              Text(
                extent={{-66,-54},{66,-60}},
                textColor={0,140,72},
                textString=
                    "* To be replaced by detailed model of Turbine Dynamics."),
              Text(
                extent={{-66,-60},{66,-66}},
                textColor={217,67,180},
                textString="* To be replaced by detailed model of Generator."),
              Text(
                extent={{-50,-8},{-36,2}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{-44,-6},{-12,-38}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Text(
                extent={{-16,-8},{-2,2}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Rectangle(
                extent={{-12,-6},{14,-38}},
                lineColor={217,67,180},
                lineThickness=0.5)}),
          experiment(__Dymola_Algorithm="Dassl"));
      end TestPowerSystemsLibGen2;

      model TestThermoPowerLibGen1
        "Test Model for Generator+Electrical models from ThermoPower Library + Generic Prime Mover"
        extends Modelica.Icons.Example;

        parameter Modelica.Units.SI.Power Pnom=10e6 "Nominal generator power";

        PrimeMovers.VariablePrimerMover variablePrimerMover(J=0)
          annotation (Placement(transformation(extent={{-38,-10},{-18,10}})));
        inner ThermoPower.System
                     system(initOpt=ThermoPower.Choices.Init.Options.steadyState)
          annotation (Placement(transformation(extent={{66,66},{86,86}})));
        ThermoPower.Electrical.Generator
                             generator(
          Pnom=Pnom,
          Ta=10,
          Np=2,
          referenceGenerator=true) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},rotation=0)));
        ThermoPower.Electrical.Load
                        load(Pnom=Pnom) annotation (Placement(transformation(extent={{22,-20},
                  {42,0}},          rotation=0)));
        Modelica.Blocks.Sources.Step MechPower(
          height=-Pnom,
          offset=Pnom,
          startTime=1) annotation (Placement(transformation(extent={{-76,-10},{-56,10}},
                rotation=0)));
      equation
        connect(generator.port,load. port) annotation (Line(
            points={{8.6,0},{32,0},{32,-1.4}},
            thickness=0.5,
            color={0,0,0}));
        connect(generator.shaft, variablePrimerMover.primeMoverFlange)
          annotation (Line(points={{-8.6,0},{-18,0}}, color={0,0,0}));
        connect(MechPower.y, variablePrimerMover.Pm)
          annotation (Line(points={{-55,0},{-38,0}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-44,16},{-12,-16}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Rectangle(
                extent={{-12,16},{14,-16}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Line(
                points={{40,40},{22,40},{22,-40},{40,-40}},
                color={255,128,0},
                thickness=0.5,
                pattern=LinePattern.Dash,
                arrow={Arrow.Filled,Arrow.Filled}),
              Text(
                extent={{28,36},{88,28}},
                textColor={255,128,0},
                textString="Electrical Network"),
              Text(
                extent={{-82,-58},{50,-64}},
                textColor={0,140,72},
                textString="* To be replaced by detailed model of Turbine Dynamics."),
              Text(
                extent={{-82,-64},{50,-70}},
                textColor={217,67,180},
                textString="* To be replaced by detailed model of Generator."),
              Text(
                extent={{-50,14},{-36,24}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Text(
                extent={{-16,14},{-2,24}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Text(
                extent={{-56,72},{62,56}},
                textColor={0,0,0},
                textString="ThermoPower",
                textStyle={TextStyle.Bold})}),
          experiment(StopTime=2, __Dymola_Algorithm="Dassl"));
      end TestThermoPowerLibGen1;

      model TestThermoPowerLibGen2
        "Test Model for Generator+Electrical models from ThermoPower Library + Generic Prime Mover"
        extends Modelica.Icons.Example;

        parameter Modelica.Units.SI.Power Pnom=10e6 "Nominal generator power";

        PrimeMovers.VariablePrimerMover variablePrimerMover(J=0)
          annotation (Placement(transformation(extent={{-38,-10},{-18,10}})));
        inner ThermoPower.System
                     system(initOpt=ThermoPower.Choices.Init.Options.steadyState)
          annotation (Placement(transformation(extent={{66,66},{86,86}})));
        Modelica.Blocks.Sources.Step MechPower(
          height=-0.1*Pnom,
          offset=Pnom,
          startTime=1) annotation (Placement(transformation(extent={{-76,-10},{-56,10}},
                rotation=0)));
        ThermoPower.Electrical.Generator
                             generator(
          Ta=10,
          Np=2,
          Pnom=Pnom,
          initOpt=ThermoPower.Choices.Init.Options.steadyState)       annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},rotation=0)));
        ThermoPower.Electrical.Load
                        load(Pnom=Pnom, usePowerInput=true)   annotation (Placement(transformation(extent={{44,-38},
                  {24,-18}},          rotation=0)));
        ThermoPower.Electrical.Grid
                        grid(Pgrid=1e9)
                                       annotation (Placement(transformation(extent={{56,-10},
                  {76,10}},           rotation=0)));
        Modelica.Blocks.Sources.Step LocalLoad(
          height=0.1*Pnom,
          offset=Pnom,
          startTime=3) annotation (Placement(transformation(extent={{78,-38},{58,-18}},
                rotation=0)));
      equation
        connect(MechPower.y, variablePrimerMover.Pm)
          annotation (Line(points={{-55,0},{-38,0}}, color={0,0,127}));
        connect(load.port,generator. port) annotation (Line(
            points={{34,-19.4},{34,0},{8.6,0}},
            thickness=0.5,
            color={0,0,0}));
        connect(LocalLoad.y,load. referencePower)
          annotation (Line(points={{57,-28},{37.3,-28}}, color={0,0,127}));
        connect(generator.port,grid. port) annotation (Line(
            points={{8.6,0},{57.4,0}},
            color={0,0,255},
            thickness=0.5));
        connect(generator.shaft, variablePrimerMover.primeMoverFlange)
          annotation (Line(points={{-8.6,0},{-18,0}}, color={0,0,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false), graphics={
              Text(
                extent={{-50,14},{-36,24}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{-44,16},{-12,-16}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Text(
                extent={{-16,14},{-2,24}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Rectangle(
                extent={{-12,16},{14,-16}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Line(
                points={{42,36},{24,36},{24,-44},{42,-44}},
                color={255,128,0},
                thickness=0.5,
                pattern=LinePattern.Dash,
                arrow={Arrow.Filled,Arrow.Filled}),
              Text(
                extent={{30,32},{90,24}},
                textColor={255,128,0},
                textString="Electrical Network"),
              Text(
                extent={{-66,-56},{66,-62}},
                textColor={0,140,72},
                textString="* To be replaced by detailed model of Turbine Dynamics."),
              Text(
                extent={{-66,-62},{66,-68}},
                textColor={217,67,180},
                textString="* To be replaced by detailed model of Generator."),
              Text(
                extent={{-56,72},{62,56}},
                textColor={0,0,0},
                textString="ThermoPower",
                textStyle={TextStyle.Bold})}),
          experiment(
            StopTime=5,
            Interval=0.005,
            Tolerance=1e-06,
            __Dymola_Algorithm="Dassl"));
      end TestThermoPowerLibGen2;

      model TestThermoPowerLibGen3
        "Test Model for Generator+Electrical models from ThermoPower Library + Generic Prime Mover"
        extends Modelica.Icons.Example;

        parameter Modelica.Units.SI.Power Pnom=10e6 "Nominal generator power";

        PrimeMovers.VariablePrimerMover variablePrimerMover(J=0)
          annotation (Placement(transformation(extent={{-38,-10},{-18,10}})));
        inner ThermoPower.System
                     system(initOpt=ThermoPower.Choices.Init.Options.steadyState)
          annotation (Placement(transformation(extent={{66,66},{86,86}})));
        ThermoPower.Electrical.Generator
                             generator(
          Ta=10,
          Np=2,
          Pnom=Pnom,
          initOpt=ThermoPower.Choices.Init.Options.steadyState)       annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},rotation=0)));
        Modelica.Blocks.Sources.Step MechPower(
          height=-0.2*Pnom,
          offset=Pnom,
          startTime=1) annotation (Placement(transformation(extent={{-70,-10},{-50,10}},
                rotation=0)));
        ThermoPower.Electrical.Load
                        load(Pnom=Pnom, usePowerInput=true)   annotation (Placement(transformation(extent={{46,-42},
                  {26,-22}},          rotation=0)));
        Modelica.Blocks.Sources.Step LocalLoad(
          height=-0.1*Pnom,
          offset=Pnom,
          startTime=3) annotation (Placement(transformation(extent={{92,-54},{72,-34}},
                rotation=0)));
        ThermoPower.Electrical.Grid
                        grid(Pgrid=1e9)
                                       annotation (Placement(transformation(extent={{72,-28},
                  {92,-8}},           rotation=0)));
        ThermoPower.Electrical.Breaker
                           Breaker1(Pnom=Pnom)   annotation (Placement(transformation(extent={{46,-28},
                  {66,-8}},          rotation=0)));
        Modelica.Blocks.Sources.BooleanStep BreakerCommand(startTime=5, startValue=true)
                             annotation (Placement(transformation(extent={{86,-4},{66,
                  16}},     rotation=0)));
      equation
        connect(generator.shaft, variablePrimerMover.primeMoverFlange)
          annotation (Line(points={{-8.6,0},{-18,0}}, color={0,0,0}));
        connect(variablePrimerMover.Pm, MechPower.y)
          annotation (Line(points={{-38,0},{-49,0}}, color={0,0,127}));
        connect(LocalLoad.y,load. referencePower)
          annotation (Line(points={{71,-44},{58,-44},{58,-32},{39.3,-32}},
                                                         color={0,0,127}));
        connect(Breaker1.port_b,grid. port) annotation (Line(
            points={{64.6,-18},{73.4,-18}},
            thickness=0.5,
            color={0,0,0}));
        connect(BreakerCommand.y,Breaker1. closed)
          annotation (Line(points={{65,6},{56,6},{56,-10}}, color={255,0,255}));
        connect(generator.port,Breaker1. port_a) annotation (Line(
            points={{8.6,2.22045e-16},{36,2.22045e-16},{36,-18},{47.4,-18}},
            thickness=0.5,
            color={0,0,0}));
        connect(load.port, generator.port) annotation (Line(
            points={{36,-23.4},{36,0},{8.6,0}},
            thickness=0.5,
            color={0,0,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false), graphics={
              Text(
                extent={{-50,14},{-36,24}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{-44,16},{-12,-16}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Text(
                extent={{-16,14},{-2,24}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Rectangle(
                extent={{-12,16},{14,-16}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Line(
                points={{42,36},{24,36},{24,-44},{42,-44}},
                color={255,128,0},
                thickness=0.5,
                pattern=LinePattern.Dash,
                arrow={Arrow.Filled,Arrow.Filled}),
              Text(
                extent={{30,32},{90,24}},
                textColor={255,128,0},
                textString="Electrical Network"),
              Text(
                extent={{-66,-56},{66,-62}},
                textColor={0,140,72},
                textString="* To be replaced by detailed model of Turbine Dynamics."),
              Text(
                extent={{-66,-62},{66,-68}},
                textColor={217,67,180},
                textString="* To be replaced by detailed model of Generator."),
              Text(
                extent={{-56,72},{62,56}},
                textColor={0,0,0},
                textString="ThermoPower",
                textStyle={TextStyle.Bold})}),
          experiment(
            StopTime=10,
            Interval=0.002,
            Tolerance=1e-06,
            __Dymola_Algorithm="Dassl"));
      end TestThermoPowerLibGen3;

      model TestThermoPowerLibGen4
        "Test Model for Generator+Electrical models from ThermoPower Library + Generic Prime Mover"
        extends Modelica.Icons.Example;

        parameter Modelica.Units.SI.Power Pnom=10e6 "Nominal generator power";

        PrimeMovers.VariablePrimerMover variablePrimerMover(J=0, Np=4)
          annotation (Placement(transformation(extent={{-38,-10},{-18,10}})));
        inner ThermoPower.System
                     system(initOpt=ThermoPower.Choices.Init.Options.steadyState)
          annotation (Placement(transformation(extent={{66,66},{86,86}})));
        ThermoPower.Electrical.Generator
                             generator(
          Ta=10,
          Np=4,
          Pnom=Pnom,
          D=0.01,
          initOpt=ThermoPower.Choices.Init.Options.steadyState)       annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},rotation=0)));
        Modelica.Blocks.Sources.Step MechPower(
          height=0,
          offset=Pnom,
          startTime=2) annotation (Placement(transformation(extent={{-72,-10},{
                  -52,10}},
                        rotation=0)));
        ThermoPower.Electrical.Load
                        load(Pnom=Pnom, usePowerInput=true)   annotation (Placement(transformation(extent={{48,-30},
                  {28,-10}},          rotation=0)));
        ThermoPower.Electrical.Grid
                        grid(Pgrid=1e9) annotation (Placement(transformation(extent={{72,-10},
                  {92,10}},           rotation=0)));
        ThermoPower.Electrical.TransmissionLine
                                    transmissionLine(Pnom=Pnom, Xpu=0.1)
          annotation (Placement(transformation(extent={{46,-10},{66,10}})));
        Modelica.Blocks.Sources.Step LocalLoad(
          height=-0.2*Pnom,
          offset=0.2*Pnom,
          startTime=1) annotation (Placement(transformation(extent={{80,-40},{
                  60,-20}},
                rotation=0)));
      equation
        connect(generator.shaft, variablePrimerMover.primeMoverFlange)
          annotation (Line(points={{-8.6,0},{-18,0}}, color={0,0,0}));
        connect(variablePrimerMover.Pm, MechPower.y)
          annotation (Line(points={{-38,0},{-51,0}}, color={0,0,127}));
        connect(load.port, generator.port) annotation (Line(
            points={{38,-11.4},{38,0},{8.6,0}},
            thickness=0.5,
            color={0,0,0}));
        connect(grid.port,transmissionLine. port_b) annotation (Line(
            points={{73.4,0},{66,0}},
            color={0,0,255},
            thickness=0.5));
        connect(generator.port,transmissionLine. port_a) annotation (
            Line(
            points={{8.6,0},{46,0}},
            color={0,0,255},
            thickness=0.5));
        connect(LocalLoad.y,load. referencePower)
          annotation (Line(points={{59,-30},{54,-30},{54,-20},{41.3,-20}},
                                                         color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false), graphics={
              Text(
                extent={{-50,14},{-36,24}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{-44,16},{-12,-16}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Text(
                extent={{-16,14},{-2,24}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Rectangle(
                extent={{-12,16},{14,-16}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Line(
                points={{42,36},{24,36},{24,-44},{42,-44}},
                color={255,128,0},
                thickness=0.5,
                pattern=LinePattern.Dash,
                arrow={Arrow.Filled,Arrow.Filled}),
              Text(
                extent={{30,32},{90,24}},
                textColor={255,128,0},
                textString="Electrical Network"),
              Text(
                extent={{-66,-56},{66,-62}},
                textColor={0,140,72},
                textString="* To be replaced by detailed model of Turbine Dynamics."),
              Text(
                extent={{-66,-62},{66,-68}},
                textColor={217,67,180},
                textString="* To be replaced by detailed model of Generator."),
              Text(
                extent={{-56,72},{62,56}},
                textColor={0,0,0},
                textString="ThermoPower",
                textStyle={TextStyle.Bold})}),
          experiment(
            StopTime=10,
            Interval=0.002,
            Tolerance=1e-06,
            __Dymola_Algorithm="Dassl"));
      end TestThermoPowerLibGen4;

      model TestThermoPowerLibGen5
        "Test Model for Generator+Electrical models from ThermoPower Library + Generic Prime Mover"
        extends Modelica.Icons.Example;

        parameter Modelica.Units.SI.Power Pa = 30e6 "Nominal Power for Generator A";
        parameter Modelica.Units.SI.Power Pb = 10e6 "Nominal Power for Generator B";
        parameter Modelica.Units.SI.Power P = Pa + Pb;

        PrimeMovers.VariablePrimerMover variablePrimerMover(J=0, Np=2)
          annotation (Placement(transformation(extent={{-74,-10},{-54,10}})));
        ThermoPower.Electrical.Generator gen_a(
          Ta=10,
          Np=2,
          Pnom=Pa,
          referenceGenerator=true,
          initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (Placement(
              transformation(extent={{-48,-10},{-28,10}}, rotation=0)));
        Modelica.Blocks.Sources.Step MechPowerA(
          height=0,
          offset=Pa,
          startTime=20) annotation (Placement(transformation(extent={{-46,-44},{-66,-24}},
                rotation=0)));
        ThermoPower.Electrical.Load
                        load(Pnom=40e6, usePowerInput=true)   annotation (Placement(transformation(extent={{-8,-34},
                  {-28,-14}},         rotation=0)));
        ThermoPower.Electrical.TransmissionLine
                                    transmissionLine(Pnom=P, Xpu=0.3)
          annotation (Placement(transformation(extent={{-14,-10},{6,10}})));
        Modelica.Blocks.Sources.Step LocalLoad(
          height=0.01*P,
          offset=P,
          startTime=2) annotation (Placement(transformation(extent={{22,-44},{2,-24}},
                rotation=0)));
        ThermoPower.Electrical.Generator
                             gen_b(
          Ta=10,
          Np=2,
          Pnom=Pb,
          initOpt=ThermoPower.Choices.Init.Options.steadyState)
          annotation (Placement(
              transformation(
              origin={30,0},
              extent={{-10,-10},{10,10}},
              rotation=180)));
        PrimeMovers.VariablePrimerMover variablePrimerMover1(J=0, Np=2)
          annotation (Placement(transformation(extent={{66,-10},{46,10}})));
        Modelica.Blocks.Sources.Step MechPowerB(
          height=0,
          offset=Pb,
          startTime=20)
                       annotation (Placement(transformation(extent={{52,-46},{72,-26}},
                        rotation=0)));
        inner ThermoPower.System
                     system(initOpt=ThermoPower.Choices.Init.Options.steadyState)
          annotation (Placement(transformation(extent={{68,66},{88,86}})));
      equation
        connect(gen_a.shaft, variablePrimerMover.primeMoverFlange)
          annotation (Line(points={{-46.6,0},{-54,0}}, color={0,0,0}));
        connect(variablePrimerMover.Pm, MechPowerA.y) annotation (Line(points={{-74,0},
                {-80,0},{-80,-34},{-67,-34}}, color={0,0,127}));
        connect(load.port, gen_a.port) annotation (Line(
            points={{-18,-15.4},{-18,0},{-29.4,0}},
            thickness=0.5,
            color={0,0,0}));
        connect(gen_a.port, transmissionLine.port_a) annotation (Line(
            points={{-29.4,0},{-14,0}},
            color={0,0,255},
            thickness=0.5));
        connect(LocalLoad.y,load. referencePower)
          annotation (Line(points={{1,-34},{-4,-34},{-4,-24},{-14.7,-24}},
                                                         color={0,0,127}));
        connect(load.port, transmissionLine.port_a) annotation (Line(
            points={{-18,-15.4},{-18,0},{-14,0}},
            color={0,0,255},
            thickness=0.5));
        connect(gen_b.port, transmissionLine.port_b) annotation (Line(
            points={{21.4,1.11022e-15},{6,0}},
            color={0,0,255},
            thickness=0.5));
        connect(variablePrimerMover1.primeMoverFlange, gen_b.shaft)
          annotation (Line(points={{46,0},{38.6,-1.11022e-15}}, color={0,0,0}));
        connect(MechPowerB.y, variablePrimerMover1.Pm) annotation (Line(points={{73,-36},
                {82,-36},{82,0},{66,0}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false), graphics={
              Text(
                extent={{-66,-56},{66,-62}},
                textColor={0,140,72},
                textString="* To be replaced by detailed model of Turbine Dynamics."),
              Text(
                extent={{-66,-62},{66,-68}},
                textColor={217,67,180},
                textString="* To be replaced by detailed model of Generator."),
              Text(
                extent={{-56,72},{62,56}},
                textColor={0,0,0},
                textString="ThermoPower",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{-84,16},{-52,-16}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Text(
                extent={{-90,14},{-76,24}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Text(
                extent={{-56,14},{-42,24}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Rectangle(
                extent={{-52,16},{-26,-16}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Text(
                extent={{12,14},{26,24}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Rectangle(
                extent={{16,16},{42,-16}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Text(
                extent={{36,14},{50,24}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{42,16},{74,-16}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Line(
                points={{-22,-44},{-22,12},{12,12},{12,-18},{32,-18},{32,-48}},
                color={244,125,35},
                pattern=LinePattern.Dash,
                thickness=0.5,
                arrow={Arrow.Filled,Arrow.Filled}),
              Text(
                extent={{-30,4},{30,-4}},
                textColor={255,128,0},
                textString="Electrical Network",
                origin={8,30},
                rotation=30)}),
          experiment(
            StopTime=15,
            Tolerance=1e-07,
            __Dymola_Algorithm="Dassl"));
      end TestThermoPowerLibGen5;

      model TestThermoPowerLibGen6
        extends Modelica.Icons.Example;
        parameter Modelica.Units.SI.Power Pa=30e6;
        parameter Modelica.Units.SI.Power Pb=10e6;
        parameter Modelica.Units.SI.Power P=Pa + Pb;
        parameter Integer Np = 2;
        parameter Modelica.Units.SI.AngularVelocity omega=2*pi*system.fnom/Np;
        constant Modelica.Units.SI.PerUnit pi=Modelica.Constants.pi;
        ThermoPower.Electrical.Generator gen_a(
          Ta=10,
          Np=2,
          Pnom=Pa,
          D=0.02,
          referenceGenerator=true,
          initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
            Placement(transformation(extent={{-46,-10},{-26,10}}, rotation=0)));
        ThermoPower.Electrical.Generator gen_b(
          Ta=10,
          Np=2,
          Pnom=Pb,
          D=0.02,
          initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (
            Placement(transformation(
              origin={32,0},
              extent={{-10,-10},{10,10}},
              rotation=180)));
        Modelica.Blocks.Continuous.FirstOrder PmechGen_a(
          T=0.2,
          initType=Modelica.Blocks.Types.Init.SteadyState,
          y_start=Pa) annotation (Placement(transformation(extent={{-106,-8},{
                  -90,8}}, rotation=0)));
        ThermoPower.Electrical.TransmissionLine transmissionLine(Pnom=P, Xpu=
              0.3)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        ThermoPower.Electrical.Load load(Pnom=40e6, usePowerInput=true)
          annotation (Placement(transformation(extent={{-8,-38},{-28,-18}})));
        Modelica.Blocks.Sources.Step Load(
          offset=P,
          startTime=2,
          height=-0.1*P)
                        annotation (Placement(transformation(extent={{20,-46},{
                  4,-30}},
                rotation=0)));
        inner ThermoPower.System system(initOpt=ThermoPower.Choices.Init.Options.steadyState)
          annotation (Placement(transformation(extent={{-150,72},{-130,92}})));
        ThermoPower.Electrical.FrequencySensor frequency_a annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-18,32})));
        ThermoPower.Electrical.FrequencySensor frequency_b annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={16,32})));
        Controls.ThermoPower.PrimaryController controllerA(Pnom=Pa)
          annotation (Placement(transformation(extent={{-134,8},{-118,-8}})));
        Modelica.Blocks.Sources.Constant refPa(k=Pa)
          annotation (Placement(transformation(extent={{-126,-38},{-144,-20}})));
        Modelica.Blocks.Sources.Constant refPb(k=Pb)
          annotation (Placement(transformation(extent={{120,-34},{138,-16}})));
        Controls.ThermoPower.PrimaryController controllerB(Pnom=Pb)
          annotation (Placement(transformation(extent={{130,8},{114,-8}})));
        Modelica.Blocks.Continuous.FirstOrder PmechGen_b(
          T=0.2,
          initType=Modelica.Blocks.Types.Init.SteadyState,
          y_start=Pb) annotation (Placement(transformation(extent={{102,-8},{86,
                  8}}, rotation=0)));
        PrimeMovers.VariablePrimerMover variablePrimerMover(J=0, Np=2)
          annotation (Placement(transformation(extent={{-76,-10},{-56,10}})));
        PrimeMovers.VariablePrimerMover variablePrimerMover1(J=0, Np=2)
          annotation (Placement(transformation(extent={{72,-10},{52,10}})));
      equation

        connect(gen_a.port, transmissionLine.port_a) annotation (Line(
            points={{-27.4,0},{-10,0}},
            color={0,0,255},
            thickness=0.5));
        connect(gen_b.port, transmissionLine.port_b) annotation (Line(
            points={{23.4,0},{10,0}},
            color={0,0,255},
            thickness=0.5));
        connect(gen_a.port, load.port) annotation (Line(
            points={{-27.4,0},{-18,0},{-18,-19.4}},
            color={0,0,255},
            thickness=0.5));
        connect(Load.y, load.referencePower)
          annotation (Line(points={{3.2,-38},{-4,-38},{-4,-28},{-14.7,-28}},
                                                             color={0,0,127}));
        connect(gen_a.port, frequency_a.port) annotation (Line(
            points={{-27.4,0},{-18,0},{-18,22}},
            color={0,0,255},
            thickness=0.5));
        connect(gen_b.port, frequency_b.port) annotation (Line(
            points={{23.4,0},{16,0},{16,22}},
            color={0,0,255},
            thickness=0.5));
        connect(frequency_a.f, controllerA.frequency) annotation (Line(points={{-18,
                42.2},{-18,50},{-140,50},{-140,3.2},{-134,3.2}},
                                                             color={0,0,127}));
        connect(refPa.y, controllerA.powerSetPoint) annotation (Line(points={{-144.9,
                -29},{-148,-29},{-148,-3.2},{-134,-3.2}},
                                                       color={0,0,127}));
        connect(controllerB.powerSetPoint, refPb.y) annotation (Line(points={{130,
                -3.2},{148,-3.2},{148,-25},{138.9,-25}},
                                                    color={0,0,127}));
        connect(frequency_b.f, controllerB.frequency) annotation (Line(points={{16,42.2},
                {16,50},{140,50},{140,3.2},{130,3.2}},   color={0,0,127}));
        connect(variablePrimerMover.primeMoverFlange, gen_a.shaft)
          annotation (Line(points={{-56,0},{-44.6,0}}, color={0,0,0}));
        connect(gen_b.shaft, variablePrimerMover1.primeMoverFlange) annotation (
           Line(points={{40.6,-1.11022e-15},{52,0}}, color={0,0,0}));
        connect(PmechGen_a.y, variablePrimerMover.Pm)
          annotation (Line(points={{-89.2,0},{-76,0}}, color={0,0,127}));
        connect(PmechGen_b.y, variablePrimerMover1.Pm)
          annotation (Line(points={{85.2,0},{72,0}}, color={0,0,127}));
        connect(controllerB.P, PmechGen_b.u)
          annotation (Line(points={{114,0},{103.6,0}}, color={0,0,127}));
        connect(controllerA.P, PmechGen_a.u)
          annotation (Line(points={{-118,0},{-107.6,0}}, color={0,0,127}));
        annotation (
          experiment(StopTime=40, Tolerance=1e-06),
          Documentation(info="<html>
<p>This model represents a simple islanded power system with primary frequency control open loop. Generator A has 30 MW nominal power, generator B has 10 MW.</p>
<p>The model starts at steady state, with both generators at full load supplying a 40 MW load connected at the A side of the transmission line.</p>
<p>At time = 2s, the load is decreased by 10%. The primary frequency controllers kick in and stabilize the frequency, with an error of 5% of 10% of 50 Hz, 
i.e. 0.25 Hz. Electro-mechanical oscillations are also triggered, but eventually die out thanks to the generator damping effect.</p>
</html>",   revisions="<html>
<ul>
<li><i>21 Feb 2019</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco Casella</a>:<br>
       Rewrote from scratch.</li></ul>
</html>
"),       __Dymola_experimentSetupOutput(equdistant=false),
          Diagram(coordinateSystem(extent={{-160,-100},{160,100}}), graphics={
              Text(
                extent={{-56,72},{62,56}},
                textColor={0,0,0},
                textString="ThermoPower",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{-82,14},{-50,-18}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Text(
                extent={{-86,12},{-72,22}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Text(
                extent={{-48,12},{-34,22}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Rectangle(
                extent={{-50,14},{-24,-18}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Rectangle(
                extent={{20,14},{46,-18}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Text(
                extent={{24,12},{38,22}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Text(
                extent={{40,12},{54,22}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{46,14},{78,-18}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Text(
                extent={{-64,-60},{68,-66}},
                textColor={0,140,72},
                textString="* To be replaced by detailed model of Turbine Dynamics."),
              Text(
                extent={{-64,-66},{68,-72}},
                textColor={217,67,180},
                textString="* To be replaced by detailed model of Generator."),
              Line(
                points={{-28,-50},{-28,-22},{-22,-22},{-22,54},{18,54},{18,-22},
                    {24,-22},{24,-52}},
                color={244,125,35},
                thickness=0.5,
                pattern=LinePattern.Dash,
                arrow={Arrow.Filled,Arrow.Filled}),
              Text(
                extent={{24,-38},{84,-46}},
                textColor={255,128,0},
                textString="Electrical Network")}),
          Icon(coordinateSystem(extent={{-100,-100},{100,100}})));
      end TestThermoPowerLibGen6;

      model TestThermoPowerLibGen7
        extends Modelica.Icons.Example;
        parameter Modelica.Units.SI.Power Pa=30e6;
        parameter Modelica.Units.SI.Power Pb=10e6;
        parameter Modelica.Units.SI.Power P=Pa + Pb;
        ThermoPower.Electrical.Generator gen_a(
          Ta=10,
          Np=2,
          Pnom=Pa,
          D=0.02,
          referenceGenerator=true,
          initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (Placement(
              transformation(extent={{-50,-10},{-30,10}},  rotation=0)));
        ThermoPower.Electrical.Generator gen_b(
          Ta=10,
          Np=2,
          Pnom=Pb,
          D=0.02,
          initOpt=ThermoPower.Choices.Init.Options.steadyState) annotation (Placement(
              transformation(
              origin={40,0},
              extent={{-10,-10},{10,10}},
              rotation=180)));
        Modelica.Blocks.Continuous.FirstOrder PmechGen_a(
          T=0.2,
          initType=Modelica.Blocks.Types.Init.SteadyState,
          y_start=Pa) annotation (Placement(transformation(extent={{-110,-8},{
                  -94,8}}, rotation=0)));
        ThermoPower.Electrical.TransmissionLine transmissionLine(Pnom=P, Xpu=0.3)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        ThermoPower.Electrical.Load load(Pnom=40e6, usePowerInput=true)
          annotation (Placement(transformation(extent={{-12,-38},{-32,-18}})));
        Modelica.Blocks.Sources.Step Load(
          offset=P,
          startTime=2,
          height=-0.1*P)
                        annotation (Placement(transformation(extent={{22,-54},{
                  4,-36}},
                rotation=0)));
        inner ThermoPower.System system(initOpt=ThermoPower.Choices.Init.Options.steadyState)
          annotation (Placement(transformation(extent={{-192,70},{-172,90}})));
        ThermoPower.Electrical.FrequencySensor frequency_a annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-22,32})));
        ThermoPower.Electrical.FrequencySensor frequency_b annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={18,32})));
        Controls.ThermoPower.PrimaryController                  controllerA(Pnom=Pa)
          annotation (Placement(transformation(extent={{-136,8},{-120,-8}})));
        Modelica.Blocks.Sources.Constant refPa(k=Pa)
          annotation (Placement(transformation(extent={{-166,-36},{-182,-20}})));
        Modelica.Blocks.Sources.Constant refPb(k=Pb)
          annotation (Placement(transformation(extent={{132,-30},{146,-16}})));
        Controls.ThermoPower.PrimaryController                  controllerB(Pnom=Pb)
          annotation (Placement(transformation(extent={{140,8},{124,-8}})));
        Modelica.Blocks.Continuous.FirstOrder PmechGen_b(
          T=0.2,
          initType=Modelica.Blocks.Types.Init.SteadyState,
          y_start=Pb) annotation (Placement(transformation(extent={{114,-8},{98,
                  8}}, rotation=0)));
        ThermoPower.Test.ElectricalComponents.SecondaryController secondaryController(Pnom=40e6,
            Ts=300) annotation (Placement(transformation(extent={{-58,60},{-78,
                  80}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-166,4},{-150,-12}})));
        PrimeMovers.VariablePrimerMover variablePrimerMover(J=0, Np=2)
          annotation (Placement(transformation(extent={{-78,-10},{-58,10}})));
        PrimeMovers.VariablePrimerMover variablePrimerMover1(J=0, Np=2)
          annotation (Placement(transformation(extent={{80,-10},{60,10}})));
      equation

        connect(gen_a.port, transmissionLine.port_a) annotation (Line(
            points={{-31.4,0},{-10,0}},
            color={0,0,255},
            thickness=0.5));
        connect(gen_b.port, transmissionLine.port_b) annotation (Line(
            points={{31.4,1.11022e-15},{10,0}},
            color={0,0,255},
            thickness=0.5));
        connect(gen_a.port, load.port) annotation (Line(
            points={{-31.4,0},{-22,0},{-22,-19.4}},
            color={0,0,255},
            thickness=0.5));
        connect(Load.y, load.referencePower)
          annotation (Line(points={{3.1,-45},{-6,-45},{-6,-28},{-18.7,-28}},
                                                             color={0,0,127}));
        connect(gen_a.port, frequency_a.port) annotation (Line(
            points={{-31.4,0},{-22,0},{-22,22}},
            color={0,0,255},
            thickness=0.5));
        connect(gen_b.port, frequency_b.port) annotation (Line(
            points={{31.4,1.11022e-15},{18,1.11022e-15},{18,22}},
            color={0,0,255},
            thickness=0.5));
        connect(frequency_a.f, controllerA.frequency) annotation (Line(points={{-22,
                42.2},{-22,50},{-148,50},{-148,3.2},{-136,3.2}},
                                                             color={0,0,127}));
        connect(controllerB.powerSetPoint, refPb.y) annotation (Line(points={{140,
                -3.2},{152,-3.2},{152,-23},{146.7,-23}},
                                                    color={0,0,127}));
        connect(frequency_b.f, controllerB.frequency) annotation (Line(points={{18,42.2},
                {18,50},{148,50},{148,3.2},{140,3.2}},   color={0,0,127}));
        connect(frequency_a.f, secondaryController.frequency)
          annotation (Line(points={{-22,42.2},{-22,70},{-58,70}}, color={0,0,127}));
        connect(controllerA.powerSetPoint, feedback.y) annotation (Line(points={{-136,
                -3.2},{-136,-4},{-150.8,-4}},                 color={0,0,127}));
        connect(feedback.u1, refPa.y)
          annotation (Line(points={{-164.4,-4},{-190,-4},{-190,-28},{-182.8,-28}},
                                                               color={0,0,127}));
        connect(secondaryController.powerOffset, feedback.u2) annotation (Line(points={{-78,70},
                {-158,70},{-158,2.4}},            color={0,0,127}));
        connect(gen_a.shaft, variablePrimerMover.primeMoverFlange)
          annotation (Line(points={{-48.6,0},{-58,0}}, color={0,0,0}));
        connect(PmechGen_a.y, variablePrimerMover.Pm)
          annotation (Line(points={{-93.2,0},{-78,0}}, color={0,0,127}));
        connect(gen_b.shaft, variablePrimerMover1.primeMoverFlange) annotation (
           Line(points={{48.6,-1.11022e-15},{60,0}}, color={0,0,0}));
        connect(PmechGen_b.y, variablePrimerMover1.Pm)
          annotation (Line(points={{97.2,0},{80,0}}, color={0,0,127}));
        connect(controllerA.P, PmechGen_a.u)
          annotation (Line(points={{-120,0},{-111.6,0}}, color={0,0,127}));
        connect(controllerB.P, PmechGen_b.u)
          annotation (Line(points={{124,0},{115.6,0}}, color={0,0,127}));
        annotation (
          experiment(StopTime=300, Tolerance=1e-06),
          Documentation(info="<html>
<p>This model represents a simple islanded power system with primary and secondary frequency control open loop. Generator A has 30 MW nominal power, generator B has 10 MW.</p>
<p>The model starts at steady state, with both generators at full load supplying a 40 MW load connected at the A side of the transmission line.</p>
<p>At time = 2s, the load is decreased by 10%. The primary frequency controllers kick in and quickly stabilize the frequency, with an error of about 5% of 10% of 50 Hz, 
i.e. 0.25 Hz. Electro-mechanical oscillations are also triggered, but eventually die out thanks to the generator damping effect. </p>
<p>Subsequently, the secondary frequency controller brings back the system to 50 Hz in 300 s. Only generator A participates to the secondary frequency control action.</p>
</html>",   revisions="<html>
<ul>
<li><i>22 Feb 2019</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco Casella</a>:<br>
       Rewrote from scratch.</li></ul>
</html>
"),       __Dymola_experimentSetupOutput(equdistant=false),
          Diagram(coordinateSystem(extent={{-200,-100},{160,100}}), graphics={
              Rectangle(
                extent={{-16,16},{16,-16}},
                lineColor={0,140,72},
                lineThickness=0.5,
                origin={-70,0},
                rotation=0),
              Text(
                extent={{-7,-5},{7,5}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold},
                origin={-83,19},
                rotation=0),
              Text(
                extent={{-7,-5},{7,5}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*",
                origin={-45,19},
                rotation=0),
              Rectangle(
                extent={{-13,16},{13,-16}},
                lineColor={217,67,180},
                lineThickness=0.5,
                origin={-41,0},
                rotation=0),
              Text(
                extent={{32,14},{46,24}},
                textColor={217,67,180},
                textStyle={TextStyle.Bold},
                textString="*"),
              Text(
                extent={{48,14},{62,24}},
                textColor={0,140,72},
                textString="*",
                textStyle={TextStyle.Bold}),
              Rectangle(
                extent={{28,16},{54,-16}},
                lineColor={217,67,180},
                lineThickness=0.5),
              Rectangle(
                extent={{54,16},{86,-16}},
                lineColor={0,140,72},
                lineThickness=0.5),
              Text(
                extent={{-76,96},{42,80}},
                textColor={0,0,0},
                textString="ThermoPower",
                textStyle={TextStyle.Bold}),
              Text(
                extent={{-68,-68},{64,-74}},
                textColor={0,140,72},
                textString="* To be replaced by detailed model of Turbine Dynamics."),
              Text(
                extent={{-68,-74},{64,-80}},
                textColor={217,67,180},
                textString="* To be replaced by detailed model of Generator.")}),
          Icon(coordinateSystem(extent={{-100,-100},{100,100}})));
      end TestThermoPowerLibGen7;
    end OtherGenerators;

    package Systems "Examples of Power Systems with or without detailed turbogenerators"
      extends Modelica.Icons.ExamplesPackage;

      package BasicSMIB
        extends Modelica.Icons.ExamplesPackage;

        model SMIB01
          "SMIB - Single Machine Infinite Base system with one load"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=2,
            t2=2.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b = 100e6, fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=100000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_01 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=100000000) annotation (Placement(transformation(rotation=0, extent={{-90,
                    -10},{-70,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.PF_00040)
            annotation (Placement(transformation(extent={{-80,44},{-60,64}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
          annotation (experiment(StopTime=10, __Dymola_Algorithm="Dassl"));
        end SMIB01;

        package PF_Data

          record Power_Flow
            extends Modelica.Icons.Record;

            replaceable record PowerFlow =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Power_Flow_Template
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Power_Flow_Template
              annotation (choicesAllMatching);

            PowerFlow powerflow;

          end Power_Flow;

          record Power_Flow_Template
            extends Modelica.Icons.Record;

          end Power_Flow_Template;

          package Bus_Data

            partial record Bus_Template

              parameter OpenIPSL.Types.PerUnit V1 "(pu) B01"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A1 "B01"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V2 "(pu) B02"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A2 "B02"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V3 "(pu) B03"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A3 "B03"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V4 "(pu) B04"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A4 "B04"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V5 "(pu) B05"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A5 "B05"
                annotation (Dialog(enable=false));

            end Bus_Template;

            record PF_Bus_00030
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0603045,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9952749,
                A3=0.0000145,
                V4=0.9976375,
                A4=0.0000072,
                V5=0.9976375,
                A5=0.0000072);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00030;

            record PF_Bus_00035
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0704317,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9943635,
                A3=0.0000157,
                V4=0.9971817,
                A4=0.0000078,
                V5=0.9971817,
                A5=0.0000078);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00035;

            record PF_Bus_00040
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0805866,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9934158,
                A3=0.0000166,
                V4=0.9967079,
                A4=0.0000083,
                V5=0.9967079,
                A5=0.0000083);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00040;

            record PF_Bus_00045
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0907716,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9924313,
                A3=0.0000171,
                V4=0.9962157,
                A4=0.0000085,
                V5=0.9962157,
                A5=0.0000085);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00045;

            record PF_Bus_00050
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.1009890,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9914097,
                A3=0.0000173,
                V4=0.9957048,
                A4=0.0000086,
                V5=0.9957048,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00050;
          end Bus_Data;

          package Loads_Data

            partial record Loads_Template

              parameter OpenIPSL.Types.ActivePower PL1 "constantLoad"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QL1 "constantLoad"
                annotation (Dialog(enable=false));

            end Loads_Template;

            record PF_Loads_00030
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(30.0000000), QL1=1e06*(6.0000000));

              // Load: '3_1'

            end PF_Loads_00030;

            record PF_Loads_00035
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(35.0000000), QL1=1e06*(7.0000000));

              // Load: '3_1'

            end PF_Loads_00035;

            record PF_Loads_00040
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(40.0000000), QL1=1e06*(8.0000000));

              // Load: '3_1'

            end PF_Loads_00040;

            record PF_Loads_00045
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(45.0000000), QL1=1e06*(9.0000000));

              // Load: '3_1'

            end PF_Loads_00045;

            record PF_Loads_00050
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(50.0000000), QL1=1e06*(10.0000000));

              // Load: '3_1'

            end PF_Loads_00050;
          end Loads_Data;

          package Trafos_Data

            record PF_Trafos_00030
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00030;

            record PF_Trafos_00035
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00035;

            record PF_Trafos_00040
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00040;

            record PF_Trafos_00045
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00045;

            record PF_Trafos_00050
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00050;

            partial record Trafos_Template

            end Trafos_Template;
          end Trafos_Data;

          package Machines_Data

            partial record Machines_Template

              parameter OpenIPSL.Types.ActivePower PG1 "generatorA"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG1 "generatorA"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.ActivePower PG2 "generatorB"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG2 "generatorB"
                annotation (Dialog(enable=false));

            end Machines_Template;

            record PF_Machines_00030
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(30.0000000),
                QG1=1e06*(3.1167032),
                PG2=1e06*(0.0092088),
                QG2=1e06*(4.7250506));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00030;

            record PF_Machines_00035
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(35.0000000),
                QG1=1e06*(3.8753610),
                PG2=1e06*(0.0125590),
                QG2=1e06*(5.6364455));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00035;

            record PF_Machines_00040
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(40.0000000),
                QG1=1e06*(4.7034426),
                PG2=1e06*(0.0164380),
                QG2=1e06*(6.5841535));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00040;

            record PF_Machines_00045
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(45.0000000),
                QG1=1e06*(5.6014511),
                PG2=1e06*(0.0208502),
                QG2=1e06*(7.5685853));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00045;

            record PF_Machines_00050
              extends
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(50.0000000),
                QG1=1e06*(6.5699358),
                PG2=1e06*(0.0258006),
                QG2=1e06*(8.5901842));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00050;
          end Machines_Data;

          record PF_00030
            extends
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.PF_Bus_00030
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.PF_Loads_00030
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.PF_Machines_00030
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.PF_Trafos_00030
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00030;

          record PF_00035
            extends
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.PF_Bus_00035
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.PF_Loads_00035
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.PF_Machines_00035
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.PF_Trafos_00035
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00035;

          record PF_00040
            extends
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.PF_Bus_00040
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.PF_Loads_00040
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.PF_Machines_00040
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.PF_Trafos_00040
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00040;

          record PF_00045
            extends
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.PF_Bus_00045
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.PF_Loads_00045
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.PF_Machines_00045
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.PF_Trafos_00045
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00045;

          record PF_00050
            extends
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.PF_Bus_00050
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.PF_Loads_00050
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.PF_Machines_00050
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.PF_Trafos_00050
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00050;
        end PF_Data;
      end BasicSMIB;

      package BasicSMIB2
        extends Modelica.Icons.ExamplesPackage;

        model SMIB02 "Partial SMIB Model with PF Record and Load"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Buses.Bus B01(displayPF=true)
            annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
          OpenIPSL.Electrical.Buses.Bus B03(displayPF=true)
            annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
          OpenIPSL.Electrical.Buses.Bus B04(displayPF=true)
            annotation (Placement(transformation(extent={{10,-30},{30,-10}})));
          OpenIPSL.Electrical.Buses.Bus B02(displayPF=true)
            annotation (Placement(transformation(extent={{50,-10},{70,10}})));
          OpenIPSL.Electrical.Branches.PwLine line_01(
            R=0.0010,
            X=0.2000,
            G=0.0000,
            B=0.0000)
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          OpenIPSL.Electrical.Branches.PwLine line_02(
            R=0.0100,
            X=0.2000,
            G=0.0000,
            B=0.0000) annotation (Placement(transformation(extent={{10,10},{30,30}})));
          OpenIPSL.Electrical.Branches.PwLine line_03(
            R=0.0005,
            X=0.1000,
            G=0.0000,
            B=0.0000) annotation (Placement(transformation(extent={{-8,-30},{12,-10}})));
          OpenIPSL.Electrical.Branches.PwLine line_04(
            R=0.0005,
            X=0.1000,
            G=0.0000,
            B=0.0000) annotation (Placement(transformation(extent={{28,-30},{48,-10}})));
          inner OpenIPSL.Electrical.SystemBase SysData
            annotation (Placement(transformation(extent={{-88,72},{-48,90}})));
          BaseModels.GeneratingUnits.Generator_02 infiniteBus(
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true,
            M_b=100000000)
            annotation (Placement(transformation(extent={{94,-10},{74,10}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            R=0.01,
            X=0.1,
            t1=1,
            t2=1.1) annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={36,-46})));
          BaseModels.GeneratingUnits.Generator_01 generator1(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=100000000)
            annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-40,-50},{-20,-30}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.PF_00045)
            annotation (Placement(transformation(extent={{-88,28},{-68,48}})));
        equation
          connect(line_01.p, B01.p)
            annotation (Line(points={{-53,0},{-60,0}}, color={0,0,255}));
          connect(line_01.n, B03.p)
            annotation (Line(points={{-35,0},{-30,0}}, color={0,0,255}));
          connect(line_02.p, B03.p) annotation (Line(points={{11,20},{-16,20},{-16,0},{
                  -30,0}}, color={0,0,255}));
          connect(line_02.n, B02.p)
            annotation (Line(points={{29,20},{48,20},{48,0},{60,0}}, color={0,0,255}));
          connect(line_03.p, B03.p) annotation (Line(points={{-7,-20},{-16,-20},{-16,0},
                  {-30,0}}, color={0,0,255}));
          connect(line_03.n, B04.p)
            annotation (Line(points={{11,-20},{20,-20}},color={0,0,255}));
          connect(line_04.p, B04.p)
            annotation (Line(points={{29,-20},{20,-20}}, color={0,0,255}));
          connect(line_04.n, B02.p) annotation (Line(points={{47,-20},{48,-20},{48,0},{
                  60,0}}, color={0,0,255}));
          connect(infiniteBus.pwPin, B02.p)
            annotation (Line(points={{73,0},{60,0}}, color={0,0,255}));
          connect(pwFault.p, B04.p) annotation (Line(points={{36,-39},{36,-28},{24,
                  -28},{24,-20},{20,-20}}, color={0,0,255}));
          connect(generator1.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-60,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-30,-30},{-30,0}}, color={0,0,255}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false), graphics={
                                                        Text(
                  extent={{-92,68},{94,48}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fontSize=15,
                  textStyle={TextStyle.Bold},
                  textString="Single-machine infinite bus model*")}));
        end SMIB02;

        package PF_Data

          record Power_Flow
            extends Modelica.Icons.Record;

            replaceable record PowerFlow =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template
              annotation (choicesAllMatching);

            PowerFlow powerflow;

          end Power_Flow;

          record Power_Flow_Template
            extends Modelica.Icons.Record;

          end Power_Flow_Template;

          package Bus_Data

            partial record Bus_Template

              parameter OpenIPSL.Types.PerUnit V1 "(pu) B01"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A1 "B01"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V2 "(pu) B02"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A2 "B02"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V3 "(pu) B03"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A3 "B03"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V4 "(pu) B04"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A4 "B04"
                annotation (Dialog(enable=false));

            end Bus_Template;

            record PF_Bus_00035
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0704317,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9943635,
                A3=0.0000157,
                V4=0.9971817,
                A4=0.0000078);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00035;

            record PF_Bus_00036
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0724604,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9941769,
                A3=0.0000159,
                V4=0.9970884,
                A4=0.0000079);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00036;

            record PF_Bus_00037
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0744902,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9939888,
                A3=0.0000161,
                V4=0.9969944,
                A4=0.0000080);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00037;

            record PF_Bus_00038
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0765212,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9937992,
                A3=0.0000163,
                V4=0.9968996,
                A4=0.0000081);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00038;

            record PF_Bus_00039
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0785533,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9936082,
                A3=0.0000164,
                V4=0.9968041,
                A4=0.0000082);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00039;

            record PF_Bus_00040
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0805866,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9934158,
                A3=0.0000166,
                V4=0.9967079,
                A4=0.0000083);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00040;

            record PF_Bus_00041
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0826211,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9932218,
                A3=0.0000167,
                V4=0.9966109,
                A4=0.0000083);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00041;

            record PF_Bus_00042
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0846569,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9930264,
                A3=0.0000168,
                V4=0.9965132,
                A4=0.0000084);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00042;

            record PF_Bus_00043
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0866938,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9928295,
                A3=0.0000170,
                V4=0.9964148,
                A4=0.0000084);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00043;

            record PF_Bus_00044
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0887321,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9926312,
                A3=0.0000170,
                V4=0.9963156,
                A4=0.0000085);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00044;

            record PF_Bus_00045
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0907716,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9924313,
                A3=0.0000171,
                V4=0.9962157,
                A4=0.0000085);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00045;

            record PF_Bus_00046
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0928124,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9922300,
                A3=0.0000172,
                V4=0.9961150,
                A4=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00046;

            record PF_Bus_00047
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0948545,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9920271,
                A3=0.0000172,
                V4=0.9960136,
                A4=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00047;

            record PF_Bus_00048
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0968980,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9918228,
                A3=0.0000173,
                V4=0.9959114,
                A4=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00048;

            record PF_Bus_00049
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0989428,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9916170,
                A3=0.0000173,
                V4=0.9958085,
                A4=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00049;

            record PF_Bus_00050
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.1009890,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9914097,
                A3=0.0000173,
                V4=0.9957048,
                A4=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

            end PF_Bus_00050;
          end Bus_Data;

          package Loads_Data

            partial record Loads_Template

              parameter OpenIPSL.Types.ActivePower PL1 "load"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QL1 "load"
                annotation (Dialog(enable=false));

            end Loads_Template;

            record PF_Loads_00035
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(35.0000000), QL1=1e06*(7.0000000));

              // Load: '3_1'

            end PF_Loads_00035;

            record PF_Loads_00036
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(36.0000000), QL1=1e06*(7.2000000));

              // Load: '3_1'

            end PF_Loads_00036;

            record PF_Loads_00037
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(37.0000000), QL1=1e06*(7.4000000));

              // Load: '3_1'

            end PF_Loads_00037;

            record PF_Loads_00038
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(38.0000000), QL1=1e06*(7.6000000));

              // Load: '3_1'

            end PF_Loads_00038;

            record PF_Loads_00039
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(39.0000000), QL1=1e06*(7.8000000));

              // Load: '3_1'

            end PF_Loads_00039;

            record PF_Loads_00040
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(40.0000000), QL1=1e06*(8.0000000));

              // Load: '3_1'

            end PF_Loads_00040;

            record PF_Loads_00041
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(41.0000000), QL1=1e06*(8.2000000));

              // Load: '3_1'

            end PF_Loads_00041;

            record PF_Loads_00042
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(42.0000000), QL1=1e06*(8.4000000));

              // Load: '3_1'

            end PF_Loads_00042;

            record PF_Loads_00043
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(43.0000000), QL1=1e06*(8.6000000));

              // Load: '3_1'

            end PF_Loads_00043;

            record PF_Loads_00044
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(44.0000000), QL1=1e06*(8.8000000));

              // Load: '3_1'

            end PF_Loads_00044;

            record PF_Loads_00045
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(45.0000000), QL1=1e06*(9.0000000));

              // Load: '3_1'

            end PF_Loads_00045;

            record PF_Loads_00046
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(46.0000000), QL1=1e06*(9.2000000));

              // Load: '3_1'

            end PF_Loads_00046;

            record PF_Loads_00047
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(47.0000000), QL1=1e06*(9.4000000));

              // Load: '3_1'

            end PF_Loads_00047;

            record PF_Loads_00048
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(48.0000000), QL1=1e06*(9.6000000));

              // Load: '3_1'

            end PF_Loads_00048;

            record PF_Loads_00049
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(49.0000000), QL1=1e06*(9.8000000));

              // Load: '3_1'

            end PF_Loads_00049;

            record PF_Loads_00050
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(50.0000000), QL1=1e06*(10.0000000));

              // Load: '3_1'

            end PF_Loads_00050;
          end Loads_Data;

          package Trafos_Data

            record PF_Trafos_00035
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00035;

            record PF_Trafos_00036
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00036;

            record PF_Trafos_00037
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00037;

            record PF_Trafos_00038
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00038;

            record PF_Trafos_00039
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00039;

            record PF_Trafos_00040
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00040;

            record PF_Trafos_00041
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00041;

            record PF_Trafos_00042
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00042;

            record PF_Trafos_00043
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00043;

            record PF_Trafos_00044
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00044;

            record PF_Trafos_00045
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00045;

            record PF_Trafos_00046
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00046;

            record PF_Trafos_00047
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00047;

            record PF_Trafos_00048
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00048;

            record PF_Trafos_00049
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00049;

            record PF_Trafos_00050
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00050;

            partial record Trafos_Template

            end Trafos_Template;
          end Trafos_Data;

          package Machines_Data

            partial record Machines_Template

              parameter OpenIPSL.Types.ActivePower PG1 "generator1"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG1 "generator1"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.ActivePower PG2 "infiniteBus"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG2 "infiniteBus"
                annotation (Dialog(enable=false));

            end Machines_Template;

            record PF_Machines_00035
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(35.0000000),
                QG1=1e06*(3.8753610),
                PG2=1e06*(0.0125590),
                QG2=1e06*(5.6364455));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00035;

            record PF_Machines_00036
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(36.0000000),
                QG1=1e06*(4.0354080),
                PG2=1e06*(0.0132924),
                QG2=1e06*(5.8230694));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00036;

            record PF_Machines_00037
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(37.0000000),
                QG1=1e06*(4.1982356),
                PG2=1e06*(0.0140469),
                QG2=1e06*(6.0111488));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00037;

            record PF_Machines_00038
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(38.0000000),
                QG1=1e06*(4.3638479),
                PG2=1e06*(0.0148227),
                QG2=1e06*(6.2006871));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00038;

            record PF_Machines_00039
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(39.0000000),
                QG1=1e06*(4.5322489),
                PG2=1e06*(0.0156197),
                QG2=1e06*(6.3916876));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00039;

            record PF_Machines_00040
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(40.0000000),
                QG1=1e06*(4.7034426),
                PG2=1e06*(0.0164380),
                QG2=1e06*(6.5841535));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00040;

            record PF_Machines_00041
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(41.0000000),
                QG1=1e06*(4.8774333),
                PG2=1e06*(0.0172776),
                QG2=1e06*(6.7780882));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00041;

            record PF_Machines_00042
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(42.0000000),
                QG1=1e06*(5.0542251),
                PG2=1e06*(0.0181386),
                QG2=1e06*(6.9734952));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00042;

            record PF_Machines_00043
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(43.0000000),
                QG1=1e06*(5.2338224),
                PG2=1e06*(0.0190210),
                QG2=1e06*(7.1703781));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00043;

            record PF_Machines_00044
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(44.0000000),
                QG1=1e06*(5.4162296),
                PG2=1e06*(0.0199248),
                QG2=1e06*(7.3687402));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00044;

            record PF_Machines_00045
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(45.0000000),
                QG1=1e06*(5.6014511),
                PG2=1e06*(0.0208502),
                QG2=1e06*(7.5685853));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00045;

            record PF_Machines_00046
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(46.0000000),
                QG1=1e06*(5.7894915),
                PG2=1e06*(0.0217970),
                QG2=1e06*(7.7699170));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00046;

            record PF_Machines_00047
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(47.0000000),
                QG1=1e06*(5.9803555),
                PG2=1e06*(0.0227655),
                QG2=1e06*(7.9727389));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00047;

            record PF_Machines_00048
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(48.0000000),
                QG1=1e06*(6.1740476),
                PG2=1e06*(0.0237555),
                QG2=1e06*(8.1770549));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00048;

            record PF_Machines_00049
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(49.0000000),
                QG1=1e06*(6.3705728),
                PG2=1e06*(0.0247672),
                QG2=1e06*(8.3828687));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00049;

            record PF_Machines_00050
              extends
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(50.0000000),
                QG1=1e06*(6.5699358),
                PG2=1e06*(0.0258006),
                QG2=1e06*(8.5901842));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00050;
          end Machines_Data;

          record PF_00035
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00035
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00035
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00035
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00035
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00035;

          record PF_00036
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00036
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00036
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00036
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00036
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00036;

          record PF_00037
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00037
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00037
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00037
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00037
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00037;

          record PF_00038
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00038
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00038
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00038
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00038
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00038;

          record PF_00039
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00039
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00039
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00039
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00039
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00039;

          record PF_00040
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00040
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00040
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00040
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00040
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00040;

          record PF_00041
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00041
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00041
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00041
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00041
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00041;

          record PF_00042
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00042
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00042
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00042
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00042
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00042;

          record PF_00043
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00043
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00043
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00043
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00043
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00043;

          record PF_00044
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00044
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00044
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00044
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00044
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00044;

          record PF_00045
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00045
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00045
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00045
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00045
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00045;

          record PF_00046
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00046
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00046
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00046
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00046
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00046;

          record PF_00047
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00047
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00047
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00047
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00047
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00047;

          record PF_00048
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00048
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00048
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00048
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00048
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00048;

          record PF_00049
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00049
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00049
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00049
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00049
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00049;

          record PF_00050
            extends
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.PF_Bus_00050
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.PF_Loads_00050
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.PF_Machines_00050
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.PF_Trafos_00050
              constrainedby
              FinalProject.Examples.Systems.BasicSMIB2.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00050;
        end PF_Data;
      end BasicSMIB2;

      package GasA "Examples with Original ThermoPower Gas Turbine Example"
        extends Modelica.Icons.ExamplesPackage;

        model GasA1 "Network model with ThermoPower-based GT"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=42,
            t2=42.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b = 100e6, fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=10000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_01 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=10000000)  annotation (Placement(transformation(rotation=0, extent={{-90,
                    -10},{-70,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.GasA.PF_Data.PF_00006)
            annotation (Placement(transformation(extent={{-86,38},{-66,58}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
          annotation (experiment(StopTime=10, __Dymola_Algorithm="Dassl"), Diagram(
                graphics={Text(
                  extent={{-60,68},{58,56}},
                  textColor={0,0,0},
                  textString="Without Prime Mover",
                  textStyle={TextStyle.Bold})}));
        end GasA1;

        model GasA2 "Network model with ThermoPower-based GT"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=120,
            t2=122.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b = 100e6, fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=10000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_03 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=10000000)  annotation (Placement(transformation(rotation=0, extent={{-90,
                    -10},{-70,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.GasA.PF_Data.PF_00006)
            annotation (Placement(transformation(extent={{-86,38},{-66,58}})));
          Modelica.Blocks.Sources.Step step(height=1e6, startTime=30) annotation (Placement(transformation(extent={{-48,-36},
                    {-62,-22}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
          connect(step.y, generatorA.DeltaPM) annotation (Line(points={{-62.7,-29},{-80,
                  -29},{-80,-10}}, color={0,0,127}));
          annotation (experiment(StopTime=100, __Dymola_Algorithm="Dassl"),Diagram(
                graphics={Text(
                  extent={{-60,68},{58,56}},
                  textColor={0,0,0},
                  textStyle={TextStyle.Bold},
                  textString="With Prime Mover")}));
        end GasA2;

        package PF_Data

          record Power_Flow
            extends Modelica.Icons.Record;

            replaceable record PowerFlow =
                FinalProject.Examples.Systems.GasA.PF_Data.Power_Flow_Template
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Power_Flow_Template
                                                                     annotation (
                choicesAllMatching);

            PowerFlow powerflow;

          end Power_Flow;

          record Power_Flow_Template
            extends Modelica.Icons.Record;

          end Power_Flow_Template;

          package Bus_Data

            partial record Bus_Template

              parameter OpenIPSL.Types.PerUnit V1 "(pu) B01"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A1 "B01"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V2 "(pu) B02"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A2 "B02"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V3 "(pu) B03"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A3 "B03"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V4 "(pu) B04"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A4 "B04"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V5 "(pu) B05"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A5 "B05"
                annotation (Dialog(enable=false));

            end Bus_Template;

            record PF_Bus_00004
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0080044,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9994424,
                A3=0.0000026,
                V4=0.9997212,
                A4=0.0000013,
                V5=0.9997212,
                A5=0.0000013);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00004;

            record PF_Bus_00005
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0100069,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9992995,
                A3=0.0000033,
                V4=0.9996498,
                A4=0.0000016,
                V5=0.9996498,
                A5=0.0000016);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00005;

            record PF_Bus_00006
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0120100,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9991553,
                A3=0.0000039,
                V4=0.9995776,
                A4=0.0000019,
                V5=0.9995776,
                A5=0.0000019);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00006;

            record PF_Bus_00007
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0140137,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9990097,
                A3=0.0000045,
                V4=0.9995048,
                A4=0.0000022,
                V5=0.9995048,
                A5=0.0000022);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00007;

            record PF_Bus_00008
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0160180,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9988627,
                A3=0.0000050,
                V4=0.9994313,
                A4=0.0000025,
                V5=0.9994313,
                A5=0.0000025);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00008;
          end Bus_Data;

          package Loads_Data

            partial record Loads_Template

              parameter OpenIPSL.Types.ActivePower PL1 "load"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QL1 "load"
                annotation (Dialog(enable=false));

            end Loads_Template;

            record PF_Loads_00004
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(4.0000000), QL1=1e06*(0.8000000));

              // Load: '3_1'

            end PF_Loads_00004;

            record PF_Loads_00005
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(5.0000000), QL1=1e06*(1.0000000));

              // Load: '3_1'

            end PF_Loads_00005;

            record PF_Loads_00006
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(6.0000000), QL1=1e06*(1.2000000));

              // Load: '3_1'

            end PF_Loads_00006;

            record PF_Loads_00007
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(7.0000000), QL1=1e06*(1.4000000));

              // Load: '3_1'

            end PF_Loads_00007;

            record PF_Loads_00008
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(8.0000000), QL1=1e06*(1.6000000));

              // Load: '3_1'

            end PF_Loads_00008;
          end Loads_Data;

          package Trafos_Data

            record PF_Trafos_00004
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00004;

            record PF_Trafos_00005
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00005;

            record PF_Trafos_00006
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00006;

            record PF_Trafos_00007
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00007;

            record PF_Trafos_00008
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00008;

            partial record Trafos_Template

            end Trafos_Template;
          end Trafos_Data;

          package Machines_Data

            partial record Machines_Template

              parameter OpenIPSL.Types.ActivePower PG1 "generatorA"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG1 "generatorA"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.ActivePower PG2 "generatorB"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG2 "generatorB"
                annotation (Dialog(enable=false));

            end Machines_Template;

            record PF_Machines_00004
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(4.0000000),
                QG1=1e06*(0.2748197),
                PG2=1e06*(0.0001623),
                QG2=1e06*(0.5576423));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00004;

            record PF_Machines_00005
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(5.0000000),
                QG1=1e06*(0.3502462),
                PG2=1e06*(0.0002537),
                QG2=1e06*(0.7004898));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00005;

            record PF_Machines_00006
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(6.0000000),
                QG1=1e06*(0.4283648),
                PG2=1e06*(0.0003654),
                QG2=1e06*(0.8447157));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00006;

            record PF_Machines_00007
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(7.0000000),
                QG1=1e06*(0.5091775),
                PG2=1e06*(0.0004975),
                QG2=1e06*(0.9903218));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00007;

            record PF_Machines_00008
              extends
                FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(8.0000000),
                QG1=1e06*(0.5926861),
                PG2=1e06*(0.0006500),
                QG2=1e06*(1.1373099));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00008;
          end Machines_Data;

          record PF_00004
            extends
              FinalProject.Examples.Systems.GasA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.PF_Bus_00004
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.PF_Loads_00004
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.PF_Machines_00004
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.PF_Trafos_00004
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00004;

          record PF_00005
            extends
              FinalProject.Examples.Systems.GasA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.PF_Bus_00005
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.PF_Loads_00005
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.PF_Machines_00005
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.PF_Trafos_00005
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00005;

          record PF_00006
            extends
              FinalProject.Examples.Systems.GasA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.PF_Bus_00006
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.PF_Loads_00006
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.PF_Machines_00006
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.PF_Trafos_00006
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00006;

          record PF_00007
            extends
              FinalProject.Examples.Systems.GasA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.PF_Bus_00007
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.PF_Loads_00007
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.PF_Machines_00007
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.PF_Trafos_00007
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00007;

          record PF_00008
            extends
              FinalProject.Examples.Systems.GasA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.PF_Bus_00008
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.PF_Loads_00008
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.PF_Machines_00008
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.PF_Trafos_00008
              constrainedby
              FinalProject.Examples.Systems.GasA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00008;
        end PF_Data;

      end GasA;

      package GasB "Examples with Original ThermalPower Gas Turbine Example"
        extends Modelica.Icons.ExamplesPackage;

        model GasB1 "Network model with ThermalPower-based GT"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=52,
            t2=52.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=1000000000,
                                                                    fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=500000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_01 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=500000000) annotation (Placement(transformation(rotation=0, extent={{-90,
                    -10},{-70,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.GasB.PF_Data.PF_00380)
            annotation (Placement(transformation(extent={{-82,40},{-62,60}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
          annotation (experiment(StopTime=10, __Dymola_Algorithm="Dassl"));
        end GasB1;

        model GasB2 "Network model with ThermalPower-based GT"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=2002,
            t2=2002.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=1000000000,
                                                                    fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=500000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_05 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=500000000) annotation (Placement(transformation(rotation=0, extent={{-80,-10},
                    {-60,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.GasB.PF_Data.PF_00350)
            annotation (Placement(transformation(extent={{-82,40},{-62,60}})));
          Modelica.Blocks.Sources.Step step(height=50e6, startTime=500)
                                                                      annotation (Placement(transformation(extent={{-40,-34},
                    {-54,-20}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-59,0},{-44,0}}, color={0,0,255}));
          connect(step.y, generatorA.DeltaPM) annotation (Line(points={{-54.7,
                  -27},{-70,-27},{-70,-10}}, color={0,0,127}));
          annotation (experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
        end GasB2;

        model GasB3 "Network model with ThermalPower-based GT"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=2002,
            t2=2002.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=1000000000,
                                                                    fn = 50)
            annotation (Placement(transformation(extent={{-50,36},{-10,56}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=500000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_10 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=500000000) annotation (Placement(transformation(rotation=0, extent={{-80,-10},
                    {-60,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.GasB.PF_Data.PF_00350)
            annotation (Placement(transformation(extent={{-82,40},{-62,60}})));
          Modelica.Blocks.Sources.Step step(height=50e6, startTime=500)
                                                                      annotation (Placement(transformation(extent={{-40,-34},
                    {-54,-20}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-59,0},{-44,0}}, color={0,0,255}));
          connect(step.y, generatorA.DeltaPM) annotation (Line(points={{-54.7,
                  -27},{-70,-27},{-70,-10}}, color={0,0,127}));
          annotation (experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
        end GasB3;

        model GasB4 "Network model with ThermalPower-based GT"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=2002,
            t2=2002.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=1000000000,
                                                                    fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=500000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_08 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=500000000) annotation (Placement(transformation(rotation=0, extent={{-80,-10},
                    {-60,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.GasB.PF_Data.PF_00350)
            annotation (Placement(transformation(extent={{-82,40},{-62,60}})));
          Modelica.Blocks.Sources.Step step(height=50e6, startTime=500)
                                                                      annotation (Placement(transformation(extent={{-40,-34},
                    {-54,-20}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-59,0},{-44,0}}, color={0,0,255}));
          connect(step.y, generatorA.DeltaPM) annotation (Line(points={{-54.7,
                  -27},{-70,-27},{-70,-10}}, color={0,0,127}));
          annotation (experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
        end GasB4;

        package PF_Data

          record Power_Flow
            extends Modelica.Icons.Record;

            replaceable record PowerFlow =
                FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template
              annotation (choicesAllMatching);

            PowerFlow powerflow;

          end Power_Flow;

          record Power_Flow_Template
            extends Modelica.Icons.Record;

          end Power_Flow_Template;

          package Bus_Data

            partial record Bus_Template

              parameter OpenIPSL.Types.PerUnit V1 "(pu) B01"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A1 "B01"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V2 "(pu) B02"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A2 "B02"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V3 "(pu) B03"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A3 "B03"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V4 "(pu) B04"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A4 "B04"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V5 "(pu) B05"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A5 "B05"
                annotation (Dialog(enable=false));

            end Bus_Template;

            record PF_Bus_00300
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0603045,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9952749,
                A3=0.0000145,
                V4=0.9976375,
                A4=0.0000072,
                V5=0.9976375,
                A5=0.0000072);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00300;

            record PF_Bus_00310
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0623279,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9950955,
                A3=0.0000148,
                V4=0.9975478,
                A4=0.0000074,
                V5=0.9975478,
                A5=0.0000074);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00310;

            record PF_Bus_00320
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0643522,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9949147,
                A3=0.0000150,
                V4=0.9974573,
                A4=0.0000075,
                V5=0.9974573,
                A5=0.0000075);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00320;

            record PF_Bus_00330
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0663776,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9947324,
                A3=0.0000153,
                V4=0.9973662,
                A4=0.0000076,
                V5=0.9973662,
                A5=0.0000076);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00330;

            record PF_Bus_00340
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0684041,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9945487,
                A3=0.0000155,
                V4=0.9972743,
                A4=0.0000077,
                V5=0.9972743,
                A5=0.0000077);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00340;

            record PF_Bus_00350
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0704317,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9943635,
                A3=0.0000157,
                V4=0.9971817,
                A4=0.0000078,
                V5=0.9971817,
                A5=0.0000078);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00350;

            record PF_Bus_00360
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0724604,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9941769,
                A3=0.0000159,
                V4=0.9970884,
                A4=0.0000079,
                V5=0.9970884,
                A5=0.0000079);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00360;

            record PF_Bus_00370
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0744902,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9939888,
                A3=0.0000161,
                V4=0.9969944,
                A4=0.0000080,
                V5=0.9969944,
                A5=0.0000080);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00370;

            record PF_Bus_00380
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0765212,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9937992,
                A3=0.0000163,
                V4=0.9968996,
                A4=0.0000081,
                V5=0.9968996,
                A5=0.0000081);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00380;

            record PF_Bus_00390
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0785533,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9936082,
                A3=0.0000164,
                V4=0.9968041,
                A4=0.0000082,
                V5=0.9968041,
                A5=0.0000082);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00390;

            record PF_Bus_00400
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0805866,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9934158,
                A3=0.0000166,
                V4=0.9967079,
                A4=0.0000083,
                V5=0.9967079,
                A5=0.0000083);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00400;

            record PF_Bus_00410
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0826211,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9932218,
                A3=0.0000167,
                V4=0.9966109,
                A4=0.0000083,
                V5=0.9966109,
                A5=0.0000083);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00410;

            record PF_Bus_00420
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0846569,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9930264,
                A3=0.0000168,
                V4=0.9965132,
                A4=0.0000084,
                V5=0.9965132,
                A5=0.0000084);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00420;

            record PF_Bus_00430
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0866938,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9928295,
                A3=0.0000170,
                V4=0.9964148,
                A4=0.0000084,
                V5=0.9964148,
                A5=0.0000084);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00430;
          end Bus_Data;

          package Loads_Data

            partial record Loads_Template

              parameter OpenIPSL.Types.ActivePower PL1 "load"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QL1 "load"
                annotation (Dialog(enable=false));

            end Loads_Template;

            record PF_Loads_00300
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(300.0000000), QL1=1e06*(60.0000000));

              // Load: '3_1'

            end PF_Loads_00300;

            record PF_Loads_00310
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(310.0000000), QL1=1e06*(62.0000000));

              // Load: '3_1'

            end PF_Loads_00310;

            record PF_Loads_00320
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(320.0000000), QL1=1e06*(64.0000000));

              // Load: '3_1'

            end PF_Loads_00320;

            record PF_Loads_00330
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(330.0000000), QL1=1e06*(66.0000000));

              // Load: '3_1'

            end PF_Loads_00330;

            record PF_Loads_00340
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(340.0000000), QL1=1e06*(68.0000000));

              // Load: '3_1'

            end PF_Loads_00340;

            record PF_Loads_00350
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(350.0000000), QL1=1e06*(70.0000000));

              // Load: '3_1'

            end PF_Loads_00350;

            record PF_Loads_00360
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(360.0000000), QL1=1e06*(72.0000000));

              // Load: '3_1'

            end PF_Loads_00360;

            record PF_Loads_00370
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(370.0000000), QL1=1e06*(74.0000000));

              // Load: '3_1'

            end PF_Loads_00370;

            record PF_Loads_00380
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(380.0000000), QL1=1e06*(76.0000000));

              // Load: '3_1'

            end PF_Loads_00380;

            record PF_Loads_00390
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(390.0000000), QL1=1e06*(78.0000000));

              // Load: '3_1'

            end PF_Loads_00390;

            record PF_Loads_00400
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(400.0000000), QL1=1e06*(80.0000000));

              // Load: '3_1'

            end PF_Loads_00400;

            record PF_Loads_00410
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(410.0000000), QL1=1e06*(82.0000000));

              // Load: '3_1'

            end PF_Loads_00410;

            record PF_Loads_00420
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(420.0000000), QL1=1e06*(84.0000000));

              // Load: '3_1'

            end PF_Loads_00420;

            record PF_Loads_00430
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(430.0000000), QL1=1e06*(86.0000000));

              // Load: '3_1'

            end PF_Loads_00430;
          end Loads_Data;

          package Trafos_Data

            record PF_Trafos_00300
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00300;

            record PF_Trafos_00310
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00310;

            record PF_Trafos_00320
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00320;

            record PF_Trafos_00330
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00330;

            record PF_Trafos_00340
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00340;

            record PF_Trafos_00350
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00350;

            record PF_Trafos_00360
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00360;

            record PF_Trafos_00370
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00370;

            record PF_Trafos_00380
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00380;

            record PF_Trafos_00390
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00390;

            record PF_Trafos_00400
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00400;

            record PF_Trafos_00410
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00410;

            record PF_Trafos_00420
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00420;

            record PF_Trafos_00430
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00430;

            partial record Trafos_Template

            end Trafos_Template;
          end Trafos_Data;

          package Machines_Data

            partial record Machines_Template

              parameter OpenIPSL.Types.ActivePower PG1 "generatorA"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG1 "generatorA"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.ActivePower PG2 "generatorB"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG2 "generatorB"
                annotation (Dialog(enable=false));

            end Machines_Template;

            record PF_Machines_00300
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(300.0000000),
                QG1=1e06*(31.1670323),
                PG2=1e06*(0.0920877),
                QG2=1e06*(47.2505063));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00300;

            record PF_Machines_00310
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(310.0000000),
                QG1=1e06*(32.6290348),
                PG2=1e06*(0.0983673),
                QG2=1e06*(49.0444325));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00310;

            record PF_Machines_00320
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(320.0000000),
                QG1=1e06*(34.1186576),
                PG2=1e06*(0.1048571),
                QG2=1e06*(50.8527604));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00320;

            record PF_Machines_00330
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(330.0000000),
                QG1=1e06*(35.6359364),
                PG2=1e06*(0.1115573),
                QG2=1e06*(52.6755198));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00330;

            record PF_Machines_00340
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(340.0000000),
                QG1=1e06*(37.1809081),
                PG2=1e06*(0.1184682),
                QG2=1e06*(54.5127412));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00340;

            record PF_Machines_00350
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(350.0000000),
                QG1=1e06*(38.7536098),
                PG2=1e06*(0.1255903),
                QG2=1e06*(56.3644555));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00350;

            record PF_Machines_00360
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(360.0000000),
                QG1=1e06*(40.3540796),
                PG2=1e06*(0.1329239),
                QG2=1e06*(58.2306939));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00360;

            record PF_Machines_00370
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(370.0000000),
                QG1=1e06*(41.9823563),
                PG2=1e06*(0.1404692),
                QG2=1e06*(60.1114884));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00370;

            record PF_Machines_00380
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(380.0000000),
                QG1=1e06*(43.6384794),
                PG2=1e06*(0.1482268),
                QG2=1e06*(62.0068713));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00380;

            record PF_Machines_00390
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(390.0000000),
                QG1=1e06*(45.3224891),
                PG2=1e06*(0.1561968),
                QG2=1e06*(63.9168756));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00390;

            record PF_Machines_00400
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(400.0000000),
                QG1=1e06*(47.0344264),
                PG2=1e06*(0.1643798),
                QG2=1e06*(65.8415345));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00400;

            record PF_Machines_00410
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(410.0000000),
                QG1=1e06*(48.7743329),
                PG2=1e06*(0.1727761),
                QG2=1e06*(67.7808820));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00410;

            record PF_Machines_00420
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(420.0000000),
                QG1=1e06*(50.5422510),
                PG2=1e06*(0.1813860),
                QG2=1e06*(69.7349524));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00420;

            record PF_Machines_00430
              extends
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(430.0000000),
                QG1=1e06*(52.3382240),
                PG2=1e06*(0.1902100),
                QG2=1e06*(71.7037807));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00430;
          end Machines_Data;

          record PF_00300
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00300
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00300
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00300
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00300
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00300;

          record PF_00310
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00310
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00310
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00310
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00310
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00310;

          record PF_00320
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00320
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00320
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00320
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00320
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00320;

          record PF_00330
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00330
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00330
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00330
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00330
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00330;

          record PF_00340
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00340
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00340
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00340
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00340
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00340;

          record PF_00350
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00350
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00350
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00350
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00350
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00350;

          record PF_00360
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00360
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00360
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00360
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00360
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00360;

          record PF_00370
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00370
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00370
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00370
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00370
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00370;

          record PF_00380
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00380
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00380
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00380
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00380
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00380;

          record PF_00390
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00390
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00390
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00390
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00390
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00390;

          record PF_00400
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00400
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00400
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00400
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00400
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00400;

          record PF_00410
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00410
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00410
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00410
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00410
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00410;

          record PF_00420
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00420
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00420
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00420
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00420
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00420;

          record PF_00430
            extends
              FinalProject.Examples.Systems.GasB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.PF_Bus_00430
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.PF_Loads_00430
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.PF_Machines_00430
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.PF_Trafos_00430
              constrainedby
              FinalProject.Examples.Systems.GasB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00430;
        end PF_Data;

      end GasB;

      package SteamA
        extends Modelica.Icons.ExamplesPackage;
        model SteamA1 "Network model with ThermoPower-based ST"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=42,
            t2=42.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=1000000000,
                                                                    fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=100000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_01 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=65000000)  annotation (Placement(transformation(rotation=0, extent={{-90,
                    -10},{-70,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.SteamA.PF_Data.PF_00055)
            annotation (Placement(transformation(extent={{-86,34},{-66,54}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
          annotation (experiment(StopTime=10, __Dymola_Algorithm="Dassl"), Diagram(
                graphics={Text(
                  extent={{-60,68},{58,56}},
                  textColor={0,0,0},
                  textString="Without Prime Mover",
                  textStyle={TextStyle.Bold})}));
        end SteamA1;

        model SteamA2 "Network model with ThermoPower-based ST"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=20002,
            t2=20002.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=1000000000,
                                                                    fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=100000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_04 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=65000000)  annotation (Placement(transformation(rotation=0, extent={{-90,
                    -10},{-70,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.SteamA.PF_Data.PF_00055)
            annotation (Placement(transformation(extent={{-86,34},{-66,54}})));
          Modelica.Blocks.Sources.Step step(height=-5e6, startTime=1000)
                                                                      annotation (Placement(transformation(extent={{-48,-36},
                    {-62,-22}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
          connect(step.y, generatorA.DeltaPM) annotation (Line(points={{-62.7,
                  -29},{-80,-29},{-80,-10}}, color={0,0,127}));
          annotation (experiment(StopTime=2000, __Dymola_Algorithm="Dassl"),
                                                                           Diagram(
                graphics={Text(
                  extent={{-60,68},{58,56}},
                  textColor={0,0,0},
                  textStyle={TextStyle.Bold},
                  textString="With Prime Mover")}));
        end SteamA2;

        package PF_Data

          record Power_Flow
            extends Modelica.Icons.Record;

            replaceable record PowerFlow =
                FinalProject.Examples.Systems.SteamA.PF_Data.Power_Flow_Template
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Power_Flow_Template
              annotation (choicesAllMatching);

            PowerFlow powerflow;

          end Power_Flow;

          record Power_Flow_Template
            extends Modelica.Icons.Record;

          end Power_Flow_Template;

          package Bus_Data

            partial record Bus_Template

              parameter OpenIPSL.Types.PerUnit V1 "(pu) B01"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A1 "B01"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V2 "(pu) B02"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A2 "B02"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V3 "(pu) B03"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A3 "B03"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V4 "(pu) B04"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A4 "B04"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V5 "(pu) B05"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A5 "B05"
                annotation (Dialog(enable=false));

            end Bus_Template;

            record PF_Bus_00030
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0060025,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9995838,
                A3=0.0000020,
                V4=0.9997919,
                A4=0.0000010,
                V5=0.9997919,
                A5=0.0000010);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00030;

            record PF_Bus_00035
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0070034,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9995133,
                A3=0.0000023,
                V4=0.9997566,
                A4=0.0000012,
                V5=0.9997566,
                A5=0.0000012);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00035;

            record PF_Bus_00040
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0080044,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9994424,
                A3=0.0000026,
                V4=0.9997212,
                A4=0.0000013,
                V5=0.9997212,
                A5=0.0000013);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00040;

            record PF_Bus_00045
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0090056,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9993711,
                A3=0.0000029,
                V4=0.9996856,
                A4=0.0000015,
                V5=0.9996856,
                A5=0.0000015);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00045;

            record PF_Bus_00050
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0100069,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9992995,
                A3=0.0000033,
                V4=0.9996498,
                A4=0.0000016,
                V5=0.9996498,
                A5=0.0000016);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00050;

            record PF_Bus_00055
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0110084,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9992276,
                A3=0.0000036,
                V4=0.9996138,
                A4=0.0000018,
                V5=0.9996138,
                A5=0.0000018);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00055;

            record PF_Bus_00060
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0120100,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9991553,
                A3=0.0000039,
                V4=0.9995776,
                A4=0.0000019,
                V5=0.9995776,
                A5=0.0000019);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00060;
          end Bus_Data;

          package Loads_Data

            partial record Loads_Template

              parameter OpenIPSL.Types.ActivePower PL1 "load"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QL1 "load"
                annotation (Dialog(enable=false));

            end Loads_Template;

            record PF_Loads_00030
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(30.0000000), QL1=1e06*(6.0000000));

              // Load: '3_1'

            end PF_Loads_00030;

            record PF_Loads_00035
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(35.0000000), QL1=1e06*(7.0000000));

              // Load: '3_1'

            end PF_Loads_00035;

            record PF_Loads_00040
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(40.0000000), QL1=1e06*(8.0000000));

              // Load: '3_1'

            end PF_Loads_00040;

            record PF_Loads_00045
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(45.0000000), QL1=1e06*(9.0000000));

              // Load: '3_1'

            end PF_Loads_00045;

            record PF_Loads_00050
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(50.0000000), QL1=1e06*(10.0000000));

              // Load: '3_1'

            end PF_Loads_00050;

            record PF_Loads_00055
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(55.0000000), QL1=1e06*(11.0000000));

              // Load: '3_1'

            end PF_Loads_00055;

            record PF_Loads_00060
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(60.0000000), QL1=1e06*(12.0000000));

              // Load: '3_1'

            end PF_Loads_00060;
          end Loads_Data;

          package Trafos_Data

            record PF_Trafos_00030
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00030;

            record PF_Trafos_00035
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00035;

            record PF_Trafos_00040
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00040;

            record PF_Trafos_00045
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00045;

            record PF_Trafos_00050
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00050;

            record PF_Trafos_00055
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00055;

            record PF_Trafos_00060
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00060;

            partial record Trafos_Template

            end Trafos_Template;
          end Trafos_Data;

          package Machines_Data

            partial record Machines_Template

              parameter OpenIPSL.Types.ActivePower PG1 "generatorA"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG1 "generatorA"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.ActivePower PG2 "generatorB"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG2 "generatorB"
                annotation (Dialog(enable=false));

            end Machines_Template;

            record PF_Machines_00030
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(30.0000000),
                QG1=1e06*(2.0208362),
                PG2=1e06*(0.0009127),
                QG2=1e06*(4.1617126));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00030;

            record PF_Machines_00035
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(35.0000000),
                QG1=1e06*(2.3811549),
                PG2=1e06*(0.0012425),
                QG2=1e06*(4.8673481));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00035;

            record PF_Machines_00040
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(40.0000000),
                QG1=1e06*(2.7481973),
                PG2=1e06*(0.0016231),
                QG2=1e06*(5.5764228));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00040;

            record PF_Machines_00045
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(45.0000000),
                QG1=1e06*(3.1219655),
                PG2=1e06*(0.0020545),
                QG2=1e06*(6.2889389));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00045;

            record PF_Machines_00050
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(50.0000000),
                QG1=1e06*(3.5024618),
                PG2=1e06*(0.0025368),
                QG2=1e06*(7.0048985));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00050;

            record PF_Machines_00055
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(55.0000000),
                QG1=1e06*(3.8896885),
                PG2=1e06*(0.0030700),
                QG2=1e06*(7.7243039));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00055;

            record PF_Machines_00060
              extends
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(60.0000000),
                QG1=1e06*(4.2836480),
                PG2=1e06*(0.0036540),
                QG2=1e06*(8.4471574));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00060;
          end Machines_Data;

          record PF_00030
            extends
              FinalProject.Examples.Systems.SteamA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.PF_Bus_00030
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.PF_Loads_00030
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.PF_Machines_00030
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.PF_Trafos_00030
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00030;

          record PF_00035
            extends
              FinalProject.Examples.Systems.SteamA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.PF_Bus_00035
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.PF_Loads_00035
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.PF_Machines_00035
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.PF_Trafos_00035
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00035;

          record PF_00040
            extends
              FinalProject.Examples.Systems.SteamA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.PF_Bus_00040
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.PF_Loads_00040
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.PF_Machines_00040
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.PF_Trafos_00040
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00040;

          record PF_00045
            extends
              FinalProject.Examples.Systems.SteamA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.PF_Bus_00045
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.PF_Loads_00045
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.PF_Machines_00045
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.PF_Trafos_00045
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00045;

          record PF_00050
            extends
              FinalProject.Examples.Systems.SteamA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.PF_Bus_00050
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.PF_Loads_00050
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.PF_Machines_00050
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.PF_Trafos_00050
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00050;

          record PF_00055
            extends
              FinalProject.Examples.Systems.SteamA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.PF_Bus_00055
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.PF_Loads_00055
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.PF_Machines_00055
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.PF_Trafos_00055
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00055;

          record PF_00060
            extends
              FinalProject.Examples.Systems.SteamA.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.PF_Bus_00060
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.PF_Loads_00060
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.PF_Machines_00060
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.PF_Trafos_00060
              constrainedby
              FinalProject.Examples.Systems.SteamA.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00060;
        end PF_Data;
      end SteamA;

      package SteamB
        extends Modelica.Icons.ExamplesPackage;
        model SteamB1 "Network model with ThermalPower-based ST"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=42,
            t2=42.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=100000000,
                                                                    fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=100000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_01 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=56800000)  annotation (Placement(transformation(rotation=0, extent={{-90,
                    -10},{-70,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.SteamB.PF_Data.PF_00044)
            annotation (Placement(transformation(extent={{-88,32},{-68,52}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
          annotation (experiment(StopTime=20, __Dymola_Algorithm="Dassl"), Diagram(
                graphics={Text(
                  extent={{-60,68},{58,56}},
                  textColor={0,0,0},
                  textString="Without Prime Mover",
                  textStyle={TextStyle.Bold})}));
        end SteamB1;

        package PF_Data

          record Power_Flow
            extends Modelica.Icons.Record;

            replaceable record PowerFlow =
                FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template
              annotation (choicesAllMatching);

            PowerFlow powerflow;

          end Power_Flow;

          record Power_Flow_Template
            extends Modelica.Icons.Record;

          end Power_Flow_Template;

          package Bus_Data

            partial record Bus_Template

              parameter OpenIPSL.Types.PerUnit V1 "(pu) B01"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A1 "B01"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V2 "(pu) B02"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A2 "B02"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V3 "(pu) B03"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A3 "B03"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V4 "(pu) B04"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A4 "B04"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V5 "(pu) B05"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A5 "B05"
                annotation (Dialog(enable=false));

            end Bus_Template;

            record PF_Bus_00020
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0401244,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9969903,
                A3=0.0000110,
                V4=0.9984951,
                A4=0.0000055,
                V5=0.9984951,
                A5=0.0000055);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00020;

            record PF_Bus_00022
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0441531,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9966586,
                A3=0.0000118,
                V4=0.9983293,
                A4=0.0000059,
                V5=0.9983293,
                A5=0.0000059);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00022;

            record PF_Bus_00024
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0481854,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9963212,
                A3=0.0000126,
                V4=0.9981606,
                A4=0.0000063,
                V5=0.9981606,
                A5=0.0000063);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00024;

            record PF_Bus_00026
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0522213,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9959781,
                A3=0.0000133,
                V4=0.9979891,
                A4=0.0000066,
                V5=0.9979891,
                A5=0.0000066);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00026;

            record PF_Bus_00028
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0562609,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9956294,
                A3=0.0000139,
                V4=0.9978147,
                A4=0.0000069,
                V5=0.9978147,
                A5=0.0000069);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00028;

            record PF_Bus_00030
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0603045,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9952749,
                A3=0.0000145,
                V4=0.9976375,
                A4=0.0000072,
                V5=0.9976375,
                A5=0.0000072);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00030;

            record PF_Bus_00032
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0643522,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9949147,
                A3=0.0000150,
                V4=0.9974573,
                A4=0.0000075,
                V5=0.9974573,
                A5=0.0000075);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00032;

            record PF_Bus_00034
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0684041,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9945487,
                A3=0.0000155,
                V4=0.9972743,
                A4=0.0000077,
                V5=0.9972743,
                A5=0.0000077);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00034;

            record PF_Bus_00036
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0724604,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9941769,
                A3=0.0000159,
                V4=0.9970884,
                A4=0.0000079,
                V5=0.9970884,
                A5=0.0000079);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00036;

            record PF_Bus_00038
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0765212,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9937992,
                A3=0.0000163,
                V4=0.9968996,
                A4=0.0000081,
                V5=0.9968996,
                A5=0.0000081);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00038;

            record PF_Bus_00040
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0805866,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9934158,
                A3=0.0000166,
                V4=0.9967079,
                A4=0.0000083,
                V5=0.9967079,
                A5=0.0000083);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00040;

            record PF_Bus_00042
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0846569,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9930264,
                A3=0.0000168,
                V4=0.9965132,
                A4=0.0000084,
                V5=0.9965132,
                A5=0.0000084);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00042;

            record PF_Bus_00044
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0887321,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9926312,
                A3=0.0000170,
                V4=0.9963156,
                A4=0.0000085,
                V5=0.9963156,
                A5=0.0000085);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00044;

            record PF_Bus_00046
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0928124,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9922300,
                A3=0.0000172,
                V4=0.9961150,
                A4=0.0000086,
                V5=0.9961150,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00046;

            record PF_Bus_00048
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0968980,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9918228,
                A3=0.0000173,
                V4=0.9959114,
                A4=0.0000086,
                V5=0.9959114,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00048;

            record PF_Bus_00050
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.1009890,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9914097,
                A3=0.0000173,
                V4=0.9957048,
                A4=0.0000086,
                V5=0.9957048,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00050;
          end Bus_Data;

          package Loads_Data

            partial record Loads_Template

              parameter OpenIPSL.Types.ActivePower PL1 "load"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QL1 "load"
                annotation (Dialog(enable=false));

            end Loads_Template;

            record PF_Loads_00020
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(20.0000000), QL1=1e06*(4.0000000));

              // Load: '3_1'

            end PF_Loads_00020;

            record PF_Loads_00022
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(22.0000000), QL1=1e06*(4.4000000));

              // Load: '3_1'

            end PF_Loads_00022;

            record PF_Loads_00024
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(24.0000000), QL1=1e06*(4.8000000));

              // Load: '3_1'

            end PF_Loads_00024;

            record PF_Loads_00026
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(26.0000000), QL1=1e06*(5.2000000));

              // Load: '3_1'

            end PF_Loads_00026;

            record PF_Loads_00028
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(28.0000000), QL1=1e06*(5.6000000));

              // Load: '3_1'

            end PF_Loads_00028;

            record PF_Loads_00030
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(30.0000000), QL1=1e06*(6.0000000));

              // Load: '3_1'

            end PF_Loads_00030;

            record PF_Loads_00032
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(32.0000000), QL1=1e06*(6.4000000));

              // Load: '3_1'

            end PF_Loads_00032;

            record PF_Loads_00034
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(34.0000000), QL1=1e06*(6.8000000));

              // Load: '3_1'

            end PF_Loads_00034;

            record PF_Loads_00036
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(36.0000000), QL1=1e06*(7.2000000));

              // Load: '3_1'

            end PF_Loads_00036;

            record PF_Loads_00038
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(38.0000000), QL1=1e06*(7.6000000));

              // Load: '3_1'

            end PF_Loads_00038;

            record PF_Loads_00040
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(40.0000000), QL1=1e06*(8.0000000));

              // Load: '3_1'

            end PF_Loads_00040;

            record PF_Loads_00042
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(42.0000000), QL1=1e06*(8.4000000));

              // Load: '3_1'

            end PF_Loads_00042;

            record PF_Loads_00044
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(44.0000000), QL1=1e06*(8.8000000));

              // Load: '3_1'

            end PF_Loads_00044;

            record PF_Loads_00046
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(46.0000000), QL1=1e06*(9.2000000));

              // Load: '3_1'

            end PF_Loads_00046;

            record PF_Loads_00048
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(48.0000000), QL1=1e06*(9.6000000));

              // Load: '3_1'

            end PF_Loads_00048;

            record PF_Loads_00050
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(50.0000000), QL1=1e06*(10.0000000));

              // Load: '3_1'

            end PF_Loads_00050;
          end Loads_Data;

          package Trafos_Data

            record PF_Trafos_00020
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00020;

            record PF_Trafos_00022
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00022;

            record PF_Trafos_00024
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00024;

            record PF_Trafos_00026
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00026;

            record PF_Trafos_00028
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00028;

            record PF_Trafos_00030
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00030;

            record PF_Trafos_00032
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00032;

            record PF_Trafos_00034
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00034;

            record PF_Trafos_00036
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00036;

            record PF_Trafos_00038
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00038;

            record PF_Trafos_00040
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00040;

            record PF_Trafos_00042
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00042;

            record PF_Trafos_00044
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00044;

            record PF_Trafos_00046
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00046;

            record PF_Trafos_00048
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00048;

            record PF_Trafos_00050
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00050;

            partial record Trafos_Template

            end Trafos_Template;
          end Trafos_Data;

          package Machines_Data

            partial record Machines_Template

              parameter OpenIPSL.Types.ActivePower PG1 "generatorA"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG1 "generatorA"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.ActivePower PG2 "generatorB"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG2 "generatorB"
                annotation (Dialog(enable=false));

            end Machines_Template;

            record PF_Machines_00020
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(20.0000000),
                QG1=1e06*(1.8058714),
                PG2=1e06*(0.0040779),
                QG2=1e06*(3.0097093));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00020;

            record PF_Machines_00022
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(22.0000000),
                QG1=1e06*(2.0461260),
                PG2=1e06*(0.0049377),
                QG2=1e06*(3.3414123));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00022;

            record PF_Machines_00024
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(24.0000000),
                QG1=1e06*(2.2973119),
                PG2=1e06*(0.0058804),
                QG2=1e06*(3.6787769));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00024;

            record PF_Machines_00026
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(26.0000000),
                QG1=1e06*(2.5594531),
                PG2=1e06*(0.0069064),
                QG2=1e06*(4.0218236));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00026;

            record PF_Machines_00028
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(28.0000000),
                QG1=1e06*(2.8325748),
                PG2=1e06*(0.0080157),
                QG2=1e06*(4.3705742));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00028;

            record PF_Machines_00030
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(30.0000000),
                QG1=1e06*(3.1167032),
                PG2=1e06*(0.0092088),
                QG2=1e06*(4.7250506));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00030;

            record PF_Machines_00032
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(32.0000000),
                QG1=1e06*(3.4118658),
                PG2=1e06*(0.0104857),
                QG2=1e06*(5.0852760));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00032;

            record PF_Machines_00034
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(34.0000000),
                QG1=1e06*(3.7180908),
                PG2=1e06*(0.0118468),
                QG2=1e06*(5.4512741));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00034;

            record PF_Machines_00036
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(36.0000000),
                QG1=1e06*(4.0354080),
                PG2=1e06*(0.0132924),
                QG2=1e06*(5.8230694));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00036;

            record PF_Machines_00038
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(38.0000000),
                QG1=1e06*(4.3638479),
                PG2=1e06*(0.0148227),
                QG2=1e06*(6.2006871));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00038;

            record PF_Machines_00040
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(40.0000000),
                QG1=1e06*(4.7034426),
                PG2=1e06*(0.0164380),
                QG2=1e06*(6.5841535));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00040;

            record PF_Machines_00042
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(42.0000000),
                QG1=1e06*(5.0542251),
                PG2=1e06*(0.0181386),
                QG2=1e06*(6.9734952));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00042;

            record PF_Machines_00044
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(44.0000000),
                QG1=1e06*(5.4162296),
                PG2=1e06*(0.0199248),
                QG2=1e06*(7.3687402));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00044;

            record PF_Machines_00046
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(46.0000000),
                QG1=1e06*(5.7894915),
                PG2=1e06*(0.0217970),
                QG2=1e06*(7.7699170));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00046;

            record PF_Machines_00048
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(48.0000000),
                QG1=1e06*(6.1740476),
                PG2=1e06*(0.0237555),
                QG2=1e06*(8.1770549));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00048;

            record PF_Machines_00050
              extends
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(50.0000000),
                QG1=1e06*(6.5699358),
                PG2=1e06*(0.0258006),
                QG2=1e06*(8.5901842));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00050;
          end Machines_Data;

          record PF_00020
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00020
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00020
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00020
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00020
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00020;

          record PF_00022
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00022
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00022
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00022
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00022
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00022;

          record PF_00024
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00024
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00024
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00024
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00024
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00024;

          record PF_00026
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00026
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00026
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00026
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00026
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00026;

          record PF_00028
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00028
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00028
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00028
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00028
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00028;

          record PF_00030
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00030
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00030
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00030
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00030
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00030;

          record PF_00032
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00032
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00032
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00032
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00032
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00032;

          record PF_00034
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00034
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00034
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00034
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00034
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00034;

          record PF_00036
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00036
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00036
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00036
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00036
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00036;

          record PF_00038
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00038
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00038
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00038
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00038
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00038;

          record PF_00040
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00040
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00040
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00040
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00040
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00040;

          record PF_00042
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00042
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00042
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00042
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00042
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00042;

          record PF_00044
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00044
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00044
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00044
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00044
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00044;

          record PF_00046
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00046
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00046
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00046
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00046
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00046;

          record PF_00048
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00048
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00048
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00048
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00048
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00048;

          record PF_00050
            extends
              FinalProject.Examples.Systems.SteamB.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.PF_Bus_00050
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.PF_Loads_00050
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.PF_Machines_00050
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.PF_Trafos_00050
              constrainedby
              FinalProject.Examples.Systems.SteamB.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00050;
        end PF_Data;
      end SteamB;

      package SteamC "Power System model using Steam Turbine system designed by Junyung Kim"
        extends Modelica.Icons.ExamplesPackage;
        model SteamC1 "Network model with ThermoPower-based ST"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=1000,
            t2=1002.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=100000000,
                                                                    fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=100000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_01 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=55000000)  annotation (Placement(transformation(rotation=0, extent={{-90,
                    -10},{-70,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.SteamC.PF_Data.PF_00043)
            annotation (Placement(transformation(extent={{-90,30},{-70,50}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
          annotation (experiment(StopTime=100, __Dymola_Algorithm="Dassl"),Diagram(
                graphics={Text(
                  extent={{-60,68},{58,56}},
                  textColor={0,0,0},
                  textString="Without Prime Mover",
                  textStyle={TextStyle.Bold})}));
        end SteamC1;

        model SteamC2 "Network model with ThermoPower-based ST"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=1000,
            t2=1002.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b=100000000,
                                                                    fn = 50)
            annotation (Placement(transformation(extent={{-94,74},{-54,94}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=100000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_09 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=55000000)  annotation (Placement(transformation(rotation=0, extent={{-90,
                    -10},{-70,10}})));
          PF_Data.Power_Flow pf(redeclare record PowerFlow =
                FinalProject.Examples.Systems.SteamC.PF_Data.PF_00050)
            annotation (Placement(transformation(extent={{-90,30},{-70,50}})));
          Modelica.Blocks.Sources.Ramp ramp(
            height=-5e6,
            duration=100,
            offset=50e6,
            startTime=500)                                            annotation (Placement(transformation(extent={{-50,-36},
                    {-64,-22}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
          connect(ramp.y, generatorA.DeltaPM) annotation (Line(points={{-64.7,
                  -29},{-80,-29},{-80,-10}}, color={0,0,127}));
          annotation (experiment(StopTime=1000, __Dymola_Algorithm="Dassl"),
                                                                           Diagram(
                graphics={Text(
                  extent={{-60,68},{58,56}},
                  textColor={0,0,0},
                  textStyle={TextStyle.Bold},
                  textString="With Prime Mover")}));
        end SteamC2;

        package PF_Data

          record Power_Flow
            extends Modelica.Icons.Record;

            replaceable record PowerFlow =
                FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template
              annotation (choicesAllMatching);

            PowerFlow powerflow;

          end Power_Flow;

          record Power_Flow_Template
            extends Modelica.Icons.Record;

          end Power_Flow_Template;

          package Bus_Data

            partial record Bus_Template

              parameter OpenIPSL.Types.PerUnit V1 "(pu) B01"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A1 "B01"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V2 "(pu) B02"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A2 "B02"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V3 "(pu) B03"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A3 "B03"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V4 "(pu) B04"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A4 "B04"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.PerUnit V5 "(pu) B05"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.Angle A5 "B05"
                annotation (Dialog(enable=false));

            end Bus_Template;

            record PF_Bus_00040
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0805866,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9934158,
                A3=0.0000166,
                V4=0.9967079,
                A4=0.0000083,
                V5=0.9967079,
                A5=0.0000083);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00040;

            record PF_Bus_00041
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0826211,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9932218,
                A3=0.0000167,
                V4=0.9966109,
                A4=0.0000083,
                V5=0.9966109,
                A5=0.0000083);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00041;

            record PF_Bus_00042
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0846569,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9930264,
                A3=0.0000168,
                V4=0.9965132,
                A4=0.0000084,
                V5=0.9965132,
                A5=0.0000084);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00042;

            record PF_Bus_00043
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0866938,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9928295,
                A3=0.0000170,
                V4=0.9964148,
                A4=0.0000084,
                V5=0.9964148,
                A5=0.0000084);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00043;

            record PF_Bus_00044
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0887321,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9926312,
                A3=0.0000170,
                V4=0.9963156,
                A4=0.0000085,
                V5=0.9963156,
                A5=0.0000085);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00044;

            record PF_Bus_00045
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0907716,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9924313,
                A3=0.0000171,
                V4=0.9962157,
                A4=0.0000085,
                V5=0.9962157,
                A5=0.0000085);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00045;

            record PF_Bus_00046
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0928124,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9922300,
                A3=0.0000172,
                V4=0.9961150,
                A4=0.0000086,
                V5=0.9961150,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00046;

            record PF_Bus_00047
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0948545,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9920271,
                A3=0.0000172,
                V4=0.9960136,
                A4=0.0000086,
                V5=0.9960136,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00047;

            record PF_Bus_00048
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0968980,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9918228,
                A3=0.0000173,
                V4=0.9959114,
                A4=0.0000086,
                V5=0.9959114,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00048;

            record PF_Bus_00049
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.0989428,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9916170,
                A3=0.0000173,
                V4=0.9958085,
                A4=0.0000086,
                V5=0.9958085,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00049;

            record PF_Bus_00050
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.1009890,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9914097,
                A3=0.0000173,
                V4=0.9957048,
                A4=0.0000086,
                V5=0.9957048,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00050;

            record PF_Bus_00051
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.1030366,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9912009,
                A3=0.0000173,
                V4=0.9956004,
                A4=0.0000086,
                V5=0.9956004,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00051;

            record PF_Bus_00052
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template(
                V1=1.0000000,
                A1=0.1050856,
                V2=1.0000000,
                A2=0.0000000,
                V3=0.9909905,
                A3=0.0000173,
                V4=0.9954953,
                A4=0.0000086,
                V5=0.9954953,
                A5=0.0000086);

              // Bus: 'B01' (PV bus)

              // Bus: 'B02' (slack bus)

              // Bus: 'B03' (PQ bus)

              // Bus: 'B04' (PQ bus)

              // Bus: 'B05' (PQ bus)

            end PF_Bus_00052;
          end Bus_Data;

          package Loads_Data

            partial record Loads_Template

              parameter OpenIPSL.Types.ActivePower PL1 "load"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QL1 "load"
                annotation (Dialog(enable=false));

            end Loads_Template;

            record PF_Loads_00040
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(40.0000000), QL1=1e06*(8.0000000));

              // Load: '3_1'

            end PF_Loads_00040;

            record PF_Loads_00041
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(41.0000000), QL1=1e06*(8.2000000));

              // Load: '3_1'

            end PF_Loads_00041;

            record PF_Loads_00042
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(42.0000000), QL1=1e06*(8.4000000));

              // Load: '3_1'

            end PF_Loads_00042;

            record PF_Loads_00043
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(43.0000000), QL1=1e06*(8.6000000));

              // Load: '3_1'

            end PF_Loads_00043;

            record PF_Loads_00044
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(44.0000000), QL1=1e06*(8.8000000));

              // Load: '3_1'

            end PF_Loads_00044;

            record PF_Loads_00045
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(45.0000000), QL1=1e06*(9.0000000));

              // Load: '3_1'

            end PF_Loads_00045;

            record PF_Loads_00046
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(46.0000000), QL1=1e06*(9.2000000));

              // Load: '3_1'

            end PF_Loads_00046;

            record PF_Loads_00047
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(47.0000000), QL1=1e06*(9.4000000));

              // Load: '3_1'

            end PF_Loads_00047;

            record PF_Loads_00048
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(48.0000000), QL1=1e06*(9.6000000));

              // Load: '3_1'

            end PF_Loads_00048;

            record PF_Loads_00049
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(49.0000000), QL1=1e06*(9.8000000));

              // Load: '3_1'

            end PF_Loads_00049;

            record PF_Loads_00050
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(50.0000000), QL1=1e06*(10.0000000));

              // Load: '3_1'

            end PF_Loads_00050;

            record PF_Loads_00051
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(51.0000000), QL1=1e06*(10.2000000));

              // Load: '3_1'

            end PF_Loads_00051;

            record PF_Loads_00052
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template(
                  PL1=1e06*(52.0000000), QL1=1e06*(10.4000000));

              // Load: '3_1'

            end PF_Loads_00052;
          end Loads_Data;

          package Trafos_Data

            record PF_Trafos_00040
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00040;

            record PF_Trafos_00041
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00041;

            record PF_Trafos_00042
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00042;

            record PF_Trafos_00043
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00043;

            record PF_Trafos_00044
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00044;

            record PF_Trafos_00045
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00045;

            record PF_Trafos_00046
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00046;

            record PF_Trafos_00047
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00047;

            record PF_Trafos_00048
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00048;

            record PF_Trafos_00049
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00049;

            record PF_Trafos_00050
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00050;

            record PF_Trafos_00051
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00051;

            record PF_Trafos_00052
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template;

            end PF_Trafos_00052;

            partial record Trafos_Template

            end Trafos_Template;
          end Trafos_Data;

          package Machines_Data

            partial record Machines_Template

              parameter OpenIPSL.Types.ActivePower PG1 "generatorA"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG1 "generatorA"
                annotation (Dialog(enable=false));

              parameter OpenIPSL.Types.ActivePower PG2 "generatorB"
                annotation (Dialog(enable=false));
              parameter OpenIPSL.Types.ReactivePower QG2 "generatorB"
                annotation (Dialog(enable=false));

            end Machines_Template;

            record PF_Machines_00040
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(40.0000000),
                QG1=1e06*(4.7034426),
                PG2=1e06*(0.0164380),
                QG2=1e06*(6.5841535));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00040;

            record PF_Machines_00041
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(41.0000000),
                QG1=1e06*(4.8774333),
                PG2=1e06*(0.0172776),
                QG2=1e06*(6.7780882));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00041;

            record PF_Machines_00042
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(42.0000000),
                QG1=1e06*(5.0542251),
                PG2=1e06*(0.0181386),
                QG2=1e06*(6.9734952));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00042;

            record PF_Machines_00043
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(43.0000000),
                QG1=1e06*(5.2338224),
                PG2=1e06*(0.0190210),
                QG2=1e06*(7.1703781));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00043;

            record PF_Machines_00044
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(44.0000000),
                QG1=1e06*(5.4162296),
                PG2=1e06*(0.0199248),
                QG2=1e06*(7.3687402));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00044;

            record PF_Machines_00045
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(45.0000000),
                QG1=1e06*(5.6014511),
                PG2=1e06*(0.0208502),
                QG2=1e06*(7.5685853));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00045;

            record PF_Machines_00046
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(46.0000000),
                QG1=1e06*(5.7894915),
                PG2=1e06*(0.0217970),
                QG2=1e06*(7.7699170));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00046;

            record PF_Machines_00047
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(47.0000000),
                QG1=1e06*(5.9803555),
                PG2=1e06*(0.0227655),
                QG2=1e06*(7.9727389));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00047;

            record PF_Machines_00048
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(48.0000000),
                QG1=1e06*(6.1740476),
                PG2=1e06*(0.0237555),
                QG2=1e06*(8.1770549));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00048;

            record PF_Machines_00049
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(49.0000000),
                QG1=1e06*(6.3705728),
                PG2=1e06*(0.0247672),
                QG2=1e06*(8.3828687));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00049;

            record PF_Machines_00050
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(50.0000000),
                QG1=1e06*(6.5699358),
                PG2=1e06*(0.0258006),
                QG2=1e06*(8.5901842));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00050;

            record PF_Machines_00051
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(51.0000000),
                QG1=1e06*(6.7721416),
                PG2=1e06*(0.0268557),
                QG2=1e06*(8.7990054));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00051;

            record PF_Machines_00052
              extends
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template(
                PG1=1e06*(52.0000000),
                QG1=1e06*(6.9771953),
                PG2=1e06*(0.0279327),
                QG2=1e06*(9.0093362));

              // MACHINE: '1_1'
              // Bus: B01'

              // MACHINE: '2_1'
              // Bus: B02'

            end PF_Machines_00052;
          end Machines_Data;

          record PF_00040
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00040
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00040
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00040
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00040
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00040;

          record PF_00041
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00041
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00041
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00041
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00041
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00041;

          record PF_00042
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00042
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00042
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00042
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00042
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00042;

          record PF_00043
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00043
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00043
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00043
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00043
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00043;

          record PF_00044
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00044
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00044
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00044
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00044
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00044;

          record PF_00045
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00045
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00045
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00045
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00045
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00045;

          record PF_00046
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00046
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00046
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00046
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00046
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00046;

          record PF_00047
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00047
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00047
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00047
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00047
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00047;

          record PF_00048
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00048
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00048
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00048
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00048
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00048;

          record PF_00049
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00049
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00049
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00049
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00049
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00049;

          record PF_00050
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00050
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00050
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00050
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00050
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00050;

          record PF_00051
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00051
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00051
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00051
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00051
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00051;

          record PF_00052
            extends
              FinalProject.Examples.Systems.SteamC.PF_Data.Power_Flow_Template;

            replaceable record Bus =
                FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.PF_Bus_00052
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Bus_Data.Bus_Template
              "Bus power flow results";
            Bus bus;

            replaceable record Loads =
                FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.PF_Loads_00052
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Loads_Data.Loads_Template
              "Loads power flow results";
            Loads loads;

            replaceable record Machines =
                FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.PF_Machines_00052
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Machines_Data.Machines_Template
              "Machine power flow results";
            Machines machines;

            replaceable record Trafos =
                FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.PF_Trafos_00052
              constrainedby
              FinalProject.Examples.Systems.SteamC.PF_Data.Trafos_Data.Trafos_Template
              "Trafos power flow results";
            Trafos trafos;

          end PF_00052;
        end PF_Data;
      end SteamC;

      package Example
        extends Modelica.Icons.ExamplesPackage;
        model ExampleNetworkModel
          "SMIB - Single Machine Infinite Base system with one load"
          extends Modelica.Icons.Example;
          OpenIPSL.Electrical.Branches.PwLine pwLine(
            R=0.001,
            X=0.2,
            G=0,
            B=0) annotation (Placement(transformation(extent={{-34,-4},{-22,4}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine3(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{0,-34},{12,-26}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine4(
            R=0.0005,
            X=0.1,
            G=0,
            B=0) annotation (Placement(transformation(extent={{40,-34},{52,-26}})));
          OpenIPSL.Electrical.Loads.PSSE.Load_variation load(
            PQBRAK=0.7,
            d_t=0,
            d_P=0,
            t1=0,
            characteristic=2,
            P_0=pf.powerflow.loads.PL1,
            Q_0=pf.powerflow.loads.QL1,
            v_0=pf.powerflow.bus.V3,
            angle_0=pf.powerflow.bus.A3)
            annotation (Placement(transformation(extent={{-24,-72},{-4,-52}})));
          OpenIPSL.Electrical.Events.PwFault pwFault(
            t1=2,
            t2=2.15,
            R=0,
            X=0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={26,-60})));
          OpenIPSL.Electrical.Buses.Bus B01
            annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
          inner OpenIPSL.Electrical.SystemBase SysData(S_b = 100e6, fn = 50)
            annotation (Placement(transformation(extent={{-58,28},{-18,48}})));
          OpenIPSL.Electrical.Buses.Bus B03(v_0=load.v_0, angle_0=load.angle_0)
            annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
          OpenIPSL.Electrical.Buses.Bus B02
            annotation (Placement(transformation(extent={{56,-10},{76,10}})));
          OpenIPSL.Electrical.Buses.Bus B05
            annotation (Placement(transformation(extent={{16,-40},{36,-20}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine1(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{0,26},{12,34}})));
          OpenIPSL.Electrical.Branches.PwLine pwLine2(
            R=0.0005,
            G=0,
            B=0,
            X=0.1) annotation (Placement(transformation(extent={{40,26},{52,34}})));
          OpenIPSL.Electrical.Buses.Bus B04
            annotation (Placement(transformation(extent={{16,20},{36,40}})));
          BaseModels.GeneratingUnits.Generator_02 generatorB(
            M_b=100000000,
            P_0=pf.powerflow.machines.PG2,
            Q_0=pf.powerflow.machines.QG2,
            v_0=pf.powerflow.bus.V2,
            angle_0=pf.powerflow.bus.A2,
            displayPF=true) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={82,0})));
          BaseModels.GeneratingUnits.Generator_01 generatorA(
            P_0=pf.powerflow.machines.PG1,
            Q_0=pf.powerflow.machines.QG1,
            v_0=pf.powerflow.bus.V1,
            angle_0=pf.powerflow.bus.A1,
            displayPF=true,
            M_b=100000000) annotation (Placement(transformation(rotation=0, extent={{-90,
                    -10},{-70,10}})));
          BasicSMIB.PF_Data.Power_Flow power_Flow
            annotation (Placement(transformation(extent={{-84,64},{-64,84}})));
        equation
          connect(B01.p, pwLine.p)
            annotation (Line(points={{-44,0},{-33.4,0}}, color={0,0,255}));
          connect(pwLine.n, B03.p)
            annotation (Line(points={{-22.6,0},{-14,0}}, color={0,0,255}));
          connect(pwLine3.p, B03.p) annotation (Line(points={{0.6,-30},{-4,-30},{
                  -4,0},{-14,0}}, color={0,0,255}));
          connect(load.p, B03.p)
            annotation (Line(points={{-14,-52},{-14,0}}, color={0,0,255}));
          connect(pwLine4.n, B02.p) annotation (Line(points={{51.4,-30},{56,-30},
                  {56,0},{66,0}}, color={0,0,255}));
          connect(B05.p, pwLine4.p)
            annotation (Line(points={{26,-30},{40.6,-30}}, color={0,0,255}));
          connect(B05.p, pwLine3.n)
            annotation (Line(points={{26,-30},{11.4,-30}}, color={0,0,255}));
          connect(pwFault.p, pwLine4.p)
            annotation (Line(points={{26,-48.3333},{26,-30},{40.6,-30}},
                                                                    color={0,0,255}));
          connect(pwLine1.p, B03.p) annotation (Line(points={{0.6,30},{-4,30},{-4,
                  0},{-14,0}}, color={0,0,255}));
          connect(pwLine1.n, B04.p)
            annotation (Line(points={{11.4,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.p, B04.p)
            annotation (Line(points={{40.6,30},{26,30}}, color={0,0,255}));
          connect(pwLine2.n, B02.p) annotation (Line(points={{51.4,30},{56,30},{
                  56,0},{66,0}}, color={0,0,255}));
          connect(generatorB.pwPin, B02.p)
            annotation (Line(points={{71,0},{66,0}}, color={0,0,255}));
          connect(generatorA.pwPin, B01.p)
            annotation (Line(points={{-69,0},{-44,0}}, color={0,0,255}));
        public
          package PF_Data

            record Power_Flow
              extends Modelica.Icons.Record;

              replaceable record PowerFlow =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Power_Flow_Template
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Power_Flow_Template
                annotation (choicesAllMatching);

              PowerFlow powerflow;

            end Power_Flow;

            record Power_Flow_Template
              extends Modelica.Icons.Record;

            end Power_Flow_Template;

            package Bus_Data

              partial record Bus_Template

                parameter OpenIPSL.Types.PerUnit V1 "(pu) B01"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.Angle A1 "B01"
                  annotation (Dialog(enable=false));

                parameter OpenIPSL.Types.PerUnit V2 "(pu) B02"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.Angle A2 "B02"
                  annotation (Dialog(enable=false));

                parameter OpenIPSL.Types.PerUnit V3 "(pu) B03"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.Angle A3 "B03"
                  annotation (Dialog(enable=false));

                parameter OpenIPSL.Types.PerUnit V4 "(pu) B04"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.Angle A4 "B04"
                  annotation (Dialog(enable=false));

                parameter OpenIPSL.Types.PerUnit V5 "(pu) B05"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.Angle A5 "B05"
                  annotation (Dialog(enable=false));

              end Bus_Template;

              record PF_Bus_00030
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.Bus_Template(
                  V1=1.0000000,
                  A1=0.0603045,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9952749,
                  A3=0.0000145,
                  V4=0.9976375,
                  A4=0.0000072,
                  V5=0.9976375,
                  A5=0.0000072);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00030;

              record PF_Bus_00035
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.Bus_Template(
                  V1=1.0000000,
                  A1=0.0704317,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9943635,
                  A3=0.0000157,
                  V4=0.9971817,
                  A4=0.0000078,
                  V5=0.9971817,
                  A5=0.0000078);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00035;

              record PF_Bus_00040
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.Bus_Template(
                  V1=1.0000000,
                  A1=0.0805866,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9934158,
                  A3=0.0000166,
                  V4=0.9967079,
                  A4=0.0000083,
                  V5=0.9967079,
                  A5=0.0000083);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00040;

              record PF_Bus_00045
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.Bus_Template(
                  V1=1.0000000,
                  A1=0.0907716,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9924313,
                  A3=0.0000171,
                  V4=0.9962157,
                  A4=0.0000085,
                  V5=0.9962157,
                  A5=0.0000085);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00045;

              record PF_Bus_00050
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.Bus_Template(
                  V1=1.0000000,
                  A1=0.1009890,
                  V2=1.0000000,
                  A2=0.0000000,
                  V3=0.9914097,
                  A3=0.0000173,
                  V4=0.9957048,
                  A4=0.0000086,
                  V5=0.9957048,
                  A5=0.0000086);

                // Bus: 'B01' (PV bus)

                // Bus: 'B02' (slack bus)

                // Bus: 'B03' (PQ bus)

                // Bus: 'B04' (PQ bus)

                // Bus: 'B05' (PQ bus)

              end PF_Bus_00050;
            end Bus_Data;

            package Loads_Data

              partial record Loads_Template

                parameter OpenIPSL.Types.ActivePower PL1 "load"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.ReactivePower QL1 "load"
                  annotation (Dialog(enable=false));

              end Loads_Template;

              record PF_Loads_00030
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.Loads_Template(
                    PL1=1e06*(30.0000000), QL1=1e06*(6.0000000));

                // Load: '3_1'

              end PF_Loads_00030;

              record PF_Loads_00035
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.Loads_Template(
                    PL1=1e06*(35.0000000), QL1=1e06*(7.0000000));

                // Load: '3_1'

              end PF_Loads_00035;

              record PF_Loads_00040
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.Loads_Template(
                    PL1=1e06*(40.0000000), QL1=1e06*(8.0000000));

                // Load: '3_1'

              end PF_Loads_00040;

              record PF_Loads_00045
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.Loads_Template(
                    PL1=1e06*(45.0000000), QL1=1e06*(9.0000000));

                // Load: '3_1'

              end PF_Loads_00045;

              record PF_Loads_00050
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.Loads_Template(
                    PL1=1e06*(50.0000000), QL1=1e06*(10.0000000));

                // Load: '3_1'

              end PF_Loads_00050;
            end Loads_Data;

            package Trafos_Data

              record PF_Trafos_00030
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.Trafos_Template;

              end PF_Trafos_00030;

              record PF_Trafos_00035
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.Trafos_Template;

              end PF_Trafos_00035;

              record PF_Trafos_00040
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.Trafos_Template;

              end PF_Trafos_00040;

              record PF_Trafos_00045
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.Trafos_Template;

              end PF_Trafos_00045;

              record PF_Trafos_00050
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.Trafos_Template;

              end PF_Trafos_00050;

              partial record Trafos_Template

              end Trafos_Template;
            end Trafos_Data;

            package Machines_Data

              partial record Machines_Template

                parameter OpenIPSL.Types.ActivePower PG1 "generatorA"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.ReactivePower QG1 "generatorA"
                  annotation (Dialog(enable=false));

                parameter OpenIPSL.Types.ActivePower PG2 "generatorB"
                  annotation (Dialog(enable=false));
                parameter OpenIPSL.Types.ReactivePower QG2 "generatorB"
                  annotation (Dialog(enable=false));

              end Machines_Template;

              record PF_Machines_00030
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.Machines_Template(
                  PG1=1e06*(30.0000000),
                  QG1=1e06*(3.1167032),
                  PG2=1e06*(0.0092088),
                  QG2=1e06*(4.7250506));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00030;

              record PF_Machines_00035
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.Machines_Template(
                  PG1=1e06*(35.0000000),
                  QG1=1e06*(3.8753610),
                  PG2=1e06*(0.0125590),
                  QG2=1e06*(5.6364455));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00035;

              record PF_Machines_00040
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.Machines_Template(
                  PG1=1e06*(40.0000000),
                  QG1=1e06*(4.7034426),
                  PG2=1e06*(0.0164380),
                  QG2=1e06*(6.5841535));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00040;

              record PF_Machines_00045
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.Machines_Template(
                  PG1=1e06*(45.0000000),
                  QG1=1e06*(5.6014511),
                  PG2=1e06*(0.0208502),
                  QG2=1e06*(7.5685853));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00045;

              record PF_Machines_00050
                extends
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.Machines_Template(
                  PG1=1e06*(50.0000000),
                  QG1=1e06*(6.5699358),
                  PG2=1e06*(0.0258006),
                  QG2=1e06*(8.5901842));

                // MACHINE: '1_1'
                // Bus: B01'

                // MACHINE: '2_1'
                // Bus: B02'

              end PF_Machines_00050;
            end Machines_Data;

            record PF_00030
              extends
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Power_Flow_Template;

              replaceable record Bus =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.PF_Bus_00030
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.PF_Loads_00030
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.PF_Machines_00030
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.PF_Trafos_00030
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00030;

            record PF_00035
              extends
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Power_Flow_Template;

              replaceable record Bus =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.PF_Bus_00035
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.PF_Loads_00035
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.PF_Machines_00035
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.PF_Trafos_00035
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00035;

            record PF_00040
              extends
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Power_Flow_Template;

              replaceable record Bus =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.PF_Bus_00040
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.PF_Loads_00040
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.PF_Machines_00040
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.PF_Trafos_00040
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00040;

            record PF_00045
              extends
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Power_Flow_Template;

              replaceable record Bus =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.PF_Bus_00045
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.PF_Loads_00045
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.PF_Machines_00045
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.PF_Trafos_00045
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00045;

            record PF_00050
              extends
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Power_Flow_Template;

              replaceable record Bus =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.PF_Bus_00050
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Bus_Data.Bus_Template
                "Bus power flow results";
              Bus bus;

              replaceable record Loads =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.PF_Loads_00050
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Loads_Data.Loads_Template
                "Loads power flow results";
              Loads loads;

              replaceable record Machines =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.PF_Machines_00050
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Machines_Data.Machines_Template
                "Machine power flow results";
              Machines machines;

              replaceable record Trafos =
                  FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.PF_Trafos_00050
                constrainedby
                FinalProject.Examples.Systems.Example.ExampleNetworkModel.PF_Data.Trafos_Data.Trafos_Template
                "Trafos power flow results";
              Trafos trafos;

            end PF_00050;
          end PF_Data;
          annotation (experiment(StopTime=10, __Dymola_Algorithm="Dassl"));
        end ExampleNetworkModel;
      end Example;
    end Systems;

    package Turbines
      "Open Loop and Close Loop Examples of Gas and Steam Turbines"
      extends Modelica.Icons.ExamplesPackage;

      package Gas
        extends Modelica.Icons.ExamplesPackage;

        model OpenLoopA
          extends Modelica.Icons.Example;

          PrimeMovers.Gas.PlantA.Plant plant annotation (Placement(
                transformation(extent={{20,-20},{60,20}}, rotation=0)));
          Modelica.Blocks.Sources.Step fuelFlowRate(
            height=0.3,
            startTime=500,
            offset=2.13)   annotation (Placement(transformation(extent={{-40,-10},{
                    -20,10}}, rotation=0)));
          inner ThermoPower.System system
            annotation (Placement(transformation(extent={{80,80},{100,100}})));
        equation
          connect(plant.fuelFlowRate, fuelFlowRate.y)
            annotation (Line(points={{19.2,0},{-19,0}},
                                                      color={0,0,127}));
          annotation (
            Diagram(graphics),
            experiment(
              StopTime=1000,
              __Dymola_NumberOfIntervals=5000,
              Tolerance=1e-006),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model allows to simulate an open loop transients.
</html>"),  __Dymola_experimentSetupOutput);
        end OpenLoopA;

        model ClosedLoopA
          extends Modelica.Icons.Example;

          PrimeMovers.Gas.PlantA.Plant plant annotation (Placement(
                transformation(extent={{20,-20},{60,20}}, rotation=0)));
          Modelica.Blocks.Sources.Ramp powerSetPoint(
            offset=4e6,
            height=4e6,
            duration=10,
            startTime=500) annotation (Placement(transformation(extent={{-80,-6},{-60,
                    14}}, rotation=0)));
          ThermoPower.Examples.RankineCycle.Models.PID pID(
            Ti=5,
            PVmin=2e6,
            PVmax=12e6,
            CSmin=0,
            CSmax=4,
            steadyStateInit=true,
            Kp=0.25,
            holdWhenSimplified=true) annotation (Placement(transformation(extent={{-32,-10},
                    {-12,10}}, rotation=0)));
          inner ThermoPower.System system
            annotation (Placement(transformation(extent={{80,80},{100,100}})));
        equation
          connect(plant.fuelFlowRate, pID.CS)
            annotation (Line(points={{19.2,0},{-12,0}},
                                                      color={0,0,127}));
          connect(pID.SP, powerSetPoint.y)
            annotation (Line(points={{-32,4},{-59,4}}, color={0,0,127}));
          connect(pID.PV, plant.generatedPower) annotation (Line(points={{-32,-4},
                  {-50,-4},{-50,-40},{80,-40},{80,0},{61.2,0}},color={0,0,127}));
          annotation (
            Diagram(graphics),
            experiment(StopTime=1000, Tolerance=1e-006),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",     info="<html>
<p>This model simulates a simple continuous-time control system for the steam power plant. The generated power is controlled to the set point by a PI controller with anti-windup.</p>
<p>The model starts at steady state.
</html>"));
        end ClosedLoopA;

        model OpenLoopD1
          extends Modelica.Icons.Example;

          replaceable package GasMedium =
            ThermalPower.Media.Gases.MoistFlueGas
          constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);

          inner ThermalPower.System_TPL system_TPL
            annotation (Placement(transformation(extent={{-90,68},{-70,88}})));

          PrimeMovers.Gas.PlantD.GasTurbineB gasTurbineB
            annotation (Placement(transformation(extent={{-32,-14},{0,18}})));
          Modelica.Blocks.Sources.Trapezoid fuelInput(
            amplitude=4,
            rising=300,
            width=3000,
            falling=300,
            period=4000,
            offset=20,
            startTime=1000)
            annotation (Placement(transformation(extent={{-68,-8},{-48,12}})));
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(w_fixed=2
                *500*3.141592)
            annotation (Placement(transformation(extent={{82,-8},{62,12}})));
          Modelica.Mechanics.Rotational.Components.Inertia inertia(J=10000)
            annotation (Placement(transformation(extent={{10,-8},{30,12}})));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
            annotation (Placement(transformation(extent={{36,-8},{56,12}})));
        equation
          connect(fuelInput.y, gasTurbineB.fuelFlowRate)
            annotation (Line(points={{-47,2},{-32,2}},     color={0,0,127}));
          connect(gasTurbineB.shaft_b, inertia.flange_a)
            annotation (Line(points={{0.32,2},{10,2}},
                                                    color={0,0,0}));
          connect(powerSensor.flange_a, inertia.flange_b)
            annotation (Line(points={{36,2},{30,2}}, color={0,0,0}));
          connect(constantSpeed.flange, powerSensor.flange_b)
            annotation (Line(points={{62,2},{56,2}}, color={0,0,0}));
          annotation (experiment(
              StopTime=5000,
              __Dymola_NumberOfIntervals=1000,
              __Dymola_Algorithm="Dassl"));
        end OpenLoopD1;

        model OpenLoopD2
          extends Modelica.Icons.Example;

          replaceable package GasMedium =
            ThermalPower.Media.Gases.MoistFlueGas
          constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);

          inner ThermalPower.System_TPL system_TPL
            annotation (Placement(transformation(extent={{-90,68},{-70,88}})));

          PrimeMovers.Gas.PlantD.GasTurbineB gasTurbineB
            annotation (Placement(transformation(extent={{-34,-14},{-2,18}})));
          Modelica.Blocks.Sources.Trapezoid fuelInput(
            amplitude=4,
            rising=300,
            width=3000,
            falling=300,
            period=4000,
            offset=20,
            startTime=1000)
            annotation (Placement(transformation(extent={{-68,-8},{-48,12}})));
          Modelon.ThermoFluid.Electrical.SimpleGenerator generator(w_nom=500*2*
                3.141592)
            annotation (Placement(transformation(extent={{32,-8},{52,12}})));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
            annotation (Placement(transformation(extent={{8,-8},{28,12}})));
        equation
          connect(fuelInput.y, gasTurbineB.fuelFlowRate)
            annotation (Line(points={{-47,2},{-34,2}},     color={0,0,127}));
          connect(gasTurbineB.shaft_b, powerSensor.flange_a)
            annotation (Line(points={{-1.68,2},{8,2}},
                                                    color={0,0,0}));
          connect(generator.flange_a, powerSensor.flange_b)
            annotation (Line(points={{34,2},{28,2}}, color={0,0,0}));
          annotation (experiment(
              StopTime=5000,
              __Dymola_NumberOfIntervals=1000,
              __Dymola_Algorithm="Dassl"));
        end OpenLoopD2;

        model PIDControllerTuningD
          extends ThermalPower.Experiments.ControlDesign.Templates.ControlDesign;
          extends Modelica.Icons.Example;

          replaceable package GasMedium =
            ThermalPower.Media.Gases.MoistFlueGas
          constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);

          Modelica.Blocks.Sources.Constant setPoint(k=0)
            annotation (Placement(transformation(extent={{98,62},{82,78}})));

          PrimeMovers.Gas.PlantD.GasTurbineB gasTurbineB
            annotation (Placement(transformation(extent={{-52,0},{-20,32}})));
          Modelon.ThermoFluid.Electrical.SimpleGenerator generator(w_nom=500*2*3.141592)
            annotation (Placement(transformation(extent={{14,6},{34,26}})));
          Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
            annotation (Placement(transformation(extent={{-10,6},{10,26}})));
          inner ThermalPower.System_TPL system_TPL
            annotation (Placement(transformation(extent={{60,-52},{80,-32}})));
        equation

          connect(setPoint.y, control.u_s)
            annotation (Line(points={{81.2,70},{74,70}},
                                                      color={0,0,127}));
          connect(gasTurbineB.shaft_b, powerSensor.flange_a)
            annotation (Line(points={{-19.68,16},{-10,16}},
                                                         color={0,0,0}));
          connect(generator.flange_a, powerSensor.flange_b)
            annotation (Line(points={{16,16},{10,16}}, color={0,0,0}));
          connect(gasTurbineB.fuelFlowRate, control.y) annotation (Line(points={{-52,16},
                  {-60,16},{-60,70},{51,70}},   color={0,0,127}));
          connect(powerSensor.power, control.u_m)
            annotation (Line(points={{-8,5},{-8,0},{62,0},{62,58}}, color={0,0,127}));
          annotation (Diagram(coordinateSystem(extent={{-180,-100},{100,100}}),
                              graphics={Rectangle(
                  extent={{-70,42},{50,-8}},
                  lineColor={28,108,200},
                  pattern=LinePattern.Dash), Text(
                  extent={{-38,40},{6,34}},
                  lineColor={28,108,200},
                  pattern=LinePattern.Dash,
                  textString="Process")}), Icon(coordinateSystem(extent={{-180,-100},
                    {100,100}})),
            experiment(StopTime=300, Tolerance=1e-006),
            Documentation(revisions="<html>
 <hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
        end PIDControllerTuningD;

        package Linearization
          extends Modelica.Icons.ExamplesPackage;
          function linearizeModel
            // Import required libraries
            import Modelica_LinearSystems2.StateSpace;

            // Declare outputs to display
            output Real A[:,:] "A-matrix";
            output Real B[:,:] "B-matrix";
            output Real C[:,:] "C-matrix";
            output Real D[:,:] "D-matrix";
            output String inputNames[:] "Modelica names of inputs";
            output String outputNames[:] "Modelica names of outputs";
            output String stateNames[:] "Modelica names of states";

            // Declare reconfigurable inputs
            input Modelica.Units.SI.Time tlin = 0 "t for model linearization";
            input Modelica.Units.SI.Time tsim = 200 "Simulation time";
            input Real numberOfIntervalsin=1000 "No. of intervals";
            input String methodin = "DASSL" "Solver";
            input Real fixedstepsizein= 0.01 "Time step - needed only for fixed time step solvers";

            input String pathToNonlinearPlantModel = "FinalProject.PrimeMovers.Gas.PlantD.Plant2";
            input String pathToNonlinearExperiment=
              "FinalProject.Examples.Turbines.Gas.Linearization.PerturbNL";
            input String pathToLinearExperiment=
              "FinalProject.Examples.Turbines.Gas.Linearization.LinearModel";

          algorithm
            // Compute and display the ABCD matrices, etc (A)
            (A,B,C,D,inputNames,outputNames,stateNames) :=
              Modelica_LinearSystems2.Utilities.Import.linearize(
              pathToNonlinearPlantModel,tlin);
            //nx := size(A, 1); //number of states
            //Modelica.Utilities.Streams.print("Number of states = " + String(nx));

            // Compute and display the ABCD matrices, etc (B)
            Modelica.Utilities.Streams.print("Linearized Model");
            ss := Modelica_LinearSystems2.ModelAnalysis.Linearize(
              pathToNonlinearPlantModel, simulationSetup=
              Modelica_LinearSystems2.Records.SimulationOptionsForLinearization(
              linearizeAtInitial=false, t_linearize=tlin));

            // Print the linear system
            Modelica.Utilities.Streams.print(String(ss));

            // Save data in a MAT file
            DataFiles.writeMATmatrix(
              "MyData.mat",
              "ABCD",
              [ss.A, ss.B; ss.C, ss.D],
              append=false);
            nx := size(ss.A, 1);
            DataFiles.writeMATmatrix(
              "MyData.mat",
              "nx",
              [nx],
              append=true);
            Modelica.Utilities.Streams.print("Simulating nonlinear model");
            translateModel(pathToNonlinearExperiment);
            simulateModel(
              pathToNonlinearExperiment,
              stopTime=tsim,
              numberOfIntervals=numberOfIntervalsin, method = methodin, fixedstepsize=fixedstepsizein,
              resultFile="res_nl");
            ny := size(ss.C, 1);
            y0 := DymolaCommands.Trajectories.readTrajectory(
               "res_nl.mat",
               {ss.yNames[i] for i in 1:ny},
               DymolaCommands.Trajectories.readTrajectorySize("res_nl.mat"));
              // {"PS_ConstantEfd." + ss.yNames[i] for i in 1:ny},
             DataFiles.writeMATmatrix(
               "MyData.mat",
               "y0",
               [y0[1:ny,1]],
               append=true);
            // Print y0's first values which is needed for the linear response model
            y0out := y0[:,1]; // we only want the first few elements
            Modelica.Utilities.Streams.print("y0 =");
            Modelica.Math.Vectors.toString(y0out);

            // We now simulate the linear model, which requires y0
            Modelica.Utilities.Streams.print("Simulating linear model");
            translateModel(pathToLinearExperiment);
            /*simulateModel(
    pathToLinearExperiment,
    stopTime=tsim,
    numberOfIntervals=numberOfIntervalsin, method = methodin, fixedstepsize=fixedstepsizein,
    resultFile="res_lin");*/

          end linearizeModel;

          model LinearModel
            "Simulate the linearized SMIB model obtained by running the function LinearizeSMIB."
            extends Modelica.Icons.Example;

            parameter Real[:] y0=vector(DataFiles.readMATmatrix("MyData.mat", "y0")) annotation (Evaluate=false);
            // The following has to be imported in order to be able to interpret and manipulate the StateSpace types
            import Modelica_LinearSystems2.StateSpace;
            parameter StateSpace ss=StateSpace.Import.fromFile("MyData.mat", "ABCD");
            parameter Integer ny=size(ss.C, 1);

            inner Modelica_LinearSystems2.Controller.SampleClock sampleClock
              annotation (Placement(transformation(extent={{72,70},{92,90}})));
            Modelica_LinearSystems2.Controller.StateSpace stateSpace(system=ss)
              annotation (Placement(transformation(extent={{-8,-12},{12,8}})));
            Modelica.Blocks.Sources.Step      fuelInput(
              height=4,
              offset=20,
              startTime=100)
              annotation (Placement(transformation(extent={{-48,-12},{-28,8}})));
            Modelica.Blocks.Math.Add addy[ny]
              annotation (Placement(transformation(extent={{34,-18},{54,2}})));
            Modelica.Blocks.Sources.Constant y0_initial[ny](k=y0) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-2,-40})));
          equation
            connect(fuelInput.y, stateSpace.u[1]) annotation (Line(
                points={{-27,-2},{-10,-2}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(stateSpace.y, addy.u1)
              annotation (Line(points={{13,-2},{32,-2}}, color={0,0,127}));
            connect(y0_initial.y, addy.u2)
              annotation (Line(points={{9,-40},{20,-40},{20,-14},{32,-14}},
                                                                 color={0,0,127}));
            annotation (
              Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(
                StopTime=5000,
                __Dymola_NumberOfIntervals=1000,
                __Dymola_fixedstepsize=0.01,
                __Dymola_Algorithm="Dassl"));
          end LinearModel;

          model PerturbNL
            extends Modelica.Icons.Example;

            replaceable package GasMedium =
              ThermalPower.Media.Gases.MoistFlueGas
            constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);

            Modelica.Blocks.Sources.Step      fuelInput(
              height=4,
              offset=20,
              startTime=100)
              annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
            PrimeMovers.Gas.PlantD.Plant2 plant
              annotation (Placement(transformation(extent={{-10,-12},{12,12}})));
            Modelica.Blocks.Interfaces.RealOutput generatedPower
              annotation (Placement(transformation(extent={{90,-10},{110,10}})));
          equation
            connect(plant.fuelFlowRate, fuelInput.y)
              annotation (Line(points={{-10.44,0},{-49,0}}, color={0,0,127}));
            connect(plant.generatedPower, generatedPower)
              annotation (Line(points={{12.66,0},{100,0}}, color={0,0,127}));
            annotation (experiment(
                StopTime=5000,
                __Dymola_NumberOfIntervals=1000,
                __Dymola_Algorithm="Dassl"));
          end PerturbNL;

          model GasTurbineSystem_interface
            "Interface to define common inputs, outputs and parameters for both the nonlinear and linearized models of the gas turbine system"

            parameter Real ffR0=2.13 "Initial Fuel flow rate";

            Modelica.Blocks.Math.Add add1
              annotation (Placement(transformation(extent={{-56,26},{-46,36}})));
            Modelica.Blocks.Sources.Constant fuelFR_0(k=ffR0)
              annotation (Placement(transformation(extent={{-78,12},{-66,24}})));
            Modelica.Blocks.Interfaces.RealInput fuelFlowRate
              "Connector of Real input signal 1"
              annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
            Modelica.Blocks.Interfaces.RealOutput genPower
              annotation (Placement(transformation(extent={{90,-10},{110,10}})));
          equation
            connect(fuelFR_0.y, add1.u2) annotation (Line(points={{-65.4,18},{-62,18},{-62,
                    28},{-57,28}}, color={0,0,127}));
            connect(add1.u1, fuelFlowRate) annotation (Line(points={{-57,34},{-88,34},{-88,
                    0},{-100,0}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,255},
                    lineThickness=0.5,
                    fillColor={215,215,215},
                    fillPattern=FillPattern.Solid)}), Diagram(coordinateSystem(
                    preserveAspectRatio=false)));
          end GasTurbineSystem_interface;

          model GasTurbineSystem_nonlinear
            "Non linear gas turbine system model"

            extends GasTurbineSystem_interface;
            PrimeMovers.Gas.PlantA.Plant plant annotation (Placement(
                  transformation(extent={{-10,-10},{10,10}})));
          equation
            connect(add1.y, plant.fuelFlowRate) annotation (Line(points={{-45.5,
                    31},{-30,31},{-30,0},{-10.4,0}}, color={0,0,127}));
            connect(plant.generatedPower, genPower)
              annotation (Line(points={{10.6,0},{100,0}}, color={0,0,127}));
          end GasTurbineSystem_nonlinear;

          model GasTurbineSystem_linear "Linear gas turbine system model"
            extends GasTurbineSystem_interface(final ffR0=0);

            import Modelica_LinearSystems2.StateSpace;
            parameter Real[:] y0=vector(DataFiles.readMATmatrix("MyData.mat", "y0"))
              annotation (Evaluate=false);
            parameter StateSpace ss=StateSpace.Import.fromFile("MyData.mat", "ABCD");
            parameter Integer ny=size(ss.C, 1);

            Modelica_LinearSystems2.Controller.StateSpace stateSpace(system=ss)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
            Modelica.Blocks.Math.Add addy[ny]
              annotation (Placement(transformation(extent={{30,-16},{50,4}})));
            Modelica.Blocks.Sources.Constant y0_initial[ny](k=y0)
              annotation (Placement(transformation(extent={{-10,-42},{10,-22}})));
          equation
            connect(add1.y, stateSpace.u[1]) annotation (Line(points={{-45.5,31},{-30,31},
                    {-30,0},{-12,0}}, color={0,0,127}));
            connect(y0_initial.y, addy.u2) annotation (Line(points={{11,-32},{
                    20,-32},{20,-12},{28,-12}}, color={0,0,127}));
            connect(stateSpace.y, addy.u1)
              annotation (Line(points={{11,0},{28,0}}, color={0,0,127}));
            connect(addy[1].y, genPower) annotation (Line(points={{51,-6},{60,
                    -6},{60,0},{100,0}}, color={0,0,127}));
          end GasTurbineSystem_linear;

          model Experiment_nonlinear
            "Experiment for the non linear gas turbine system"
            extends Modelica.Icons.Example;

            replaceable GasTurbineSystem_nonlinear gasTurbineSystem_nonlinear
              constrainedby GasTurbineSystem_interface annotation (Placement(
                  transformation(extent={{-10,-10},{10,10}})));
            Modelica.Blocks.Interfaces.RealOutput genPower annotation (
                Placement(transformation(extent={{92,-10},{112,10}})));
            Modelica.Blocks.Sources.Step fuelFlowRate(height=0.3, startTime=500)
                             annotation (Placement(transformation(extent={{-60,-10},
                      {-40,10}},rotation=0)));
          equation
            connect(gasTurbineSystem_nonlinear.genPower, genPower)
              annotation (Line(points={{10,0},{102,0}}, color={0,0,127}));
            connect(fuelFlowRate.y, gasTurbineSystem_nonlinear.fuelFlowRate)
              annotation (Line(points={{-39,0},{-10,0}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
          end Experiment_nonlinear;

          model Experiment_linear "Experiment for the linear gas turbine model"
            extends Experiment_nonlinear(redeclare GasTurbineSystem_linear
                gasTurbineSystem_nonlinear);
          end Experiment_linear;

          model PIDControllerTuningD
            extends
              ThermalPower.Experiments.ControlDesign.Templates.ControlDesign;
            extends Modelica.Icons.Example;

            replaceable package GasMedium =
              ThermalPower.Media.Gases.MoistFlueGas
            constrainedby Modelon.Media.Interfaces.HomogeneousMedium annotation(choicesAllMatching);

            Modelica.Blocks.Sources.Constant setPoint(k=0)
              annotation (Placement(transformation(extent={{98,62},{82,78}})));

            inner ThermalPower.System_TPL system_TPL
              annotation (Placement(transformation(extent={{60,-52},{80,-32}})));
            GasTurbineSystem_linear_tf gasTurbineSystem_linear_tf
              annotation (Placement(transformation(extent={{-20,4},{0,24}})));
          equation

            connect(setPoint.y, control.u_s)
              annotation (Line(points={{81.2,70},{74,70}},
                                                        color={0,0,127}));
            connect(gasTurbineSystem_linear_tf.fuelFlowRate, control.y)
              annotation (Line(points={{-20,14},{-50,14},{-50,70},{51,70}},
                  color={0,0,127}));
            connect(gasTurbineSystem_linear_tf.genPower, control.u_m)
              annotation (Line(points={{0,14},{62,14},{62,58}}, color={0,0,127}));
            annotation (Diagram(coordinateSystem(extent={{-180,-100},{100,100}}),
                                graphics={Rectangle(
                    extent={{-70,42},{50,-8}},
                    lineColor={28,108,200},
                    pattern=LinePattern.Dash), Text(
                    extent={{-38,40},{6,34}},
                    lineColor={28,108,200},
                    pattern=LinePattern.Dash,
                    textString="Process")}), Icon(coordinateSystem(extent={{-180,-100},
                      {100,100}})),
              experiment(
                StopTime=1000,
                __Dymola_NumberOfIntervals=1000,
                Tolerance=1e-06,
                __Dymola_Algorithm="Dassl"),
              Documentation(revisions="<html>
 <hr><p><font color=\"#E72614\"><b>Copyright &copy; 2004-2022, MODELON AB</b></font> <font color=\"#AFAFAF\"><br /><br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br /> This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br /> or by other means have their origin from any Modelon Library. </font></p>
</html>"));
          end PIDControllerTuningD;

          model GasTurbineSystem_linear_tf
            "Linear gas turbine system model with tf"
            extends GasTurbineSystem_interface(final ffR0=0);

            parameter Real[:] y0=vector(DataFiles.readMATmatrix("MyData.mat", "y0"));

            Modelica.Blocks.Math.Add addy
              annotation (Placement(transformation(extent={{30,-16},{50,4}})));
            Modelica.Blocks.Sources.Constant y0_initial(k=y0[1])
              annotation (Placement(transformation(extent={{-22,-44},{-2,-24}})));
            Modelica.Blocks.Continuous.TransferFunction transferFunction(b={
                  4.2235e6}, a={1,0.3013})
              annotation (Placement(transformation(extent={{-22,-10},{-2,10}})));
          equation
            connect(addy.y, genPower) annotation (Line(points={{51,-6},{60,
                    -6},{60,0},{100,0}}, color={0,0,127}));
            connect(add1.y, transferFunction.u) annotation (Line(points={{-45.5,31},{-40,31},
                    {-40,0},{-24,0}}, color={0,0,127}));
            connect(y0_initial.y, addy.u2) annotation (Line(points={{-1,-34},{22,-34},{22,
                    -12},{28,-12}}, color={0,0,127}));
            connect(transferFunction.y, addy.u1)
              annotation (Line(points={{-1,0},{28,0}}, color={0,0,127}));
          end GasTurbineSystem_linear_tf;

          model Experiment_linear_tf
            extends Experiment_nonlinear(redeclare GasTurbineSystem_linear_tf
                gasTurbineSystem_nonlinear);
          end Experiment_linear_tf;

          model Experiment_closedloop "Closed loop experiment"
            extends Modelica.Icons.Example;

            replaceable GasTurbineSystem_nonlinear gasTurbineSystem_nonlinear
              constrainedby GasTurbineSystem_interface annotation (Placement(
                  transformation(extent={{14,-10},{34,10}})));
            ThermoPower.Examples.RankineCycle.Models.PID pID(
              Ti=5,
              PVmin=2e6,
              PVmax=12e6,
              CSmin=0,
              CSmax=4,
              steadyStateInit=true,
              Kp=0.25,
              holdWhenSimplified=true) annotation (Placement(transformation(extent={{-28,-10},
                      {-8,10}},  rotation=0)));
            Modelica.Blocks.Sources.Ramp powerSetPoint(
              offset=4e6,
              height=4e6,
              duration=10,
              startTime=500) annotation (Placement(transformation(extent={{-74,-6},
                      {-54,14}},
                            rotation=0)));
          equation
            connect(pID.CS, gasTurbineSystem_nonlinear.fuelFlowRate)
              annotation (Line(points={{-8,0},{14,0}}, color={0,0,127}));
            connect(gasTurbineSystem_nonlinear.genPower, pID.PV) annotation (
                Line(points={{34,0},{60,0},{60,-36},{-36,-36},{-36,-4},{-28,-4}},
                  color={0,0,127}));
            connect(powerSetPoint.y, pID.SP)
              annotation (Line(points={{-53,4},{-28,4}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
          end Experiment_closedloop;
        end Linearization;
      end Gas;

      package Steam
        extends Modelica.Icons.ExamplesPackage;
        model ClosedLoopA
          extends Modelica.Icons.Example;
          Modelica.Blocks.Sources.Ramp gasTemperature(
            height=0,
            duration=0,
            offset=750) annotation (Placement(transformation(extent={{-40,-10},{-20,10}},
                         rotation=0)));
          //PrimeMovers.Steam.PlantA.Plant plant(economizer(gasFlow(wnm=2))) annotation (
          //    Placement(transformation(extent={{20,-24},{60,16}}, rotation=0)));
          Modelica.Blocks.Sources.Step voidFractionSetPoint(
            offset=0.2,
            height=0,
            startTime=0) annotation (Placement(transformation(extent={{-80,-54},{
                    -60,-34}}, rotation=0)));
          ThermoPower.Examples.RankineCycle.Models.PID voidFractionController(
            PVmin=0.1,
            PVmax=0.9,
            CSmax=2500,
            PVstart=0.1,
            CSstart=0.5,
            steadyStateInit=true,
            CSmin=500,
            Kp=-2,
            Ti=300) annotation (Placement(transformation(extent={{-40,-58},{-20,-38}},
                  rotation=0)));
          Modelica.Blocks.Sources.Ramp powerSetPoint(
            duration=450,
            startTime=500,
            height=-56.8e6*0.35,
            offset=56.8e6) annotation (Placement(transformation(extent={{-80,26},{-60,46}},
                              rotation=0)));
          ThermoPower.Examples.RankineCycle.Models.PID powerController(
            steadyStateInit=true,
            PVmin=20e6,
            PVmax=100e6,
            Ti=240,
            CSmin=100,
            CSmax=1000,
            Kp=2,
            CSstart=0.7,
            holdWhenSimplified=true) annotation (Placement(transformation(extent={{-40,50},
                    {-20,30}}, rotation=0)));
          PrimeMovers.Steam.PlantA.Plant plant(steamTurbineA(economizer(gasFlow(wnm=2))))
            annotation (Placement(transformation(extent={{26,-10},{46,10}})));
        equation
          connect(voidFractionController.SP, voidFractionSetPoint.y)
            annotation (Line(points={{-40,-44},{-50,-44},{-59,-44}},
                                                           color={0,0,127}));
          connect(voidFractionController.CS, plant.nPump) annotation (Line(points={{-20,-48},
                  {20,-48},{20,-6},{26.2,-6}},     color={0,0,127}));
          connect(voidFractionController.PV, plant.voidFraction) annotation (Line(
                points={{-40,-52},{-50,-52},{-50,-70},{80,-70},{80,-6},{46,-6}},
                color={0,0,127}));
          connect(powerSetPoint.y, powerController.SP) annotation (Line(points={{-59,36},
                  {-40,36}},                  color={0,0,127}));
          connect(powerController.PV, plant.generatedPower) annotation (Line(
                points={{-40,44},{-50,44},{-50,68},{60,68},{60,0},{46.2,0}},
                color={0,0,127}));
          connect(gasTemperature.y, plant.gasTemperature) annotation (Line(
              points={{-19,0},{26,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(powerController.CS, plant.gasFlowRate) annotation (Line(
              points={{-20,40},{20,40},{20,6},{26,6}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1), graphics),
            experiment(StopTime=3000, Tolerance=1e-006),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1), graphics),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",   info="<html>
<p>This model simulates a simple continuous-time control system for the steam power plant.
<p>The generated power and the evaporator void fraction are controlled to the set point by PI controllers with anti-windup.</p>
</html>"),  experimentSetupOutput(equdistant=false));
        end ClosedLoopA;

        model OpenLoopB
          extends Modelica.Icons.Example;
          PrimeMovers.Steam.PlantB.Plant                 plant
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Modelica.Blocks.Sources.Step step(
            height=-0.1,
            offset=1,
            startTime=5000)
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
        equation
          connect(step.y, plant.steamFlowRate)
            annotation (Line(points={{-39,0},{-10,0}}, color={0,0,127}));
          annotation (experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
        end OpenLoopB;

        model ClosedLoopB
          extends Modelica.Icons.Example;
          //PrimeMovers.Steam.PlantA.Plant plant(economizer(gasFlow(wnm=2))) annotation (
          //    Placement(transformation(extent={{20,-24},{60,16}}, rotation=0)));
          PrimeMovers.Steam.PlantB.Plant plant
            annotation (Placement(transformation(extent={{26,-10},{46,10}})));
          ThermoPower.Examples.RankineCycle.Models.PID governor(
            steadyStateInit=true,
            PVmin=20e6,
            PVmax=200e6,
            Ti=5,
            CSmin=50,
            CSmax=70,
            Kp=0.01,
            holdWhenSimplified=true) annotation (Placement(transformation(
                  extent={{-8,10},{12,-10}}, rotation=0)));
          Modelica.Blocks.Sources.Step step(
            height=-1e6,
            offset=0,
            startTime=6000)
            annotation (Placement(transformation(extent={{-50,-14},{-30,6}})));
        equation
          connect(governor.CS, plant.steamFlowRate)
            annotation (Line(points={{12,0},{26,0}}, color={0,0,127}));
          connect(plant.generatedPower, governor.PV) annotation (Line(points={{
                  46.2,0},{60,0},{60,30},{-20,30},{-20,4},{-8,4}}, color={0,0,
                  127}));
          connect(step.y, governor.SP)
            annotation (Line(points={{-29,-4},{-8,-4}}, color={0,0,127}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1)),
            experiment(
              StopTime=10000,
              Tolerance=1e-06,
              __Dymola_Algorithm="Dassl"),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1), graphics),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",   info="<html>
<p>This model simulates a simple continuous-time control system for the steam power plant.
<p>The generated power and the evaporator void fraction are controlled to the set point by PI controllers with anti-windup.</p>
</html>"),  experimentSetupOutput(equdistant=false));
        end ClosedLoopB;

        model OpenLoopC
          extends Modelica.Icons.Example;
          PrimeMovers.Steam.PlantC.Plant                 plant
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Modelica.Blocks.Sources.Ramp Q(
            duration=100,
            height=20e6,
            offset=150e6,
            startTime=100) annotation (Placement(transformation(extent={{-58,-10},
                    {-38,10}}, rotation=0)));
        equation
          connect(Q.y, plant.steamFlowRate)
            annotation (Line(points={{-37,0},{-10,0}}, color={0,0,127}));
          annotation (experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
        end OpenLoopC;

        model ClosedLoopC
          extends Modelica.Icons.Example;
          //PrimeMovers.Steam.PlantA.Plant plant(economizer(gasFlow(wnm=2))) annotation (
          //    Placement(transformation(extent={{20,-24},{60,16}}, rotation=0)));
          PrimeMovers.Steam.PlantC.Plant plant
            annotation (Placement(transformation(extent={{26,-10},{46,10}})));
          ThermoPower.Examples.RankineCycle.Models.PID pID(
            Ti=10,
            PVmin=42e6,
            PVmax=52e6,
            CSmin=150e6,
            CSmax=175e6,
            steadyStateInit=true,
            Kp=1,
            holdWhenSimplified=true) annotation (Placement(transformation(extent={{-10,-10},
                    {10,10}},             rotation=0)));
          Modelica.Blocks.Sources.Ramp powerSetPoint(
            offset=43e6,
            height=7e6,
            duration=100,
            startTime=500) annotation (Placement(transformation(extent={{-52,-6},
                    {-32,14}},
                          rotation=0)));
        equation
          connect(pID.CS, plant.steamFlowRate)
            annotation (Line(points={{10,0},{26,0}}, color={0,0,127}));
          connect(plant.generatedPower, pID.PV) annotation (Line(points={{46.2,
                  0},{60,0},{60,-28},{-20,-28},{-20,-4},{-10,-4}}, color={0,0,
                  127}));
          connect(powerSetPoint.y, pID.SP)
            annotation (Line(points={{-31,4},{-10,4}}, color={0,0,127}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1)),
            experiment(
              StopTime=1000,
              Tolerance=1e-06,
              __Dymola_Algorithm="Dassl"),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1), graphics),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",   info="<html>
<p>This model simulates a simple continuous-time control system for the steam power plant.
<p>The generated power and the evaporator void fraction are controlled to the set point by PI controllers with anti-windup.</p>
</html>"),  experimentSetupOutput(equdistant=false));
        end ClosedLoopC;
      end Steam;

      package CHP
        extends Modelica.Icons.ExamplesPackage;

        model OpenLoopB
          extends Modelica.Icons.Example;
          PrimeMovers.CHP.Plant                          plant
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Modelica.Blocks.Sources.Trapezoid fuelInput(
            amplitude=4,
            rising=300,
            width=3000,
            falling=300,
            period=4000,
            offset=20,
            startTime=1000)
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
        equation
          connect(fuelInput.y, plant.fuelFlowRate)
            annotation (Line(points={{-39,0},{-10.4,0}}, color={0,0,127}));
          annotation (experiment(
              StopTime=5000,
              __Dymola_NumberOfIntervals=1000,
              __Dymola_Algorithm="Dassl"));
        end OpenLoopB;

        model ClosedLoopB
          extends Modelica.Icons.Example;
          //PrimeMovers.Steam.PlantA.Plant plant(economizer(gasFlow(wnm=2))) annotation (
          //    Placement(transformation(extent={{20,-24},{60,16}}, rotation=0)));
          PrimeMovers.Steam.PlantB.Plant plant
            annotation (Placement(transformation(extent={{26,-10},{46,10}})));
          ThermoPower.Examples.RankineCycle.Models.PID governor(
            steadyStateInit=true,
            PVmin=20e6,
            PVmax=200e6,
            Ti=5,
            CSmin=50,
            CSmax=70,
            Kp=0.01,
            holdWhenSimplified=true) annotation (Placement(transformation(
                  extent={{-8,10},{12,-10}}, rotation=0)));
          Modelica.Blocks.Sources.Step step(
            height=-1e6,
            offset=0,
            startTime=6000)
            annotation (Placement(transformation(extent={{-50,-14},{-30,6}})));
        equation
          connect(governor.CS, plant.steamFlowRate)
            annotation (Line(points={{12,0},{26,0}}, color={0,0,127}));
          connect(plant.generatedPower, governor.PV) annotation (Line(points={{
                  46.2,0},{60,0},{60,30},{-20,30},{-20,4},{-8,4}}, color={0,0,
                  127}));
          connect(step.y, governor.SP)
            annotation (Line(points={{-29,-4},{-8,-4}}, color={0,0,127}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1)),
            experiment(
              StopTime=10000,
              Tolerance=1e-06,
              __Dymola_Algorithm="Dassl"),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1), graphics),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",   info="<html>
<p>This model simulates a simple continuous-time control system for the steam power plant.
<p>The generated power and the evaporator void fraction are controlled to the set point by PI controllers with anti-windup.</p>
</html>"),  experimentSetupOutput(equdistant=false));
        end ClosedLoopB;

        model ClosedLoopC
          extends Modelica.Icons.Example;
          //PrimeMovers.Steam.PlantA.Plant plant(economizer(gasFlow(wnm=2))) annotation (
          //    Placement(transformation(extent={{20,-24},{60,16}}, rotation=0)));
          PrimeMovers.Steam.PlantC.Plant plant
            annotation (Placement(transformation(extent={{26,-10},{46,10}})));
          ThermoPower.Examples.RankineCycle.Models.PID pID(
            Ti=10,
            PVmin=42e6,
            PVmax=52e6,
            CSmin=150e6,
            CSmax=175e6,
            steadyStateInit=true,
            Kp=1,
            holdWhenSimplified=true) annotation (Placement(transformation(extent={{-10,-10},
                    {10,10}},             rotation=0)));
          Modelica.Blocks.Sources.Ramp powerSetPoint(
            offset=43e6,
            height=7e6,
            duration=100,
            startTime=500) annotation (Placement(transformation(extent={{-52,-6},
                    {-32,14}},
                          rotation=0)));
        equation
          connect(pID.CS, plant.steamFlowRate)
            annotation (Line(points={{10,0},{26,0}}, color={0,0,127}));
          connect(plant.generatedPower, pID.PV) annotation (Line(points={{46.2,
                  0},{60,0},{60,-28},{-20,-28},{-20,-4},{-10,-4}}, color={0,0,
                  127}));
          connect(powerSetPoint.y, pID.SP)
            annotation (Line(points={{-31,4},{-10,4}}, color={0,0,127}));
          annotation (
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1)),
            experiment(
              StopTime=1000,
              Tolerance=1e-06,
              __Dymola_Algorithm="Dassl"),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                initialScale=0.1), graphics),
            Documentation(revisions="<html>
<ul>
<li><i>10 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       First release.</li>
</ul>
</html>",   info="<html>
<p>This model simulates a simple continuous-time control system for the steam power plant.
<p>The generated power and the evaporator void fraction are controlled to the set point by PI controllers with anti-windup.</p>
</html>"),  experimentSetupOutput(equdistant=false));
        end ClosedLoopC;
      end CHP;
    end Turbines;

    package HeatingSystem
      extends Modelica.Icons.ExamplesPackage;
      partial model HeatingSystem "Simple model of a heating system"
        extends Modelica.Icons.Example;
         replaceable package Medium =
            Modelica.Media.CompressibleLiquids.LinearWater_pT_Ambient
           constrainedby Modelica.Media.Interfaces.PartialMedium;

        Modelica.Fluid.Vessels.OpenTank tank(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          crossArea=0.01,
          height=2,
          level_start=1,
          nPorts=2,
          massDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
          use_HeatTransfer=true,
          portsData={Modelica.Fluid.Vessels.BaseClasses.VesselPortsData(diameter=
              0.01),Modelica.Fluid.Vessels.BaseClasses.VesselPortsData(diameter=
              0.01)},
          redeclare model HeatTransfer =
              Modelica.Fluid.Vessels.BaseClasses.HeatTransfer.IdealHeatTransfer
              (                                                                  k=10),
          ports(each p(start=1.1e5)),
          T_start=Modelica.Units.Conversions.from_degC(20))
                    annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
        Modelica.Fluid.Machines.ControlledPump pump(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          N_nominal=1500,
          use_T_start=true,
          T_start=Modelica.Units.Conversions.from_degC(40),
          m_flow_start=0.01,
          m_flow_nominal=0.01,
          control_m_flow=false,
          allowFlowReversal=false,
          p_a_start=110000,
          p_b_start=130000,
          p_a_nominal=110000,
          p_b_nominal=130000)
          annotation (Placement(transformation(extent={{-50,10},{-30,30}})));
        Modelica.Fluid.Valves.ValveIncompressible valve(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          CvData=Modelica.Fluid.Types.CvTypes.OpPoint,
          m_flow_nominal=0.01,
          show_T=true,
          allowFlowReversal=false,
          dp_start=18000,
          dp_nominal=10000)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
        Modelica.Thermal.HeatTransfer.Sources.FixedTemperature T_ambient(T=system.T_ambient)
          annotation (Placement(transformation(extent={{-14,-27},{0,-13}})));
        Modelica.Thermal.HeatTransfer.Components.ThermalConductor wall(G=1.6e3/20)
          annotation (Placement(transformation(
              origin={10,-48},
              extent={{8,-10},{-8,10}},
              rotation=90)));
        Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow
                                                            burner
          annotation (Placement(transformation(extent={{16,30},{36,50}})));
        inner Modelica.Fluid.System system(
            m_flow_small=1e-4, energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial)
                              annotation (Placement(transformation(extent={{74,72},
                  {94,92}})));
        Modelica.Fluid.Pipes.DynamicPipe heater(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_T_start=true,
          T_start=Modelica.Units.Conversions.from_degC(80),
          length=2,
          redeclare model HeatTransfer =
              Modelica.Fluid.Pipes.BaseClasses.HeatTransfer.IdealFlowHeatTransfer,
          diameter=0.01,
          nNodes=1,
          redeclare model FlowModel =
              Modelica.Fluid.Pipes.BaseClasses.FlowModels.DetailedPipeFlow,
          use_HeatTransfer=true,
          modelStructure=Modelica.Fluid.Types.ModelStructure.a_v_b,
          p_a_start=130000)
          annotation (Placement(transformation(extent={{30,10},{50,30}})));

        Modelica.Fluid.Pipes.DynamicPipe radiator(
          use_T_start=true,
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          length=10,
          T_start=Modelica.Units.Conversions.from_degC(40),
          redeclare model HeatTransfer =
              Modelica.Fluid.Pipes.BaseClasses.HeatTransfer.IdealFlowHeatTransfer,
          diameter=0.01,
          nNodes=1,
          redeclare model FlowModel =
              Modelica.Fluid.Pipes.BaseClasses.FlowModels.DetailedPipeFlow,
          use_HeatTransfer=true,
          modelStructure=Modelica.Fluid.Types.ModelStructure.a_v_b,
          p_a_start=110000,
          state_a(p(start=110000)),
          state_b(p(start=110000)))
          annotation (Placement(transformation(extent={{20,-80},{0,-60}})));

      public
        Modelica.Fluid.Sensors.Temperature sensor_T_forward(redeclare package
            Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{50,30},{70,50}})));
        Modelica.Fluid.Sensors.Temperature sensor_T_return(redeclare package
            Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-20,-60},{-40,-40}})));
        Modelica.Fluid.Pipes.DynamicPipe pipe(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_T_start=true,
          T_start=Modelica.Units.Conversions.from_degC(80),
          redeclare model HeatTransfer =
              Modelica.Fluid.Pipes.BaseClasses.HeatTransfer.IdealFlowHeatTransfer,
          diameter=0.01,
          redeclare model FlowModel =
              Modelica.Fluid.Pipes.BaseClasses.FlowModels.DetailedPipeFlow,
          length=10,
          p_a_start=130000) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={80,-20})));

      equation
        connect(T_ambient.port, wall.port_a) annotation (Line(
              points={{0,-20},{10,-20},{10,-40}}, color={191,0,0}));
        connect(radiator.port_a, valve.port_b) annotation (Line(points={{20,-70},{20,
                -70},{40,-70}}, color={0,127,255}));
        connect(sensor_T_return.port, radiator.port_b)
                                                  annotation (Line(points={{-30,-60},
                {-30,-70},{0,-70}}, color={0,127,255}));
        connect(tank.ports[2], pump.port_a) annotation (Line(
            points={{-68,30},{-68,20},{-50,20}}, color={0,127,255}));
        connect(burner.port, heater.heatPorts[1])
                                                annotation (Line(
            points={{36,40},{40.1,40},{40.1,24.4}}, color={191,0,0}));
        connect(wall.port_b, radiator.heatPorts[1]) annotation (Line(
            points={{10,-56},{10,-65.6},{9.9,-65.6}}, color={191,0,0}));
        connect(sensor_T_forward.port, heater.port_b)
                                                    annotation (Line(
            points={{60,30},{60,20},{50,20}}, color={0,127,255}));
        connect(heater.port_b, pipe.port_a) annotation (Line(
            points={{50,20},{80,20},{80,-10}}, color={0,127,255}));
        connect(pipe.port_b, valve.port_a) annotation (Line(
            points={{80,-30},{80,-70},{60,-70}}, color={0,127,255}));
        connect(radiator.port_b, tank.ports[1]) annotation (Line(
            points={{0,-70},{-72,-70},{-72,30}}, color={0,127,255}));
        connect(pump.port_b, heater.port_a)
          annotation (Line(points={{-30,20},{30,20}}, color={0,127,255}));
        annotation (Documentation(info="<html>
<p>
Simple heating system with a closed flow cycle.
After 2000s of simulation time the valve fully opens. A simple idealized control is embedded
into the respective components, so that the heating system can be regulated with the valve:
the pump controls the pressure, the burner controls the temperature.
</p>
<p>
One can investigate the temperatures and flows for different settings of <code>system.energyDynamics</code>
(see Assumptions tab of the system object).</p>
<ul>
<li>With <code>system.energyDynamics==Types.Dynamics.FixedInitial</code> the states need to find their steady values during the simulation.</li>
<li>With <code>system.energyDynamics==Types.Dynamics.SteadyStateInitial</code> (default setting) the simulation starts in steady-state.</li>
<li>With <code>system.energyDynamics==Types.Dynamics.SteadyState</code> all but one dynamic states are eliminated.
    The left state <code>tank.m</code> is to account for the closed flow cycle. It is constant as outflow and inflow are equal
    in a steady-state simulation.</li>
</ul>
<p>
Note that a closed flow cycle generally causes circular equalities for the mass flow rates and leaves the pressure undefined.
This is why the tank.massDynamics, i.e., the tank level determining the port pressure, is modified locally to Types.Dynamics.FixedInitial.
</p>
<p>
Also note that the tank is thermally isolated against its ambient. This way the temperature of the tank is also
well defined for zero flow rate in the heating system, e.g., for valveOpening.offset=0 at the beginning of a simulation.
The pipe however is assumed to be perfectly isolated.
If steady-state values shall be obtained with the valve fully closed, then a thermal
coupling between the pipe and its ambient should be defined as well.
</p>
<p>
Moreover it is worth noting that the idealized direct connection between the heater and the pipe, resulting in equal port pressures,
is treated as high-index DAE, as opposed to a nonlinear equation system for connected pressure loss correlations. A pressure loss correlation
could be additionally introduced to model the fitting between the heater and the pipe, e.g., to adapt different diameters.
</p>

<img src=\"modelica://Modelica/Resources/Images/Fluid/Examples/HeatingSystem.png\" border=\"1\"
     alt=\"HeatingSystem.png\">
</html>"),       experiment(StopTime=6000),
          __Dymola_Commands(file(ensureSimulated=true)=
              "modelica://Modelica/Resources/Scripts/Dymola/Fluid/HeatingSystem/plotResults.mos"
              "plotResults"));
      end HeatingSystem;

      model HeatingSystem_interface
        "Interface to define common inputs, outputs and parameters for both the nonlinear and linearized models of the heating systems"

        parameter Real Q0=300 "Nominal heaf flowrate";
        parameter Real u0=0.1 "Nominal valve opening";

        Modelica.Blocks.Math.Add add1
          annotation (Placement(transformation(extent={{-56,76},{-46,86}})));
        Modelica.Blocks.Sources.Constant Q_Flow0(k=Q0)
          annotation (Placement(transformation(extent={{-78,62},{-66,74}})));
        Modelica.Blocks.Math.Add add2
          annotation (Placement(transformation(extent={{-56,-86},{-46,-76}})));
        Modelica.Blocks.Sources.Constant u_0(k=u0)
          annotation (Placement(transformation(extent={{-80,-96},{-68,-84}})));
        Modelica.Blocks.Interfaces.RealInput dQ_flow
          "Connector of Real input signal 1"
          annotation (Placement(transformation(extent={{-120,30},{-80,70}})));
        Modelica.Blocks.Interfaces.RealInput du "Connector of Real input signal 1"
          annotation (Placement(transformation(extent={{-120,-70},{-80,-30}})));
        Modelica.Blocks.Interfaces.RealOutput T_forward
          annotation (Placement(transformation(extent={{90,30},{110,50}})));
        Modelica.Blocks.Interfaces.RealOutput T_return
          annotation (Placement(transformation(extent={{90,-50},{110,-30}})));
      equation
        connect(Q_Flow0.y, add1.u2) annotation (Line(points={{-65.4,68},{-62,68},{-62,
                78},{-57,78}}, color={0,0,127}));
        connect(u_0.y, add2.u2) annotation (Line(points={{-67.4,-90},{-64,-90},{-64,-84},
                {-57,-84}}, color={0,0,127}));
        connect(add1.u1, dQ_flow) annotation (Line(points={{-57,84},{-88,84},{-88,50},
                {-100,50}}, color={0,0,127}));
        connect(add2.u1, du) annotation (Line(points={{-57,-78},{-88,-78},{-88,-50},{-100,
                -50}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,255},
                lineThickness=0.5,
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid)}), Diagram(coordinateSystem(
                preserveAspectRatio=false)));
      end HeatingSystem_interface;

      model HeatingSystem_nonlinear "Plant model for the non-linear heating system"
        extends HeatingSystem;
        extends HeatingSystem_interface;
      equation
        connect(add1.y, burner.Q_flow) annotation (Line(points={{-45.5,81},{0,81},{0,40},
                {16,40}}, color={0,0,127}));
        connect(add2.y, valve.opening) annotation (Line(points={{-45.5,-81},{-18,-81},
                {-18,-92},{32,-92},{32,-54},{50,-54},{50,-62}}, color={0,0,127}));
        connect(sensor_T_forward.T, T_forward)
          annotation (Line(points={{67,40},{100,40}}, color={0,0,127}));
        connect(sensor_T_return.T, T_return) annotation (Line(points={{-37,-50},{-60,-50},
                {-60,-4},{50,-4},{50,-40},{100,-40}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end HeatingSystem_nonlinear;

      model HeatingSystem_linear "Linear model of the heating system"
        extends HeatingSystem_interface(final Q0=0, final u0=0);

        import Modelica_LinearSystems2.StateSpace;
        parameter Real[:] y0=vector(DataFiles.readMATmatrix("MyData.mat", "y0"))
          annotation (Evaluate=false);
        parameter StateSpace ss=StateSpace.Import.fromFile("MyData.mat", "ABCD");
        parameter Integer ny=size(ss.C, 1);
        Modelica_LinearSystems2.Controller.StateSpace stateSpace(system=ss)
          annotation (Placement(transformation(extent={{-18,-10},{2,10}})));
        Modelica.Blocks.Sources.Constant y0_initial[ny](k=y0)
          annotation (Placement(transformation(extent={{-20,-38},{0,-18}})));
        Modelica.Blocks.Math.Add addy[ny]
          annotation (Placement(transformation(extent={{18,-22},{38,-2}})));
        Modelica.Blocks.Routing.Multiplex2 multiplex2_1
          annotation (Placement(transformation(extent={{-56,-10},{-36,10}})));
        Modelica.Blocks.Routing.DeMultiplex2 deMultiplex2_1
          annotation (Placement(transformation(extent={{50,-22},{70,-2}})));
      equation
        connect(y0_initial.y, addy.u2) annotation (Line(points={{1,-28},{10,-28},{10,-18},
                {16,-18}}, color={0,0,127}));
        connect(multiplex2_1.y, stateSpace.u)
          annotation (Line(points={{-35,0},{-20,0}}, color={0,0,127}));
        connect(add1.y, multiplex2_1.u1[1]) annotation (Line(points={{-45.5,81},{-40,81},
                {-40,40},{-70,40},{-70,6},{-58,6}}, color={0,0,127}));
        connect(add2.y, multiplex2_1.u2[1]) annotation (Line(points={{-45.5,-81},{-40,
                -81},{-40,-40},{-68,-40},{-68,-6},{-58,-6}}, color={0,0,127}));
        connect(deMultiplex2_1.y1[1], T_forward) annotation (Line(points={{71,-6},{84,
                -6},{84,40},{100,40}}, color={0,0,127}));
        connect(deMultiplex2_1.y2[1], T_return) annotation (Line(points={{71,-18},{84,
                -18},{84,-40},{100,-40}}, color={0,0,127}));
        connect(stateSpace.y, addy.u1)
          annotation (Line(points={{3,0},{8,0},{8,-6},{16,-6}}, color={0,0,127}));
        connect(addy.y, deMultiplex2_1.u)
          annotation (Line(points={{39,-12},{48,-12}}, color={0,0,127}));
        annotation (Diagram(graphics={Text(
                extent={{-34,-2},{-20,-12}},
                textColor={28,108,200},
                textString="du",
                textStyle={TextStyle.Bold}),
                                      Text(
                extent={{6,12},{20,2}},
                textColor={28,108,200},
                textStyle={TextStyle.Bold},
                textString="dy"),     Text(
                extent={{38,-18},{52,-28}},
                textColor={28,108,200},
                textStyle={TextStyle.Bold},
                textString="y")}));
      end HeatingSystem_linear;

      model HeatingSystem_linear_TF
        "Linear model of the heating system using transfer functions instead of SS representation"
        extends HeatingSystem_interface(final Q0=0, final u0=0, Q_Flow0(k=0),
          u_0(k=0));

        import Modelica_LinearSystems2.StateSpace;
        parameter Real[:] y0=vector(DataFiles.readMATmatrix("MyData.mat", "y0"))
          annotation (Evaluate=false);
        parameter Real[:] n11=vector(DataFiles.readMATmatrix("MyData.mat", "n11"));
        parameter Real[:] d11=vector(DataFiles.readMATmatrix("MyData.mat", "d11"));
        parameter Real[:] n12=vector(DataFiles.readMATmatrix("MyData.mat", "n12"));
        parameter Real[:] d12=vector(DataFiles.readMATmatrix("MyData.mat", "d12"));
        parameter Real[:] n21=vector(DataFiles.readMATmatrix("MyData.mat", "n21"));
        parameter Real[:] d21=vector(DataFiles.readMATmatrix("MyData.mat", "d21"));
        parameter Real[:] n22=vector(DataFiles.readMATmatrix("MyData.mat", "n22"));
        parameter Real[:] d22=vector(DataFiles.readMATmatrix("MyData.mat", "d22"));

        Modelica.Blocks.Sources.Constant y0Exp1(k=y0[1])
          annotation (Placement(transformation(extent={{10,28},{22,40}})));
        Modelica.Blocks.Sources.Constant y0Exp(k=y0[2])
          annotation (Placement(transformation(extent={{16,-90},{28,-78}})));
        Modelica.Blocks.Continuous.TransferFunction G11(b=n11, a=d11)
          annotation (Placement(transformation(extent={{-22,72},{-4,90}})));
        Modelica.Blocks.Continuous.TransferFunction G12(b=n12, a=d12)
          annotation (Placement(transformation(extent={{-22,44},{-4,62}})));
        Modelica.Blocks.Continuous.TransferFunction G21(b=n21, a=d21)
          annotation (Placement(transformation(extent={{-22,-50},{-4,-32}})));
        Modelica.Blocks.Continuous.TransferFunction G22(b=n22, a=d22)
          annotation (Placement(transformation(extent={{-22,-78},{-4,-60}})));
        Modelica.Blocks.Math.Add add3
          annotation (Placement(transformation(extent={{12,62},{22,72}})));
        Modelica.Blocks.Math.Add add4
          annotation (Placement(transformation(extent={{12,-60},{22,-50}})));
        Modelica.Blocks.Math.Add add5
          annotation (Placement(transformation(extent={{46,46},{56,56}})));
        Modelica.Blocks.Math.Add add6
          annotation (Placement(transformation(extent={{46,-74},{56,-64}})));
      equation
        connect(G11.u, add1.y)
          annotation (Line(points={{-23.8,81},{-45.5,81}}, color={0,0,127}));
        connect(add2.y, G12.u) annotation (Line(points={{-45.5,-81},{-42,-81},{-42,-82},
                {-38,-82},{-38,53},{-23.8,53}}, color={0,0,127}));
        connect(G22.u, add2.y) annotation (Line(points={{-23.8,-69},{-28,-69},{-28,-81},
                {-45.5,-81}}, color={0,0,127}));
        connect(G21.u, add1.y) annotation (Line(points={{-23.8,-41},{-34,-41},{-34,80},
                {-32,82},{-32,81},{-45.5,81}}, color={0,0,127}));
        connect(G11.y, add3.u1) annotation (Line(points={{-3.1,81},{2,81},{2,70},{11,70}},
              color={0,0,127}));
        connect(G12.y, add3.u2) annotation (Line(points={{-3.1,53},{4,53},{4,64},{11,64}},
              color={0,0,127}));
        connect(G21.y, add4.u1) annotation (Line(points={{-3.1,-41},{4,-41},{4,-52},{11,
                -52}}, color={0,0,127}));
        connect(G22.y, add4.u2) annotation (Line(points={{-3.1,-69},{6,-69},{6,-58},{11,
                -58}}, color={0,0,127}));
        connect(y0Exp1.y, add5.u2) annotation (Line(points={{22.6,34},{28,34},{28,48},
                {45,48}}, color={0,0,127}));
        connect(add3.y, add5.u1) annotation (Line(points={{22.5,67},{30,67},{30,54},{45,
                54}}, color={0,0,127}));
        connect(add5.y, T_forward) annotation (Line(points={{56.5,51},{70,51},{70,40},
                {100,40}}, color={0,0,127}));
        connect(y0Exp.y, add6.u2) annotation (Line(points={{28.6,-84},{36,-84},{36,-72},
                {45,-72}}, color={0,0,127}));
        connect(add4.y, add6.u1) annotation (Line(points={{22.5,-55},{32,-55},{32,-66},
                {45,-66}}, color={0,0,127}));
        connect(add6.y, T_return) annotation (Line(points={{56.5,-69},{70,-69},{70,-40},
                {100,-40}}, color={0,0,127}));
      end HeatingSystem_linear_TF;

      model Experiment_nonlinear "Experiment model for the nonlinear heating system"
        extends Modelica.Icons.Example;
        Modelica.Blocks.Sources.Step step(height=30, startTime=1e3)
          annotation (Placement(transformation(extent={{-68,20},{-48,40}})));
        Modelica.Blocks.Sources.Step step1(height=0.1, startTime=6e3)
          annotation (Placement(transformation(extent={{-68,-40},{-48,-20}})));
        replaceable HeatingSystem_nonlinear heatingSystem_nonlinear constrainedby
          HeatingSystem_interface
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Modelica.Blocks.Interfaces.RealOutput T_forward
          annotation (Placement(transformation(extent={{90,30},{110,50}})));
        Modelica.Blocks.Interfaces.RealOutput T_return
          annotation (Placement(transformation(extent={{90,-50},{110,-30}})));
      equation
        connect(heatingSystem_nonlinear.dQ_flow, step.y) annotation (Line(points={{-10,
                5},{-40,5},{-40,30},{-47,30}}, color={0,0,127}));
        connect(heatingSystem_nonlinear.du, step1.y) annotation (Line(points={{-10,-5},
                {-40,-5},{-40,-30},{-47,-30}}, color={0,0,127}));
        connect(heatingSystem_nonlinear.T_forward, T_forward) annotation (Line(
              points={{10,4},{54,4},{54,40},{100,40}}, color={0,0,127}));
        connect(heatingSystem_nonlinear.T_return, T_return) annotation (Line(
              points={{10,-4},{54,-4},{54,-40},{100,-40}}, color={0,0,127}));
        annotation (experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
      end Experiment_nonlinear;

      model Experiment_linear
        "Experiment model for the linear model of the heating system"
        extends Experiment_nonlinear(redeclare HeatingSystem_linear
            heatingSystem_nonlinear);
        annotation (experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
      end Experiment_linear;

      model Experiment_linear_TF
        "Experiment model for the nonlinear heating system"
        extends Modelica.Icons.Example;
        Modelica.Blocks.Sources.Step step(height=30, startTime=1e3)
          annotation (Placement(transformation(extent={{-68,20},{-48,40}})));
        Modelica.Blocks.Sources.Step step1(height=0.1, startTime=6e3)
          annotation (Placement(transformation(extent={{-68,-40},{-48,-20}})));
        replaceable HeatingSystem_linear_TF heatingSystem_nonlinear constrainedby
          HeatingSystem_interface
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Modelica.Blocks.Interfaces.RealOutput T_forward
          annotation (Placement(transformation(extent={{90,30},{110,50}})));
        Modelica.Blocks.Interfaces.RealOutput T_return
          annotation (Placement(transformation(extent={{90,-50},{110,-30}})));
      equation
        connect(heatingSystem_nonlinear.dQ_flow, step.y) annotation (Line(points={{-10,
                5},{-40,5},{-40,30},{-47,30}}, color={0,0,127}));
        connect(heatingSystem_nonlinear.du, step1.y) annotation (Line(points={{-10,-5},
                {-40,-5},{-40,-30},{-47,-30}}, color={0,0,127}));
        connect(heatingSystem_nonlinear.T_forward, T_forward) annotation (Line(
              points={{10,4},{54,4},{54,40},{100,40}}, color={0,0,127}));
        connect(heatingSystem_nonlinear.T_return, T_return) annotation (Line(
              points={{10,-4},{54,-4},{54,-40},{100,-40}}, color={0,0,127}));
        annotation (experiment(StopTime=10000, __Dymola_Algorithm="Dassl"));
      end Experiment_linear_TF;

      function reduceModel
        "Model reduction based on Hankel value decomposition"

        import Modelica_LinearSystems2;
        import Modelica_LinearSystems2.StateSpace;
        import Modelica_LinearSystems2.Math.Matrices;
        import Modelica.Utilities.Streams.print;
        import Modelica_LinearSystems2.Types.StaircaseMethod;
        import Modelica_LinearSystems2.TransferFunction;
        //
        input Real[:, :] A=[-1, -2; 1, 0];
        input Real[:, :] B=[1; 0];
        input Real[:, :] C=[2, 3];
        input Real[:, :] D=[0];
        input Boolean use_tf=true;
        input TransferFunction s=TransferFunction.s();
        input TransferFunction tf=(-0.3*s + 1)*(0.08*s + 1)/(2*s + 1)/(s + 1)/(0.4*s
             + 1)/(0.2*s + 1)/(0.05*s + 1)^3;
        input StateSpace ss1=StateSpace(
            A,
            B,
            C,
            D);
        input StateSpace ss=if use_tf then StateSpace(tf) else ss1;
        input StateSpace ssi=
            Modelica_LinearSystems2.StateSpace.Transformation.toIrreducibleForm(ss,
            tol=Modelica.Constants.eps);
        input Real Ai[:, :]=ssi.A;
        input Real Bi[:, :]=ssi.B;
        input Real Ci[:, :]=ssi.C;
        input Real Di[:, :]=ssi.D;
        input Integer n=2 "order of reduced model";
        output StateSpace ss_red=StateSpace(
            zeros(n, n),
            zeros(n, size(Bi, 2)),
            zeros(size(Ci, 1), n),
            zeros(size(Di, 1), size(Di, 2)));
        output Real[n, n] Ared;
        output Real[n, size(Bi, 2)] Bred;
        output Real[size(Ci, 1), n] Cred;
        output Real[size(Di, 1), size(Di, 2)] Dred;
        output Real[min(size(Ai, 1), size(Ai, 1))] sigma;

      protected
        Real[n, n] Tr;
        Real[size(Ai, 1), size(Ai, 1)] U;
        Real[size(Ai, 2), size(Ai, 2)] VT;
        Real[size(Ai, 1), size(Ai, 1)] P;
        Real[size(Ai, 1), size(Ai, 1)] Q;
        Real[size(Ai, 1), size(Ai, 1)] R;
        Real[size(Ai, 1), size(Ai, 1)] T;
        Real[min(size(Ai, 1), size(Ai, 1))] sigma_sqrt;
        Real Ar[n, n];
        Real Br[n, size(Bi, 2)];
        Real Cr[size(Ci, 1), n];
        Real Dr[size(Di, 1), size(Di, 2)];
        Integer ii;
        TransferFunction tf_red;

      algorithm

        P := Modelica_LinearSystems2.Math.Matrices.lyapunov(
          A=transpose(Ai),
          C=-Bi*transpose(Bi),
          eps=Modelica.Constants.eps);
        //XA + A'*X = C.
        Q := Modelica_LinearSystems2.Math.Matrices.lyapunov(
          A=Ai,
          C=-transpose(Ci)*Ci,
          eps=Modelica.Constants.eps);
        R := Modelica_LinearSystems2.Math.Matrices.cholesky(A=0.5*(P + transpose(P))
           + Modelica.Constants.eps*identity(size(P, 1)), upper=false);

        (sigma,U,VT) := Modelica.Math.Matrices.singularValues(transpose(R)*Q*R);
        sigma_sqrt := {sqrt(sigma[i]) for i in 1:size(sigma, 1)};

        T := R*U*diagonal(sigma_sqrt);
        (Ar,Br,Cr,Dr) := reduced_ssn(
          Modelica.Math.Matrices.inv(T)*Ai*T,
          Modelica.Math.Matrices.inv(T)*Bi,
          Ci*T,
          Di,
          size(Ai, 1) - n);
        //KACST_CONTROL.Scripts.Internal.StringMat(Br);
        //   KACST_CONTROL.Scripts.Internal.StringMat(T);
        Tr := reduced_ssn(
          T,
          T,
          T,
          T,
          size(Ai, 1) - n);
        //  KACST_CONTROL.Scripts.Internal.StringMat(Tr);

        // Modelica.Utilities.Streams.print(String(ssred2));
        Ared := Tr*Ar*Modelica.Math.Matrices.inv(Tr);
        Bred := Tr*Br;
        Cred := Cr*Modelica.Math.Matrices.inv(Tr);
        Dred := Dr;
        ss_red := StateSpace(
          Ar,
          Br,
          Cr,
          Dr);
        //    ss_red := StateSpace(
        //      Ar,
        //      Br,
        //      Cr,
        //      Dr);

        tf_red := StateSpace.Conversion.toTransferFunction(ss_red);
        //   ss_red.uNames := ssi.uNames;
        //   ss_red.yNames := ssi.yNames;

        Modelica.Utilities.Streams.print(String(tf_red));
        Modelica.Utilities.Streams.print("sigma = " + StringVec(sigma));

      end reduceModel;

      function reduceLinearizedModel
        import Modelica_LinearSystems2.StateSpace;
        import Modelica_LinearSystems2.TransferFunction;

        input String ssFileName = "MyData.mat";
        input Integer reducedOrder=2 "order of reduced model";
        input String [:] uNames;
        input String [:] yNames;

      protected
        StateSpace ss = StateSpace.Import.fromFile(ssFileName, "ABCD");

      algorithm

        for i in 1:size(ss.C, 1) loop
          for j in 1:size(ss.B, 2) loop
            ss1 := Modelica_LinearSystems2.StateSpace.Transformation.extract(
              ss=ss,
              outputIndex={i},
              inputIndex={j});
            Modelica.Utilities.Streams.print("Transfer function from " + uNames[j]
               + " to " + yNames[i]);
            ss_red := reduceModel(
              use_tf=false,
              n=reducedOrder,
              ss1=ss1);
            Modelica.Utilities.Streams.print("Static gain = " + String(scalar(
              Modelica_LinearSystems2.StateSpace.Analysis.dcGain(ss_red))));
            tf := Modelica_LinearSystems2.StateSpace.Conversion.toTransferFunction(
              ss_red);

            DataFiles.writeMATmatrix(
              "MyData.mat",
              "n" + String(i) + String(j),
              {tf.n},
              append=true);
            DataFiles.writeMATmatrix(
              "MyData.mat",
              "d" + String(i) + String(j),
              {tf.d},
              append=true);

          end for;
        end for;

      end reduceLinearizedModel;

      function reduced_ssn
        input Real A[:, :]=diagonal({1,2,3,4});
        input Real B[:, :]=[1; 0; 0; 0];
        input Real C[:, :]=diagonal({1,1,1,1});
        input Real D[:, :]=zeros(4, 1);
        input Integer n=2;
        output Real Ar[size(A, 1) - n, size(A, 1) - n];
        output Real Br[size(B, 1) - n, size(B, 2)];
        output Real Cr[size(C, 1), size(C, 2) - n];
        output Real Dr[size(D, 1), size(D, 2)];

      protected
        Real Ar1[:, :];
        Real Br1[:, :];
        Real Cr1[:, :];
        Real Dr1[:, :];

      algorithm
        Ar1 := A;
        Br1 := B;
        Cr1 := C;
        Dr1 := D;
        for i in 1:n loop
          (Ar1,Br1,Cr1,Dr1) :=
            reduced_ssl(
            Ar1,
            Br1,
            Cr1,
            Dr1,
            size(Ar1, 1));
        end for;
        Ar := Ar1;
        Br := Br1;
        Cr := Cr1;
        Dr := Dr1;

      end reduced_ssn;

      function reduced_ssl
        input Real A[:, :]=diagonal({1,2,3,4});
        input Real B[:, :]=[1; 0; 0; 0];
        input Real C[:, :]=diagonal({1,1,1,1});
        input Real D[:, :]=zeros(4, 1);
        input Integer ix=4;
        output Real Ar[size(A, 1) - 1, size(A, 1) - 1];
        output Real Br[size(B, 1) - 1, size(B, 2)];
        output Real Cr[size(C, 1), size(C, 2) - 1];
        output Real Dr[size(D, 1), size(D, 2)];

      algorithm
        Ar := cat(
          1,
          cat(
            2,
            A[1:ix - 1, 1:ix - 1],
            A[1:ix - 1, ix + 1:end]),
          cat(
            2,
            A[ix + 1:end, 1:ix - 1],
            A[ix + 1:end, ix + 1:end]));
        Br := cat(
          1,
          B[1:ix - 1, :],
          B[ix + 1:end, :]);
        Cr := cat(
          2,
          C[:, 1:ix - 1],
          C[:, ix + 1:end]);
        Dr := D;
      end reduced_ssl;

      function StringVec
        input Real A[:]={1,2,3,4};
        output String AString;
      protected
        Integer n;
      algorithm
        n := size(A, 1);
        AString := "{";
        for i in 1:n loop
          AString := AString + String(A[i]);
          if i < n then
            AString := AString + ",";
          end if;
        end for;
        AString := AString + "}";
      end StringVec;
    end HeatingSystem;

    package Interfaces
      extends Modelica.Icons.ExamplesPackage;
      model GasTurbGrp_ConstantSpeed_Test
        extends Modelica.Icons.Example;

        parameter Modelica.Units.SI.Time H=h "inertia cst turb + gen";
        parameter Integer pp=2 "Number of poles";
        parameter Modelica.Units.SI.AngularVelocity w_nom=2*Modelica.Constants.pi*SysData.fn/pp
          "nominal angular velocity";
        BaseModels.Interfaces.GasTurbineGear turboGroup(redeclare record Data =
              PowerSystems.Mechanics.TurboGroups.Parameters.GasTurbineGear (
                w_nom=3141.5926535898, ratio={30000,10000,3000}))
          annotation (Placement(transformation(extent={{-12,-4},{8,16}})));
        PrimeMovers.Gas.PlantD.GasTurbineB gasTurbineB
          annotation (Placement(transformation(extent={{-42,2},{-22,22}})));
        Modelica.Blocks.Sources.Trapezoid fuelInput(
          amplitude=4,
          rising=300,
          width=3000,
          falling=300,
          period=4000,
          offset=20,
          startTime=1000)
          annotation (Placement(transformation(extent={{-76,2},{-56,22}})));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{18,2},{38,22}})));
        inner ThermalPower.System_TPL system_TPL
          annotation (Placement(transformation(extent={{-84,-42},{-64,-22}})));
        inner PowerSystems.System system
          annotation (Placement(transformation(extent={{-20,-42},{0,-22}})));
        Modelica.Mechanics.Rotational.Sources.ConstantSpeed ConstantSpeed1(w_fixed=157.08,
            useSupport=false)                annotation (Placement(transformation(
                extent={{72,0},{48,24}},     rotation=0)));
        inner OpenIPSL.Electrical.SystemBase SysData
          annotation (Placement(transformation(extent={{-54,-42},{-30,-22}})));
      protected
        final parameter Real[3] gr2=diagonal(turboGroup.par.ratio)*turboGroup.par.ratio
            /turboGroup.par.ratio[end]^2;
        final parameter Modelica.Units.SI.Inertia J_red=(turboGroup.par.J_turb +
            turboGroup.par.J_comp)*gr2[1] + turboGroup.par.J_gear1*gr2[1:2] +
            turboGroup.par.J_gear2*gr2[2:3] + (turboGroup.par.J_acc + turboGroup.par.J_cpl
             + turboGroup.par.J_gen) "gear reduced inertia";
        final parameter Modelica.Units.SI.Time h=J_red*w_nom^2/(2*SysData.S_b);
      equation
        connect(gasTurbineB.shaft_b, turboGroup.blades[1])
          annotation (Line(points={{-21.8,12},{-12,12}}, color={0,0,0}));
        connect(fuelInput.y, gasTurbineB.fuelFlowRate)
          annotation (Line(points={{-55,12},{-42,12}}, color={0,0,127}));
        connect(powerSensor.flange_a, turboGroup.airgap)
          annotation (Line(points={{18,12},{8,12}}, color={0,0,0}));
        connect(ConstantSpeed1.flange, powerSensor.flange_b)
          annotation (Line(points={{48,12},{38,12}}, color={0,0,0}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=5000,
            __Dymola_NumberOfIntervals=1000,
            __Dymola_Algorithm="Dassl"));
      end GasTurbGrp_ConstantSpeed_Test;

      model GasTurbGrp_Interface
        extends Modelica.Icons.Example;

        parameter Modelica.Units.SI.Time H=h "turb+gen inertia constant";
        parameter Integer pp=2 "Number of poles";
        parameter Modelica.Units.SI.AngularVelocity w_nom=2*Modelica.Constants.pi*SysData.fn/pp
          "nominal angular velocity";
        BaseModels.Interfaces.GasTurbineGear turboGroup(redeclare record Data
            = PowerSystems.Mechanics.TurboGroups.Parameters.GasTurbineGear (
                w_nom=3141.5926535898, ratio={30000,10000,3000}))
          annotation (Placement(transformation(extent={{-12,-4},{8,16}})));
        PrimeMovers.Gas.PlantD.GasTurbineB gasTurbineB
          annotation (Placement(transformation(extent={{-42,2},{-22,22}})));
        Modelica.Blocks.Sources.Trapezoid fuelInput(
          amplitude=4,
          rising=300,
          width=3000,
          falling=300,
          period=4000,
          offset=20,
          startTime=1000)
          annotation (Placement(transformation(extent={{-76,2},{-56,22}})));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{18,2},{38,22}})));
        inner ThermalPower.System_TPL system_TPL
          annotation (Placement(transformation(extent={{-82,-40},{-62,-20}})));
        inner PowerSystems.System system
          annotation (Placement(transformation(extent={{-30,-38},{-10,-18}})));
        inner OpenIPSL.Electrical.SystemBase SysData
          annotation (Placement(transformation(extent={{-58,-38},{-34,-18}})));
        BaseModels.Interfaces.TM2EPConverter tM2EPConverter(M_b=500000000)
          annotation (Placement(transformation(extent={{44,2},{64,22}})));
        Modelica.Blocks.Sources.Constant const(k=0)
          annotation (Placement(transformation(extent={{100,-12},{80,8}})));
      protected
        final parameter Real[3] gr2=diagonal(turboGroup.par.ratio)*turboGroup.par.ratio
            /turboGroup.par.ratio[end]^2;
        final parameter Modelica.Units.SI.Inertia J_red=(turboGroup.par.J_turb +
            turboGroup.par.J_comp)*gr2[1] + turboGroup.par.J_gear1*gr2[1:2] +
            turboGroup.par.J_gear2*gr2[2:3] + (turboGroup.par.J_acc + turboGroup.par.J_cpl
             + turboGroup.par.J_gen) "gear reduced inertia";
        final parameter Modelica.Units.SI.Time h=J_red*w_nom^2/(2*SysData.S_b);
      equation
        connect(gasTurbineB.shaft_b, turboGroup.blades[1])
          annotation (Line(points={{-21.8,12},{-12,12}}, color={0,0,0}));
        connect(fuelInput.y, gasTurbineB.fuelFlowRate)
          annotation (Line(points={{-55,12},{-42,12}}, color={0,0,127}));
        connect(powerSensor.flange_a, turboGroup.airgap)
          annotation (Line(points={{18,12},{8,12}}, color={0,0,0}));
        connect(tM2EPConverter.shaft, powerSensor.flange_b)
          annotation (Line(points={{44,12},{38,12}}, color={0,0,0}));
        connect(const.y, tM2EPConverter.SPEED) annotation (Line(points={{79,-2},
                {74,-2},{74,7},{63,7}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=5000,
            __Dymola_NumberOfIntervals=1000,
            __Dymola_Algorithm="Dassl"));
      end GasTurbGrp_Interface;
    end Interfaces;
  end Examples;

  package Controls
    package ThermoPower

      model PrimaryController
        import ThermoPower;
        parameter Modelica.Units.SI.PerUnit droop=0.05 "Droop";
        parameter Modelica.Units.SI.Power Pnom "Nominal active power";
        parameter Integer Np = 2 "Number of electric poles";
        final parameter Modelica.Units.SI.Frequency f0=system.fnom
          "Reference frequency";
        constant Real pi = Modelica.Constants.pi;
        outer ThermoPower.System system;

        Modelica.Blocks.Interfaces.RealInput frequency "Measured frequency in Hz"
                                                       annotation (Placement(
              transformation(extent={{-120,-60},{-80,-20}},rotation=0)));
        Modelica.Blocks.Interfaces.RealOutput P annotation (Placement(
              transformation(extent={{100,0},{120,20}}, rotation=0),
              iconTransformation(extent={{80,-20},{120,20}})));
        Modelica.Blocks.Interfaces.RealInput powerSetPoint "Power set point in W"
          annotation (Placement(transformation(extent={{-120,20},{-80,60}}, rotation=0)));
      equation
        P = powerSetPoint + Pnom/droop*(f0 - frequency)/f0;
        annotation (
          Icon(graphics={Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,255},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),Text(
                    extent={{-60,60},{60,-60}},
                    lineColor={0,0,0},
                    textString="C")}),
          Documentation(info="<html>
<p>Controller for static control of the frequency.
</html>",   revisions="<html>
<ul>
<li><i>15 Jul 2008</i>
    by <a> Luca Savoldelli </a>:<br>
       First release.</li>
</ul>
</html>"));
      end PrimaryController;

      model PID "Redefined version of the ThermoPower PID-based governor"
        import ThermoPower;
        outer OpenIPSL.Electrical.SystemBase SysData "Must add this line in all models";
        parameter OpenIPSL.Types.ApparentPower M_b "Machine base power";
        ThermoPower.PowerPlants.Control.PID governor(
          Kp=Kp,
          Ti=Ti,
          CSmin=CSmin,
          CSmax=CSmax,
          PVstart=PVstart,
          CSstart=CSstart,
          holdWhenSimplified=true,
          steadyStateInit=true,
          PVmin=PVmin,
          PVmax=PVmax)
                      annotation (Placement(transformation(extent={{38,10},{58,-10}})));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(extent={{-20,4},
                  {0,-16}})));
        Modelica.Blocks.Math.Gain gain(k=M_b) annotation (Placement(transformation(
              extent={{-6,6},{6,-6}},
              rotation=0,
              origin={-54,0})));
        Modelica.Blocks.Interfaces.RealInput PV "Process variable signal"
          annotation (Placement(transformation(extent={{-120,40},{-80,80}})));
        Modelica.Blocks.Interfaces.RealOutput CS "Control signal"
          annotation (Placement(transformation(extent={{94,-10},{114,10}})));
        Modelica.Blocks.Interfaces.RealInput GenPM
          "Generator mechanical power signal"
          annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
        Modelica.Blocks.Interfaces.RealInput DeltaPM
          "Change in reference power (in pu)"
          annotation (Placement(transformation(extent={{-120,-80},{-80,-40}})));
        parameter Real Kp=0.25 "Proportional gain (normalised units)";
        parameter Modelica.Units.SI.Time Ti=5 "Integral time";
        parameter Real PVmin=2e6
          "Minimum value of process variable for scaling";
        parameter Real PVmax=12e6
          "Maximum value of process variable for scaling";
        parameter Real CSmin=0 "Minimum value of control signal for scaling";
        parameter Real CSmax=4 "Maximum value of control signal for scaling";
        parameter Real PVstart=0.5 "Start value of PV (scaled)";
        parameter Real CSstart=0.5 "Start value of CS (scaled)";
      equation
        connect(gain.y,add. u2) annotation (Line(points={{-47.4,0},{-22,0}},               color={0,0,127}));
        connect(add.y,governor. SP) annotation (Line(points={{1,-6},{22,-6},{22,-4},{38,
                -4}},                                                                                  color={0,0,127}));
        connect(governor.PV, PV) annotation (Line(points={{38,4},{20,4},{20,60},{-100,
                60}}, color={0,0,127}));
        connect(governor.CS, CS)
          annotation (Line(points={{58,0},{104,0}}, color={0,0,127}));
        connect(gain.u, GenPM)
          annotation (Line(points={{-61.2,0},{-100,0}}, color={0,0,127}));
        connect(add.u1, DeltaPM) annotation (Line(points={{-22,-12},{-40,-12},{-40,-60},
                {-100,-60}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-54,40},{52,-34}},
                lineColor={0,0,255},
                textString="PID")}), Diagram(coordinateSystem(preserveAspectRatio=false)));
      end PID;
    end ThermoPower;
  end Controls;

  package Icons
    extends Modelica.Icons.IconsPackage;
    model TurbineIcon
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Bitmap(extent={{-98,-98},{96,96}}, fileName="modelica://FinalProject/turbine.png")}),
          Diagram(coordinateSystem(preserveAspectRatio=false)));
    end TurbineIcon;

    model GasTurbineIcon
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Bitmap(extent={{-98,-98},{96,96}}, fileName=
                  "modelica://FinalProject/turbineG.png"), Text(
              extent={{-116,112},{-24,26}},
              textColor={162,29,33},
              textStyle={TextStyle.Bold},
              textString="G")}), Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end GasTurbineIcon;

    model SteamTurbineIcon
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Bitmap(extent={{-98,-98},{96,96}}, fileName=
                  "modelica://FinalProject/turbineS.png"), Text(
              extent={{-116,112},{-24,26}},
              textColor={102,44,145},
              textStyle={TextStyle.Bold},
              textString="S")}), Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end SteamTurbineIcon;

    model HydroTurbineIcon
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Bitmap(extent={{-98,-98},{96,96}}, fileName=
                  "modelica://FinalProject/turbineH.png"), Text(
              extent={{-116,112},{-24,26}},
              textColor={244,125,35},
              textStyle={TextStyle.Bold},
              textString="H")}), Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end HydroTurbineIcon;
  end Icons;
  annotation (uses(Modelica(version="4.0.0"),
      SMIB(version="2"),
      Modelon(version="4.0"),
      ThermalPower(version="1.23"),
      SMIBPS_IdControl(version="1"),
      Modelica_LinearSystems2(version="2.4.0"),
      DataFiles(version="1.1.0"),
      CourseExamples_asad(version="1"),
      NHES(version="2"),
      ECSE_6170_Final_Project_before_Miguel(version="9"),
      ThermoPower(version="3.2"),
      PowerSystems(version="1.0.0"),
      OpenIPSL(version="3.0.1")),
    version="2",
    conversion(from(version={"1",""}, script=
            "modelica://FinalProject/ConvertFromFinalProject_1.mos")));

end FinalProject;
